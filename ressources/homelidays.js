(function(fix, load) {
  /**
   * @param {string} cycle
   * @param {Function} optgroup
   * @param {Object} key
   * @return {?}
   */
  function dataAttr(cycle, optgroup, key) {
    if (key === load && 1 === cycle.nodeType) {
      if (key = "data-" + optgroup.replace(R_UPPER, "-$1").toLowerCase(), key = cycle.getAttribute(key), "string" === typeof key) {
        try {
          key = "true" === key ? true : "false" === key ? false : "null" === key ? null : jQuery.isNumeric(key) ? +key : isint.test(key) ? jQuery.parseJSON(key) : key;
        } catch (h) {
        }
        jQuery.data(cycle, optgroup, key);
      } else {
        /** @type {Object} */
        key = load;
      }
    }
    return key;
  }
  /**
   * @param {Object} obj
   * @return {?}
   */
  function isEmptyDataObject(obj) {
    var name;
    for (name in obj) {
      if (!("data" === name && jQuery.isEmptyObject(obj[name])) && "toJSON" !== name) {
        return false;
      }
    }
    return true;
  }
  /**
   * @param {string} elem
   * @param {string} type
   * @param {string} src
   * @return {undefined}
   */
  function handleQueueMarkDefer(elem, type, src) {
    /** @type {string} */
    var key = type + "defer";
    /** @type {string} */
    var queueDataKey = type + "queue";
    /** @type {string} */
    var markDataKey = type + "mark";
    var form = jQuery._data(elem, key);
    if (form) {
      if (("queue" === src || !jQuery._data(elem, queueDataKey)) && ("mark" === src || !jQuery._data(elem, markDataKey))) {
        setTimeout(function() {
          if (!jQuery._data(elem, queueDataKey)) {
            if (!jQuery._data(elem, markDataKey)) {
              jQuery.removeData(elem, key, true);
              form.fire();
            }
          }
        }, 0);
      }
    }
  }
  /**
   * @return {?}
   */
  function returnFalse() {
    return false;
  }
  /**
   * @return {?}
   */
  function returnTrue() {
    return true;
  }
  /**
   * @param {?} elements
   * @param {string} cycle
   * @param {boolean} keep
   * @return {?}
   */
  function winnow(elements, cycle, keep) {
    cycle = cycle || 0;
    if (jQuery.isFunction(cycle)) {
      return jQuery.grep(elements, function(w, fake) {
        return!!cycle.call(w, fake, w) === keep;
      });
    }
    if (cycle.nodeType) {
      return jQuery.grep(elements, function(el) {
        return el === cycle === keep;
      });
    }
    if ("string" === typeof cycle) {
      var optgroup = jQuery.grep(elements, function(dest) {
        return 1 === dest.nodeType;
      });
      if (rhtml.test(cycle)) {
        return jQuery.filter(cycle, optgroup, !keep);
      }
      cycle = jQuery.filter(cycle, optgroup);
    }
    return jQuery.grep(elements, function(arg) {
      return 0 <= jQuery.inArray(arg, cycle) === keep;
    });
  }
  /**
   * @param {Document} type
   * @return {?}
   */
  function create(type) {
    /** @type {Array.<string>} */
    var braceStack = uHostName.split("|");
    type = type.createDocumentFragment();
    if (type.createElement) {
      for (;braceStack.length;) {
        type.createElement(braceStack.pop());
      }
    }
    return type;
  }
  /**
   * @param {Object} src
   * @param {string} cycle
   * @return {undefined}
   */
  function cloneCopyEvent(src, cycle) {
    if (1 === cycle.nodeType && jQuery.hasData(src)) {
      var optgroup;
      var type;
      var valsLength;
      type = jQuery._data(src);
      var config = jQuery._data(cycle, type);
      var n = type.events;
      if (n) {
        for (optgroup in delete config.handle, config.events = {}, n) {
          /** @type {number} */
          type = 0;
          valsLength = n[optgroup].length;
          for (;type < valsLength;type++) {
            jQuery.event.add(cycle, optgroup, n[optgroup][type]);
          }
        }
      }
      if (config.data) {
        config.data = jQuery.extend({}, config.data);
      }
    }
  }
  /**
   * @param {Object} src
   * @param {Object} dest
   * @return {undefined}
   */
  function cloneFixAttributes(src, dest) {
    var name;
    if (1 === dest.nodeType) {
      if (dest.clearAttributes) {
        dest.clearAttributes();
      }
      if (dest.mergeAttributes) {
        dest.mergeAttributes(src);
      }
      name = dest.nodeName.toLowerCase();
      if ("object" === name) {
        dest.outerHTML = src.outerHTML;
      } else {
        if ("input" === name && ("checkbox" === src.type || "radio" === src.type)) {
          if (src.checked && (dest.defaultChecked = dest.checked = src.checked), dest.value !== src.value) {
            dest.value = src.value;
          }
        } else {
          if ("option" === name) {
            dest.selected = src.defaultSelected;
          } else {
            if ("input" === name || "textarea" === name) {
              dest.defaultValue = src.defaultValue;
            } else {
              if ("script" === name) {
                if (dest.text !== src.text) {
                  dest.text = src.text;
                }
              }
            }
          }
        }
      }
      dest.removeAttribute(jQuery.expando);
      dest.removeAttribute("_submit_attached");
      dest.removeAttribute("_change_attached");
    }
  }
  /**
   * @param {Node} context
   * @return {?}
   */
  function getAll(context) {
    return "undefined" !== typeof context.getElementsByTagName ? context.getElementsByTagName("*") : "undefined" !== typeof context.querySelectorAll ? context.querySelectorAll("*") : [];
  }
  /**
   * @param {Element} elem
   * @return {undefined}
   */
  function set(elem) {
    if ("checkbox" === elem.type || "radio" === elem.type) {
      elem.defaultChecked = elem.checked;
    }
  }
  /**
   * @param {Node} node
   * @return {undefined}
   */
  function update(node) {
    var b = (node.nodeName || "").toLowerCase();
    if ("input" === b) {
      set(node);
    } else {
      if ("script" !== b) {
        if ("undefined" !== typeof node.getElementsByTagName) {
          jQuery.grep(node.getElementsByTagName("input"), set);
        }
      }
    }
  }
  /**
   * @param {string} elem
   * @param {string} name
   * @param {string} extra
   * @return {?}
   */
  function getWidthOrHeight(elem, name, extra) {
    var val = "width" === name ? elem.offsetWidth : elem.offsetHeight;
    /** @type {number} */
    var i = "width" === name ? 1 : 0;
    if (0 < val) {
      if ("border" !== extra) {
        for (;4 > i;i += 2) {
          if (!extra) {
            val -= parseFloat(jQuery.css(elem, "padding" + cssExpand[i])) || 0;
          }
          val = "margin" === extra ? val + (parseFloat(jQuery.css(elem, extra + cssExpand[i])) || 0) : val - (parseFloat(jQuery.css(elem, "border" + cssExpand[i] + "Width")) || 0);
        }
      }
      return val + "px";
    }
    val = curCSS(elem, name);
    if (0 > val || null == val) {
      val = elem.style[name];
    }
    if (exclude.test(val)) {
      return val;
    }
    /** @type {number} */
    val = parseFloat(val) || 0;
    if (extra) {
      for (;4 > i;i += 2) {
        val += parseFloat(jQuery.css(elem, "padding" + cssExpand[i])) || 0;
        if ("padding" !== extra) {
          val += parseFloat(jQuery.css(elem, "border" + cssExpand[i] + "Width")) || 0;
        }
        if ("margin" === extra) {
          val += parseFloat(jQuery.css(elem, extra + cssExpand[i])) || 0;
        }
      }
    }
    return val + "px";
  }
  /**
   * @param {Object} structure
   * @return {?}
   */
  function addToPrefiltersOrTransports(structure) {
    return function(name, html) {
      if ("string" !== typeof name) {
        /** @type {(Object|string)} */
        html = name;
        /** @type {string} */
        name = "*";
      }
      if (jQuery.isFunction(html)) {
        var parts = name.toLowerCase().split(rspacesAjax);
        /** @type {number} */
        var i = 0;
        var l = parts.length;
        var part;
        var placeBefore;
        for (;i < l;i++) {
          part = parts[i];
          if (placeBefore = /^\+/.test(part)) {
            part = part.substr(1) || "*";
          }
          part = structure[part] = structure[part] || [];
          part[placeBefore ? "unshift" : "push"](html);
        }
      }
    };
  }
  /**
   * @param {Object} structure
   * @param {?} options
   * @param {Function} originalOptions
   * @param {?} jqXHR
   * @param {Object} list
   * @param {Object} inspected
   * @return {?}
   */
  function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR, list, inspected) {
    list = list || options.dataTypes[0];
    inspected = inspected || {};
    /** @type {boolean} */
    inspected[list] = true;
    list = structure[list];
    /** @type {number} */
    var i = 0;
    var length = list ? list.length : 0;
    /** @type {boolean} */
    var executeOnly = structure === prefilters;
    var selection;
    for (;i < length && (executeOnly || !selection);i++) {
      selection = list[i](options, originalOptions, jqXHR);
      if ("string" === typeof selection) {
        if (!executeOnly || inspected[selection]) {
          /** @type {Object} */
          selection = load;
        } else {
          options.dataTypes.unshift(selection);
          selection = inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR, selection, inspected);
        }
      }
    }
    if ((executeOnly || !selection) && !inspected["*"]) {
      selection = inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR, "*", inspected);
    }
    return selection;
  }
  /**
   * @param {Function} target
   * @param {Object} src
   * @return {undefined}
   */
  function ajaxExtend(target, src) {
    var key;
    var deep;
    var flatOptions = jQuery.ajaxSettings.flatOptions || {};
    for (key in src) {
      if (src[key] !== load) {
        (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
      }
    }
    if (deep) {
      jQuery.extend(true, target, deep);
    }
  }
  /**
   * @param {string} prefix
   * @param {string} cycle
   * @param {boolean} traditional
   * @param {Function} add
   * @return {undefined}
   */
  function buildParams(prefix, cycle, traditional, add) {
    if (jQuery.isArray(cycle)) {
      jQuery.each(cycle, function(i, v) {
        if (traditional || rbracket.test(prefix)) {
          add(prefix, v);
        } else {
          buildParams(prefix + "[" + ("object" === typeof v ? i : "") + "]", v, traditional, add);
        }
      });
    } else {
      if (!traditional && "object" === jQuery.type(cycle)) {
        var name;
        for (name in cycle) {
          buildParams(prefix + "[" + name + "]", cycle[name], traditional, add);
        }
      } else {
        add(prefix, cycle);
      }
    }
  }
  /**
   * @return {?}
   */
  function createStandardXHR() {
    try {
      return new fix.XMLHttpRequest;
    } catch (b) {
    }
  }
  /**
   * @return {?}
   */
  function createFxNow() {
    setTimeout(WAIT, 0);
    return fxNow = jQuery.now();
  }
  /**
   * @return {undefined}
   */
  function WAIT() {
    /** @type {Object} */
    fxNow = load;
  }
  /**
   * @param {string} type
   * @param {number} num
   * @return {?}
   */
  function genFx(type, num) {
    var obj = {};
    jQuery.each(fxAttrs.concat.apply([], fxAttrs.slice(0, num)), function() {
      /** @type {string} */
      obj[this] = type;
    });
    return obj;
  }
  /**
   * @param {string} type
   * @return {?}
   */
  function defaultDisplay(type) {
    if (!elem[type]) {
      /** @type {(HTMLBodyElement|null)} */
      var fix = cycle.body;
      var node = jQuery("<" + type + ">").appendTo(fix);
      var value = node.css("display");
      node.remove();
      if ("none" === value || "" === value) {
        if (!iframe) {
          /** @type {Element} */
          iframe = cycle.createElement("iframe");
          /** @type {number} */
          iframe.frameBorder = iframe.width = iframe.height = 0;
        }
        fix.appendChild(iframe);
        if (!doc || !iframe.createElement) {
          doc = (iframe.contentWindow || iframe.contentDocument).document;
          doc.write((jQuery.support.boxModel ? "<!doctype html>" : "") + "<html><body>");
          doc.close();
        }
        node = doc.createElement(type);
        doc.body.appendChild(node);
        value = jQuery.css(node, "display");
        fix.removeChild(iframe);
      }
      elem[type] = value;
    }
    return elem[type];
  }
  /**
   * @param {Object} elem
   * @return {?}
   */
  function getWindow(elem) {
    return jQuery.isWindow(elem) ? elem : 9 === elem.nodeType ? elem.defaultView || elem.parentWindow : false;
  }
  /** @type {Document} */
  var cycle = fix.document;
  /** @type {Location} */
  var location = fix.location;
  var jQuery;
  /**
   * @return {undefined}
   */
  var doScrollCheck = function() {
    if (!$.isReady) {
      try {
        cycle.documentElement.doScroll("left");
      } catch (a) {
        setTimeout(doScrollCheck, 1);
        return;
      }
      $.ready();
    }
  };
  /**
   * @param {string} type
   * @param {Function} name
   * @return {?}
   */
  var $ = function(type, name) {
    return new $.fn.init(type, name, element);
  };
  var _jQuery = fix.jQuery;
  var _$ = fix.$;
  var element;
  /** @type {RegExp} */
  var rquickExpr = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/;
  /** @type {RegExp} */
  var rbrace = /\S/;
  /** @type {RegExp} */
  var currDirRegExp = /^\s+/;
  /** @type {RegExp} */
  var trimRight = /\s+$/;
  /** @type {RegExp} */
  var quickExpr = /^<(\w+)\s*\/?>(?:<\/\1>)?$/;
  /** @type {RegExp} */
  var args = /^[\],:{}\s]*$/;
  /** @type {RegExp} */
  var rApos = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;
  /** @type {RegExp} */
  var rSlash = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
  /** @type {RegExp} */
  var normalizr = /(?:^|:|,)(?:\s*\[)+/g;
  /** @type {RegExp} */
  var rmozilla = /(webkit)[ \/]([\w.]+)/;
  /** @type {RegExp} */
  var rmsie = /(opera)(?:.*version)?[ \/]([\w.]+)/;
  /** @type {RegExp} */
  var rwebkit = /(msie) ([\w.]+)/;
  /** @type {RegExp} */
  var ropera = /(mozilla)(?:.*? rv:([\w.]+))?/;
  /** @type {RegExp} */
  var RE_DASH = /-([a-z]|[0-9])/ig;
  /** @type {RegExp} */
  var rmsPrefix = /^-ms-/;
  /**
   * @param {?} all
   * @param {(number|string)} letter
   * @return {?}
   */
  var fcamelCase = function(all, letter) {
    return(letter + "").toUpperCase();
  };
  /** @type {string} */
  var userAgent = fix.navigator.userAgent;
  var browserMatch;
  var callbacks;
  var contentLoaded;
  /** @type {function (this:*): string} */
  var ostring = Object.prototype.toString;
  /** @type {function (this:Object, *): boolean} */
  var core_hasOwn = Object.prototype.hasOwnProperty;
  /** @type {function (this:(Array.<T>|{length: number}), ...[T]): number} */
  var core_push = Array.prototype.push;
  /** @type {function (this:(Array.<T>|string|{length: number}), *=, *=): Array.<T>} */
  var func = Array.prototype.slice;
  /** @type {function (this:string): string} */
  var trim = String.prototype.trim;
  /** @type {function (this:(Array.<T>|string|{length: number}), T, number=): number} */
  var core_indexOf = Array.prototype.indexOf;
  var class2type = {};
  $.fn = $.prototype = {
    /** @type {function (string, Function): ?} */
    constructor : $,
    /**
     * @param {string} fix
     * @param {string} ready
     * @param {Object} doc
     * @return {?}
     */
    init : function(fix, ready, doc) {
      var match;
      if (!fix) {
        return this;
      }
      if (fix.nodeType) {
        return this.context = this[0] = fix, this.length = 1, this;
      }
      if ("body" === fix && (!ready && cycle.body)) {
        return this.context = cycle, this[0] = cycle.body, this.selector = fix, this.length = 1, this;
      }
      if ("string" === typeof fix) {
        if ((match = "<" === fix.charAt(0) && (">" === fix.charAt(fix.length - 1) && 3 <= fix.length) ? [null, fix, null] : rquickExpr.exec(fix)) && (match[1] || !ready)) {
          if (match[1]) {
            return doc = (ready = ready instanceof $ ? ready[0] : ready) ? ready.ownerDocument || ready : cycle, (fix = quickExpr.exec(fix)) ? $.isPlainObject(ready) ? (fix = [cycle.createElement(fix[1])], $.fn.attr.call(fix, ready, true)) : fix = [doc.createElement(fix[1])] : (fix = $.buildFragment([match[1]], [doc]), fix = (fix.cacheable ? $.clone(fix.fragment) : fix.fragment).childNodes), $.merge(this, fix);
          }
          if ((ready = cycle.getElementById(match[2])) && ready.parentNode) {
            if (ready.id !== match[2]) {
              return doc.find(fix);
            }
            /** @type {number} */
            this.length = 1;
            /** @type {string} */
            this[0] = ready;
          }
          /** @type {Document} */
          this.context = cycle;
          /** @type {string} */
          this.selector = fix;
          return this;
        }
        return!ready || ready.jquery ? (ready || doc).find(fix) : this.constructor(ready).find(fix);
      }
      if ($.isFunction(fix)) {
        return doc.ready(fix);
      }
      if (fix.selector !== load) {
        this.selector = fix.selector;
        this.context = fix.context;
      }
      return $.makeArray(fix, this);
    },
    selector : "",
    jquery : "1.7.2",
    length : 0,
    /**
     * @return {?}
     */
    size : function() {
      return this.length;
    },
    /**
     * @return {?}
     */
    toArray : function() {
      return func.call(this, 0);
    },
    /**
     * @param {string} name
     * @return {?}
     */
    get : function(name) {
      return null == name ? this.toArray() : 0 > name ? this[this.length + name] : this[name];
    },
    /**
     * @param {?} elems
     * @param {string} name
     * @param {string} type
     * @return {?}
     */
    pushStack : function(elems, name, type) {
      var ret = this.constructor();
      if ($.isArray(elems)) {
        core_push.apply(ret, elems);
      } else {
        $.merge(ret, elems);
      }
      ret.prevObject = this;
      ret.context = this.context;
      if ("find" === name) {
        /** @type {string} */
        ret.selector = this.selector + (this.selector ? " " : "") + type;
      } else {
        if (name) {
          /** @type {string} */
          ret.selector = this.selector + "." + name + "(" + type + ")";
        }
      }
      return ret;
    },
    /**
     * @param {Function} opt_attributes
     * @param {Function} args
     * @return {?}
     */
    each : function(opt_attributes, args) {
      return $.each(this, opt_attributes, args);
    },
    /**
     * @param {string} type
     * @return {?}
     */
    ready : function(type) {
      $.bindReady();
      callbacks.add(type);
      return this;
    },
    /**
     * @param {number} recurring
     * @return {?}
     */
    eq : function(recurring) {
      /** @type {number} */
      recurring = +recurring;
      return-1 === recurring ? this.slice(recurring) : this.slice(recurring, recurring + 1);
    },
    /**
     * @return {?}
     */
    first : function() {
      return this.eq(0);
    },
    /**
     * @return {?}
     */
    last : function() {
      return this.eq(-1);
    },
    /**
     * @return {?}
     */
    slice : function() {
      return this.pushStack(func.apply(this, arguments), "slice", func.call(arguments).join(","));
    },
    /**
     * @param {Function} callback
     * @return {?}
     */
    map : function(callback) {
      return this.pushStack($.map(this, function(elem, node) {
        return callback.call(elem, node, elem);
      }));
    },
    /**
     * @return {?}
     */
    end : function() {
      return this.prevObject || this.constructor(null);
    },
    /** @type {function (this:(Array.<T>|{length: number}), ...[T]): number} */
    push : core_push,
    /** @type {function (this:(Array.<T>|{length: number}), function (T, T): number=): ?} */
    sort : [].sort,
    /** @type {function (this:(Array.<T>|{length: number}), *=, *=, ...[T]): Array.<T>} */
    splice : [].splice
  };
  $.fn.init.prototype = $.fn;
  /** @type {function (): ?} */
  $.extend = $.fn.extend = function() {
    var options;
    var name;
    var src;
    var copy;
    var copyIsArray;
    var target = arguments[0] || {};
    /** @type {number} */
    var i = 1;
    /** @type {number} */
    var n = arguments.length;
    /** @type {boolean} */
    var deep = false;
    if ("boolean" === typeof target) {
      /** @type {boolean} */
      deep = target;
      target = arguments[1] || {};
      /** @type {number} */
      i = 2;
    }
    if ("object" !== typeof target) {
      if (!$.isFunction(target)) {
        target = {};
      }
    }
    if (n === i) {
      target = this;
      --i;
    }
    for (;i < n;i++) {
      if (null != (options = arguments[i])) {
        for (name in options) {
          src = target[name];
          copy = options[name];
          if (target !== copy) {
            if (deep && (copy && ($.isPlainObject(copy) || (copyIsArray = $.isArray(copy))))) {
              if (copyIsArray) {
                /** @type {boolean} */
                copyIsArray = false;
                src = src && $.isArray(src) ? src : [];
              } else {
                src = src && $.isPlainObject(src) ? src : {};
              }
              target[name] = $.extend(deep, src, copy);
            } else {
              if (copy !== load) {
                target[name] = copy;
              }
            }
          }
        }
      }
    }
    return target;
  };
  $.extend({
    /**
     * @param {?} deep
     * @return {?}
     */
    noConflict : function(deep) {
      if (fix.$ === $) {
        fix.$ = _$;
      }
      if (deep) {
        if (fix.jQuery === $) {
          fix.jQuery = _jQuery;
        }
      }
      return $;
    },
    isReady : false,
    readyWait : 1,
    /**
     * @param {?} hold
     * @return {undefined}
     */
    holdReady : function(hold) {
      if (hold) {
        $.readyWait++;
      } else {
        $.ready(true);
      }
    },
    /**
     * @param {string} type
     * @return {?}
     */
    ready : function(type) {
      if (true === type && !--$.readyWait || true !== type && !$.isReady) {
        if (!cycle.body) {
          return setTimeout($.ready, 1);
        }
        /** @type {boolean} */
        $.isReady = true;
        if (!(true !== type && 0 < --$.readyWait)) {
          callbacks.fireWith(cycle, [$]);
          if ($.fn.trigger) {
            $(cycle).trigger("ready").off("ready");
          }
        }
      }
    },
    /**
     * @return {?}
     */
    bindReady : function() {
      if (!callbacks) {
        callbacks = $.Callbacks("once memory");
        if ("complete" === cycle.readyState) {
          return setTimeout($.ready, 1);
        }
        if (cycle.addEventListener) {
          cycle.addEventListener("DOMContentLoaded", contentLoaded, false);
          fix.addEventListener("load", $.ready, false);
        } else {
          if (cycle.attachEvent) {
            cycle.attachEvent("onreadystatechange", contentLoaded);
            fix.attachEvent("onload", $.ready);
            /** @type {boolean} */
            var b = false;
            try {
              /** @type {boolean} */
              b = null == fix.frameElement;
            } catch (c) {
            }
            if (cycle.documentElement.doScroll) {
              if (b) {
                doScrollCheck();
              }
            }
          }
        }
      }
    },
    /**
     * @param {string} cycle
     * @return {?}
     */
    isFunction : function(cycle) {
      return "function" === $.type(cycle);
    },
    /** @type {function (*): boolean} */
    isArray : Array.isArray || function(cycle) {
      return "array" === $.type(cycle);
    },
    /**
     * @param {string} type
     * @return {?}
     */
    isWindow : function(type) {
      return null != type && type == type.window;
    },
    /**
     * @param {Object} obj
     * @return {?}
     */
    isNumeric : function(obj) {
      return!isNaN(parseFloat(obj)) && isFinite(obj);
    },
    /**
     * @param {string} type
     * @return {?}
     */
    type : function(type) {
      return null == type ? String(type) : class2type[ostring.call(type)] || "object";
    },
    /**
     * @param {string} cycle
     * @return {?}
     */
    isPlainObject : function(cycle) {
      if (!cycle || ("object" !== $.type(cycle) || (cycle.nodeType || $.isWindow(cycle)))) {
        return false;
      }
      try {
        if (cycle.constructor && (!core_hasOwn.call(cycle, "constructor") && !core_hasOwn.call(cycle.constructor.prototype, "isPrototypeOf"))) {
          return false;
        }
      } catch (c) {
        return false;
      }
      var type;
      for (type in cycle) {
      }
      return type === load || core_hasOwn.call(cycle, type);
    },
    /**
     * @param {?} obj
     * @return {?}
     */
    isEmptyObject : function(obj) {
      var prop;
      for (prop in obj) {
        return false;
      }
      return true;
    },
    /**
     * @param {string} type
     * @return {?}
     */
    error : function(type) {
      throw Error(type);
    },
    /**
     * @param {string} str
     * @return {?}
     */
    parseJSON : function(str) {
      if ("string" !== typeof str || !str) {
        return null;
      }
      str = $.trim(str);
      if (fix.JSON && fix.JSON.parse) {
        return fix.JSON.parse(str);
      }
      if (args.test(str.replace(rApos, "@").replace(rSlash, "]").replace(normalizr, ""))) {
        return(new Function("return " + str))();
      }
      $.error("Invalid JSON: " + str);
    },
    /**
     * @param {string} data
     * @return {?}
     */
    parseXML : function(data) {
      if ("string" !== typeof data || !data) {
        return null;
      }
      var xml;
      var tmp;
      try {
        if (fix.DOMParser) {
          /** @type {DOMParser} */
          tmp = new DOMParser;
          /** @type {(Document|null)} */
          xml = tmp.parseFromString(data, "text/xml");
        } else {
          xml = new ActiveXObject("Microsoft.XMLDOM");
          /** @type {string} */
          xml.async = "false";
          xml.loadXML(data);
        }
      } catch (f) {
        /** @type {Object} */
        xml = load;
      }
      if (!xml || (!xml.documentElement || xml.getElementsByTagName("parsererror").length)) {
        $.error("Invalid XML: " + data);
      }
      return xml;
    },
    /**
     * @return {undefined}
     */
    noop : function() {
    },
    /**
     * @param {string} data
     * @return {undefined}
     */
    globalEval : function(data) {
      if (data) {
        if (rbrace.test(data)) {
          (fix.execScript || function(expr) {
            fix.eval.call(fix, expr);
          })(data);
        }
      }
    },
    /**
     * @param {string} string
     * @return {?}
     */
    camelCase : function(string) {
      return string.replace(rmsPrefix, "ms-").replace(RE_DASH, fcamelCase);
    },
    /**
     * @param {string} type
     * @param {Function} name
     * @return {?}
     */
    nodeName : function(type, name) {
      return type.nodeName && type.nodeName.toUpperCase() === name.toUpperCase();
    },
    /**
     * @param {Function} opt_attributes
     * @param {Function} callback
     * @param {Function} args
     * @return {?}
     */
    each : function(opt_attributes, callback, args) {
      var i;
      /** @type {number} */
      var name = 0;
      var cnl = opt_attributes.length;
      var l = cnl === load || $.isFunction(opt_attributes);
      if (args) {
        if (l) {
          for (i in opt_attributes) {
            if (false === callback.apply(opt_attributes[i], args)) {
              break;
            }
          }
        } else {
          for (;name < cnl && false !== callback.apply(opt_attributes[name++], args);) {
          }
        }
      } else {
        if (l) {
          for (i in opt_attributes) {
            if (false === callback.call(opt_attributes[i], i, opt_attributes[i])) {
              break;
            }
          }
        } else {
          for (;name < cnl && false !== callback.call(opt_attributes[name], name, opt_attributes[name++]);) {
          }
        }
      }
      return opt_attributes;
    },
    /** @type {function (string): ?} */
    trim : trim ? function(text) {
      return null == text ? "" : trim.call(text);
    } : function(num) {
      return null == num ? "" : num.toString().replace(currDirRegExp, "").replace(trimRight, "");
    },
    /**
     * @param {string} cycle
     * @param {Array} results
     * @return {?}
     */
    makeArray : function(cycle, results) {
      var ret = results || [];
      if (null != cycle) {
        var type = $.type(cycle);
        if (null == cycle.length || ("string" === type || ("function" === type || ("regexp" === type || $.isWindow(cycle))))) {
          core_push.call(ret, cycle);
        } else {
          $.merge(ret, cycle);
        }
      }
      return ret;
    },
    /**
     * @param {?} elem
     * @param {Array} array
     * @param {number} i
     * @return {?}
     */
    inArray : function(elem, array, i) {
      var length;
      if (array) {
        if (core_indexOf) {
          return core_indexOf.call(array, elem, i);
        }
        length = array.length;
        i = i ? 0 > i ? Math.max(0, length + i) : i : 0;
        for (;i < length;i++) {
          if (i in array && array[i] === elem) {
            return i;
          }
        }
      }
      return-1;
    },
    /**
     * @param {Array} first
     * @param {Array} second
     * @return {?}
     */
    merge : function(first, second) {
      var i = first.length;
      /** @type {number} */
      var j = 0;
      if ("number" === typeof second.length) {
        /** @type {number} */
        var l = second.length;
        for (;j < l;j++) {
          first[i++] = second[j];
        }
      } else {
        for (;second[j] !== load;) {
          first[i++] = second[j++];
        }
      }
      first.length = i;
      return first;
    },
    /**
     * @param {?} arr
     * @param {Function} callback
     * @param {boolean} inv
     * @return {?}
     */
    grep : function(arr, callback, inv) {
      /** @type {Array} */
      var ret = [];
      var retVal;
      /** @type {boolean} */
      inv = !!inv;
      /** @type {number} */
      var i = 0;
      var e = arr.length;
      for (;i < e;i++) {
        /** @type {boolean} */
        retVal = !!callback(arr[i], i);
        if (inv !== retVal) {
          ret.push(arr[i]);
        }
      }
      return ret;
    },
    /**
     * @param {Object} a
     * @param {Function} callback
     * @param {string} arg
     * @return {?}
     */
    map : function(a, callback, arg) {
      var value;
      var prefix;
      /** @type {Array} */
      var ret = [];
      /** @type {number} */
      var i = 0;
      var al = a.length;
      if (a instanceof $ || al !== load && ("number" === typeof al && (0 < al && (a[0] && a[al - 1]) || (0 === al || $.isArray(a))))) {
        for (;i < al;i++) {
          value = callback(a[i], i, arg);
          if (null != value) {
            ret[ret.length] = value;
          }
        }
      } else {
        for (prefix in a) {
          value = callback(a[prefix], prefix, arg);
          if (null != value) {
            ret[ret.length] = value;
          }
        }
      }
      return ret.concat.apply([], ret);
    },
    guid : 1,
    /**
     * @param {Object} fn
     * @param {Function} context
     * @return {?}
     */
    proxy : function(fn, context) {
      if ("string" === typeof context) {
        var proxy = fn[context];
        /** @type {Object} */
        context = fn;
        fn = proxy;
      }
      if (!$.isFunction(fn)) {
        return load;
      }
      /** @type {Array.<?>} */
      var args = func.call(arguments, 2);
      /**
       * @return {?}
       */
      proxy = function() {
        return fn.apply(context, args.concat(func.call(arguments)));
      };
      proxy.guid = fn.guid = fn.guid || (proxy.guid || $.guid++);
      return proxy;
    },
    /**
     * @param {Object} elems
     * @param {Function} fn
     * @param {Object} key
     * @param {string} value
     * @param {number} chainable
     * @param {string} emptyGet
     * @param {string} name
     * @return {?}
     */
    access : function(elems, fn, key, value, chainable, emptyGet, name) {
      var callback;
      /** @type {boolean} */
      var bulk = null == key;
      /** @type {number} */
      var i = 0;
      var length = elems.length;
      if (key && "object" === typeof key) {
        for (i in key) {
          $.access(elems, fn, i, key[i], 1, emptyGet, value);
        }
        /** @type {number} */
        chainable = 1;
      } else {
        if (value !== load) {
          callback = name === load && $.isFunction(value);
          if (bulk) {
            if (callback) {
              /** @type {Function} */
              callback = fn;
              /**
               * @param {string} cycle
               * @param {Object} event
               * @param {?} node
               * @return {?}
               */
              fn = function(cycle, event, node) {
                return callback.call($(cycle), node);
              };
            } else {
              fn.call(elems, value);
              /** @type {null} */
              fn = null;
            }
          }
          if (fn) {
            for (;i < length;i++) {
              fn(elems[i], key, callback ? value.call(elems[i], i, fn(elems[i], key)) : value, name);
            }
          }
          /** @type {number} */
          chainable = 1;
        }
      }
      return chainable ? elems : bulk ? fn.call(elems) : length ? fn(elems[0], key) : emptyGet;
    },
    /**
     * @return {?}
     */
    now : function() {
      return(new Date).getTime();
    },
    /**
     * @param {string} ua
     * @return {?}
     */
    uaMatch : function(ua) {
      ua = ua.toLowerCase();
      /** @type {Array.<string>} */
      ua = rmozilla.exec(ua) || (rmsie.exec(ua) || (rwebkit.exec(ua) || (0 > ua.indexOf("compatible") && ropera.exec(ua) || [])));
      return{
        browser : ua[1] || "",
        version : ua[2] || "0"
      };
    },
    /**
     * @return {?}
     */
    sub : function() {
      /**
       * @param {string} type
       * @param {Function} name
       * @return {?}
       */
      function jQuerySub(type, name) {
        return new jQuerySub.fn.init(type, name);
      }
      $.extend(true, jQuerySub, this);
      jQuerySub.superclass = this;
      jQuerySub.fn = jQuerySub.prototype = this();
      /** @type {function (string, Function): ?} */
      jQuerySub.fn.constructor = jQuerySub;
      jQuerySub.sub = this.sub;
      /**
       * @param {string} type
       * @param {string} cycle
       * @return {?}
       */
      jQuerySub.fn.init = function(type, cycle) {
        if (cycle) {
          if (cycle instanceof $ && !(cycle instanceof jQuerySub)) {
            cycle = jQuerySub(cycle);
          }
        }
        return $.fn.init.call(this, type, cycle, rootjQuerySub);
      };
      jQuerySub.fn.init.prototype = jQuerySub.fn;
      var rootjQuerySub = jQuerySub(cycle);
      return jQuerySub;
    },
    browser : {}
  });
  $.each("Boolean Number String Function Array Date RegExp Object".split(" "), function(dataAndEvents, m3) {
    class2type["[object " + m3 + "]"] = m3.toLowerCase();
  });
  browserMatch = $.uaMatch(userAgent);
  if (browserMatch.browser) {
    /** @type {boolean} */
    $.browser[browserMatch.browser] = true;
    $.browser.version = browserMatch.version;
  }
  if ($.browser.webkit) {
    /** @type {boolean} */
    $.browser.safari = true;
  }
  if (rbrace.test("\u00a0")) {
    /** @type {RegExp} */
    currDirRegExp = /^[\s\xA0]+/;
    /** @type {RegExp} */
    trimRight = /[\s\xA0]+$/;
  }
  element = $(cycle);
  if (cycle.addEventListener) {
    /**
     * @return {undefined}
     */
    contentLoaded = function() {
      cycle.removeEventListener("DOMContentLoaded", contentLoaded, false);
      $.ready();
    };
  } else {
    if (cycle.attachEvent) {
      /**
       * @return {undefined}
       */
      contentLoaded = function() {
        if (cycle.readyState === "complete") {
          cycle.detachEvent("onreadystatechange", contentLoaded);
          $.ready();
        }
      };
    }
  }
  /** @type {function (string, Function): ?} */
  jQuery = $;
  var methods = {};
  /**
   * @param {Node} options
   * @return {?}
   */
  jQuery.Callbacks = function(options) {
    var method;
    if (options) {
      if (!(method = methods[options])) {
        /** @type {Node} */
        method = options;
        var target = methods[method] = {};
        var i;
        var valsLength;
        method = method.split(/\s+/);
        /** @type {number} */
        i = 0;
        valsLength = method.length;
        for (;i < valsLength;i++) {
          /** @type {boolean} */
          target[method[i]] = true;
        }
        method = target;
      }
    } else {
      method = {};
    }
    options = method;
    /** @type {Array} */
    var list = [];
    /** @type {Array} */
    var stack = [];
    var memory;
    var len;
    var count;
    var firingStart;
    var firingLength;
    var firingIndex;
    /**
     * @param {Object} a
     * @return {undefined}
     */
    var add = function(a) {
      var _i;
      var _len;
      var cycle;
      var valueType;
      /** @type {number} */
      _i = 0;
      _len = a.length;
      for (;_i < _len;_i++) {
        cycle = a[_i];
        valueType = jQuery.type(cycle);
        if (valueType === "array") {
          add(cycle);
        } else {
          if (valueType === "function") {
            if (!options.unique || !self.has(cycle)) {
              list.push(cycle);
            }
          }
        }
      }
    };
    /**
     * @param {(Document|Range|TextRange)} object
     * @param {Array} args
     * @return {undefined}
     */
    var fire = function(object, args) {
      args = args || [];
      /** @type {(Array|boolean)} */
      memory = !options.memory || [object, args];
      /** @type {boolean} */
      count = len = true;
      firingIndex = firingStart || 0;
      /** @type {number} */
      firingStart = 0;
      firingLength = list.length;
      for (;list && firingIndex < firingLength;firingIndex++) {
        if (list[firingIndex].apply(object, args) === false && options.stopOnFalse) {
          /** @type {boolean} */
          memory = true;
          break;
        }
      }
      /** @type {boolean} */
      count = false;
      if (list) {
        if (options.once) {
          if (memory === true) {
            self.disable();
          } else {
            /** @type {Array} */
            list = [];
          }
        } else {
          if (stack && stack.length) {
            memory = stack.shift();
            self.fireWith(memory[0], memory[1]);
          }
        }
      }
    };
    var self = {
      /**
       * @return {?}
       */
      add : function() {
        if (list) {
          var start = list.length;
          add(arguments);
          if (count) {
            firingLength = list.length;
          } else {
            if (memory && memory !== true) {
              firingStart = start;
              fire(memory[0], memory[1]);
            }
          }
        }
        return this;
      },
      /**
       * @return {?}
       */
      remove : function() {
        if (list) {
          /** @type {Arguments} */
          var args = arguments;
          /** @type {number} */
          var argIndex = 0;
          /** @type {number} */
          var argLength = args.length;
          for (;argIndex < argLength;argIndex++) {
            /** @type {number} */
            var i = 0;
            for (;i < list.length;i++) {
              if (args[argIndex] === list[i]) {
                if (count && i <= firingLength) {
                  firingLength--;
                  if (i <= firingIndex) {
                    firingIndex--;
                  }
                }
                list.splice(i--, 1);
                if (options.unique) {
                  break;
                }
              }
            }
          }
        }
        return this;
      },
      /**
       * @param {?} type
       * @return {?}
       */
      has : function(type) {
        if (list) {
          /** @type {number} */
          var i = 0;
          var listLength = list.length;
          for (;i < listLength;i++) {
            if (type === list[i]) {
              return true;
            }
          }
        }
        return false;
      },
      /**
       * @return {?}
       */
      empty : function() {
        /** @type {Array} */
        list = [];
        return this;
      },
      /**
       * @return {?}
       */
      disable : function() {
        list = stack = memory = load;
        return this;
      },
      /**
       * @return {?}
       */
      disabled : function() {
        return!list;
      },
      /**
       * @return {?}
       */
      lock : function() {
        /** @type {Object} */
        stack = load;
        if (!memory || memory === true) {
          self.disable();
        }
        return this;
      },
      /**
       * @return {?}
       */
      locked : function() {
        return!stack;
      },
      /**
       * @param {(Document|Range|TextRange)} type
       * @param {Object} args
       * @return {?}
       */
      fireWith : function(type, args) {
        if (stack) {
          if (count) {
            if (!options.once) {
              stack.push([type, args]);
            }
          } else {
            if (!options.once || !memory) {
              fire(type, args);
            }
          }
        }
        return this;
      },
      /**
       * @return {?}
       */
      fire : function() {
        self.fireWith(this, arguments);
        return this;
      },
      /**
       * @return {?}
       */
      fired : function() {
        return!!len;
      }
    };
    return self;
  };
  /** @type {function (this:(Array.<T>|string|{length: number}), *=, *=): Array.<T>} */
  var __slice = [].slice;
  jQuery.extend({
    /**
     * @param {Function} func
     * @return {?}
     */
    Deferred : function(func) {
      var doneList = jQuery.Callbacks("once memory");
      var failList = jQuery.Callbacks("once memory");
      var progressList = jQuery.Callbacks("memory");
      /** @type {string} */
      var state = "pending";
      var lists = {
        resolve : doneList,
        reject : failList,
        notify : progressList
      };
      var promise = {
        done : doneList.add,
        fail : failList.add,
        progress : progressList.add,
        /**
         * @return {?}
         */
        state : function() {
          return state;
        },
        isResolved : doneList.fired,
        isRejected : failList.fired,
        /**
         * @param {string} cycle
         * @param {string} fix
         * @param {string} ready
         * @return {?}
         */
        then : function(cycle, fix, ready) {
          deferred.done(cycle).fail(fix).progress(ready);
          return this;
        },
        /**
         * @return {?}
         */
        always : function() {
          deferred.done.apply(deferred, arguments).fail.apply(deferred, arguments);
          return this;
        },
        /**
         * @param {?} fnDone
         * @param {?} fnFail
         * @param {?} fnProgress
         * @return {?}
         */
        pipe : function(fnDone, fnFail, fnProgress) {
          return jQuery.Deferred(function(newDefer) {
            jQuery.each({
              done : [fnDone, "resolve"],
              fail : [fnFail, "reject"],
              progress : [fnProgress, "notify"]
            }, function(handler, parts) {
              var fn = parts[0];
              var action = parts[1];
              var returned;
              if (jQuery.isFunction(fn)) {
                deferred[handler](function() {
                  if ((returned = fn.apply(this, arguments)) && jQuery.isFunction(returned.promise)) {
                    returned.promise().then(newDefer.resolve, newDefer.reject, newDefer.notify);
                  } else {
                    newDefer[action + "With"](this === deferred ? newDefer : this, [returned]);
                  }
                });
              } else {
                deferred[handler](newDefer[action]);
              }
            });
          }).promise();
        },
        /**
         * @param {Object} obj
         * @return {?}
         */
        promise : function(obj) {
          if (obj == null) {
            obj = promise;
          } else {
            var key;
            for (key in promise) {
              obj[key] = promise[key];
            }
          }
          return obj;
        }
      };
      var deferred = promise.promise({});
      var key;
      for (key in lists) {
        deferred[key] = lists[key].fire;
        deferred[key + "With"] = lists[key].fireWith;
      }
      deferred.done(function() {
        /** @type {string} */
        state = "resolved";
      }, failList.disable, progressList.lock).fail(function() {
        /** @type {string} */
        state = "rejected";
      }, doneList.disable, progressList.lock);
      if (func) {
        func.call(deferred, deferred);
      }
      return deferred;
    },
    /**
     * @param {boolean} firstParam
     * @return {?}
     */
    when : function(firstParam) {
      /**
       * @param {number} i
       * @return {?}
       */
      function resolveFunc(i) {
        return function(value) {
          values[i] = arguments.length > 1 ? __slice.call(arguments, 0) : value;
          if (!--samePartsLength) {
            deferred.resolveWith(deferred, values);
          }
        };
      }
      /**
       * @param {number} i
       * @return {?}
       */
      function progressFunc(i) {
        return function(value) {
          val[i] = arguments.length > 1 ? __slice.call(arguments, 0) : value;
          deferred.notifyWith(promise, val);
        };
      }
      /** @type {Array.<?>} */
      var values = __slice.call(arguments, 0);
      /** @type {number} */
      var i = 0;
      /** @type {number} */
      var length = values.length;
      /** @type {Array} */
      var val = Array(length);
      /** @type {number} */
      var samePartsLength = length;
      var deferred = length <= 1 && (firstParam && jQuery.isFunction(firstParam.promise)) ? firstParam : jQuery.Deferred();
      var promise = deferred.promise();
      if (length > 1) {
        for (;i < length;i++) {
          if (values[i] && (values[i].promise && jQuery.isFunction(values[i].promise))) {
            values[i].promise().then(resolveFunc(i), deferred.reject, progressFunc(i));
          } else {
            --samePartsLength;
          }
        }
        if (!samePartsLength) {
          deferred.resolveWith(deferred, values);
        }
      } else {
        if (deferred !== firstParam) {
          deferred.resolveWith(deferred, length ? [firstParam] : []);
        }
      }
      return promise;
    }
  });
  /** @type {function (string, Function): ?} */
  var details = jQuery;
  var isDetailsSupported;
  var support;
  var codeSegments;
  var a;
  var select;
  var opt;
  var input;
  var fragment;
  var tds;
  var eventName;
  var i;
  var isSupported;
  /** @type {Element} */
  var div = cycle.createElement("div");
  div.setAttribute("className", "t");
  /** @type {string} */
  div.innerHTML = "   <link/><table></table><a href='/a' style='top:1px;float:left;opacity:.55;'>a</a><input type='checkbox'/>";
  codeSegments = div.getElementsByTagName("*");
  a = div.getElementsByTagName("a")[0];
  if (!codeSegments || (!codeSegments.length || !a)) {
    isDetailsSupported = {};
  } else {
    /** @type {Element} */
    select = cycle.createElement("select");
    /** @type {(Node|null)} */
    opt = select.appendChild(cycle.createElement("option"));
    input = div.getElementsByTagName("input")[0];
    support = {
      leadingWhitespace : 3 === div.firstChild.nodeType,
      tbody : !div.getElementsByTagName("tbody").length,
      htmlSerialize : !!div.getElementsByTagName("link").length,
      style : /top/.test(a.getAttribute("style")),
      hrefNormalized : "/a" === a.getAttribute("href"),
      opacity : /^0.55/.test(a.style.opacity),
      cssFloat : !!a.style.cssFloat,
      checkOn : "on" === input.value,
      optSelected : opt.selected,
      getSetAttribute : "t" !== div.className,
      enctype : !!cycle.createElement("form").enctype,
      html5Clone : "<:nav></:nav>" !== cycle.createElement("nav").cloneNode(true).outerHTML,
      submitBubbles : true,
      changeBubbles : true,
      focusinBubbles : false,
      deleteExpando : true,
      noCloneEvent : true,
      inlineBlockNeedsLayout : false,
      shrinkWrapBlocks : false,
      reliableMarginRight : true,
      pixelMargin : true
    };
    /** @type {boolean} */
    jQuery.boxModel = support.boxModel = "CSS1Compat" === cycle.compatMode;
    /** @type {boolean} */
    input.checked = true;
    support.noCloneChecked = input.cloneNode(true).checked;
    /** @type {boolean} */
    select.disabled = true;
    /** @type {boolean} */
    support.optDisabled = !opt.disabled;
    try {
      delete div.test;
    } catch (yb) {
      /** @type {boolean} */
      support.deleteExpando = false;
    }
    if (!div.addEventListener) {
      if (div.attachEvent && div.fireEvent) {
        div.attachEvent("onclick", function() {
          /** @type {boolean} */
          support.noCloneEvent = false;
        });
        div.cloneNode(true).fireEvent("onclick");
      }
    }
    /** @type {Element} */
    input = cycle.createElement("input");
    /** @type {string} */
    input.value = "t";
    input.setAttribute("type", "radio");
    /** @type {boolean} */
    support.radioValue = "t" === input.value;
    input.setAttribute("checked", "checked");
    input.setAttribute("name", "t");
    div.appendChild(input);
    /** @type {DocumentFragment} */
    fragment = cycle.createDocumentFragment();
    fragment.appendChild(div.lastChild);
    support.checkClone = fragment.cloneNode(true).cloneNode(true).lastChild.checked;
    /** @type {boolean} */
    support.appendChecked = input.checked;
    fragment.removeChild(input);
    fragment.appendChild(div);
    if (div.attachEvent) {
      for (i in{
        submit : 1,
        change : 1,
        focusin : 1
      }) {
        /** @type {string} */
        eventName = "on" + i;
        /** @type {boolean} */
        isSupported = eventName in div;
        if (!isSupported) {
          div.setAttribute(eventName, "return;");
          /** @type {boolean} */
          isSupported = "function" === typeof div[eventName];
        }
        support[i + "Bubbles"] = isSupported;
      }
    }
    fragment.removeChild(div);
    /** @type {null} */
    fragment = select = opt = div = input = null;
    jQuery(function() {
      var body;
      var span;
      var elem;
      var options;
      var stage = cycle.getElementsByTagName("body")[0];
      if (stage) {
        /** @type {Element} */
        body = cycle.createElement("div");
        /** @type {string} */
        body.style.cssText = "padding:0;margin:0;border:0;visibility:hidden;width:0;height:0;position:static;top:0;margin-top:1px";
        stage.insertBefore(body, stage.firstChild);
        /** @type {Element} */
        div = cycle.createElement("div");
        body.appendChild(div);
        /** @type {string} */
        div.innerHTML = "<table><tr><td style='padding:0;margin:0;border:0;display:none'></td><td>t</td></tr></table>";
        /** @type {NodeList} */
        tds = div.getElementsByTagName("td");
        /** @type {boolean} */
        isSupported = tds[0].offsetHeight === 0;
        /** @type {string} */
        tds[0].style.display = "";
        /** @type {string} */
        tds[1].style.display = "none";
        /** @type {boolean} */
        support.reliableHiddenOffsets = isSupported && tds[0].offsetHeight === 0;
        if (fix.getComputedStyle) {
          /** @type {string} */
          div.innerHTML = "";
          /** @type {Element} */
          span = cycle.createElement("div");
          /** @type {string} */
          span.style.width = "0";
          /** @type {string} */
          span.style.marginRight = "0";
          /** @type {string} */
          div.style.width = "2px";
          div.appendChild(span);
          /** @type {boolean} */
          support.reliableMarginRight = (parseInt((fix.getComputedStyle(span, null) || {
            marginRight : 0
          }).marginRight, 10) || 0) === 0;
        }
        if (typeof div.style.zoom !== "undefined") {
          /** @type {string} */
          div.innerHTML = "";
          /** @type {string} */
          div.style.width = div.style.padding = "1px";
          /** @type {number} */
          div.style.border = 0;
          /** @type {string} */
          div.style.overflow = "hidden";
          /** @type {string} */
          div.style.display = "inline";
          /** @type {number} */
          div.style.zoom = 1;
          /** @type {boolean} */
          support.inlineBlockNeedsLayout = div.offsetWidth === 3;
          /** @type {string} */
          div.style.display = "block";
          /** @type {string} */
          div.style.overflow = "visible";
          /** @type {string} */
          div.innerHTML = "<div style='width:5px;'></div>";
          /** @type {boolean} */
          support.shrinkWrapBlocks = div.offsetWidth !== 3;
        }
        /** @type {string} */
        div.style.cssText = "position:absolute;top:0;left:0;width:1px;height:1px;padding:0;margin:0;border:0;visibility:hidden;";
        /** @type {string} */
        div.innerHTML = "<div style='position:absolute;top:0;left:0;width:1px;height:1px;padding:0;margin:0;border:5px solid #000;display:block;'><div style='padding:0;margin:0;border:0;display:block;overflow:hidden;'></div></div><table style='position:absolute;top:0;left:0;width:1px;height:1px;padding:0;margin:0;border:5px solid #000;' cellpadding='0' cellspacing='0'><tr><td></td></tr></table>";
        /** @type {(Node|null)} */
        span = div.firstChild;
        /** @type {(Node|null)} */
        elem = span.firstChild;
        /** @type {(Node|null)} */
        options = span.nextSibling.firstChild.firstChild;
        options = {
          doesNotAddBorder : elem.offsetTop !== 5,
          doesAddBorderForTableAndCells : options.offsetTop === 5
        };
        /** @type {string} */
        elem.style.position = "fixed";
        /** @type {string} */
        elem.style.top = "20px";
        /** @type {boolean} */
        options.fixedPosition = elem.offsetTop === 20 || elem.offsetTop === 15;
        /** @type {string} */
        elem.style.position = elem.style.top = "";
        /** @type {string} */
        span.style.overflow = "hidden";
        /** @type {string} */
        span.style.position = "relative";
        /** @type {boolean} */
        options.subtractsBorderForOverflowNotVisible = elem.offsetTop === -5;
        /** @type {boolean} */
        options.doesNotIncludeMarginInBodyOffset = stage.offsetTop !== 1;
        if (fix.getComputedStyle) {
          /** @type {string} */
          div.style.marginTop = "1%";
          /** @type {boolean} */
          support.pixelMargin = (fix.getComputedStyle(div, null) || {
            marginTop : 0
          }).marginTop !== "1%";
        }
        if (typeof body.style.zoom !== "undefined") {
          /** @type {number} */
          body.style.zoom = 1;
        }
        stage.removeChild(body);
        /** @type {null} */
        div = null;
        jQuery.extend(support, options);
      }
    });
    isDetailsSupported = support;
  }
  /** @type {({appendChecked: boolean, boxModel: boolean, changeBubbles: boolean, checkClone: ?, checkOn: boolean, cssFloat: boolean, deleteExpando: boolean, enctype: boolean, focusinBubbles: boolean, getSetAttribute: boolean, hrefNormalized: boolean, html5Clone: boolean, htmlSerialize: boolean, inlineBlockNeedsLayout: boolean, leadingWhitespace: boolean, noCloneChecked: ?, noCloneEvent: boolean, opacity: boolean, optDisabled: boolean, optSelected: ?, pixelMargin: boolean, radioValue: boolean, reliableMarginRight: boolean, shrinkWrapBlocks: boolean, style: boolean, submitBubbles: boolean, tbody: boolean}|{})} */
  details.support = isDetailsSupported;
  /** @type {RegExp} */
  var isint = /^(?:\{.*\}|\[.*\])$/;
  /** @type {RegExp} */
  var R_UPPER = /([A-Z])/g;
  jQuery.extend({
    cache : {},
    uuid : 0,
    expando : "jQuery" + (jQuery.fn.jquery + Math.random()).replace(/\D/g, ""),
    noData : {
      embed : true,
      object : "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
      applet : true
    },
    /**
     * @param {Object} elem
     * @return {?}
     */
    hasData : function(elem) {
      elem = elem.nodeType ? jQuery.cache[elem[jQuery.expando]] : elem[jQuery.expando];
      return!!elem && !isEmptyDataObject(elem);
    },
    /**
     * @param {string} type
     * @param {Function} name
     * @param {Function} types
     * @param {Object} keepData
     * @return {?}
     */
    data : function(type, name, types, keepData) {
      if (jQuery.acceptData(type)) {
        var id;
        id = jQuery.expando;
        /** @type {boolean} */
        var e = typeof name === "string";
        var isNode = type.nodeType;
        var cache = isNode ? jQuery.cache : type;
        var i = isNode ? type[id] : type[id] && id;
        /** @type {boolean} */
        var needsFilter = name === "events";
        if (i && (cache[i] && (needsFilter || (keepData || cache[i].data))) || !(e && types === load)) {
          if (!i) {
            if (isNode) {
              /** @type {number} */
              type[id] = i = ++jQuery.uuid;
            } else {
              i = id;
            }
          }
          if (!cache[i]) {
            cache[i] = {};
            if (!isNode) {
              cache[i].toJSON = jQuery.noop;
            }
          }
          if (typeof name === "object" || typeof name === "function") {
            if (keepData) {
              cache[i] = jQuery.extend(cache[i], name);
            } else {
              cache[i].data = jQuery.extend(cache[i].data, name);
            }
          }
          id = type = cache[i];
          if (!keepData) {
            if (!type.data) {
              type.data = {};
            }
            type = type.data;
          }
          if (types !== load) {
            /** @type {Function} */
            type[jQuery.camelCase(name)] = types;
          }
          if (needsFilter && !type[name]) {
            return id.events;
          }
          if (e) {
            types = type[name];
            if (types == null) {
              types = type[jQuery.camelCase(name)];
            }
          } else {
            /** @type {string} */
            types = type;
          }
          return types;
        }
      }
    },
    /**
     * @param {Object} elem
     * @param {string} key
     * @param {boolean} dataAndEvents
     * @return {undefined}
     */
    removeData : function(elem, key, dataAndEvents) {
      if (jQuery.acceptData(elem)) {
        var suiteView;
        var _i;
        var _len;
        var internalKey = jQuery.expando;
        var isNode = elem.nodeType;
        var cache = isNode ? jQuery.cache : elem;
        var id = isNode ? elem[internalKey] : internalKey;
        if (cache[id]) {
          if (key) {
            if (suiteView = dataAndEvents ? cache[id] : cache[id].data) {
              if (!jQuery.isArray(key)) {
                if (key in suiteView) {
                  /** @type {Array} */
                  key = [key];
                } else {
                  key = jQuery.camelCase(key);
                  key = key in suiteView ? [key] : key.split(" ");
                }
              }
              /** @type {number} */
              _i = 0;
              _len = key.length;
              for (;_i < _len;_i++) {
                delete suiteView[key[_i]];
              }
              if (!(dataAndEvents ? isEmptyDataObject : jQuery.isEmptyObject)(suiteView)) {
                return;
              }
            }
          }
          if (!dataAndEvents) {
            delete cache[id].data;
            if (!isEmptyDataObject(cache[id])) {
              return;
            }
          }
          if (jQuery.support.deleteExpando || !cache.setInterval) {
            delete cache[id];
          } else {
            /** @type {null} */
            cache[id] = null;
          }
          if (isNode) {
            if (jQuery.support.deleteExpando) {
              delete elem[internalKey];
            } else {
              if (elem.removeAttribute) {
                elem.removeAttribute(internalKey);
              } else {
                /** @type {null} */
                elem[internalKey] = null;
              }
            }
          }
        }
      }
    },
    /**
     * @param {string} cycle
     * @param {Function} optgroup
     * @param {Function} ready
     * @return {?}
     */
    _data : function(cycle, optgroup, ready) {
      return jQuery.data(cycle, optgroup, ready, true);
    },
    /**
     * @param {Node} elem
     * @return {?}
     */
    acceptData : function(elem) {
      if (elem.nodeName) {
        var match = jQuery.noData[elem.nodeName.toLowerCase()];
        if (match) {
          return!(match === true || elem.getAttribute("classid") !== match);
        }
      }
      return true;
    }
  });
  jQuery.fn.extend({
    /**
     * @param {string} type
     * @param {Function} name
     * @return {?}
     */
    data : function(type, name) {
      var parts;
      var animationPhase;
      var attrs;
      var attributeName;
      var len;
      var cycle = this[0];
      /** @type {number} */
      var i = 0;
      /** @type {null} */
      var data = null;
      if (type === load) {
        if (this.length) {
          data = jQuery.data(cycle);
          if (cycle.nodeType === 1 && !jQuery._data(cycle, "parsedAttrs")) {
            attrs = cycle.attributes;
            len = attrs.length;
            for (;i < len;i++) {
              attributeName = attrs[i].name;
              if (attributeName.indexOf("data-") === 0) {
                attributeName = jQuery.camelCase(attributeName.substring(5));
                dataAttr(cycle, attributeName, data[attributeName]);
              }
            }
            jQuery._data(cycle, "parsedAttrs", true);
          }
        }
        return data;
      }
      if (typeof type === "object") {
        return this.each(function() {
          jQuery.data(this, type);
        });
      }
      parts = type.split(".", 2);
      parts[1] = parts[1] ? "." + parts[1] : "";
      animationPhase = parts[1] + "!";
      return jQuery.access(this, function(ready) {
        if (ready === load) {
          data = this.triggerHandler("getData" + animationPhase, [parts[0]]);
          if (data === load && cycle) {
            data = jQuery.data(cycle, type);
            data = dataAttr(cycle, type, data);
          }
          return data === load && parts[1] ? this.data(parts[0]) : data;
        }
        /** @type {Function} */
        parts[1] = ready;
        this.each(function() {
          var element = jQuery(this);
          element.triggerHandler("setData" + animationPhase, parts);
          jQuery.data(this, type, ready);
          element.triggerHandler("changeData" + animationPhase, parts);
        });
      }, null, name, arguments.length > 1, null, false);
    },
    /**
     * @param {string} type
     * @return {?}
     */
    removeData : function(type) {
      return this.each(function() {
        jQuery.removeData(this, type);
      });
    }
  });
  jQuery.extend({
    /**
     * @param {string} elems
     * @param {string} type
     * @return {undefined}
     */
    _mark : function(elems, type) {
      if (elems) {
        /** @type {string} */
        type = (type || "fx") + "mark";
        jQuery._data(elems, type, (jQuery._data(elems, type) || 0) + 1);
      }
    },
    /**
     * @param {boolean} value
     * @param {boolean} elem
     * @param {boolean} type
     * @return {undefined}
     */
    _unmark : function(value, elem, type) {
      if (value !== true) {
        /** @type {boolean} */
        type = elem;
        /** @type {boolean} */
        elem = value;
        /** @type {boolean} */
        value = false;
      }
      if (elem) {
        type = type || "fx";
        /** @type {string} */
        var key = type + "mark";
        if (value = value ? 0 : (jQuery._data(elem, key) || 1) - 1) {
          jQuery._data(elem, key, value);
        } else {
          jQuery.removeData(elem, key, true);
          handleQueueMarkDefer(elem, type, "mark");
        }
      }
    },
    /**
     * @param {string} type
     * @param {Function} name
     * @param {Function} types
     * @return {?}
     */
    queue : function(type, name, types) {
      var evt;
      if (type) {
        /** @type {string} */
        name = (name || "fx") + "queue";
        evt = jQuery._data(type, name);
        if (types) {
          if (!evt || jQuery.isArray(types)) {
            evt = jQuery._data(type, name, jQuery.makeArray(types));
          } else {
            evt.push(types);
          }
        }
        return evt || [];
      }
    },
    /**
     * @param {string} cycle
     * @param {Function} optgroup
     * @return {undefined}
     */
    dequeue : function(cycle, optgroup) {
      optgroup = optgroup || "fx";
      var queue = jQuery.queue(cycle, optgroup);
      var fn = queue.shift();
      var value = {};
      if (fn === "inprogress") {
        fn = queue.shift();
      }
      if (fn) {
        if (optgroup === "fx") {
          queue.unshift("inprogress");
        }
        jQuery._data(cycle, optgroup + ".run", value);
        fn.call(cycle, function() {
          jQuery.dequeue(cycle, optgroup);
        }, value);
      }
      if (!queue.length) {
        jQuery.removeData(cycle, optgroup + "queue " + optgroup + ".run", true);
        handleQueueMarkDefer(cycle, optgroup, "queue");
      }
    }
  });
  jQuery.fn.extend({
    /**
     * @param {string} type
     * @param {Function} name
     * @return {?}
     */
    queue : function(type, name) {
      /** @type {number} */
      var setter = 2;
      if (typeof type !== "string") {
        /** @type {string} */
        name = type;
        /** @type {string} */
        type = "fx";
        setter--;
      }
      return arguments.length < setter ? jQuery.queue(this[0], type) : name === load ? this : this.each(function() {
        var queue = jQuery.queue(this, type, name);
        if (type === "fx") {
          if (queue[0] !== "inprogress") {
            jQuery.dequeue(this, type);
          }
        }
      });
    },
    /**
     * @param {?} type
     * @return {?}
     */
    dequeue : function(type) {
      return this.each(function() {
        jQuery.dequeue(this, type);
      });
    },
    /**
     * @param {string} type
     * @param {Function} name
     * @return {?}
     */
    delay : function(type, name) {
      type = jQuery.fx ? jQuery.fx.speeds[type] || type : type;
      return this.queue(name || "fx", function(next, event) {
        /** @type {number} */
        var timeout = setTimeout(next, type);
        /**
         * @return {undefined}
         */
        event.stop = function() {
          clearTimeout(timeout);
        };
      });
    },
    /**
     * @param {string} type
     * @return {?}
     */
    clearQueue : function(type) {
      return this.queue(type || "fx", []);
    },
    /**
     * @param {string} type
     * @param {Object} obj
     * @return {?}
     */
    promise : function(type, obj) {
      /**
       * @return {undefined}
       */
      function cycle() {
        if (!--l) {
          defer.resolveWith(elements, [elements]);
        }
      }
      if (typeof type !== "string") {
        /** @type {string} */
        obj = type;
        /** @type {Object} */
        type = load;
      }
      type = type || "fx";
      var defer = jQuery.Deferred();
      var elements = this;
      var i = elements.length;
      /** @type {number} */
      var l = 1;
      /** @type {string} */
      var optgroup = type + "defer";
      /** @type {string} */
      var rvar = type + "queue";
      /** @type {string} */
      var vvarText = type + "mark";
      var suite;
      for (;i--;) {
        if (suite = jQuery.data(elements[i], optgroup, load, true) || (jQuery.data(elements[i], rvar, load, true) || jQuery.data(elements[i], vvarText, load, true)) && jQuery.data(elements[i], optgroup, jQuery.Callbacks("once memory"), true)) {
          l++;
          suite.add(cycle);
        }
      }
      cycle();
      return defer.promise(obj);
    }
  });
  /** @type {RegExp} */
  var rclass = /[\n\t\r]/g;
  /** @type {RegExp} */
  var separator = /\s+/;
  /** @type {RegExp} */
  var rreturn = /\r/g;
  /** @type {RegExp} */
  var rchecked = /^(?:button|input)$/i;
  /** @type {RegExp} */
  var R_FOCUSABLE = /^(?:button|input|object|select|textarea)$/i;
  /** @type {RegExp} */
  var rheader = /^a(?:rea)?$/i;
  /** @type {RegExp} */
  var events = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i;
  /** @type {boolean} */
  var iterator = jQuery.support.getSetAttribute;
  var me;
  var open_property;
  var meta;
  jQuery.fn.extend({
    /**
     * @param {string} name
     * @param {string} value
     * @return {?}
     */
    attr : function(name, value) {
      return jQuery.access(this, jQuery.attr, name, value, arguments.length > 1);
    },
    /**
     * @param {string} name
     * @return {?}
     */
    removeAttr : function(name) {
      return this.each(function() {
        jQuery.removeAttr(this, name);
      });
    },
    /**
     * @param {string} name
     * @param {boolean} value
     * @return {?}
     */
    prop : function(name, value) {
      return jQuery.access(this, jQuery.prop, name, value, arguments.length > 1);
    },
    /**
     * @param {Text} name
     * @return {?}
     */
    removeProp : function(name) {
      name = jQuery.propFix[name] || name;
      return this.each(function() {
        try {
          /** @type {Object} */
          this[name] = load;
          delete this[name];
        } catch (c) {
        }
      });
    },
    /**
     * @param {string} name
     * @return {?}
     */
    addClass : function(name) {
      var codeSegments;
      var _i;
      var _len;
      var elem;
      var cur;
      var i;
      var valsLength;
      if (jQuery.isFunction(name)) {
        return this.each(function(j) {
          jQuery(this).addClass(name.call(this, j, this.className));
        });
      }
      if (name && typeof name === "string") {
        /** @type {Array.<string>} */
        codeSegments = name.split(separator);
        /** @type {number} */
        _i = 0;
        _len = this.length;
        for (;_i < _len;_i++) {
          elem = this[_i];
          if (elem.nodeType === 1) {
            if (!elem.className && codeSegments.length === 1) {
              /** @type {string} */
              elem.className = name;
            } else {
              /** @type {string} */
              cur = " " + elem.className + " ";
              /** @type {number} */
              i = 0;
              /** @type {number} */
              valsLength = codeSegments.length;
              for (;i < valsLength;i++) {
                if (!~cur.indexOf(" " + codeSegments[i] + " ")) {
                  /** @type {string} */
                  cur = cur + (codeSegments[i] + " ");
                }
              }
              elem.className = jQuery.trim(cur);
            }
          }
        }
      }
      return this;
    },
    /**
     * @param {string} name
     * @return {?}
     */
    removeClass : function(name) {
      var codeSegments;
      var _i;
      var _len;
      var elem;
      var cur;
      var i;
      var valsLength;
      if (jQuery.isFunction(name)) {
        return this.each(function(j) {
          jQuery(this).removeClass(name.call(this, j, this.className));
        });
      }
      if (name && typeof name === "string" || name === load) {
        codeSegments = (name || "").split(separator);
        /** @type {number} */
        _i = 0;
        _len = this.length;
        for (;_i < _len;_i++) {
          elem = this[_i];
          if (elem.nodeType === 1 && elem.className) {
            if (name) {
              /** @type {string} */
              cur = (" " + elem.className + " ").replace(rclass, " ");
              /** @type {number} */
              i = 0;
              valsLength = codeSegments.length;
              for (;i < valsLength;i++) {
                /** @type {string} */
                cur = cur.replace(" " + codeSegments[i] + " ", " ");
              }
              elem.className = jQuery.trim(cur);
            } else {
              /** @type {string} */
              elem.className = "";
            }
          }
        }
      }
      return this;
    },
    /**
     * @param {string} value
     * @param {boolean} stateVal
     * @return {?}
     */
    toggleClass : function(value, stateVal) {
      /** @type {string} */
      var type = typeof value;
      /** @type {boolean} */
      var isBool = typeof stateVal === "boolean";
      return jQuery.isFunction(value) ? this.each(function(i) {
        jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
      }) : this.each(function() {
        if (type === "string") {
          var className;
          /** @type {number} */
          var i = 0;
          var self = jQuery(this);
          /** @type {boolean} */
          var state = stateVal;
          var classNames = value.split(separator);
          for (;className = classNames[i++];) {
            state = isBool ? state : !self.hasClass(className);
            self[state ? "addClass" : "removeClass"](className);
          }
        } else {
          if (type === "undefined" || type === "boolean") {
            if (this.className) {
              jQuery._data(this, "__className__", this.className);
            }
            this.className = this.className || value === false ? "" : jQuery._data(this, "__className__") || "";
          }
        }
      });
    },
    /**
     * @param {string} name
     * @return {?}
     */
    hasClass : function(name) {
      /** @type {string} */
      name = " " + name + " ";
      /** @type {number} */
      var i = 0;
      var l = this.length;
      for (;i < l;i++) {
        if (this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf(name) > -1) {
          return true;
        }
      }
      return false;
    },
    /**
     * @param {string} value
     * @return {?}
     */
    val : function(value) {
      var hooks;
      var ret;
      var match;
      var elem = this[0];
      if (arguments.length) {
        match = jQuery.isFunction(value);
        return this.each(function(cycle) {
          var targets = jQuery(this);
          if (this.nodeType === 1) {
            cycle = match ? value.call(this, cycle, targets.val()) : value;
            if (cycle == null) {
              /** @type {string} */
              cycle = "";
            } else {
              if (typeof cycle === "number") {
                /** @type {string} */
                cycle = cycle + "";
              } else {
                if (jQuery.isArray(cycle)) {
                  cycle = jQuery.map(cycle, function(value) {
                    return value == null ? "" : value + "";
                  });
                }
              }
            }
            hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
            if (!hooks || (!("set" in hooks) || hooks.set(this, cycle, "value") === load)) {
              /** @type {string} */
              this.value = cycle;
            }
          }
        });
      }
      if (elem) {
        if ((hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()]) && ("get" in hooks && (ret = hooks.get(elem, "value")) !== load)) {
          return ret;
        }
        ret = elem.value;
        return typeof ret === "string" ? ret.replace(rreturn, "") : ret == null ? "" : ret;
      }
    }
  });
  jQuery.extend({
    valHooks : {
      option : {
        /**
         * @param {string} name
         * @return {?}
         */
        get : function(name) {
          var val = name.attributes.value;
          return!val || val.specified ? name.value : name.text;
        }
      },
      select : {
        /**
         * @param {string} name
         * @return {?}
         */
        get : function(name) {
          var cycle;
          var c;
          var index = name.selectedIndex;
          /** @type {Array} */
          var configList = [];
          var options = name.options;
          /** @type {boolean} */
          var one = name.type === "select-one";
          if (index < 0) {
            return null;
          }
          name = one ? index : 0;
          c = one ? index + 1 : options.length;
          for (;name < c;name++) {
            cycle = options[name];
            if (cycle.selected && ((jQuery.support.optDisabled ? !cycle.disabled : cycle.getAttribute("disabled") === null) && (!cycle.parentNode.disabled || !jQuery.nodeName(cycle.parentNode, "optgroup")))) {
              cycle = jQuery(cycle).val();
              if (one) {
                return cycle;
              }
              configList.push(cycle);
            }
          }
          return one && (!configList.length && options.length) ? jQuery(options[index]).val() : configList;
        },
        /**
         * @param {string} cycle
         * @param {string} type
         * @return {?}
         */
        set : function(cycle, type) {
          var values = jQuery.makeArray(type);
          jQuery(cycle).find("option").each(function() {
            /** @type {boolean} */
            this.selected = jQuery.inArray(jQuery(this).val(), values) >= 0;
          });
          if (!values.length) {
            /** @type {number} */
            cycle.selectedIndex = -1;
          }
          return values;
        }
      }
    },
    attrFn : {
      val : true,
      css : true,
      html : true,
      text : true,
      data : true,
      width : true,
      height : true,
      offset : true
    },
    /**
     * @param {string} name
     * @param {string} value
     * @param {string} type
     * @param {boolean} pass
     * @return {?}
     */
    attr : function(name, value, type, pass) {
      var ret;
      var buffer;
      var nType = name.nodeType;
      if (name && !(nType === 3 || (nType === 8 || nType === 2))) {
        if (pass && value in jQuery.attrFn) {
          return jQuery(name)[value](type);
        }
        if (typeof name.getAttribute === "undefined") {
          return jQuery.prop(name, value, type);
        }
        if (pass = nType !== 1 || !jQuery.isXMLDoc(name)) {
          value = value.toLowerCase();
          buffer = jQuery.attrHooks[value] || (events.test(value) ? open_property : me);
        }
        if (type !== load) {
          if (type === null) {
            jQuery.removeAttr(name, value);
          } else {
            if (buffer && ("set" in buffer && (pass && (ret = buffer.set(name, type, value)) !== load))) {
              return ret;
            }
            name.setAttribute(value, "" + type);
            return type;
          }
        } else {
          if (buffer && ("get" in buffer && (pass && (ret = buffer.get(name, value)) !== null))) {
            return ret;
          }
          ret = name.getAttribute(value);
          return ret === null ? load : ret;
        }
      }
    },
    /**
     * @param {string} name
     * @param {string} val
     * @return {undefined}
     */
    removeAttr : function(name, val) {
      var value;
      var _ref2;
      var prop;
      var _len;
      var propCam;
      /** @type {number} */
      var _i = 0;
      if (val && name.nodeType === 1) {
        _ref2 = val.toLowerCase().split(separator);
        _len = _ref2.length;
        for (;_i < _len;_i++) {
          if (prop = _ref2[_i]) {
            value = jQuery.propFix[prop] || prop;
            if (!(propCam = events.test(prop))) {
              jQuery.attr(name, prop, "");
            }
            name.removeAttribute(iterator ? prop : value);
            if (propCam) {
              if (value in name) {
                /** @type {boolean} */
                name[value] = false;
              }
            }
          }
        }
      }
    },
    attrHooks : {
      type : {
        /**
         * @param {string} cycle
         * @param {string} type
         * @return {?}
         */
        set : function(cycle, type) {
          if (rchecked.test(cycle.nodeName) && cycle.parentNode) {
            jQuery.error("type property can't be changed");
          } else {
            if (!jQuery.support.radioValue && (type === "radio" && jQuery.nodeName(cycle, "input"))) {
              var mask = cycle.value;
              cycle.setAttribute("type", type);
              if (mask) {
                cycle.value = mask;
              }
              return type;
            }
          }
        }
      },
      value : {
        /**
         * @param {string} cycle
         * @param {boolean} name
         * @return {?}
         */
        get : function(cycle, name) {
          return me && jQuery.nodeName(cycle, "button") ? me.get(cycle, name) : name in cycle ? cycle.value : null;
        },
        /**
         * @param {string} cycle
         * @param {string} type
         * @param {string} value
         * @return {?}
         */
        set : function(cycle, type, value) {
          if (me && jQuery.nodeName(cycle, "button")) {
            return me.set(cycle, type, value);
          }
          /** @type {string} */
          cycle.value = type;
        }
      }
    },
    propFix : {
      tabindex : "tabIndex",
      readonly : "readOnly",
      "for" : "htmlFor",
      "class" : "className",
      maxlength : "maxLength",
      cellspacing : "cellSpacing",
      cellpadding : "cellPadding",
      rowspan : "rowSpan",
      colspan : "colSpan",
      usemap : "useMap",
      frameborder : "frameBorder",
      contenteditable : "contentEditable"
    },
    /**
     * @param {string} attributes
     * @param {boolean} name
     * @param {string} cycle
     * @return {?}
     */
    prop : function(attributes, name, cycle) {
      var ret;
      var hooks;
      var _ref1;
      _ref1 = attributes.nodeType;
      if (attributes && !(_ref1 === 3 || (_ref1 === 8 || _ref1 === 2))) {
        if (_ref1 = _ref1 !== 1 || !jQuery.isXMLDoc(attributes)) {
          name = jQuery.propFix[name] || name;
          hooks = jQuery.propHooks[name];
        }
        return cycle !== load ? hooks && ("set" in hooks && (ret = hooks.set(attributes, cycle, name)) !== load) ? ret : attributes[name] = cycle : hooks && ("get" in hooks && (ret = hooks.get(attributes, name)) !== null) ? ret : attributes[name];
      }
    },
    propHooks : {
      tabIndex : {
        /**
         * @param {string} name
         * @return {?}
         */
        get : function(name) {
          var attributeNode = name.getAttributeNode("tabindex");
          return attributeNode && attributeNode.specified ? parseInt(attributeNode.value, 10) : R_FOCUSABLE.test(name.nodeName) || rheader.test(name.nodeName) && name.href ? 0 : load;
        }
      }
    }
  });
  jQuery.attrHooks.tabindex = jQuery.propHooks.tabIndex;
  open_property = {
    /**
     * @param {string} name
     * @param {Object} type
     * @return {?}
     */
    get : function(name, type) {
      var elem;
      var property = jQuery.prop(name, type);
      return property === true || typeof property !== "boolean" && ((elem = name.getAttributeNode(type)) && elem.nodeValue !== false) ? type.toLowerCase() : load;
    },
    /**
     * @param {string} opt_attributes
     * @param {string} type
     * @param {string} name
     * @return {?}
     */
    set : function(opt_attributes, type, name) {
      if (type === false) {
        jQuery.removeAttr(opt_attributes, name);
      } else {
        type = jQuery.propFix[name] || name;
        if (type in opt_attributes) {
          /** @type {boolean} */
          opt_attributes[type] = true;
        }
        opt_attributes.setAttribute(name, name.toLowerCase());
      }
      return name;
    }
  };
  if (!iterator) {
    meta = {
      name : true,
      id : true,
      coords : true
    };
    me = jQuery.valHooks.button = {
      /**
       * @param {string} name
       * @param {boolean} key
       * @return {?}
       */
      get : function(name, key) {
        var ret;
        return(ret = name.getAttributeNode(key)) && (meta[key] ? ret.nodeValue !== "" : ret.specified) ? ret.nodeValue : load;
      },
      /**
       * @param {string} opt_attributes
       * @param {string} type
       * @param {string} name
       * @return {?}
       */
      set : function(opt_attributes, type, name) {
        var ret = opt_attributes.getAttributeNode(name);
        if (!ret) {
          /** @type {Attr} */
          ret = cycle.createAttribute(name);
          opt_attributes.setAttributeNode(ret);
        }
        return ret.nodeValue = type + "";
      }
    };
    /** @type {function (string, string, string): ?} */
    jQuery.attrHooks.tabindex.set = me.set;
    jQuery.each(["width", "height"], function(dataAndEvents, name) {
      jQuery.attrHooks[name] = jQuery.extend(jQuery.attrHooks[name], {
        /**
         * @param {string} opt_attributes
         * @param {string} type
         * @return {?}
         */
        set : function(opt_attributes, type) {
          if (type === "") {
            opt_attributes.setAttribute(name, "auto");
            return type;
          }
        }
      });
    });
    jQuery.attrHooks.contenteditable = {
      /** @type {function (string, boolean): ?} */
      get : me.get,
      /**
       * @param {string} opt_attributes
       * @param {string} type
       * @param {string} value
       * @return {undefined}
       */
      set : function(opt_attributes, type, value) {
        if (type === "") {
          /** @type {string} */
          type = "false";
        }
        me.set(opt_attributes, type, value);
      }
    };
  }
  if (!jQuery.support.hrefNormalized) {
    jQuery.each(["href", "src", "width", "height"], function(dataAndEvents, i) {
      jQuery.attrHooks[i] = jQuery.extend(jQuery.attrHooks[i], {
        /**
         * @param {string} name
         * @return {?}
         */
        get : function(name) {
          name = name.getAttribute(i, 2);
          return name === null ? load : name;
        }
      });
    });
  }
  if (!jQuery.support.style) {
    jQuery.attrHooks.style = {
      /**
       * @param {string} name
       * @return {?}
       */
      get : function(name) {
        return name.style.cssText.toLowerCase() || load;
      },
      /**
       * @param {string} opt_attributes
       * @param {string} type
       * @return {?}
       */
      set : function(opt_attributes, type) {
        return opt_attributes.style.cssText = "" + type;
      }
    };
  }
  if (!jQuery.support.optSelected) {
    jQuery.propHooks.selected = jQuery.extend(jQuery.propHooks.selected, {
      /**
       * @param {string} name
       * @return {?}
       */
      get : function(name) {
        if (name = name.parentNode) {
          name.selectedIndex;
          if (name.parentNode) {
            name.parentNode.selectedIndex;
          }
        }
        return null;
      }
    });
  }
  if (!jQuery.support.enctype) {
    /** @type {string} */
    jQuery.propFix.enctype = "encoding";
  }
  if (!jQuery.support.checkOn) {
    jQuery.each(["radio", "checkbox"], function() {
      jQuery.valHooks[this] = {
        /**
         * @param {string} name
         * @return {?}
         */
        get : function(name) {
          return name.getAttribute("value") === null ? "on" : name.value;
        }
      };
    });
  }
  jQuery.each(["radio", "checkbox"], function() {
    jQuery.valHooks[this] = jQuery.extend(jQuery.valHooks[this], {
      /**
       * @param {string} cycle
       * @param {string} type
       * @return {?}
       */
      set : function(cycle, type) {
        if (jQuery.isArray(type)) {
          return cycle.checked = jQuery.inArray(jQuery(cycle).val(), type) >= 0;
        }
      }
    });
  });
  /** @type {RegExp} */
  var rformElems = /^(?:textarea|input|select)$/i;
  /** @type {RegExp} */
  var R = /^([^\.]*)?(?:\.(.+))?$/;
  /** @type {RegExp} */
  var rhoverHack = /(?:^|\s)hover(\.\S+)?\b/;
  /** @type {RegExp} */
  var reWhitespace = /^key/;
  /** @type {RegExp} */
  var seq = /^(?:mouse|contextmenu)|click/;
  /** @type {RegExp} */
  var str = /^(?:focusinfocus|focusoutblur)$/;
  /** @type {RegExp} */
  var spaceRe = /^(\w*)(?:#([\w\-]+))?(?:\.([\w\-]+))?$/;
  /**
   * @param {Array} value
   * @return {?}
   */
  var process = function(value) {
    if (value = spaceRe.exec(value)) {
      /** @type {string} */
      value[1] = (value[1] || "").toLowerCase();
      /** @type {(RegExp|string)} */
      value[3] = value[3] && RegExp("(?:^|\\s)" + value[3] + "(?:\\s|$)");
    }
    return value;
  };
  /**
   * @param {string} events
   * @return {?}
   */
  var hoverHack = function(events) {
    return jQuery.event.special.hover ? events : events.replace(rhoverHack, "mouseenter$1 mouseleave$1");
  };
  jQuery.event = {
    /**
     * @param {string} type
     * @param {Function} name
     * @param {Function} types
     * @param {Object} keepData
     * @param {Object} selector
     * @return {undefined}
     */
    add : function(type, name, types, keepData, selector) {
      var i;
      var eventHandle;
      var _ref;
      var e;
      var event;
      var tail;
      var handleObjIn;
      var events;
      var special;
      if (!(type.nodeType === 3 || (type.nodeType === 8 || (!name || (!types || !(i = jQuery._data(type))))))) {
        if (types.handler) {
          /** @type {Function} */
          handleObjIn = types;
          types = handleObjIn.handler;
          selector = handleObjIn.selector;
        }
        if (!types.guid) {
          /** @type {number} */
          types.guid = jQuery.guid++;
        }
        _ref = i.events;
        if (!_ref) {
          i.events = _ref = {};
        }
        eventHandle = i.handle;
        if (!eventHandle) {
          /** @type {function (string): ?} */
          i.handle = eventHandle = function(type) {
            return typeof jQuery !== "undefined" && (!type || jQuery.event.triggered !== type.type) ? jQuery.event.dispatch.apply(eventHandle.elem, arguments) : load;
          };
          /** @type {string} */
          eventHandle.elem = type;
        }
        name = jQuery.trim(hoverHack(name)).split(" ");
        /** @type {number} */
        i = 0;
        for (;i < name.length;i++) {
          /** @type {Array} */
          e = R.exec(name[i]) || [];
          event = e[1];
          tail = (e[2] || "").split(".").sort();
          special = jQuery.event.special[event] || {};
          event = (selector ? special.delegateType : special.bindType) || event;
          special = jQuery.event.special[event] || {};
          e = jQuery.extend({
            type : event,
            origType : e[1],
            data : keepData,
            /** @type {Function} */
            handler : types,
            guid : types.guid,
            selector : selector,
            quick : selector && process(selector),
            namespace : tail.join(".")
          }, handleObjIn);
          events = _ref[event];
          if (!events) {
            /** @type {Array} */
            events = _ref[event] = [];
            /** @type {number} */
            events.delegateCount = 0;
            if (!special.setup || special.setup.call(type, keepData, tail, eventHandle) === false) {
              if (type.addEventListener) {
                type.addEventListener(event, eventHandle, false);
              } else {
                if (type.attachEvent) {
                  type.attachEvent("on" + event, eventHandle);
                }
              }
            }
          }
          if (special.add) {
            special.add.call(type, e);
            if (!e.handler.guid) {
              e.handler.guid = types.guid;
            }
          }
          if (selector) {
            events.splice(events.delegateCount++, 0, e);
          } else {
            events.push(e);
          }
          /** @type {boolean} */
          jQuery.event.global[event] = true;
        }
        /** @type {null} */
        type = null;
      }
    },
    global : {},
    /**
     * @param {string} type
     * @param {Function} name
     * @param {Function} types
     * @param {Object} keepData
     * @param {boolean} var_args
     * @return {undefined}
     */
    remove : function(type, name, types, keepData, var_args) {
      var pdataCur = jQuery.hasData(type) && jQuery._data(type);
      var i;
      var namespace;
      var data;
      var selector;
      var len;
      var j;
      var cache;
      var special;
      var handlers;
      var handleObj;
      if (pdataCur && (cache = pdataCur.events)) {
        name = jQuery.trim(hoverHack(name || "")).split(" ");
        /** @type {number} */
        i = 0;
        for (;i < name.length;i++) {
          /** @type {Array} */
          namespace = R.exec(name[i]) || [];
          data = selector = namespace[1];
          namespace = namespace[2];
          if (data) {
            special = jQuery.event.special[data] || {};
            data = (keepData ? special.delegateType : special.bindType) || data;
            handlers = cache[data] || [];
            len = handlers.length;
            /** @type {(RegExp|null)} */
            namespace = namespace ? RegExp("(^|\\.)" + namespace.split(".").sort().join("\\.(?:.*\\.)?") + "(\\.|$)") : null;
            /** @type {number} */
            j = 0;
            for (;j < handlers.length;j++) {
              handleObj = handlers[j];
              if ((var_args || selector === handleObj.origType) && ((!types || types.guid === handleObj.guid) && ((!namespace || namespace.test(handleObj.namespace)) && (!keepData || (keepData === handleObj.selector || keepData === "**" && handleObj.selector))))) {
                handlers.splice(j--, 1);
                if (handleObj.selector) {
                  handlers.delegateCount--;
                }
                if (special.remove) {
                  special.remove.call(type, handleObj);
                }
              }
            }
            if (handlers.length === 0 && len !== handlers.length) {
              if (!special.teardown || special.teardown.call(type, namespace) === false) {
                jQuery.removeEvent(type, data, pdataCur.handle);
              }
              delete cache[data];
            }
          } else {
            for (data in cache) {
              jQuery.event.remove(type, data + name[i], types, keepData, true);
            }
          }
        }
        if (jQuery.isEmptyObject(cache)) {
          if (name = pdataCur.handle) {
            /** @type {null} */
            name.elem = null;
          }
          jQuery.removeData(type, ["events", "handle"], true);
        }
      }
    },
    customEvent : {
      getData : true,
      setData : true,
      changeData : true
    },
    /**
     * @param {string} type
     * @param {Function} name
     * @param {string} ready
     * @param {Object} keepData
     * @return {?}
     */
    trigger : function(type, name, ready, keepData) {
      if (!ready || !(ready.nodeType === 3 || ready.nodeType === 8)) {
        var key = type.type || type;
        /** @type {Array} */
        var cur = [];
        var ontype;
        var i;
        var special;
        var start;
        var codeSegments;
        if (!str.test(key + jQuery.event.triggered)) {
          if (key.indexOf("!") >= 0) {
            key = key.slice(0, -1);
            /** @type {boolean} */
            ontype = true;
          }
          if (key.indexOf(".") >= 0) {
            cur = key.split(".");
            key = cur.shift();
            cur.sort();
          }
          if (ready && !jQuery.event.customEvent[key] || jQuery.event.global[key]) {
            type = typeof type === "object" ? type[jQuery.expando] ? type : new jQuery.Event(key, type) : new jQuery.Event(key);
            type.type = key;
            /** @type {boolean} */
            type.isTrigger = true;
            /** @type {(boolean|undefined)} */
            type.exclusive = ontype;
            type.namespace = cur.join(".");
            /** @type {(RegExp|null)} */
            type.namespace_re = type.namespace ? RegExp("(^|\\.)" + cur.join("\\.(?:.*\\.)?") + "(\\.|$)") : null;
            /** @type {string} */
            ontype = key.indexOf(":") < 0 ? "on" + key : "";
            if (ready) {
              /** @type {Object} */
              type.result = load;
              if (!type.target) {
                /** @type {string} */
                type.target = ready;
              }
              name = name != null ? jQuery.makeArray(name) : [];
              name.unshift(type);
              special = jQuery.event.special[key] || {};
              if (!(special.trigger && special.trigger.apply(ready, name) === false)) {
                /** @type {Array} */
                codeSegments = [[ready, special.bindType || key]];
                if (!keepData && (!special.noBubble && !jQuery.isWindow(ready))) {
                  start = special.delegateType || key;
                  cur = str.test(start + key) ? ready : ready.parentNode;
                  /** @type {null} */
                  i = null;
                  for (;cur;cur = cur.parentNode) {
                    codeSegments.push([cur, start]);
                    i = cur;
                  }
                  if (i) {
                    if (i === ready.ownerDocument) {
                      codeSegments.push([i.defaultView || (i.parentWindow || fix), start]);
                    }
                  }
                }
                /** @type {number} */
                i = 0;
                for (;i < codeSegments.length && !type.isPropagationStopped();i++) {
                  cur = codeSegments[i][0];
                  type.type = codeSegments[i][1];
                  if (start = (jQuery._data(cur, "events") || {})[type.type] && jQuery._data(cur, "handle")) {
                    start.apply(cur, name);
                  }
                  if (start = ontype && cur[ontype]) {
                    if (jQuery.acceptData(cur) && start.apply(cur, name) === false) {
                      type.preventDefault();
                    }
                  }
                }
                type.type = key;
                if (!keepData && (!type.isDefaultPrevented() && ((!special._default || special._default.apply(ready.ownerDocument, name) === false) && (!(key === "click" && jQuery.nodeName(ready, "a")) && jQuery.acceptData(ready))))) {
                  if (ontype && (ready[key] && ((key !== "focus" && key !== "blur" || type.target.offsetWidth !== 0) && !jQuery.isWindow(ready)))) {
                    if (i = ready[ontype]) {
                      /** @type {null} */
                      ready[ontype] = null;
                    }
                    jQuery.event.triggered = key;
                    ready[key]();
                    /** @type {Object} */
                    jQuery.event.triggered = load;
                    if (i) {
                      ready[ontype] = i;
                    }
                  }
                }
                return type.result;
              }
            } else {
              ready = jQuery.cache;
              for (i in ready) {
                if (ready[i].events) {
                  if (ready[i].events[key]) {
                    jQuery.event.trigger(type, name, ready[i].handle.elem, true);
                  }
                }
              }
            }
          }
        }
      }
    },
    /**
     * @param {string} type
     * @return {?}
     */
    dispatch : function(type) {
      type = jQuery.event.fix(type || fix.event);
      var i = (jQuery._data(this, "events") || {})[type.type] || [];
      var match = i.delegateCount;
      /** @type {Array.<?>} */
      var args = [].slice.call(arguments, 0);
      /** @type {boolean} */
      var g = !type.exclusive && !type.namespace;
      var special = jQuery.event.special[type.type] || {};
      /** @type {Array} */
      var elems = [];
      var k;
      var elem;
      var input;
      var handleObj;
      var global;
      var matches;
      var cycle;
      /** @type {string} */
      args[0] = type;
      type.delegateTarget = this;
      if (!(special.preDispatch && special.preDispatch.call(this, type) === false)) {
        if (match && !(type.button && type.type === "click")) {
          input = jQuery(this);
          input.context = this.ownerDocument || this;
          elem = type.target;
          for (;elem != this;elem = elem.parentNode || this) {
            if (elem.disabled !== true) {
              global = {};
              /** @type {Array} */
              matches = [];
              input[0] = elem;
              /** @type {number} */
              k = 0;
              for (;k < match;k++) {
                handleObj = i[k];
                cycle = handleObj.selector;
                if (global[cycle] === load) {
                  var root = global;
                  var leaf = cycle;
                  var value;
                  if (handleObj.quick) {
                    value = handleObj.quick;
                    var attrs = elem.attributes || {};
                    value = (!value[1] || elem.nodeName.toLowerCase() === value[1]) && ((!value[2] || (attrs.id || {}).value === value[2]) && (!value[3] || value[3].test((attrs["class"] || {}).value)));
                  } else {
                    value = input.is(cycle);
                  }
                  root[leaf] = value;
                }
                if (global[cycle]) {
                  matches.push(handleObj);
                }
              }
              if (matches.length) {
                elems.push({
                  elem : elem,
                  matches : matches
                });
              }
            }
          }
        }
        if (i.length > match) {
          elems.push({
            elem : this,
            matches : i.slice(match)
          });
        }
        /** @type {number} */
        k = 0;
        for (;k < elems.length && !type.isPropagationStopped();k++) {
          match = elems[k];
          type.currentTarget = match.elem;
          /** @type {number} */
          i = 0;
          for (;i < match.matches.length && !type.isImmediatePropagationStopped();i++) {
            handleObj = match.matches[i];
            if (g || (!type.namespace && !handleObj.namespace || type.namespace_re && type.namespace_re.test(handleObj.namespace))) {
              type.data = handleObj.data;
              type.handleObj = handleObj;
              handleObj = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(match.elem, args);
              if (handleObj !== load) {
                type.result = handleObj;
                if (handleObj === false) {
                  type.preventDefault();
                  type.stopPropagation();
                }
              }
            }
          }
        }
        if (special.postDispatch) {
          special.postDispatch.call(this, type);
        }
        return type.result;
      }
    },
    props : "attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
    fixHooks : {},
    keyHooks : {
      props : ["char", "charCode", "key", "keyCode"],
      /**
       * @param {string} type
       * @param {Function} name
       * @return {?}
       */
      filter : function(type, name) {
        if (type.which == null) {
          type.which = name.charCode != null ? name.charCode : name.keyCode;
        }
        return type;
      }
    },
    mouseHooks : {
      props : "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
      /**
       * @param {string} type
       * @param {Function} name
       * @return {?}
       */
      filter : function(type, name) {
        var d;
        var de;
        var old = name.button;
        var fromElement = name.fromElement;
        if (type.pageX == null && name.clientX != null) {
          d = type.target.ownerDocument || cycle;
          de = d.documentElement;
          d = d.body;
          /** @type {number} */
          type.pageX = name.clientX + (de && de.scrollLeft || (d && d.scrollLeft || 0)) - (de && de.clientLeft || (d && d.clientLeft || 0));
          /** @type {number} */
          type.pageY = name.clientY + (de && de.scrollTop || (d && d.scrollTop || 0)) - (de && de.clientTop || (d && d.clientTop || 0));
        }
        if (!type.relatedTarget && fromElement) {
          type.relatedTarget = fromElement === type.target ? name.toElement : fromElement;
        }
        if (!type.which && old !== load) {
          /** @type {number} */
          type.which = old & 1 ? 1 : old & 2 ? 3 : old & 4 ? 2 : 0;
        }
        return type;
      }
    },
    /**
     * @param {string} fix
     * @return {?}
     */
    fix : function(fix) {
      if (fix[jQuery.expando]) {
        return fix;
      }
      var length;
      var key;
      /** @type {string} */
      var optgroup = fix;
      var fixHook = jQuery.event.fixHooks[fix.type] || {};
      var keys = fixHook.props ? this.props.concat(fixHook.props) : this.props;
      fix = jQuery.Event(optgroup);
      length = keys.length;
      for (;length;) {
        key = keys[--length];
        fix[key] = optgroup[key];
      }
      if (!fix.target) {
        fix.target = optgroup.srcElement || cycle;
      }
      if (fix.target.nodeType === 3) {
        fix.target = fix.target.parentNode;
      }
      if (fix.metaKey === load) {
        fix.metaKey = fix.ctrlKey;
      }
      return fixHook.filter ? fixHook.filter(fix, optgroup) : fix;
    },
    special : {
      ready : {
        setup : jQuery.bindReady
      },
      load : {
        noBubble : true
      },
      focus : {
        delegateType : "focusin"
      },
      blur : {
        delegateType : "focusout"
      },
      beforeunload : {
        /**
         * @param {?} opt_attributes
         * @param {?} namespaces
         * @param {?} eventHandle
         * @return {undefined}
         */
        setup : function(opt_attributes, namespaces, eventHandle) {
          if (jQuery.isWindow(this)) {
            this.onbeforeunload = eventHandle;
          }
        },
        /**
         * @param {?} namespaces
         * @param {?} eventHandle
         * @return {undefined}
         */
        teardown : function(namespaces, eventHandle) {
          if (this.onbeforeunload === eventHandle) {
            /** @type {null} */
            this.onbeforeunload = null;
          }
        }
      }
    },
    /**
     * @param {string} cycle
     * @param {Function} ready
     * @param {Event} event
     * @param {boolean} dataAndEvents
     * @return {undefined}
     */
    simulate : function(cycle, ready, event, dataAndEvents) {
      cycle = jQuery.extend(new jQuery.Event, event, {
        type : cycle,
        isSimulated : true,
        originalEvent : {}
      });
      if (dataAndEvents) {
        jQuery.event.trigger(cycle, null, ready);
      } else {
        jQuery.event.dispatch.call(ready, cycle);
      }
      if (cycle.isDefaultPrevented()) {
        event.preventDefault();
      }
    }
  };
  /** @type {function (string): ?} */
  jQuery.event.handle = jQuery.event.dispatch;
  /** @type {function (?, string, ?): undefined} */
  jQuery.removeEvent = cycle.removeEventListener ? function(o, name, evtHandler) {
    if (o.removeEventListener) {
      o.removeEventListener(name, evtHandler, false);
    }
  } : function(object, name, fpNotify) {
    if (object.detachEvent) {
      object.detachEvent("on" + name, fpNotify);
    }
  };
  /**
   * @param {Object} src
   * @param {Array} props
   * @return {?}
   */
  jQuery.Event = function(src, props) {
    if (!(this instanceof jQuery.Event)) {
      return new jQuery.Event(src, props);
    }
    if (src && src.type) {
      /** @type {Object} */
      this.originalEvent = src;
      this.type = src.type;
      /** @type {function (): ?} */
      this.isDefaultPrevented = src.defaultPrevented || (src.returnValue === false || src.getPreventDefault && src.getPreventDefault()) ? returnTrue : returnFalse;
    } else {
      /** @type {Object} */
      this.type = src;
    }
    if (props) {
      jQuery.extend(this, props);
    }
    this.timeStamp = src && src.timeStamp || jQuery.now();
    /** @type {boolean} */
    this[jQuery.expando] = true;
  };
  jQuery.Event.prototype = {
    /**
     * @return {undefined}
     */
    preventDefault : function() {
      /** @type {function (): ?} */
      this.isDefaultPrevented = returnTrue;
      var e = this.originalEvent;
      if (e) {
        if (e.preventDefault) {
          e.preventDefault();
        } else {
          /** @type {boolean} */
          e.returnValue = false;
        }
      }
    },
    /**
     * @return {undefined}
     */
    stopPropagation : function() {
      /** @type {function (): ?} */
      this.isPropagationStopped = returnTrue;
      var e = this.originalEvent;
      if (e) {
        if (e.stopPropagation) {
          e.stopPropagation();
        }
        /** @type {boolean} */
        e.cancelBubble = true;
      }
    },
    /**
     * @return {undefined}
     */
    stopImmediatePropagation : function() {
      /** @type {function (): ?} */
      this.isImmediatePropagationStopped = returnTrue;
      this.stopPropagation();
    },
    /** @type {function (): ?} */
    isDefaultPrevented : returnFalse,
    /** @type {function (): ?} */
    isPropagationStopped : returnFalse,
    /** @type {function (): ?} */
    isImmediatePropagationStopped : returnFalse
  };
  jQuery.each({
    mouseenter : "mouseover",
    mouseleave : "mouseout"
  }, function(orig, fix) {
    jQuery.event.special[orig] = {
      delegateType : fix,
      bindType : fix,
      /**
       * @param {string} type
       * @return {?}
       */
      handle : function(type) {
        var related = type.relatedTarget;
        var handleObj = type.handleObj;
        var ret;
        if (!related || related !== this && !jQuery.contains(this, related)) {
          type.type = handleObj.origType;
          ret = handleObj.handler.apply(this, arguments);
          type.type = fix;
        }
        return ret;
      }
    };
  });
  if (!jQuery.support.submitBubbles) {
    jQuery.event.special.submit = {
      /**
       * @return {?}
       */
      setup : function() {
        if (jQuery.nodeName(this, "form")) {
          return false;
        }
        jQuery.event.add(this, "click._submit keypress._submit", function(cycle) {
          cycle = cycle.target;
          if ((cycle = jQuery.nodeName(cycle, "input") || jQuery.nodeName(cycle, "button") ? cycle.form : load) && !cycle._submit_attached) {
            jQuery.event.add(cycle, "submit._submit", function(event) {
              /** @type {boolean} */
              event._submit_bubble = true;
            });
            /** @type {boolean} */
            cycle._submit_attached = true;
          }
        });
      },
      /**
       * @param {Event} event
       * @return {undefined}
       */
      postDispatch : function(event) {
        if (event._submit_bubble) {
          delete event._submit_bubble;
          if (this.parentNode) {
            if (!event.isTrigger) {
              jQuery.event.simulate("submit", this.parentNode, event, true);
            }
          }
        }
      },
      /**
       * @return {?}
       */
      teardown : function() {
        if (jQuery.nodeName(this, "form")) {
          return false;
        }
        jQuery.event.remove(this, "._submit");
      }
    };
  }
  if (!jQuery.support.changeBubbles) {
    jQuery.event.special.change = {
      /**
       * @return {?}
       */
      setup : function() {
        if (rformElems.test(this.nodeName)) {
          if (this.type === "checkbox" || this.type === "radio") {
            jQuery.event.add(this, "propertychange._change", function(event) {
              if (event.originalEvent.propertyName === "checked") {
                /** @type {boolean} */
                this._just_changed = true;
              }
            });
            jQuery.event.add(this, "click._change", function(event) {
              if (this._just_changed && !event.isTrigger) {
                /** @type {boolean} */
                this._just_changed = false;
                jQuery.event.simulate("change", this, event, true);
              }
            });
          }
          return false;
        }
        jQuery.event.add(this, "beforeactivate._change", function(cycle) {
          cycle = cycle.target;
          if (rformElems.test(cycle.nodeName) && !cycle._change_attached) {
            jQuery.event.add(cycle, "change._change", function(event) {
              if (this.parentNode) {
                if (!event.isSimulated && !event.isTrigger) {
                  jQuery.event.simulate("change", this.parentNode, event, true);
                }
              }
            });
            /** @type {boolean} */
            cycle._change_attached = true;
          }
        });
      },
      /**
       * @param {string} type
       * @return {?}
       */
      handle : function(type) {
        var elem = type.target;
        if (this !== elem || (type.isSimulated || (type.isTrigger || elem.type !== "radio" && elem.type !== "checkbox"))) {
          return type.handleObj.handler.apply(this, arguments);
        }
      },
      /**
       * @return {?}
       */
      teardown : function() {
        jQuery.event.remove(this, "._change");
        return rformElems.test(this.nodeName);
      }
    };
  }
  if (!jQuery.support.focusinBubbles) {
    jQuery.each({
      focus : "focusin",
      blur : "focusout"
    }, function(orig, fix) {
      /** @type {number} */
      var c = 0;
      /**
       * @param {(Object|string)} event
       * @return {undefined}
       */
      var handler = function(event) {
        jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);
      };
      jQuery.event.special[fix] = {
        /**
         * @return {undefined}
         */
        setup : function() {
          if (c++ === 0) {
            cycle.addEventListener(orig, handler, true);
          }
        },
        /**
         * @return {undefined}
         */
        teardown : function() {
          if (--c === 0) {
            cycle.removeEventListener(orig, handler, true);
          }
        }
      };
    });
  }
  jQuery.fn.extend({
    /**
     * @param {string} type
     * @param {Function} name
     * @param {Function} types
     * @param {Function} key
     * @param {Object} one
     * @return {?}
     */
    on : function(type, name, types, key, one) {
      var fn;
      var cycle;
      if (typeof type === "object") {
        if (typeof name !== "string") {
          types = types || name;
          /** @type {Object} */
          name = load;
        }
        for (cycle in type) {
          this.on(cycle, name, types, type[cycle], one);
        }
        return this;
      }
      if (types == null && key == null) {
        /** @type {Function} */
        key = name;
        types = name = load;
      } else {
        if (key == null) {
          if (typeof name === "string") {
            /** @type {Function} */
            key = types;
            /** @type {Object} */
            types = load;
          } else {
            /** @type {Function} */
            key = types;
            /** @type {Function} */
            types = name;
            /** @type {Object} */
            name = load;
          }
        }
      }
      if (key === false) {
        /** @type {function (): ?} */
        key = returnFalse;
      } else {
        if (!key) {
          return this;
        }
      }
      if (one === 1) {
        /** @type {Function} */
        fn = key;
        /**
         * @param {string} type
         * @return {?}
         */
        key = function(type) {
          jQuery().off(type);
          return fn.apply(this, arguments);
        };
        key.guid = fn.guid || (fn.guid = jQuery.guid++);
      }
      return this.each(function() {
        jQuery.event.add(this, type, key, types, name);
      });
    },
    /**
     * @param {string} cycle
     * @param {Function} optgroup
     * @param {Function} ready
     * @param {Object} types
     * @return {?}
     */
    one : function(cycle, optgroup, ready, types) {
      return this.on(cycle, optgroup, ready, types, 1);
    },
    /**
     * @param {?} optgroup
     * @param {Object} type
     * @param {Function} ready
     * @return {?}
     */
    off : function(optgroup, type, ready) {
      if (optgroup && (optgroup.preventDefault && optgroup.handleObj)) {
        var handleObj = optgroup.handleObj;
        jQuery(optgroup.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
        return this;
      }
      if (typeof optgroup === "object") {
        for (handleObj in optgroup) {
          this.off(handleObj, type, optgroup[handleObj]);
        }
        return this;
      }
      if (type === false || typeof type === "function") {
        /** @type {Object} */
        ready = type;
        /** @type {Object} */
        type = load;
      }
      if (ready === false) {
        /** @type {function (): ?} */
        ready = returnFalse;
      }
      return this.each(function() {
        jQuery.event.remove(this, optgroup, ready, type);
      });
    },
    /**
     * @param {string} type
     * @param {Function} name
     * @param {Function} types
     * @return {?}
     */
    bind : function(type, name, types) {
      return this.on(type, null, name, types);
    },
    /**
     * @param {string} type
     * @param {string} fn
     * @return {?}
     */
    unbind : function(type, fn) {
      return this.off(type, null, fn);
    },
    /**
     * @param {string} cycle
     * @param {Function} ready
     * @param {Object} types
     * @return {?}
     */
    live : function(cycle, ready, types) {
      jQuery(this.context).on(cycle, this.selector, ready, types);
      return this;
    },
    /**
     * @param {string} event
     * @param {Object} fn
     * @return {?}
     */
    die : function(event, fn) {
      jQuery(this.context).off(event, this.selector || "**", fn);
      return this;
    },
    /**
     * @param {Function} optgroup
     * @param {string} cycle
     * @param {Function} ready
     * @param {Object} types
     * @return {?}
     */
    delegate : function(optgroup, cycle, ready, types) {
      return this.on(cycle, optgroup, ready, types);
    },
    /**
     * @param {string} selector
     * @param {string} event
     * @param {Object} fn
     * @return {?}
     */
    undelegate : function(selector, event, fn) {
      return arguments.length == 1 ? this.off(selector, "**") : this.off(event, selector, fn);
    },
    /**
     * @param {string} type
     * @param {Function} name
     * @return {?}
     */
    trigger : function(type, name) {
      return this.each(function() {
        jQuery.event.trigger(type, name, this);
      });
    },
    /**
     * @param {string} cycle
     * @param {Function} optgroup
     * @return {?}
     */
    triggerHandler : function(cycle, optgroup) {
      if (this[0]) {
        return jQuery.event.trigger(cycle, optgroup, this[0], true);
      }
    },
    /**
     * @param {string} type
     * @return {?}
     */
    toggle : function(type) {
      /** @type {Arguments} */
      var args = arguments;
      var guid = type.guid || jQuery.guid++;
      /** @type {number} */
      var i = 0;
      /**
       * @param {?} event
       * @return {?}
       */
      var toggler = function(event) {
        /** @type {number} */
        var lastToggle = (jQuery._data(this, "lastToggle" + type.guid) || 0) % i;
        jQuery._data(this, "lastToggle" + type.guid, lastToggle + 1);
        event.preventDefault();
        return args[lastToggle].apply(this, arguments) || false;
      };
      toggler.guid = guid;
      for (;i < args.length;) {
        args[i++].guid = guid;
      }
      return this.click(toggler);
    },
    /**
     * @param {Function} fnOver
     * @param {Function} fnOut
     * @return {?}
     */
    hover : function(fnOver, fnOut) {
      return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
    }
  });
  jQuery.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "), function(dataAndEvents, cycle) {
    /**
     * @param {?} ready
     * @param {?} name
     * @return {?}
     */
    jQuery.fn[cycle] = function(ready, name) {
      if (name == null) {
        name = ready;
        /** @type {null} */
        ready = null;
      }
      return arguments.length > 0 ? this.on(cycle, null, ready, name) : this.trigger(cycle);
    };
    if (jQuery.attrFn) {
      /** @type {boolean} */
      jQuery.attrFn[cycle] = true;
    }
    if (reWhitespace.test(cycle)) {
      jQuery.event.fixHooks[cycle] = jQuery.event.keyHooks;
    }
    if (seq.test(cycle)) {
      jQuery.event.fixHooks[cycle] = jQuery.event.mouseHooks;
    }
  });
  /**
   * @param {string} dir
   * @param {string} cur
   * @param {number} doneName
   * @param {(Arguments|Array)} checkSet
   * @param {number} i
   * @param {?} isXML
   * @return {undefined}
   */
  var dirNodeCheck = function(dir, cur, doneName, checkSet, i, isXML) {
    /** @type {number} */
    i = 0;
    var l = checkSet.length;
    for (;i < l;i++) {
      var elem = checkSet[i];
      if (elem) {
        /** @type {boolean} */
        var match = false;
        elem = elem[dir];
        for (;elem;) {
          if (elem[expando] === doneName) {
            match = checkSet[elem.sizset];
            break;
          }
          if (elem.nodeType === 1 && !isXML) {
            /** @type {number} */
            elem[expando] = doneName;
            /** @type {number} */
            elem.sizset = i;
          }
          if (elem.nodeName.toLowerCase() === cur) {
            match = elem;
            break;
          }
          elem = elem[dir];
        }
        checkSet[i] = match;
      }
    }
  };
  /**
   * @param {string} dir
   * @param {string} cycle
   * @param {number} doneName
   * @param {(Arguments|Array)} checkSet
   * @param {number} i
   * @param {?} isXML
   * @return {undefined}
   */
  var dirCheck = function(dir, cycle, doneName, checkSet, i, isXML) {
    /** @type {number} */
    i = 0;
    var l = checkSet.length;
    for (;i < l;i++) {
      var elem = checkSet[i];
      if (elem) {
        /** @type {boolean} */
        var match = false;
        elem = elem[dir];
        for (;elem;) {
          if (elem[expando] === doneName) {
            match = checkSet[elem.sizset];
            break;
          }
          if (elem.nodeType === 1) {
            if (!isXML) {
              /** @type {number} */
              elem[expando] = doneName;
              /** @type {number} */
              elem.sizset = i;
            }
            if (typeof cycle !== "string") {
              if (elem === cycle) {
                /** @type {boolean} */
                match = true;
                break;
              }
            } else {
              if (Sizzle.filter(cycle, [elem]).length > 0) {
                match = elem;
                break;
              }
            }
          }
          elem = elem[dir];
        }
        checkSet[i] = match;
      }
    }
  };
  /** @type {RegExp} */
  var regexp = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g;
  /** @type {string} */
  var expando = "sizcache" + (Math.random() + "").replace(".", "");
  /** @type {number} */
  var done = 0;
  /** @type {function (this:*): string} */
  var toString = Object.prototype.toString;
  /** @type {boolean} */
  var bulk = false;
  /** @type {boolean} */
  var fn = true;
  /** @type {RegExp} */
  var r20 = /\\/g;
  /** @type {RegExp} */
  var rQuot = /\r\n/g;
  /** @type {RegExp} */
  var rNonWord = /\W/;
  [0, 0].sort(function() {
    /** @type {boolean} */
    fn = false;
    return 0;
  });
  /**
   * @param {string} type
   * @param {Object} context
   * @param {Object} results
   * @param {Object} seed
   * @return {?}
   */
  var Sizzle = function(type, context, results, seed) {
    results = results || [];
    var origContext = context = context || cycle;
    if (context.nodeType !== 1 && context.nodeType !== 9) {
      return[];
    }
    if (!type || typeof type !== "string") {
      return results;
    }
    var ret;
    var set;
    var checkSet;
    var fix;
    var cur;
    /** @type {boolean} */
    var k = true;
    var contextXML = Sizzle.isXML(context);
    /** @type {Array} */
    var parts = [];
    /** @type {string} */
    var val = type;
    do {
      regexp.exec("");
      if (ret = regexp.exec(val)) {
        /** @type {string} */
        val = ret[3];
        parts.push(ret[1]);
        if (ret[2]) {
          /** @type {string} */
          fix = ret[3];
          break;
        }
      }
    } while (ret);
    if (parts.length > 1 && origPOS.exec(type)) {
      if (parts.length === 2 && Expr.relative[parts[0]]) {
        set = posProcess(parts[0] + parts[1], context, seed);
      } else {
        set = Expr.relative[parts[0]] ? [context] : Sizzle(parts.shift(), context);
        for (;parts.length;) {
          type = parts.shift();
          if (Expr.relative[type]) {
            type = type + parts.shift();
          }
          set = posProcess(type, set, seed);
        }
      }
    } else {
      if (!seed && (parts.length > 1 && (context.nodeType === 9 && (!contextXML && (Expr.match.ID.test(parts[0]) && !Expr.match.ID.test(parts[parts.length - 1])))))) {
        ret = Sizzle.find(parts.shift(), context, contextXML);
        context = ret.expr ? Sizzle.filter(ret.expr, ret.set)[0] : ret.set[0];
      }
      if (context) {
        ret = seed ? {
          expr : parts.pop(),
          set : makeArray(seed)
        } : Sizzle.find(parts.pop(), parts.length === 1 && ((parts[0] === "~" || parts[0] === "+") && context.parentNode) ? context.parentNode : context, contextXML);
        set = ret.expr ? Sizzle.filter(ret.expr, ret.set) : ret.set;
        if (parts.length > 0) {
          checkSet = makeArray(set);
        } else {
          /** @type {boolean} */
          k = false;
        }
        for (;parts.length;) {
          ret = cur = parts.pop();
          if (Expr.relative[cur]) {
            ret = parts.pop();
          } else {
            /** @type {string} */
            cur = "";
          }
          if (ret == null) {
            /** @type {Object} */
            ret = context;
          }
          Expr.relative[cur](checkSet, ret, contextXML);
        }
      } else {
        /** @type {Array} */
        checkSet = [];
      }
    }
    if (!checkSet) {
      checkSet = set;
    }
    if (!checkSet) {
      Sizzle.error(cur || type);
    }
    if (toString.call(checkSet) === "[object Array]") {
      if (k) {
        if (context && context.nodeType === 1) {
          /** @type {number} */
          type = 0;
          for (;checkSet[type] != null;type++) {
            if (checkSet[type]) {
              if (checkSet[type] === true || checkSet[type].nodeType === 1 && Sizzle.contains(context, checkSet[type])) {
                results.push(set[type]);
              }
            }
          }
        } else {
          /** @type {number} */
          type = 0;
          for (;checkSet[type] != null;type++) {
            if (checkSet[type]) {
              if (checkSet[type].nodeType === 1) {
                results.push(set[type]);
              }
            }
          }
        }
      } else {
        results.push.apply(results, checkSet);
      }
    } else {
      makeArray(checkSet, results);
    }
    if (fix) {
      Sizzle(fix, origContext, results, seed);
      Sizzle.uniqueSort(results);
    }
    return results;
  };
  /**
   * @param {Array} results
   * @return {?}
   */
  Sizzle.uniqueSort = function(results) {
    if (sortOrder) {
      bulk = fn;
      results.sort(sortOrder);
      if (bulk) {
        /** @type {number} */
        var i = 1;
        for (;i < results.length;i++) {
          if (results[i] === results[i - 1]) {
            results.splice(i--, 1);
          }
        }
      }
    }
    return results;
  };
  /**
   * @param {string} cycle
   * @param {Object} elements
   * @return {?}
   */
  Sizzle.matches = function(cycle, elements) {
    return Sizzle(cycle, null, null, elements);
  };
  /**
   * @param {?} node
   * @param {string} cycle
   * @return {?}
   */
  Sizzle.matchesSelector = function(node, cycle) {
    return Sizzle(cycle, null, null, [node]).length > 0;
  };
  /**
   * @param {string} type
   * @param {Object} context
   * @param {(Array|string)} isXML
   * @return {?}
   */
  Sizzle.find = function(type, context, isXML) {
    var set;
    var i;
    var valsLength;
    var m;
    var name;
    var fileName;
    if (!type) {
      return[];
    }
    /** @type {number} */
    i = 0;
    /** @type {number} */
    valsLength = Expr.order.length;
    for (;i < valsLength;i++) {
      name = Expr.order[i];
      if (m = Expr.leftMatch[name].exec(type)) {
        fileName = m[1];
        m.splice(1, 1);
        if (fileName.substr(fileName.length - 1) !== "\\") {
          m[1] = (m[1] || "").replace(r20, "");
          set = Expr.find[name](m, context, isXML);
          if (set != null) {
            type = type.replace(Expr.match[name], "");
            break;
          }
        }
      }
    }
    if (!set) {
      set = typeof context.getElementsByTagName !== "undefined" ? context.getElementsByTagName("*") : [];
    }
    return{
      set : set,
      expr : type
    };
  };
  /**
   * @param {string} type
   * @param {Function} name
   * @param {Function} types
   * @param {Object} keepData
   * @return {?}
   */
  Sizzle.filter = function(type, name, types, keepData) {
    var value;
    var g;
    var i;
    var b;
    var x;
    var f;
    var d;
    var o;
    /** @type {string} */
    var functionType = type;
    /** @type {Array} */
    var error = [];
    /** @type {Function} */
    var result = name;
    var listener = name && (name[0] && Sizzle.isXML(name[0]));
    for (;type && name.length;) {
      for (i in Expr.filter) {
        if ((value = Expr.leftMatch[i].exec(type)) != null && value[2]) {
          f = Expr.filter[i];
          x = value[1];
          /** @type {boolean} */
          g = false;
          value.splice(1, 1);
          if (x.substr(x.length - 1) !== "\\") {
            if (result === error) {
              /** @type {Array} */
              error = [];
            }
            if (Expr.preFilter[i]) {
              if (value = Expr.preFilter[i](value, result, types, error, keepData, listener)) {
                if (value === true) {
                  continue;
                }
              } else {
                /** @type {boolean} */
                g = b = true;
              }
            }
            if (value) {
              /** @type {number} */
              d = 0;
              for (;(x = result[d]) != null;d++) {
                if (x) {
                  b = f(x, value, d, result);
                  /** @type {number} */
                  o = keepData ^ b;
                  if (types && b != null) {
                    if (o) {
                      /** @type {boolean} */
                      g = true;
                    } else {
                      /** @type {boolean} */
                      result[d] = false;
                    }
                  } else {
                    if (o) {
                      error.push(x);
                      /** @type {boolean} */
                      g = true;
                    }
                  }
                }
              }
            }
            if (b !== load) {
              if (!types) {
                /** @type {Array} */
                result = error;
              }
              type = type.replace(Expr.match[i], "");
              if (!g) {
                return[];
              }
              break;
            }
          }
        }
      }
      if (type === functionType) {
        if (g == null) {
          Sizzle.error(type);
        } else {
          break;
        }
      }
      /** @type {string} */
      functionType = type;
    }
    return result;
  };
  /**
   * @param {string} type
   * @return {?}
   */
  Sizzle.error = function(type) {
    throw Error("Syntax error, unrecognized expression: " + type);
  };
  /** @type {function (string): ?} */
  var getText = Sizzle.getText = function(type) {
    var i;
    var elem;
    i = type.nodeType;
    /** @type {string} */
    var txt = "";
    if (i) {
      if (i === 1 || (i === 9 || i === 11)) {
        if (typeof type.textContent === "string") {
          return type.textContent;
        }
        if (typeof type.innerText === "string") {
          return type.innerText.replace(rQuot, "");
        }
        type = type.firstChild;
        for (;type;type = type.nextSibling) {
          /** @type {string} */
          txt = txt + getText(type);
        }
      } else {
        if (i === 3 || i === 4) {
          return type.nodeValue;
        }
      }
    } else {
      /** @type {number} */
      i = 0;
      for (;elem = type[i];i++) {
        if (elem.nodeType !== 8) {
          /** @type {string} */
          txt = txt + getText(elem);
        }
      }
    }
    return txt;
  };
  var Expr = Sizzle.selectors = {
    order : ["ID", "NAME", "TAG"],
    match : {
      ID : /#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
      CLASS : /\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
      NAME : /\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,
      ATTR : /\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(?:(['"])(.*?)\3|(#?(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/,
      TAG : /^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,
      CHILD : /:(only|nth|last|first)-child(?:\(\s*(even|odd|(?:[+\-]?\d+|(?:[+\-]?\d*)?n\s*(?:[+\-]\s*\d+)?))\s*\))?/,
      POS : /:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/,
      PSEUDO : /:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/
    },
    leftMatch : {},
    attrMap : {
      "class" : "className",
      "for" : "htmlFor"
    },
    attrHandle : {
      /**
       * @param {string} type
       * @return {?}
       */
      href : function(type) {
        return type.getAttribute("href");
      },
      /**
       * @param {string} type
       * @return {?}
       */
      type : function(type) {
        return type.getAttribute("type");
      }
    },
    relative : {
      /**
       * @param {Function} optgroup
       * @param {string} cycle
       * @return {undefined}
       */
      "+" : function(optgroup, cycle) {
        /** @type {boolean} */
        var isPartStrNotTag = typeof cycle === "string";
        /** @type {boolean} */
        var i = isPartStrNotTag && !rNonWord.test(cycle);
        /** @type {boolean} */
        isPartStrNotTag = isPartStrNotTag && !i;
        if (i) {
          cycle = cycle.toLowerCase();
        }
        /** @type {number} */
        i = 0;
        var valuesLen = optgroup.length;
        var elem;
        for (;i < valuesLen;i++) {
          if (elem = optgroup[i]) {
            for (;(elem = elem.previousSibling) && elem.nodeType !== 1;) {
            }
            optgroup[i] = isPartStrNotTag || elem && elem.nodeName.toLowerCase() === cycle ? elem || false : elem === cycle;
          }
        }
        if (isPartStrNotTag) {
          Sizzle.filter(cycle, optgroup, true);
        }
      },
      /**
       * @param {Function} optgroup
       * @param {string} cycle
       * @return {undefined}
       */
      ">" : function(optgroup, cycle) {
        var current;
        /** @type {boolean} */
        var isPartStr = typeof cycle === "string";
        /** @type {number} */
        var i = 0;
        var valuesLen = optgroup.length;
        if (isPartStr && !rNonWord.test(cycle)) {
          cycle = cycle.toLowerCase();
          for (;i < valuesLen;i++) {
            if (current = optgroup[i]) {
              current = current.parentNode;
              optgroup[i] = current.nodeName.toLowerCase() === cycle ? current : false;
            }
          }
        } else {
          for (;i < valuesLen;i++) {
            if (current = optgroup[i]) {
              optgroup[i] = isPartStr ? current.parentNode : current.parentNode === cycle;
            }
          }
          if (isPartStr) {
            Sizzle.filter(cycle, optgroup, true);
          }
        }
      },
      /**
       * @param {Array} checkSet
       * @param {string} part
       * @param {?} isXML
       * @return {undefined}
       */
      "" : function(checkSet, part, isXML) {
        var classNames;
        /** @type {number} */
        var doneName = done++;
        /** @type {function (string, string, number, (Arguments|Array), number, ?): undefined} */
        var checkFn = dirCheck;
        if (typeof part === "string" && !rNonWord.test(part)) {
          /** @type {string} */
          classNames = part = part.toLowerCase();
          /** @type {function (string, string, number, (Arguments|Array), number, ?): undefined} */
          checkFn = dirNodeCheck;
        }
        checkFn("parentNode", part, doneName, checkSet, classNames, isXML);
      },
      /**
       * @param {Array} checkSet
       * @param {string} part
       * @param {?} isXML
       * @return {undefined}
       */
      "~" : function(checkSet, part, isXML) {
        var classNames;
        /** @type {number} */
        var doneName = done++;
        /** @type {function (string, string, number, (Arguments|Array), number, ?): undefined} */
        var checkFn = dirCheck;
        if (typeof part === "string" && !rNonWord.test(part)) {
          /** @type {string} */
          classNames = part = part.toLowerCase();
          /** @type {function (string, string, number, (Arguments|Array), number, ?): undefined} */
          checkFn = dirNodeCheck;
        }
        checkFn("previousSibling", part, doneName, checkSet, classNames, isXML);
      }
    },
    find : {
      /**
       * @param {Object} match
       * @param {Object} context
       * @param {?} isXML
       * @return {?}
       */
      ID : function(match, context, isXML) {
        if (typeof context.getElementById !== "undefined" && !isXML) {
          return(match = context.getElementById(match[1])) && match.parentNode ? [match] : [];
        }
      },
      /**
       * @param {number} match
       * @param {HTMLElement} context
       * @return {?}
       */
      NAME : function(match, context) {
        if (typeof context.getElementsByName !== "undefined") {
          /** @type {Array} */
          var ret = [];
          var results = context.getElementsByName(match[1]);
          /** @type {number} */
          var i = 0;
          var l = results.length;
          for (;i < l;i++) {
            if (results[i].getAttribute("name") === match[1]) {
              ret.push(results[i]);
            }
          }
          return ret.length === 0 ? null : ret;
        }
      },
      /**
       * @param {number} match
       * @param {Node} context
       * @return {?}
       */
      TAG : function(match, context) {
        if (typeof context.getElementsByTagName !== "undefined") {
          return context.getElementsByTagName(match[1]);
        }
      }
    },
    preFilter : {
      /**
       * @param {string} match
       * @param {Array} curLoop
       * @param {?} not
       * @param {Array} result
       * @param {string} isXML
       * @param {number} i
       * @return {?}
       */
      CLASS : function(match, curLoop, not, result, isXML, i) {
        /** @type {string} */
        match = " " + match[1].replace(r20, "") + " ";
        if (i) {
          return match;
        }
        /** @type {number} */
        i = 0;
        var elem;
        for (;(elem = curLoop[i]) != null;i++) {
          if (elem) {
            if (isXML ^ (elem.className && (" " + elem.className + " ").replace(/[\t\n\r]/g, " ").indexOf(match) >= 0)) {
              if (!not) {
                result.push(elem);
              }
            } else {
              if (not) {
                /** @type {boolean} */
                curLoop[i] = false;
              }
            }
          }
        }
        return false;
      },
      /**
       * @param {number} match
       * @return {?}
       */
      ID : function(match) {
        return match[1].replace(r20, "");
      },
      /**
       * @param {number} match
       * @return {?}
       */
      TAG : function(match) {
        return match[1].replace(r20, "").toLowerCase();
      },
      /**
       * @param {Array} match
       * @return {?}
       */
      CHILD : function(match) {
        if (match[1] === "nth") {
          if (!match[2]) {
            Sizzle.error(match[0]);
          }
          match[2] = match[2].replace(/^\+|\s*/g, "");
          /** @type {(Array.<string>|null)} */
          var b = /(-?)(\d*)(?:n([+\-]?\d*))?/.exec(match[2] === "even" && "2n" || (match[2] === "odd" && "2n+1" || (!/\D/.test(match[2]) && "0n+" + match[2] || match[2])));
          /** @type {number} */
          match[2] = b[1] + (b[2] || 1) - 0;
          /** @type {number} */
          match[3] = b[3] - 0;
        } else {
          if (match[2]) {
            Sizzle.error(match[0]);
          }
        }
        /** @type {number} */
        match[0] = done++;
        return match;
      },
      /**
       * @param {(Array|Float32Array)} match
       * @param {?} name
       * @param {?} not
       * @param {?} inplace
       * @param {?} result
       * @param {?} curLoop
       * @return {?}
       */
      ATTR : function(match, name, not, inplace, result, curLoop) {
        name = match[1] = match[1].replace(r20, "");
        if (!curLoop) {
          if (Expr.attrMap[name]) {
            match[1] = Expr.attrMap[name];
          }
        }
        match[4] = (match[4] || (match[5] || "")).replace(r20, "");
        if (match[2] === "~=") {
          /** @type {string} */
          match[4] = " " + match[4] + " ";
        }
        return match;
      },
      /**
       * @param {Array} match
       * @param {Function} optgroup
       * @param {Function} ready
       * @param {Array} result
       * @param {number} not
       * @return {?}
       */
      PSEUDO : function(match, optgroup, ready, result, not) {
        if (match[1] === "not") {
          if ((regexp.exec(match[3]) || "").length > 1 || /^\w/.test(match[3])) {
            match[3] = Sizzle(match[3], null, null, optgroup);
          } else {
            match = Sizzle.filter(match[3], optgroup, ready, 1 ^ not);
            if (!ready) {
              result.push.apply(result, match);
            }
            return false;
          }
        } else {
          if (Expr.match.POS.test(match[0]) || Expr.match.CHILD.test(match[0])) {
            return true;
          }
        }
        return match;
      },
      /**
       * @param {Array} match
       * @return {?}
       */
      POS : function(match) {
        match.unshift(true);
        return match;
      }
    },
    filters : {
      /**
       * @param {Element} elem
       * @return {?}
       */
      enabled : function(elem) {
        return elem.disabled === false && elem.type !== "hidden";
      },
      /**
       * @param {string} type
       * @return {?}
       */
      disabled : function(type) {
        return type.disabled === true;
      },
      /**
       * @param {string} type
       * @return {?}
       */
      checked : function(type) {
        return type.checked === true;
      },
      /**
       * @param {string} type
       * @return {?}
       */
      selected : function(type) {
        if (type.parentNode) {
          type.parentNode.selectedIndex;
        }
        return type.selected === true;
      },
      /**
       * @param {Node} elem
       * @return {?}
       */
      parent : function(elem) {
        return!!elem.firstChild;
      },
      /**
       * @param {Element} root
       * @return {?}
       */
      empty : function(root) {
        return!root.firstChild;
      },
      /**
       * @param {Object} type
       * @param {string} property
       * @param {Array} match
       * @return {?}
       */
      has : function(type, property, match) {
        return!!Sizzle(match[3], type).length;
      },
      /**
       * @param {Node} elem
       * @return {?}
       */
      header : function(elem) {
        return/h\d/i.test(elem.nodeName);
      },
      /**
       * @param {string} type
       * @return {?}
       */
      text : function(type) {
        var f = type.getAttribute("type");
        var t = type.type;
        return type.nodeName.toLowerCase() === "input" && ("text" === t && (f === t || f === null));
      },
      /**
       * @param {Node} elem
       * @return {?}
       */
      radio : function(elem) {
        return elem.nodeName.toLowerCase() === "input" && "radio" === elem.type;
      },
      /**
       * @param {Node} elem
       * @return {?}
       */
      checkbox : function(elem) {
        return elem.nodeName.toLowerCase() === "input" && "checkbox" === elem.type;
      },
      /**
       * @param {Node} elem
       * @return {?}
       */
      file : function(elem) {
        return elem.nodeName.toLowerCase() === "input" && "file" === elem.type;
      },
      /**
       * @param {Node} elem
       * @return {?}
       */
      password : function(elem) {
        return elem.nodeName.toLowerCase() === "input" && "password" === elem.type;
      },
      /**
       * @param {Object} elem
       * @return {?}
       */
      submit : function(elem) {
        var name = elem.nodeName.toLowerCase();
        return(name === "input" || name === "button") && "submit" === elem.type;
      },
      /**
       * @param {Node} elem
       * @return {?}
       */
      image : function(elem) {
        return elem.nodeName.toLowerCase() === "input" && "image" === elem.type;
      },
      /**
       * @param {Node} elem
       * @return {?}
       */
      reset : function(elem) {
        var name = elem.nodeName.toLowerCase();
        return(name === "input" || name === "button") && "reset" === elem.type;
      },
      /**
       * @param {string} type
       * @return {?}
       */
      button : function(type) {
        var name = type.nodeName.toLowerCase();
        return name === "input" && "button" === type.type || name === "button";
      },
      /**
       * @param {Node} elem
       * @return {?}
       */
      input : function(elem) {
        return/input|select|textarea|button/i.test(elem.nodeName);
      },
      /**
       * @param {string} type
       * @return {?}
       */
      focus : function(type) {
        return type === type.ownerDocument.activeElement;
      }
    },
    setFilters : {
      /**
       * @param {string} type
       * @param {Function} name
       * @return {?}
       */
      first : function(type, name) {
        return name === 0;
      },
      /**
       * @param {string} type
       * @param {Function} name
       * @param {Function} types
       * @param {Object} keepData
       * @return {?}
       */
      last : function(type, name, types, keepData) {
        return name === keepData.length - 1;
      },
      /**
       * @param {?} i
       * @param {number} elem
       * @return {?}
       */
      even : function(i, elem) {
        return elem % 2 === 0;
      },
      /**
       * @param {?} i
       * @param {number} elem
       * @return {?}
       */
      odd : function(i, elem) {
        return elem % 2 === 1;
      },
      /**
       * @param {string} type
       * @param {Function} name
       * @param {Function} types
       * @return {?}
       */
      lt : function(type, name, types) {
        return name < types[3] - 0;
      },
      /**
       * @param {?} match
       * @param {number} i
       * @param {Array} elem
       * @return {?}
       */
      gt : function(match, i, elem) {
        return i > elem[3] - 0;
      },
      /**
       * @param {string} elem
       * @param {number} opt_attributes
       * @param {(Array|string)} match
       * @return {?}
       */
      nth : function(elem, opt_attributes, match) {
        return match[3] - 0 === opt_attributes;
      },
      /**
       * @param {number} mayParseLabeledStatementInstead
       * @param {number} match
       * @param {Array} elem
       * @return {?}
       */
      eq : function(mayParseLabeledStatementInstead, match, elem) {
        return elem[3] - 0 === match;
      }
    },
    filter : {
      /**
       * @param {HTMLElement} elem
       * @param {Array} array
       * @param {Object} i
       * @param {Object} limit
       * @return {?}
       */
      PSEUDO : function(elem, array, i, limit) {
        var cycle = array[1];
        var filter = Expr.filters[cycle];
        if (filter) {
          return filter(elem, i, array, limit);
        }
        if (cycle === "contains") {
          return(elem.textContent || (elem.innerText || (getText([elem]) || ""))).indexOf(array[3]) >= 0;
        }
        if (cycle === "not") {
          array = array[3];
          /** @type {number} */
          i = 0;
          limit = array.length;
          for (;i < limit;i++) {
            if (array[i] === elem) {
              return false;
            }
          }
          return true;
        }
        Sizzle.error(cycle);
      },
      /**
       * @param {Element} elem
       * @param {Array} match
       * @return {?}
       */
      CHILD : function(elem, match) {
        var type;
        var last;
        var doneName;
        var parent;
        var count;
        var node;
        type = match[1];
        /** @type {Element} */
        node = elem;
        switch(type) {
          case "only":
          ;
          case "first":
            for (;node = node.previousSibling;) {
              if (node.nodeType === 1) {
                return false;
              }
            }
            if (type === "first") {
              return true;
            }
            /** @type {Element} */
            node = elem;
          case "last":
            for (;node = node.nextSibling;) {
              if (node.nodeType === 1) {
                return false;
              }
            }
            return true;
          case "nth":
            type = match[2];
            last = match[3];
            if (type === 1 && last === 0) {
              return true;
            }
            doneName = match[0];
            if ((parent = elem.parentNode) && (parent[expando] !== doneName || !elem.nodeIndex)) {
              /** @type {number} */
              count = 0;
              node = parent.firstChild;
              for (;node;node = node.nextSibling) {
                if (node.nodeType === 1) {
                  /** @type {number} */
                  node.nodeIndex = ++count;
                }
              }
              parent[expando] = doneName;
            }
            /** @type {number} */
            node = elem.nodeIndex - last;
            return type === 0 ? node === 0 : node % type === 0 && node / type >= 0;
        }
      },
      /**
       * @param {Node} elem
       * @param {?} match
       * @return {?}
       */
      ID : function(elem, match) {
        return elem.nodeType === 1 && elem.getAttribute("id") === match;
      },
      /**
       * @param {Node} elem
       * @param {string} curLoop
       * @return {?}
       */
      TAG : function(elem, curLoop) {
        return curLoop === "*" && elem.nodeType === 1 || !!elem.nodeName && elem.nodeName.toLowerCase() === curLoop;
      },
      /**
       * @param {Node} elem
       * @param {string} match
       * @return {?}
       */
      CLASS : function(elem, match) {
        return(" " + (elem.className || elem.getAttribute("class")) + " ").indexOf(match) > -1;
      },
      /**
       * @param {string} elem
       * @param {(Array|Float32Array)} match
       * @return {?}
       */
      ATTR : function(elem, match) {
        var name = match[1];
        name = Sizzle.attr ? Sizzle.attr(elem, name) : Expr.attrHandle[name] ? Expr.attrHandle[name](elem) : elem[name] != null ? elem[name] : elem.getAttribute(name);
        /** @type {string} */
        var value = name + "";
        var type = match[2];
        var check = match[4];
        return name == null ? type === "!=" : !type && Sizzle.attr ? name != null : type === "=" ? value === check : type === "*=" ? value.indexOf(check) >= 0 : type === "~=" ? (" " + value + " ").indexOf(check) >= 0 : !check ? value && name !== false : type === "!=" ? value !== check : type === "^=" ? value.indexOf(check) === 0 : type === "$=" ? value.substr(value.length - check.length) === check : type === "|=" ? value === check || value.substr(0, check.length + 1) === check + "-" : false;
      },
      /**
       * @param {?} elem
       * @param {Array} match
       * @param {?} i
       * @param {?} array
       * @return {?}
       */
      POS : function(elem, match, i, array) {
        var filter = Expr.setFilters[match[2]];
        if (filter) {
          return filter(elem, i, match, array);
        }
      }
    }
  };
  /** @type {RegExp} */
  var origPOS = Expr.match.POS;
  /**
   * @param {?} num
   * @param {string} all
   * @return {?}
   */
  var fescape = function(num, all) {
    return "\\" + (all - 0 + 1);
  };
  var type;
  for (type in Expr.match) {
    /** @type {RegExp} */
    Expr.match[type] = RegExp(Expr.match[type].source + /(?![^\[]*\])(?![^\(]*\))/.source);
    /** @type {RegExp} */
    Expr.leftMatch[type] = RegExp(/(^(?:.|\r|\n)*?)/.source + Expr.match[type].source.replace(/\\(\d+)/g, fescape));
  }
  /** @type {RegExp} */
  Expr.match.globalPOS = origPOS;
  /**
   * @param {?} array
   * @param {Array} results
   * @return {?}
   */
  var makeArray = function(array, results) {
    /** @type {Array.<?>} */
    array = Array.prototype.slice.call(array, 0);
    if (results) {
      results.push.apply(results, array);
      return results;
    }
    return array;
  };
  try {
    Array.prototype.slice.call(cycle.documentElement.childNodes, 0)[0].nodeType;
  } catch (bd) {
    /**
     * @param {?} array
     * @param {Array} results
     * @return {?}
     */
    makeArray = function(array, results) {
      /** @type {number} */
      var i = 0;
      var ret = results || [];
      if (toString.call(array) === "[object Array]") {
        Array.prototype.push.apply(ret, array);
      } else {
        if (typeof array.length === "number") {
          /** @type {number} */
          var array_length = array.length;
          for (;i < array_length;i++) {
            ret.push(array[i]);
          }
        } else {
          for (;array[i];i++) {
            ret.push(array[i]);
          }
        }
      }
      return ret;
    };
  }
  var sortOrder;
  var siblingCheck;
  if (cycle.documentElement.compareDocumentPosition) {
    /**
     * @param {HTMLElement} a
     * @param {HTMLElement} b
     * @return {?}
     */
    sortOrder = function(a, b) {
      if (a === b) {
        /** @type {boolean} */
        bulk = true;
        return 0;
      }
      return!a.compareDocumentPosition || !b.compareDocumentPosition ? a.compareDocumentPosition ? -1 : 1 : a.compareDocumentPosition(b) & 4 ? -1 : 1;
    };
  } else {
    /**
     * @param {HTMLElement} a
     * @param {HTMLElement} b
     * @return {?}
     */
    sortOrder = function(a, b) {
      if (a === b) {
        /** @type {boolean} */
        bulk = true;
        return 0;
      }
      if (a.sourceIndex && b.sourceIndex) {
        return a.sourceIndex - b.sourceIndex;
      }
      var al;
      var bl;
      /** @type {Array} */
      var ap = [];
      /** @type {Array} */
      var bp = [];
      al = a.parentNode;
      bl = b.parentNode;
      var i = al;
      if (al === bl) {
        return siblingCheck(a, b);
      }
      if (al) {
        if (!bl) {
          return 1;
        }
      } else {
        return-1;
      }
      for (;i;) {
        ap.unshift(i);
        i = i.parentNode;
      }
      i = bl;
      for (;i;) {
        bp.unshift(i);
        i = i.parentNode;
      }
      /** @type {number} */
      al = ap.length;
      /** @type {number} */
      bl = bp.length;
      /** @type {number} */
      i = 0;
      for (;i < al && i < bl;i++) {
        if (ap[i] !== bp[i]) {
          return siblingCheck(ap[i], bp[i]);
        }
      }
      return i === al ? siblingCheck(a, bp[i], -1) : siblingCheck(ap[i], b, 1);
    };
    /**
     * @param {Object} a
     * @param {Object} b
     * @param {number} expectedNumberOfNonCommentArgs
     * @return {?}
     */
    siblingCheck = function(a, b, expectedNumberOfNonCommentArgs) {
      if (a === b) {
        return expectedNumberOfNonCommentArgs;
      }
      a = a.nextSibling;
      for (;a;) {
        if (a === b) {
          return-1;
        }
        a = a.nextSibling;
      }
      return 1;
    };
  }
  /** @type {Element} */
  var form = cycle.createElement("div");
  /** @type {string} */
  var id = "script" + (new Date).getTime();
  /** @type {Element} */
  var root = cycle.documentElement;
  /** @type {string} */
  form.innerHTML = "<a name='" + id + "'/>";
  root.insertBefore(form, root.firstChild);
  if (cycle.getElementById(id)) {
    /**
     * @param {number} match
     * @param {Object} elem
     * @param {?} isXML
     * @return {?}
     */
    Expr.find.ID = function(match, elem, isXML) {
      if (typeof elem.getElementById !== "undefined" && !isXML) {
        return(elem = elem.getElementById(match[1])) ? elem.id === match[1] || typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id").nodeValue === match[1] ? [elem] : load : [];
      }
    };
    /**
     * @param {Object} elem
     * @param {?} match
     * @return {?}
     */
    Expr.filter.ID = function(elem, match) {
      var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
      return elem.nodeType === 1 && (node && node.nodeValue === match);
    };
  }
  root.removeChild(form);
  /** @type {null} */
  root = form = null;
  /** @type {Element} */
  var d = cycle.createElement("div");
  d.appendChild(cycle.createComment(""));
  if (0 < d.getElementsByTagName("*").length) {
    /**
     * @param {number} match
     * @param {Node} context
     * @return {?}
     */
    Expr.find.TAG = function(match, context) {
      var results = context.getElementsByTagName(match[1]);
      if (match[1] === "*") {
        /** @type {Array} */
        var tmp = [];
        /** @type {number} */
        var i = 0;
        for (;results[i];i++) {
          if (results[i].nodeType === 1) {
            tmp.push(results[i]);
          }
        }
        /** @type {Array} */
        results = tmp;
      }
      return results;
    };
  }
  /** @type {string} */
  d.innerHTML = "<a href='#'></a>";
  if (d.firstChild) {
    if ("undefined" !== typeof d.firstChild.getAttribute && "#" !== d.firstChild.getAttribute("href")) {
      /**
       * @param {string} type
       * @return {?}
       */
      Expr.attrHandle.href = function(type) {
        return type.getAttribute("href", 2);
      };
    }
  }
  /** @type {null} */
  d = null;
  if (cycle.querySelectorAll) {
    /** @type {function (string, Object, Object, Object): ?} */
    var oldSizzle = Sizzle;
    /** @type {Element} */
    var container = cycle.createElement("div");
    /** @type {string} */
    container.innerHTML = "<p class='TEST'></p>";
    if (!(container.querySelectorAll && 0 === container.querySelectorAll(".TEST").length)) {
      /**
       * @param {string} type
       * @param {Object} context
       * @param {Object} extra
       * @param {Object} seed
       * @return {?}
       */
      Sizzle = function(type, context, extra, seed) {
        context = context || cycle;
        if (!seed && !Sizzle.isXML(context)) {
          /** @type {(Array.<string>|null)} */
          var match = /^(\w+$)|^\.([\w\-]+$)|^#([\w\-]+$)/.exec(type);
          if (match && (context.nodeType === 1 || context.nodeType === 9)) {
            if (match[1]) {
              return makeArray(context.getElementsByTagName(type), extra);
            }
            if (match[2] && (Expr.find.CLASS && context.getElementsByClassName)) {
              return makeArray(context.getElementsByClassName(match[2]), extra);
            }
          }
          if (context.nodeType === 9) {
            if (type === "body" && context.body) {
              return makeArray([context.body], extra);
            }
            if (match && match[3]) {
              var elem = context.getElementById(match[3]);
              if (elem && elem.parentNode) {
                if (elem.id === match[3]) {
                  return makeArray([elem], extra);
                }
              } else {
                return makeArray([], extra);
              }
            }
            try {
              return makeArray(context.querySelectorAll(type), extra);
            } catch (g) {
            }
          } else {
            if (context.nodeType === 1 && context.nodeName.toLowerCase() !== "object") {
              /** @type {Object} */
              match = context;
              var nid = (elem = context.getAttribute("id")) || "__sizzle__";
              var hasParent = context.parentNode;
              /** @type {boolean} */
              var relativeHierarchySelector = /^\s*[+~]/.test(type);
              if (elem) {
                nid = nid.replace(/'/g, "\\$&");
              } else {
                context.setAttribute("id", nid);
              }
              if (relativeHierarchySelector && hasParent) {
                context = context.parentNode;
              }
              try {
                if (!relativeHierarchySelector || hasParent) {
                  return makeArray(context.querySelectorAll("[id='" + nid + "'] " + type), extra);
                }
              } catch (k) {
              } finally {
                if (!elem) {
                  match.removeAttribute("id");
                }
              }
            }
          }
        }
        return oldSizzle(type, context, extra, seed);
      };
      var prop;
      for (prop in oldSizzle) {
        Sizzle[prop] = oldSizzle[prop];
      }
      /** @type {null} */
      container = null;
    }
  }
  /** @type {Element} */
  var html = cycle.documentElement;
  /** @type {function (this:Element, string, (Node|NodeList|null)=): boolean} */
  var matches = html.matchesSelector || (html.mozMatchesSelector || (html.webkitMatchesSelector || html.msMatchesSelector));
  if (matches) {
    /** @type {boolean} */
    var wc = !matches.call(cycle.createElement("div"), "div");
    /** @type {boolean} */
    var dc = false;
    try {
      matches.call(cycle.documentElement, "[test!='']:sizzle");
    } catch (cd) {
      /** @type {boolean} */
      dc = true;
    }
    /**
     * @param {Window} elem
     * @param {string} type
     * @return {?}
     */
    Sizzle.matchesSelector = function(elem, type) {
      type = type.replace(/\=\s*([^'"\]]*)\s*\]/g, "='$1']");
      if (!Sizzle.isXML(elem)) {
        try {
          if (dc || !Expr.match.PSEUDO.test(type) && !/!=/.test(type)) {
            /** @type {boolean} */
            var q = matches.call(elem, type);
            if (q || (!wc || elem.document && elem.document.nodeType !== 11)) {
              return q;
            }
          }
        } catch (d) {
        }
      }
      return Sizzle(type, null, null, [elem]).length > 0;
    };
  }
  /** @type {Element} */
  var c = cycle.createElement("div");
  /** @type {string} */
  c.innerHTML = "<div class='test e'></div><div class='test'></div>";
  if (c.getElementsByClassName) {
    if (0 !== c.getElementsByClassName("e").length) {
      /** @type {string} */
      c.lastChild.className = "e";
      if (1 !== c.getElementsByClassName("e").length) {
        Expr.order.splice(1, 0, "CLASS");
        /**
         * @param {string} match
         * @param {Object} context
         * @param {?} isXML
         * @return {?}
         */
        Expr.find.CLASS = function(match, context, isXML) {
          if (typeof context.getElementsByClassName !== "undefined" && !isXML) {
            return context.getElementsByClassName(match[1]);
          }
        };
        /** @type {null} */
        c = null;
      }
    }
  }
  /** @type {Function} */
  Sizzle.contains = cycle.documentElement.contains ? function(a, b) {
    return a !== b && (a.contains ? a.contains(b) : true);
  } : cycle.documentElement.compareDocumentPosition ? function(a, b) {
    return!!(a.compareDocumentPosition(b) & 16);
  } : function() {
    return false;
  };
  /**
   * @param {Object} elem
   * @return {?}
   */
  Sizzle.isXML = function(elem) {
    return(elem = (elem ? elem.ownerDocument || elem : 0).documentElement) ? elem.nodeName !== "HTML" : false;
  };
  /**
   * @param {string} selector
   * @param {Object} context
   * @param {Object} seed
   * @return {?}
   */
  var posProcess = function(selector, context, seed) {
    var i;
    /** @type {Array} */
    var optgroup = [];
    /** @type {string} */
    var cycle = "";
    context = context.nodeType ? [context] : context;
    for (;i = Expr.match.PSEUDO.exec(selector);) {
      /** @type {string} */
      cycle = cycle + i[0];
      selector = selector.replace(Expr.match.PSEUDO, "");
    }
    selector = Expr.relative[selector] ? selector + "*" : selector;
    /** @type {number} */
    i = 0;
    var j = context.length;
    for (;i < j;i++) {
      Sizzle(selector, context[i], optgroup, seed);
    }
    return Sizzle.filter(cycle, optgroup);
  };
  Sizzle.attr = jQuery.attr;
  Sizzle.selectors.attrMap = {};
  /** @type {function (string, Object, Object, Object): ?} */
  jQuery.find = Sizzle;
  jQuery.expr = Sizzle.selectors;
  jQuery.expr[":"] = jQuery.expr.filters;
  /** @type {function (Array): ?} */
  jQuery.unique = Sizzle.uniqueSort;
  /** @type {function (string): ?} */
  jQuery.text = Sizzle.getText;
  /** @type {function (Object): ?} */
  jQuery.isXMLDoc = Sizzle.isXML;
  /** @type {Function} */
  jQuery.contains = Sizzle.contains;
  /** @type {RegExp} */
  var rparentsprev = /Until$/;
  /** @type {RegExp} */
  var eventSplitter = /^(?:parents|prevUntil|prevAll)/;
  /** @type {RegExp} */
  var hChars = /,/;
  /** @type {RegExp} */
  var rhtml = /^.[^:#\[\.,]*$/;
  /** @type {function (this:(Array.<T>|string|{length: number}), *=, *=): Array.<T>} */
  var ARR_SLICE = Array.prototype.slice;
  /** @type {RegExp} */
  var manipulation_rcheckableType = jQuery.expr.match.globalPOS;
  var guaranteedUnique = {
    children : true,
    contents : true,
    next : true,
    prev : true
  };
  jQuery.fn.extend({
    /**
     * @param {string} cycle
     * @return {?}
     */
    find : function(cycle) {
      var array = this;
      var i;
      var _len;
      if (typeof cycle !== "string") {
        return jQuery(cycle).filter(function() {
          /** @type {number} */
          i = 0;
          _len = array.length;
          for (;i < _len;i++) {
            if (jQuery.contains(array[i], this)) {
              return true;
            }
          }
        });
      }
      var ret = this.pushStack("", "find", cycle);
      var length;
      var n;
      var r;
      /** @type {number} */
      i = 0;
      _len = this.length;
      for (;i < _len;i++) {
        length = ret.length;
        jQuery.find(cycle, this[i], ret);
        if (i > 0) {
          n = length;
          for (;n < ret.length;n++) {
            /** @type {number} */
            r = 0;
            for (;r < length;r++) {
              if (ret[r] === ret[n]) {
                ret.splice(n--, 1);
                break;
              }
            }
          }
        }
      }
      return ret;
    },
    /**
     * @param {string} cycle
     * @return {?}
     */
    has : function(cycle) {
      var targets = jQuery(cycle);
      return this.filter(function() {
        /** @type {number} */
        var i = 0;
        var l = targets.length;
        for (;i < l;i++) {
          if (jQuery.contains(this, targets[i])) {
            return true;
          }
        }
      });
    },
    /**
     * @param {string} selector
     * @return {?}
     */
    not : function(selector) {
      return this.pushStack(winnow(this, selector, false), "not", selector);
    },
    /**
     * @param {string} type
     * @return {?}
     */
    filter : function(type) {
      return this.pushStack(winnow(this, type, true), "filter", type);
    },
    /**
     * @param {string} type
     * @return {?}
     */
    is : function(type) {
      return!!type && (typeof type === "string" ? manipulation_rcheckableType.test(type) ? jQuery(type, this.context).index(this[0]) >= 0 : jQuery.filter(type, this).length > 0 : this.filter(type).length > 0);
    },
    /**
     * @param {string} cycle
     * @param {(Document|string)} context
     * @return {?}
     */
    closest : function(cycle, context) {
      /** @type {Array} */
      var ret = [];
      var i;
      var l;
      var fix = this[0];
      if (jQuery.isArray(cycle)) {
        /** @type {number} */
        l = 1;
        for (;fix && (fix.ownerDocument && fix !== context);) {
          /** @type {number} */
          i = 0;
          for (;i < cycle.length;i++) {
            if (jQuery(fix).is(cycle[i])) {
              ret.push({
                selector : cycle[i],
                elem : fix,
                level : l
              });
            }
          }
          fix = fix.parentNode;
          l++;
        }
        return ret;
      }
      var pos = manipulation_rcheckableType.test(cycle) || typeof cycle !== "string" ? jQuery(cycle, context || this.context) : 0;
      /** @type {number} */
      i = 0;
      l = this.length;
      for (;i < l;i++) {
        fix = this[i];
        for (;fix;) {
          if (pos ? pos.index(fix) > -1 : jQuery.find.matchesSelector(fix, cycle)) {
            ret.push(fix);
            break;
          } else {
            fix = fix.parentNode;
            if (!fix || (!fix.ownerDocument || (fix === context || fix.nodeType === 11))) {
              break;
            }
          }
        }
      }
      ret = ret.length > 1 ? jQuery.unique(ret) : ret;
      return this.pushStack(ret, "closest", cycle);
    },
    /**
     * @param {string} cycle
     * @return {?}
     */
    index : function(cycle) {
      return!cycle ? this[0] && this[0].parentNode ? this.prevAll().length : -1 : typeof cycle === "string" ? jQuery.inArray(this[0], jQuery(cycle)) : jQuery.inArray(cycle.jquery ? cycle[0] : cycle, this);
    },
    /**
     * @param {string} type
     * @param {Function} name
     * @return {?}
     */
    add : function(type, name) {
      var set = typeof type === "string" ? jQuery(type, name) : jQuery.makeArray(type && type.nodeType ? [type] : type);
      var all = jQuery.merge(this.get(), set);
      return this.pushStack(!set[0] || (!set[0].parentNode || (set[0].parentNode.nodeType === 11 || (!all[0] || (!all[0].parentNode || all[0].parentNode.nodeType === 11)))) ? all : jQuery.unique(all));
    },
    /**
     * @return {?}
     */
    andSelf : function() {
      return this.add(this.prevObject);
    }
  });
  jQuery.each({
    /**
     * @param {Object} element
     * @return {?}
     */
    parent : function(element) {
      return(element = element.parentNode) && element.nodeType !== 11 ? element : null;
    },
    /**
     * @param {string} elem
     * @return {?}
     */
    parents : function(elem) {
      return jQuery.dir(elem, "parentNode");
    },
    /**
     * @param {string} elem
     * @param {?} i
     * @param {string} until
     * @return {?}
     */
    parentsUntil : function(elem, i, until) {
      return jQuery.dir(elem, "parentNode", until);
    },
    /**
     * @param {string} elem
     * @return {?}
     */
    next : function(elem) {
      return jQuery.nth(elem, 2, "nextSibling");
    },
    /**
     * @param {string} elem
     * @return {?}
     */
    prev : function(elem) {
      return jQuery.nth(elem, 2, "previousSibling");
    },
    /**
     * @param {string} elem
     * @return {?}
     */
    nextAll : function(elem) {
      return jQuery.dir(elem, "nextSibling");
    },
    /**
     * @param {string} elem
     * @return {?}
     */
    prevAll : function(elem) {
      return jQuery.dir(elem, "previousSibling");
    },
    /**
     * @param {string} elem
     * @param {?} i
     * @param {string} until
     * @return {?}
     */
    nextUntil : function(elem, i, until) {
      return jQuery.dir(elem, "nextSibling", until);
    },
    /**
     * @param {string} elem
     * @param {?} i
     * @param {string} until
     * @return {?}
     */
    prevUntil : function(elem, i, until) {
      return jQuery.dir(elem, "previousSibling", until);
    },
    /**
     * @param {Object} elem
     * @return {?}
     */
    siblings : function(elem) {
      return jQuery.sibling((elem.parentNode || {}).firstChild, elem);
    },
    /**
     * @param {string} elem
     * @return {?}
     */
    children : function(elem) {
      return jQuery.sibling(elem.firstChild);
    },
    /**
     * @param {string} cycle
     * @return {?}
     */
    contents : function(cycle) {
      return jQuery.nodeName(cycle, "iframe") ? cycle.contentDocument || cycle.contentWindow.document : jQuery.makeArray(cycle.childNodes);
    }
  }, function(name, restoreScript) {
    /**
     * @param {string} until
     * @param {string} cycle
     * @return {?}
     */
    jQuery.fn[name] = function(until, cycle) {
      var optgroup = jQuery.map(this, restoreScript, until);
      if (!rparentsprev.test(name)) {
        /** @type {string} */
        cycle = until;
      }
      if (cycle) {
        if (typeof cycle === "string") {
          optgroup = jQuery.filter(cycle, optgroup);
        }
      }
      optgroup = this.length > 1 && !guaranteedUnique[name] ? jQuery.unique(optgroup) : optgroup;
      if ((this.length > 1 || hChars.test(cycle)) && eventSplitter.test(name)) {
        optgroup = optgroup.reverse();
      }
      return this.pushStack(optgroup, name, ARR_SLICE.call(arguments).join(","));
    };
  });
  jQuery.extend({
    /**
     * @param {string} type
     * @param {Function} name
     * @param {Function} types
     * @return {?}
     */
    filter : function(type, name, types) {
      if (types) {
        /** @type {string} */
        type = ":not(" + type + ")";
      }
      return name.length === 1 ? jQuery.find.matchesSelector(name[0], type) ? [name[0]] : [] : jQuery.find.matches(type, name);
    },
    /**
     * @param {string} cycle
     * @param {string} dir
     * @param {string} fix
     * @return {?}
     */
    dir : function(cycle, dir, fix) {
      /** @type {Array} */
      var matched = [];
      cycle = cycle[dir];
      for (;cycle && (cycle.nodeType !== 9 && (fix === load || (cycle.nodeType !== 1 || !jQuery(cycle).is(fix))));) {
        if (cycle.nodeType === 1) {
          matched.push(cycle);
        }
        cycle = cycle[dir];
      }
      return matched;
    },
    /**
     * @param {Object} cur
     * @param {number} result
     * @param {string} dir
     * @return {?}
     */
    nth : function(cur, result, dir) {
      result = result || 1;
      /** @type {number} */
      var num = 0;
      for (;cur;cur = cur[dir]) {
        if (cur.nodeType === 1 && ++num === result) {
          break;
        }
      }
      return cur;
    },
    /**
     * @param {Object} n
     * @param {Object} elem
     * @return {?}
     */
    sibling : function(n, elem) {
      /** @type {Array} */
      var r = [];
      for (;n;n = n.nextSibling) {
        if (n.nodeType === 1) {
          if (n !== elem) {
            r.push(n);
          }
        }
      }
      return r;
    }
  });
  /** @type {string} */
  var uHostName = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video";
  /** @type {RegExp} */
  var newlineRe = / jQuery\d+="(?:\d+|null)"/g;
  /** @type {RegExp} */
  var rtagName = /^\s+/;
  /** @type {RegExp} */
  var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig;
  /** @type {RegExp} */
  var rplusequals = /<([\w:]+)/;
  /** @type {RegExp} */
  var rRadial = /<tbody/i;
  /** @type {RegExp} */
  var arrayRegex = /<|&#?\w+;/;
  /** @type {RegExp} */
  var rLinear = /<(?:script|style)/i;
  /** @type {RegExp} */
  var cx = /<(?:script|object|embed|option|style)/i;
  /** @type {RegExp} */
  var r = RegExp("<(?:" + uHostName + ")[\\s/>]", "i");
  /** @type {RegExp} */
  var numbers = /checked\s*(?:[^=]|=\s*.checked.)/i;
  /** @type {RegExp} */
  var rinput = /\/(java|ecma)script/i;
  /** @type {RegExp} */
  var rcleanScript = /^\s*<!(?:\[CDATA\[|\-\-)/;
  var wrapMap = {
    option : [1, "<select multiple='multiple'>", "</select>"],
    legend : [1, "<fieldset>", "</fieldset>"],
    thead : [1, "<table>", "</table>"],
    tr : [2, "<table><tbody>", "</tbody></table>"],
    td : [3, "<table><tbody><tr>", "</tr></tbody></table>"],
    col : [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
    area : [1, "<map>", "</map>"],
    _default : [0, "", ""]
  };
  var frag = create(cycle);
  /** @type {Array} */
  wrapMap.optgroup = wrapMap.option;
  /** @type {Array} */
  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
  /** @type {Array} */
  wrapMap.th = wrapMap.td;
  if (!jQuery.support.htmlSerialize) {
    /** @type {Array} */
    wrapMap._default = [1, "div<div>", "</div>"];
  }
  jQuery.fn.extend({
    /**
     * @param {string} type
     * @return {?}
     */
    text : function(type) {
      return jQuery.access(this, function(e) {
        return e === load ? jQuery.text(this) : this.empty().append((this[0] && this[0].ownerDocument || cycle).createTextNode(e));
      }, null, type, arguments.length);
    },
    /**
     * @param {string} cycle
     * @return {?}
     */
    wrapAll : function(cycle) {
      if (jQuery.isFunction(cycle)) {
        return this.each(function(i) {
          jQuery(this).wrapAll(cycle.call(this, i));
        });
      }
      if (this[0]) {
        var wrap = jQuery(cycle, this[0].ownerDocument).eq(0).clone(true);
        if (this[0].parentNode) {
          wrap.insertBefore(this[0]);
        }
        wrap.map(function() {
          var sandbox = this;
          for (;sandbox.firstChild && sandbox.firstChild.nodeType === 1;) {
            sandbox = sandbox.firstChild;
          }
          return sandbox;
        }).append(this);
      }
      return this;
    },
    /**
     * @param {string} html
     * @return {?}
     */
    wrapInner : function(html) {
      return jQuery.isFunction(html) ? this.each(function(i) {
        jQuery(this).wrapInner(html.call(this, i));
      }) : this.each(function() {
        var self = jQuery(this);
        var contents = self.contents();
        if (contents.length) {
          contents.wrapAll(html);
        } else {
          self.append(html);
        }
      });
    },
    /**
     * @param {string} html
     * @return {?}
     */
    wrap : function(html) {
      var isFunction = jQuery.isFunction(html);
      return this.each(function(i) {
        jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
      });
    },
    /**
     * @return {?}
     */
    unwrap : function() {
      return this.parent().each(function() {
        if (!jQuery.nodeName(this, "body")) {
          jQuery(this).replaceWith(this.childNodes);
        }
      }).end();
    },
    /**
     * @return {?}
     */
    append : function() {
      return this.domManip(arguments, true, function(elem) {
        if (this.nodeType === 1) {
          this.appendChild(elem);
        }
      });
    },
    /**
     * @return {?}
     */
    prepend : function() {
      return this.domManip(arguments, true, function(elem) {
        if (this.nodeType === 1) {
          this.insertBefore(elem, this.firstChild);
        }
      });
    },
    /**
     * @return {?}
     */
    before : function() {
      if (this[0] && this[0].parentNode) {
        return this.domManip(arguments, false, function(elem) {
          this.parentNode.insertBefore(elem, this);
        });
      }
      if (arguments.length) {
        var ret = jQuery.clean(arguments);
        ret.push.apply(ret, this.toArray());
        return this.pushStack(ret, "before", arguments);
      }
    },
    /**
     * @return {?}
     */
    after : function() {
      if (this[0] && this[0].parentNode) {
        return this.domManip(arguments, false, function(elem) {
          this.parentNode.insertBefore(elem, this.nextSibling);
        });
      }
      if (arguments.length) {
        var set = this.pushStack(this, "after", arguments);
        set.push.apply(set, jQuery.clean(arguments));
        return set;
      }
    },
    /**
     * @param {string} type
     * @param {Function} name
     * @return {?}
     */
    remove : function(type, name) {
      /** @type {number} */
      var unlock = 0;
      var elem;
      for (;(elem = this[unlock]) != null;unlock++) {
        if (!type || jQuery.filter(type, [elem]).length) {
          if (!name && elem.nodeType === 1) {
            jQuery.cleanData(elem.getElementsByTagName("*"));
            jQuery.cleanData([elem]);
          }
          if (elem.parentNode) {
            elem.parentNode.removeChild(elem);
          }
        }
      }
      return this;
    },
    /**
     * @return {?}
     */
    empty : function() {
      /** @type {number} */
      var currentCharacter = 0;
      var node;
      for (;(node = this[currentCharacter]) != null;currentCharacter++) {
        if (node.nodeType === 1) {
          jQuery.cleanData(node.getElementsByTagName("*"));
        }
        for (;node.firstChild;) {
          node.removeChild(node.firstChild);
        }
      }
      return this;
    },
    /**
     * @param {boolean} dataAndEvents
     * @param {boolean} deepDataAndEvents
     * @return {?}
     */
    clone : function(dataAndEvents, deepDataAndEvents) {
      dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
      deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
      return this.map(function() {
        return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
      });
    },
    /**
     * @param {string} name
     * @return {?}
     */
    html : function(name) {
      return jQuery.access(this, function(value) {
        var node = this[0] || {};
        /** @type {number} */
        var i = 0;
        var l = this.length;
        if (value === load) {
          return node.nodeType === 1 ? node.innerHTML.replace(newlineRe, "") : null;
        }
        if (typeof value === "string" && (!rLinear.test(value) && ((jQuery.support.leadingWhitespace || !rtagName.test(value)) && !wrapMap[(rplusequals.exec(value) || ["", ""])[1].toLowerCase()]))) {
          /** @type {string} */
          value = value.replace(rxhtmlTag, "<$1></$2>");
          try {
            for (;i < l;i++) {
              node = this[i] || {};
              if (node.nodeType === 1) {
                jQuery.cleanData(node.getElementsByTagName("*"));
                /** @type {string} */
                node.innerHTML = value;
              }
            }
            /** @type {number} */
            node = 0;
          } catch (f) {
          }
        }
        if (node) {
          this.empty().append(value);
        }
      }, null, name, arguments.length);
    },
    /**
     * @param {string} cycle
     * @return {?}
     */
    replaceWith : function(cycle) {
      if (this[0] && this[0].parentNode) {
        if (jQuery.isFunction(cycle)) {
          return this.each(function(i) {
            var self = jQuery(this);
            var old = self.html();
            self.replaceWith(cycle.call(this, i, old));
          });
        }
        if (typeof cycle !== "string") {
          cycle = jQuery(cycle).detach();
        }
        return this.each(function() {
          var fix = this.nextSibling;
          var ready = this.parentNode;
          jQuery(this).remove();
          if (fix) {
            jQuery(fix).before(cycle);
          } else {
            jQuery(ready).append(cycle);
          }
        });
      }
      return this.length ? this.pushStack(jQuery(jQuery.isFunction(cycle) ? cycle() : cycle), "replaceWith", cycle) : this;
    },
    /**
     * @param {string} cycle
     * @return {?}
     */
    detach : function(cycle) {
      return this.remove(cycle, true);
    },
    /**
     * @param {Object} args
     * @param {boolean} table
     * @param {Function} allowIntersection
     * @return {?}
     */
    domManip : function(args, table, allowIntersection) {
      var parent;
      var cycle;
      var node;
      var value = args[0];
      /** @type {Array} */
      var scripts = [];
      if (!jQuery.support.checkClone && (arguments.length === 3 && (typeof value === "string" && numbers.test(value)))) {
        return this.each(function() {
          jQuery(this).domManip(args, table, allowIntersection, true);
        });
      }
      if (jQuery.isFunction(value)) {
        return this.each(function(index) {
          var self = jQuery(this);
          args[0] = value.call(this, index, table ? self.html() : load);
          self.domManip(args, table, allowIntersection);
        });
      }
      if (this[0]) {
        parent = value && value.parentNode;
        parent = jQuery.support.parentNode && (parent && (parent.nodeType === 11 && parent.childNodes.length === this.length)) ? {
          fragment : parent
        } : jQuery.buildFragment(args, this, scripts);
        node = parent.fragment;
        if (cycle = node.childNodes.length === 1 ? node = node.firstChild : node.firstChild) {
          table = table && jQuery.nodeName(cycle, "tr");
          /** @type {number} */
          cycle = 0;
          var l = this.length;
          /** @type {number} */
          var lastIndex = l - 1;
          for (;cycle < l;cycle++) {
            allowIntersection.call(table ? jQuery.nodeName(this[cycle], "table") ? this[cycle].getElementsByTagName("tbody")[0] || this[cycle].appendChild(this[cycle].ownerDocument.createElement("tbody")) : this[cycle] : this[cycle], parent.cacheable || l > 1 && cycle < lastIndex ? jQuery.clone(node, true, true) : node);
          }
        }
        if (scripts.length) {
          jQuery.each(scripts, function(dataAndEvents, node) {
            if (node.src) {
              jQuery.ajax({
                type : "GET",
                global : false,
                url : node.src,
                async : false,
                dataType : "script"
              });
            } else {
              jQuery.globalEval((node.text || (node.textContent || (node.innerHTML || ""))).replace(rcleanScript, "/*$0*/"));
            }
            if (node.parentNode) {
              node.parentNode.removeChild(node);
            }
          });
        }
      }
      return this;
    }
  });
  /**
   * @param {?} elems
   * @param {Array} nodes
   * @param {Object} scripts
   * @return {?}
   */
  jQuery.buildFragment = function(elems, nodes, scripts) {
    var fragment;
    var cacheable;
    var cb;
    var restoreScript;
    var i = elems[0];
    if (nodes) {
      if (nodes[0]) {
        restoreScript = nodes[0].ownerDocument || nodes[0];
      }
    }
    if (!restoreScript.createDocumentFragment) {
      /** @type {Document} */
      restoreScript = cycle;
    }
    if (elems.length === 1 && (typeof i === "string" && (i.length < 512 && (restoreScript === cycle && (i.charAt(0) === "<" && (!cx.test(i) && ((jQuery.support.checkClone || !numbers.test(i)) && (jQuery.support.html5Clone || !r.test(i))))))))) {
      /** @type {boolean} */
      cacheable = true;
      if (cb = jQuery.fragments[i]) {
        if (cb !== 1) {
          fragment = cb;
        }
      }
    }
    if (!fragment) {
      fragment = restoreScript.createDocumentFragment();
      jQuery.clean(elems, restoreScript, fragment, scripts);
    }
    if (cacheable) {
      jQuery.fragments[i] = cb ? fragment : 1;
    }
    return{
      fragment : fragment,
      cacheable : cacheable
    };
  };
  jQuery.fragments = {};
  jQuery.each({
    appendTo : "append",
    prependTo : "prepend",
    insertBefore : "before",
    insertAfter : "after",
    replaceAll : "replaceWith"
  }, function(name, original) {
    /**
     * @param {string} cycle
     * @return {?}
     */
    jQuery.fn[name] = function(cycle) {
      /** @type {Array} */
      var ret = [];
      cycle = jQuery(cycle);
      var i = this.length === 1 && this[0].parentNode;
      if (i && (i.nodeType === 11 && (i.childNodes.length === 1 && cycle.length === 1))) {
        cycle[original](this[0]);
        return this;
      }
      /** @type {number} */
      i = 0;
      var valuesLen = cycle.length;
      for (;i < valuesLen;i++) {
        var elems = (i > 0 ? this.clone(true) : this).get();
        jQuery(cycle[i])[original](elems);
        /** @type {Array} */
        ret = ret.concat(elems);
      }
      return this.pushStack(ret, name, cycle.selector);
    };
  });
  jQuery.extend({
    /**
     * @param {Object} elem
     * @param {boolean} deepDataAndEvents
     * @param {boolean} dataAndEvents
     * @return {?}
     */
    clone : function(elem, deepDataAndEvents, dataAndEvents) {
      var div;
      var destElements;
      var i;
      if (jQuery.support.html5Clone || (jQuery.isXMLDoc(elem) || !r.test("<" + elem.nodeName + ">"))) {
        div = elem.cloneNode(true);
      } else {
        /** @type {Element} */
        div = cycle.createElement("div");
        frag.appendChild(div);
        div.innerHTML = elem.outerHTML;
        /** @type {(Node|null)} */
        div = div.firstChild;
      }
      var clone = div;
      if ((!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) && ((elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem))) {
        cloneFixAttributes(elem, clone);
        div = getAll(elem);
        destElements = getAll(clone);
        /** @type {number} */
        i = 0;
        for (;div[i];++i) {
          if (destElements[i]) {
            cloneFixAttributes(div[i], destElements[i]);
          }
        }
      }
      if (deepDataAndEvents) {
        cloneCopyEvent(elem, clone);
        if (dataAndEvents) {
          div = getAll(elem);
          destElements = getAll(clone);
          /** @type {number} */
          i = 0;
          for (;div[i];++i) {
            cloneCopyEvent(div[i], destElements[i]);
          }
        }
      }
      return clone;
    },
    /**
     * @param {Object} callback
     * @param {string} fix
     * @param {Element} fragment
     * @param {boolean} elems
     * @return {?}
     */
    clean : function(callback, fix, fragment, elems) {
      var i;
      /** @type {Array} */
      var ret = [];
      fix = fix || cycle;
      if (typeof fix.createElement === "undefined") {
        fix = fix.ownerDocument || (fix[0] && fix[0].ownerDocument || cycle);
      }
      /** @type {number} */
      var j = 0;
      var value;
      for (;(value = callback[j]) != null;j++) {
        if (typeof value === "number") {
          /** @type {string} */
          value = value + "";
        }
        if (value) {
          if (typeof value === "string") {
            if (arrayRegex.test(value)) {
              /** @type {string} */
              value = value.replace(rxhtmlTag, "<$1></$2>");
              i = (rplusequals.exec(value) || ["", ""])[1].toLowerCase();
              var a = wrapMap[i] || wrapMap._default;
              var next = a[0];
              var node = fix.createElement("div");
              var nodes = frag.childNodes;
              if (fix === cycle) {
                frag.appendChild(node);
              } else {
                create(fix).appendChild(node);
              }
              node.innerHTML = a[1] + value + a[2];
              for (;next--;) {
                node = node.lastChild;
              }
              if (!jQuery.support.tbody) {
                /** @type {boolean} */
                next = rRadial.test(value);
                a = i === "table" && !next ? node.firstChild && node.firstChild.childNodes : a[1] === "<table>" && !next ? node.childNodes : [];
                /** @type {number} */
                i = a.length - 1;
                for (;i >= 0;--i) {
                  if (jQuery.nodeName(a[i], "tbody")) {
                    if (!a[i].childNodes.length) {
                      a[i].parentNode.removeChild(a[i]);
                    }
                  }
                }
              }
              if (!jQuery.support.leadingWhitespace) {
                if (rtagName.test(value)) {
                  node.insertBefore(fix.createTextNode(rtagName.exec(value)[0]), node.firstChild);
                }
              }
              value = node.childNodes;
              if (node) {
                node.parentNode.removeChild(node);
                if (nodes.length > 0) {
                  if (node = nodes[nodes.length - 1]) {
                    if (node.parentNode) {
                      node.parentNode.removeChild(node);
                    }
                  }
                }
              }
            } else {
              value = fix.createTextNode(value);
            }
          }
          var ln;
          if (!jQuery.support.appendChecked) {
            if (value[0] && typeof(ln = value.length) === "number") {
              /** @type {number} */
              i = 0;
              for (;i < ln;i++) {
                update(value[i]);
              }
            } else {
              update(value);
            }
          }
          if (value.nodeType) {
            ret.push(value);
          } else {
            ret = jQuery.merge(ret, value);
          }
        }
      }
      if (fragment) {
        /**
         * @param {Event} el
         * @return {?}
         */
        callback = function(el) {
          return!el.type || rinput.test(el.type);
        };
        /** @type {number} */
        j = 0;
        for (;ret[j];j++) {
          fix = ret[j];
          if (elems && (jQuery.nodeName(fix, "script") && (!fix.type || rinput.test(fix.type)))) {
            elems.push(fix.parentNode ? fix.parentNode.removeChild(fix) : fix);
          } else {
            if (fix.nodeType === 1) {
              value = jQuery.grep(fix.getElementsByTagName("script"), callback);
              ret.splice.apply(ret, [j + 1, 0].concat(value));
            }
            fragment.appendChild(fix);
          }
        }
      }
      return ret;
    },
    /**
     * @param {Array} elems
     * @return {undefined}
     */
    cleanData : function(elems) {
      var data;
      var prop;
      var cache = jQuery.cache;
      var special = jQuery.event.special;
      var deleteExpando = jQuery.support.deleteExpando;
      /** @type {number} */
      var name = 0;
      var cycle;
      for (;(cycle = elems[name]) != null;name++) {
        if (!cycle.nodeName || !jQuery.noData[cycle.nodeName.toLowerCase()]) {
          if (prop = cycle[jQuery.expando]) {
            if ((data = cache[prop]) && data.events) {
              var optgroup;
              for (optgroup in data.events) {
                if (special[optgroup]) {
                  jQuery.event.remove(cycle, optgroup);
                } else {
                  jQuery.removeEvent(cycle, optgroup, data.handle);
                }
              }
              if (data.handle) {
                /** @type {null} */
                data.handle.elem = null;
              }
            }
            if (deleteExpando) {
              delete cycle[jQuery.expando];
            } else {
              if (cycle.removeAttribute) {
                cycle.removeAttribute(jQuery.expando);
              }
            }
            delete cache[prop];
          }
        }
      }
    }
  });
  /** @type {RegExp} */
  var ralpha = /alpha\([^)]*\)/i;
  /** @type {RegExp} */
  var stopParent = /opacity=([^)]*)/;
  /** @type {RegExp} */
  var badChars = /([A-Z]|^ms)/g;
  /** @type {RegExp} */
  var mouseTypeRegex = /^[\-+]?(?:\d*\.)?\d+$/i;
  /** @type {RegExp} */
  var exclude = /^-?(?:\d*\.)?\d+(?!px)[^\d\s]+$/i;
  /** @type {RegExp} */
  var db = /^([\-+])=([\-+.\de]+)/;
  /** @type {RegExp} */
  var rneedsContext = /^margin/;
  var props = {
    position : "absolute",
    visibility : "hidden",
    display : "block"
  };
  /** @type {Array} */
  var cssExpand = ["Top", "Right", "Bottom", "Left"];
  var curCSS;
  var getComputedStyle;
  var currentStyle;
  /**
   * @param {string} name
   * @param {string} value
   * @return {?}
   */
  jQuery.fn.css = function(name, value) {
    return jQuery.access(this, function(cycle, optgroup, ready) {
      return ready !== load ? jQuery.style(cycle, optgroup, ready) : jQuery.css(cycle, optgroup);
    }, name, value, arguments.length > 1);
  };
  jQuery.extend({
    cssHooks : {
      opacity : {
        /**
         * @param {string} name
         * @param {boolean} fn
         * @return {?}
         */
        get : function(name, fn) {
          if (fn) {
            var ret = curCSS(name, "opacity");
            return ret === "" ? "1" : ret;
          }
          return name.style.opacity;
        }
      }
    },
    cssNumber : {
      fillOpacity : true,
      fontWeight : true,
      lineHeight : true,
      opacity : true,
      orphans : true,
      widows : true,
      zIndex : true,
      zoom : true
    },
    cssProps : {
      "float" : jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
    },
    /**
     * @param {string} type
     * @param {Function} name
     * @param {Function} types
     * @param {string} keepData
     * @return {?}
     */
    style : function(type, name, types, keepData) {
      if (type && !(type.nodeType === 3 || (type.nodeType === 8 || !type.style))) {
        var ret;
        var origName = jQuery.camelCase(name);
        var elem = type.style;
        var hooks = jQuery.cssHooks[origName];
        name = jQuery.cssProps[origName] || origName;
        if (types !== load) {
          /** @type {string} */
          keepData = typeof types;
          if (keepData === "string" && (ret = db.exec(types))) {
            /** @type {number} */
            types = +(ret[1] + 1) * +ret[2] + parseFloat(jQuery.css(type, name));
            /** @type {string} */
            keepData = "number";
          }
          if (!(types == null || keepData === "number" && isNaN(types))) {
            if (keepData === "number") {
              if (!jQuery.cssNumber[origName]) {
                /** @type {string} */
                types = types + "px";
              }
            }
            if (!hooks || (!("set" in hooks) || (types = hooks.set(type, types)) !== load)) {
              try {
                /** @type {Function} */
                elem[name] = types;
              } catch (r) {
              }
            }
          }
        } else {
          return hooks && ("get" in hooks && (ret = hooks.get(type, false, keepData)) !== load) ? ret : elem[name];
        }
      }
    },
    /**
     * @param {string} name
     * @param {string} value
     * @param {string} element
     * @return {?}
     */
    css : function(name, value, element) {
      var ret;
      var result;
      value = jQuery.camelCase(value);
      result = jQuery.cssHooks[value];
      value = jQuery.cssProps[value] || value;
      if (value === "cssFloat") {
        /** @type {string} */
        value = "float";
      }
      if (result && ("get" in result && (ret = result.get(name, true, element)) !== load)) {
        return ret;
      }
      if (curCSS) {
        return curCSS(name, value);
      }
    },
    /**
     * @param {Element} elem
     * @param {Object} options
     * @param {Function} ret
     * @return {?}
     */
    swap : function(elem, options, ret) {
      var old = {};
      var name;
      for (name in options) {
        old[name] = elem.style[name];
        elem.style[name] = options[name];
      }
      ret = ret.call(elem);
      for (name in options) {
        elem.style[name] = old[name];
      }
      return ret;
    }
  });
  jQuery.curCSS = jQuery.css;
  if (cycle.defaultView) {
    if (cycle.defaultView.getComputedStyle) {
      /**
       * @param {string} cycle
       * @param {Function} optgroup
       * @return {?}
       */
      getComputedStyle = function(cycle, optgroup) {
        var val;
        var w;
        var computedStyle;
        var style = cycle.style;
        optgroup = optgroup.replace(badChars, "-$1").toLowerCase();
        if ((w = cycle.ownerDocument.defaultView) && (computedStyle = w.getComputedStyle(cycle, null))) {
          val = computedStyle.getPropertyValue(optgroup);
          if (val === "") {
            if (!jQuery.contains(cycle.ownerDocument.documentElement, cycle)) {
              val = jQuery.style(cycle, optgroup);
            }
          }
        }
        if (!jQuery.support.pixelMargin && (computedStyle && (rneedsContext.test(optgroup) && exclude.test(val)))) {
          w = style.width;
          style.width = val;
          val = computedStyle.width;
          style.width = w;
        }
        return val;
      };
    }
  }
  if (cycle.documentElement.currentStyle) {
    /**
     * @param {Element} elem
     * @param {string} name
     * @return {?}
     */
    currentStyle = function(elem, name) {
      var value;
      var w;
      var ret = elem.currentStyle && elem.currentStyle[name];
      var style = elem.style;
      if (ret == null && (style && (value = style[name]))) {
        ret = value;
      }
      if (exclude.test(ret)) {
        value = style.left;
        if (w = elem.runtimeStyle && elem.runtimeStyle.left) {
          elem.runtimeStyle.left = elem.currentStyle.left;
        }
        style.left = name === "fontSize" ? "1em" : ret;
        /** @type {string} */
        ret = style.pixelLeft + "px";
        style.left = value;
        if (w) {
          elem.runtimeStyle.left = w;
        }
      }
      return ret === "" ? "auto" : ret;
    };
  }
  /** @type {(function (Element, string): ?|undefined)} */
  curCSS = getComputedStyle || currentStyle;
  jQuery.each(["height", "width"], function(dataAndEvents, property) {
    jQuery.cssHooks[property] = {
      /**
       * @param {string} name
       * @param {boolean} fn
       * @param {string} extra
       * @return {?}
       */
      get : function(name, fn, extra) {
        if (fn) {
          return name.offsetWidth !== 0 ? getWidthOrHeight(name, property, extra) : jQuery.swap(name, props, function() {
            return getWidthOrHeight(name, property, extra);
          });
        }
      },
      /**
       * @param {string} opt_attributes
       * @param {string} type
       * @return {?}
       */
      set : function(opt_attributes, type) {
        return mouseTypeRegex.test(type) ? type + "px" : type;
      }
    };
  });
  if (!jQuery.support.opacity) {
    jQuery.cssHooks.opacity = {
      /**
       * @param {string} name
       * @param {boolean} computed
       * @return {?}
       */
      get : function(name, computed) {
        return stopParent.test((computed && name.currentStyle ? name.currentStyle.filter : name.style.filter) || "") ? parseFloat(RegExp.$1) / 100 + "" : computed ? "1" : "";
      },
      /**
       * @param {string} opt_attributes
       * @param {string} type
       * @return {undefined}
       */
      set : function(opt_attributes, type) {
        var elemStyle = opt_attributes.style;
        var currentStyle = opt_attributes.currentStyle;
        /** @type {string} */
        var opacity = jQuery.isNumeric(type) ? "alpha(opacity=" + type * 100 + ")" : "";
        var filter = currentStyle && currentStyle.filter || (elemStyle.filter || "");
        /** @type {number} */
        elemStyle.zoom = 1;
        if (type >= 1 && jQuery.trim(filter.replace(ralpha, "")) === "") {
          elemStyle.removeAttribute("filter");
          if (currentStyle && !currentStyle.filter) {
            return;
          }
        }
        elemStyle.filter = ralpha.test(filter) ? filter.replace(ralpha, opacity) : filter + " " + opacity;
      }
    };
  }
  jQuery(function() {
    if (!jQuery.support.reliableMarginRight) {
      jQuery.cssHooks.marginRight = {
        /**
         * @param {string} name
         * @param {boolean} fn
         * @return {?}
         */
        get : function(name, fn) {
          return jQuery.swap(name, {
            display : "inline-block"
          }, function() {
            return fn ? curCSS(name, "margin-right") : name.style.marginRight;
          });
        }
      };
    }
  });
  if (jQuery.expr) {
    if (jQuery.expr.filters) {
      /**
       * @param {string} type
       * @return {?}
       */
      jQuery.expr.filters.hidden = function(type) {
        var docHeight = type.offsetHeight;
        return type.offsetWidth === 0 && docHeight === 0 || !jQuery.support.reliableHiddenOffsets && (type.style && type.style.display || jQuery.css(type, "display")) === "none";
      };
      /**
       * @param {string} type
       * @return {?}
       */
      jQuery.expr.filters.visible = function(type) {
        return!jQuery.expr.filters.hidden(type);
      };
    }
  }
  jQuery.each({
    margin : "",
    padding : "",
    border : "Width"
  }, function(prefix, suffix) {
    jQuery.cssHooks[prefix + suffix] = {
      /**
       * @param {number} i
       * @return {?}
       */
      expand : function(i) {
        /** @type {Array} */
        var tokens = typeof i === "string" ? i.split(" ") : [i];
        var expanded = {};
        /** @type {number} */
        i = 0;
        for (;i < 4;i++) {
          expanded[prefix + cssExpand[i] + suffix] = tokens[i] || (tokens[i - 2] || tokens[0]);
        }
        return expanded;
      }
    };
  });
  /** @type {RegExp} */
  var rLt = /%20/g;
  /** @type {RegExp} */
  var rbracket = /\[\]$/;
  /** @type {RegExp} */
  var rCRLF = /\r?\n/g;
  /** @type {RegExp} */
  var trimLeft = /#.*$/;
  /** @type {RegExp} */
  var re = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg;
  /** @type {RegExp} */
  var supportedTransforms = /^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i;
  /** @type {RegExp} */
  var rnoContent = /^(?:GET|HEAD)$/;
  /** @type {RegExp} */
  var rprotocol = /^\/\//;
  /** @type {RegExp} */
  var rquery = /\?/;
  /** @type {RegExp} */
  var rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi;
  /** @type {RegExp} */
  var rsubmittable = /^(?:select|textarea)/i;
  /** @type {RegExp} */
  var rspacesAjax = /\s+/;
  /** @type {RegExp} */
  var CR = /([?&])_=[^&]*/;
  /** @type {RegExp} */
  var reName = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/;
  var _load = jQuery.fn.load;
  var prefilters = {};
  var transports = {};
  var ajaxLocation;
  var match;
  /** @type {(number|string)} */
  var rc = ["*/"] + ["*"];
  try {
    /** @type {string} */
    ajaxLocation = location.href;
  } catch (dd) {
    /** @type {Element} */
    ajaxLocation = cycle.createElement("a");
    /** @type {string} */
    ajaxLocation.href = "";
    /** @type {string} */
    ajaxLocation = ajaxLocation.href;
  }
  /** @type {Array} */
  match = reName.exec(ajaxLocation.toLowerCase()) || [];
  jQuery.fn.extend({
    /**
     * @param {Object} url
     * @param {Object} a
     * @param {Object} attributes
     * @return {?}
     */
    load : function(url, a, attributes) {
      if (typeof url !== "string" && _load) {
        return _load.apply(this, arguments);
      }
      if (!this.length) {
        return this;
      }
      var off = url.indexOf(" ");
      if (off >= 0) {
        var selector = url.slice(off, url.length);
        url = url.slice(0, off);
      }
      /** @type {string} */
      off = "GET";
      if (a) {
        if (jQuery.isFunction(a)) {
          /** @type {Object} */
          attributes = a;
          /** @type {Object} */
          a = load;
        } else {
          if (typeof a === "object") {
            a = jQuery.param(a, jQuery.ajaxSettings.traditional);
            /** @type {string} */
            off = "POST";
          }
        }
      }
      var self = this;
      jQuery.ajax({
        url : url,
        type : off,
        dataType : "html",
        data : a,
        /**
         * @param {string} type
         * @param {Function} name
         * @param {Function} types
         * @return {undefined}
         */
        complete : function(type, name, types) {
          types = type.responseText;
          if (type.isResolved()) {
            type.done(function(type) {
              /** @type {Function} */
              types = type;
            });
            self.html(selector ? jQuery("<div>").append(types.replace(rscript, "")).find(selector) : types);
          }
          if (attributes) {
            self.each(attributes, [types, name, type]);
          }
        }
      });
      return this;
    },
    /**
     * @return {?}
     */
    serialize : function() {
      return jQuery.param(this.serializeArray());
    },
    /**
     * @return {?}
     */
    serializeArray : function() {
      return this.map(function() {
        return this.elements ? jQuery.makeArray(this.elements) : this;
      }).filter(function() {
        return this.name && (!this.disabled && (this.checked || (rsubmittable.test(this.nodeName) || supportedTransforms.test(this.type))));
      }).map(function(dataAndEvents, elem) {
        var val = jQuery(this).val();
        return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function(val) {
          return{
            name : elem.name,
            value : val.replace(rCRLF, "\r\n")
          };
        }) : {
          name : elem.name,
          value : val.replace(rCRLF, "\r\n")
        };
      }).get();
    }
  });
  jQuery.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "), function(dataAndEvents, cycle) {
    /**
     * @param {Function} optgroup
     * @return {?}
     */
    jQuery.fn[cycle] = function(optgroup) {
      return this.on(cycle, optgroup);
    };
  });
  jQuery.each(["get", "post"], function(dataAndEvents, method) {
    /**
     * @param {string} requestUrl
     * @param {Object} html
     * @param {Object} success
     * @param {boolean} dataType
     * @return {?}
     */
    jQuery[method] = function(requestUrl, html, success, dataType) {
      if (jQuery.isFunction(html)) {
        dataType = dataType || success;
        /** @type {Object} */
        success = html;
        /** @type {Object} */
        html = load;
      }
      return jQuery.ajax({
        type : method,
        url : requestUrl,
        data : html,
        success : success,
        dataType : dataType
      });
    };
  });
  jQuery.extend({
    /**
     * @param {string} optgroup
     * @param {Function} callback
     * @return {?}
     */
    getScript : function(optgroup, callback) {
      return jQuery.get(optgroup, load, callback, "script");
    },
    /**
     * @param {string} optgroup
     * @param {boolean} name
     * @param {string} callback
     * @return {?}
     */
    getJSON : function(optgroup, name, callback) {
      return jQuery.get(optgroup, name, callback, "json");
    },
    /**
     * @param {Object} target
     * @param {Object} settings
     * @return {?}
     */
    ajaxSetup : function(target, settings) {
      if (settings) {
        ajaxExtend(target, jQuery.ajaxSettings);
      } else {
        /** @type {Object} */
        settings = target;
        target = jQuery.ajaxSettings;
      }
      ajaxExtend(target, settings);
      return target;
    },
    ajaxSettings : {
      url : ajaxLocation,
      isLocal : /^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/.test(match[1]),
      global : true,
      type : "GET",
      contentType : "application/x-www-form-urlencoded; charset=UTF-8",
      processData : true,
      async : true,
      accepts : {
        xml : "application/xml, text/xml",
        html : "text/html",
        text : "text/plain",
        json : "application/json, text/javascript",
        "*" : rc
      },
      contents : {
        xml : /xml/,
        html : /html/,
        json : /json/
      },
      responseFields : {
        xml : "responseXML",
        text : "responseText"
      },
      converters : {
        "* text" : fix.String,
        "text html" : true,
        "text json" : jQuery.parseJSON,
        "text xml" : jQuery.parseXML
      },
      flatOptions : {
        context : true,
        url : true
      }
    },
    ajaxPrefilter : addToPrefiltersOrTransports(prefilters),
    ajaxTransport : addToPrefiltersOrTransports(transports),
    /**
     * @param {string} type
     * @param {Function} name
     * @return {?}
     */
    ajax : function(type, name) {
      /**
       * @param {number} status
       * @param {string} nativeStatusText
       * @param {string} fix
       * @param {string} statusText
       * @return {undefined}
       */
      function done(status, nativeStatusText, fix, statusText) {
        if (tagName !== 2) {
          /** @type {number} */
          tagName = 2;
          if (tref) {
            clearTimeout(tref);
          }
          /** @type {Object} */
          transport = load;
          value = statusText || "";
          /** @type {number} */
          jqXHR.readyState = status > 0 ? 4 : 0;
          var isSuccess;
          var success;
          var error;
          /** @type {string} */
          statusText = nativeStatusText;
          if (fix) {
            var options = s;
            var req = jqXHR;
            var contents = options.contents;
            var events = options.dataTypes;
            var path = options.responseFields;
            var e;
            var i;
            var type;
            var fx;
            for (i in path) {
              if (i in fix) {
                req[path[i]] = fix[i];
              }
            }
            for (;events[0] === "*";) {
              events.shift();
              if (e === load) {
                e = options.mimeType || req.getResponseHeader("content-type");
              }
            }
            if (e) {
              for (i in contents) {
                if (contents[i] && contents[i].test(e)) {
                  events.unshift(i);
                  break;
                }
              }
            }
            if (events[0] in fix) {
              type = events[0];
            } else {
              for (i in fix) {
                if (!events[0] || options.converters[i + " " + events[0]]) {
                  /** @type {string} */
                  type = i;
                  break;
                }
                if (!fx) {
                  /** @type {string} */
                  fx = i;
                }
              }
              /** @type {(string|undefined)} */
              type = type || fx;
            }
            if (type) {
              if (type !== events[0]) {
                events.unshift(type);
              }
              fix = fix[type];
            } else {
              fix = void 0;
            }
          } else {
            /** @type {Object} */
            fix = load;
          }
          if (status >= 200 && status < 300 || status === 304) {
            if (s.ifModified) {
              if (e = jqXHR.getResponseHeader("Last-Modified")) {
                jQuery.lastModified[ifModifiedKey] = e;
              }
              if (e = jqXHR.getResponseHeader("Etag")) {
                jQuery.etag[ifModifiedKey] = e;
              }
            }
            if (status === 304) {
              /** @type {string} */
              statusText = "notmodified";
              /** @type {boolean} */
              isSuccess = true;
            } else {
              try {
                e = s;
                if (e.dataFilter) {
                  fix = e.dataFilter(fix, e.dataType);
                }
                var points = e.dataTypes;
                i = {};
                var j;
                var key;
                var jj = points.length;
                var el;
                var b = points[0];
                var a;
                var c;
                var callback;
                var d;
                var close;
                /** @type {number} */
                j = 1;
                for (;j < jj;j++) {
                  if (j === 1) {
                    for (key in e.converters) {
                      if (typeof key === "string") {
                        i[key.toLowerCase()] = e.converters[key];
                      }
                    }
                  }
                  a = b;
                  b = points[j];
                  if (b === "*") {
                    b = a;
                  } else {
                    if (a !== "*" && a !== b) {
                      /** @type {string} */
                      c = a + " " + b;
                      callback = i[c] || i["* " + b];
                      if (!callback) {
                        /** @type {Object} */
                        close = load;
                        for (d in i) {
                          /** @type {Array.<string>} */
                          el = d.split(" ");
                          if (el[0] === a || el[0] === "*") {
                            if (close = i[el[1] + " " + b]) {
                              d = i[d];
                              if (d === true) {
                                callback = close;
                              } else {
                                if (close === true) {
                                  callback = d;
                                }
                              }
                              break;
                            }
                          }
                        }
                      }
                      if (!callback) {
                        if (!close) {
                          jQuery.error("No conversion from " + c.replace(" ", " to "));
                        }
                      }
                      if (callback !== true) {
                        fix = callback ? callback(fix) : close(d(fix));
                      }
                    }
                  }
                }
                /** @type {string} */
                success = fix;
                /** @type {string} */
                statusText = "success";
                /** @type {boolean} */
                isSuccess = true;
              } catch (err) {
                /** @type {string} */
                statusText = "parsererror";
                error = err;
              }
            }
          } else {
            /** @type {string} */
            error = statusText;
            if (!statusText || status) {
              /** @type {string} */
              statusText = "error";
              if (status < 0) {
                /** @type {number} */
                status = 0;
              }
            }
          }
          /** @type {number} */
          jqXHR.status = status;
          /** @type {string} */
          jqXHR.statusText = "" + (nativeStatusText || statusText);
          if (isSuccess) {
            deferred.resolveWith(cycle, [success, statusText, jqXHR]);
          } else {
            deferred.rejectWith(cycle, [jqXHR, statusText, error]);
          }
          jqXHR.statusCode(ready);
          /** @type {Object} */
          ready = load;
          if (g) {
            globalEventContext.trigger("ajax" + (isSuccess ? "Success" : "Error"), [jqXHR, s, isSuccess ? success : error]);
          }
          completeDeferred.fireWith(cycle, [jqXHR, statusText]);
          if (g) {
            globalEventContext.trigger("ajaxComplete", [jqXHR, s]);
            if (!--jQuery.active) {
              jQuery.event.trigger("ajaxStop");
            }
          }
        }
      }
      if (typeof type === "object") {
        /** @type {string} */
        name = type;
        /** @type {Object} */
        type = load;
      }
      name = name || {};
      var s = jQuery.ajaxSetup({}, name);
      var cycle = s.context || s;
      var globalEventContext = cycle !== s && (cycle.nodeType || cycle instanceof jQuery) ? jQuery(cycle) : jQuery.event;
      var deferred = jQuery.Deferred();
      var completeDeferred = jQuery.Callbacks("once memory");
      var ready = s.statusCode || {};
      var ifModifiedKey;
      var requestHeaders = {};
      var requestHeadersNames = {};
      var value;
      var target;
      var transport;
      var tref;
      var ts;
      /** @type {number} */
      var tagName = 0;
      var g;
      var i;
      var jqXHR = {
        readyState : 0,
        /**
         * @param {string} name
         * @param {?} value
         * @return {?}
         */
        setRequestHeader : function(name, value) {
          if (!tagName) {
            var lname = name.toLowerCase();
            name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
            requestHeaders[name] = value;
          }
          return this;
        },
        /**
         * @return {?}
         */
        getAllResponseHeaders : function() {
          return tagName === 2 ? value : null;
        },
        /**
         * @param {string} key
         * @return {?}
         */
        getResponseHeader : function(key) {
          var src;
          if (tagName === 2) {
            if (!target) {
              target = {};
              for (;src = re.exec(value);) {
                /** @type {string} */
                target[src[1].toLowerCase()] = src[2];
              }
            }
            src = target[key.toLowerCase()];
          }
          return src === load ? null : src;
        },
        /**
         * @param {?} type
         * @return {?}
         */
        overrideMimeType : function(type) {
          if (!tagName) {
            s.mimeType = type;
          }
          return this;
        },
        /**
         * @param {string} statusText
         * @return {?}
         */
        abort : function(statusText) {
          statusText = statusText || "abort";
          if (transport) {
            transport.abort(statusText);
          }
          done(0, statusText);
          return this;
        }
      };
      deferred.promise(jqXHR);
      jqXHR.success = jqXHR.done;
      jqXHR.error = jqXHR.fail;
      jqXHR.complete = completeDeferred.add;
      /**
       * @param {string} type
       * @return {?}
       */
      jqXHR.statusCode = function(type) {
        if (type) {
          var tmp;
          if (tagName < 2) {
            for (tmp in type) {
              /** @type {Array} */
              ready[tmp] = [ready[tmp], type[tmp]];
            }
          } else {
            tmp = type[jqXHR.status];
            jqXHR.then(tmp, tmp);
          }
        }
        return this;
      };
      /** @type {string} */
      s.url = ((type || s.url) + "").replace(trimLeft, "").replace(rprotocol, match[1] + "//");
      s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().split(rspacesAjax);
      if (s.crossDomain == null) {
        /** @type {(Array.<string>|null)} */
        ts = reName.exec(s.url.toLowerCase());
        /** @type {boolean} */
        s.crossDomain = !(!ts || !(ts[1] != match[1] || (ts[2] != match[2] || (ts[3] || (ts[1] === "http:" ? 80 : 443)) != (match[3] || (match[1] === "http:" ? 80 : 443)))));
      }
      if (s.data && (s.processData && typeof s.data !== "string")) {
        s.data = jQuery.param(s.data, s.traditional);
      }
      inspectPrefiltersOrTransports(prefilters, s, name, jqXHR);
      if (tagName === 2) {
        return false;
      }
      g = s.global;
      s.type = s.type.toUpperCase();
      /** @type {boolean} */
      s.hasContent = !rnoContent.test(s.type);
      if (g) {
        if (jQuery.active++ === 0) {
          jQuery.event.trigger("ajaxStart");
        }
      }
      if (!s.hasContent) {
        if (s.data) {
          /** @type {string} */
          s.url = s.url + ((rquery.test(s.url) ? "&" : "?") + s.data);
          delete s.data;
        }
        /** @type {string} */
        ifModifiedKey = s.url;
        if (s.cache === false) {
          ts = jQuery.now();
          /** @type {string} */
          var ret = s.url.replace(CR, "$1_=" + ts);
          /** @type {string} */
          s.url = ret + (ret === s.url ? (rquery.test(s.url) ? "&" : "?") + "_=" + ts : "");
        }
      }
      if (s.data && (s.hasContent && s.contentType !== false) || name.contentType) {
        jqXHR.setRequestHeader("Content-Type", s.contentType);
      }
      if (s.ifModified) {
        /** @type {string} */
        ifModifiedKey = ifModifiedKey || s.url;
        if (jQuery.lastModified[ifModifiedKey]) {
          jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[ifModifiedKey]);
        }
        if (jQuery.etag[ifModifiedKey]) {
          jqXHR.setRequestHeader("If-None-Match", jQuery.etag[ifModifiedKey]);
        }
      }
      jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + rc + "; q=0.01" : "") : s.accepts["*"]);
      for (i in s.headers) {
        jqXHR.setRequestHeader(i, s.headers[i]);
      }
      if (s.beforeSend && (s.beforeSend.call(cycle, jqXHR, s) === false || tagName === 2)) {
        jqXHR.abort();
        return false;
      }
      for (i in{
        success : 1,
        error : 1,
        complete : 1
      }) {
        jqXHR[i](s[i]);
      }
      if (transport = inspectPrefiltersOrTransports(transports, s, name, jqXHR)) {
        /** @type {number} */
        jqXHR.readyState = 1;
        if (g) {
          globalEventContext.trigger("ajaxSend", [jqXHR, s]);
        }
        if (s.async) {
          if (s.timeout > 0) {
            /** @type {number} */
            tref = setTimeout(function() {
              jqXHR.abort("timeout");
            }, s.timeout);
          }
        }
        try {
          /** @type {number} */
          tagName = 1;
          transport.send(requestHeaders, done);
        } catch (e) {
          if (tagName < 2) {
            done(-1, e);
          } else {
            throw e;
          }
        }
      } else {
        done(-1, "No Transport");
      }
      return jqXHR;
    },
    /**
     * @param {Object} a
     * @param {boolean} traditional
     * @return {?}
     */
    param : function(a, traditional) {
      /** @type {Array} */
      var klass = [];
      /**
       * @param {?} key
       * @param {Text} value
       * @return {undefined}
       */
      var add = function(key, value) {
        value = jQuery.isFunction(value) ? value() : value;
        /** @type {string} */
        klass[klass.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
      };
      if (traditional === load) {
        traditional = jQuery.ajaxSettings.traditional;
      }
      if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
        jQuery.each(a, function() {
          add(this.name, this.value);
        });
      } else {
        var prefix;
        for (prefix in a) {
          buildParams(prefix, a[prefix], traditional, add);
        }
      }
      return klass.join("&").replace(rLt, "+");
    }
  });
  jQuery.extend({
    active : 0,
    lastModified : {},
    etag : {}
  });
  var iIdCounter = jQuery.now();
  /** @type {RegExp} */
  var jsre = /(\=)\?(&|$)|\?\?/i;
  jQuery.ajaxSetup({
    jsonp : "callback",
    /**
     * @return {?}
     */
    jsonpCallback : function() {
      return jQuery.expando + "_" + iIdCounter++;
    }
  });
  jQuery.ajaxPrefilter("json jsonp", function(s, dataAndEvents, jqXHR) {
    /** @type {boolean} */
    dataAndEvents = typeof s.data === "string" && /^application\/x\-www\-form\-urlencoded/.test(s.contentType);
    if (s.dataTypes[0] === "jsonp" || s.jsonp !== false && (jsre.test(s.url) || dataAndEvents && jsre.test(s.data))) {
      var responseContainer;
      var jsonpCallback = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
      var previous = fix[jsonpCallback];
      var url = s.url;
      var data = s.data;
      /** @type {string} */
      var replace = "$1" + jsonpCallback + "$2";
      if (s.jsonp !== false) {
        url = url.replace(jsre, replace);
        if (s.url === url) {
          if (dataAndEvents) {
            data = data.replace(jsre, replace);
          }
          if (s.data === data) {
            /** @type {string} */
            url = url + ((/\?/.test(url) ? "&" : "?") + s.jsonp + "=" + jsonpCallback);
          }
        }
      }
      s.url = url;
      s.data = data;
      /**
       * @param {?} response
       * @return {undefined}
       */
      fix[jsonpCallback] = function(response) {
        /** @type {Array} */
        responseContainer = [response];
      };
      jqXHR.always(function() {
        fix[jsonpCallback] = previous;
        if (responseContainer && jQuery.isFunction(previous)) {
          fix[jsonpCallback](responseContainer[0]);
        }
      });
      /**
       * @return {?}
       */
      s.converters["script json"] = function() {
        if (!responseContainer) {
          jQuery.error(jsonpCallback + " was not called");
        }
        return responseContainer[0];
      };
      /** @type {string} */
      s.dataTypes[0] = "json";
      return "script";
    }
  });
  jQuery.ajaxSetup({
    accepts : {
      script : "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
    },
    contents : {
      script : /javascript|ecmascript/
    },
    converters : {
      /**
       * @param {string} data
       * @return {?}
       */
      "text script" : function(data) {
        jQuery.globalEval(data);
        return data;
      }
    }
  });
  jQuery.ajaxPrefilter("script", function(config) {
    if (config.cache === load) {
      /** @type {boolean} */
      config.cache = false;
    }
    if (config.crossDomain) {
      /** @type {string} */
      config.type = "GET";
      /** @type {boolean} */
      config.global = false;
    }
  });
  jQuery.ajaxTransport("script", function(s) {
    if (s.crossDomain) {
      var script;
      var head = cycle.head || (cycle.getElementsByTagName("head")[0] || cycle.documentElement);
      return{
        /**
         * @param {?} _
         * @param {Function} callback
         * @return {undefined}
         */
        send : function(_, callback) {
          /** @type {Element} */
          script = cycle.createElement("script");
          /** @type {string} */
          script.async = "async";
          if (s.scriptCharset) {
            script.charset = s.scriptCharset;
          }
          script.src = s.url;
          /** @type {function (string, Function): undefined} */
          script.onload = script.onreadystatechange = function(type, name) {
            if (name || (!script.readyState || /loaded|complete/.test(script.readyState))) {
              /** @type {null} */
              script.onload = script.onreadystatechange = null;
              if (head) {
                if (script.parentNode) {
                  head.removeChild(script);
                }
              }
              /** @type {Object} */
              script = load;
              if (!name) {
                callback(200, "success");
              }
            }
          };
          head.insertBefore(script, head.firstChild);
        },
        /**
         * @return {undefined}
         */
        abort : function() {
          if (script) {
            script.onload(0, 1);
          }
        }
      };
    }
  });
  /** @type {(boolean|function (): undefined)} */
  var xhrOnUnloadAbort = fix.ActiveXObject ? function() {
    var letter;
    for (letter in map) {
      map[letter](0, 1);
    }
  } : false;
  /** @type {number} */
  var counter = 0;
  var map;
  /** @type {function (): ?} */
  jQuery.ajaxSettings.xhr = fix.ActiveXObject ? function() {
    var b;
    if (!(b = !this.isLocal && createStandardXHR())) {
      a: {
        try {
          /** @type {ActiveXObject} */
          b = new fix.ActiveXObject("Microsoft.XMLHTTP");
          break a;
        } catch (c) {
        }
        b = void 0;
      }
    }
    return b;
  } : createStandardXHR;
  var nativeXHR = jQuery.ajaxSettings.xhr();
  jQuery.extend(jQuery.support, {
    ajax : !!nativeXHR,
    cors : !!nativeXHR && "withCredentials" in nativeXHR
  });
  if (jQuery.support.ajax) {
    jQuery.ajaxTransport(function(s) {
      if (!s.crossDomain || jQuery.support.cors) {
        var callback;
        return{
          /**
           * @param {Object} headers
           * @param {Function} complete
           * @return {undefined}
           */
          send : function(headers, complete) {
            var xhr = s.xhr();
            var id;
            var i;
            if (s.username) {
              xhr.open(s.type, s.url, s.async, s.username, s.password);
            } else {
              xhr.open(s.type, s.url, s.async);
            }
            if (s.xhrFields) {
              for (i in s.xhrFields) {
                xhr[i] = s.xhrFields[i];
              }
            }
            if (s.mimeType) {
              if (xhr.overrideMimeType) {
                xhr.overrideMimeType(s.mimeType);
              }
            }
            if (!s.crossDomain) {
              if (!headers["X-Requested-With"]) {
                /** @type {string} */
                headers["X-Requested-With"] = "XMLHttpRequest";
              }
            }
            try {
              for (i in headers) {
                xhr.setRequestHeader(i, headers[i]);
              }
            } catch (r) {
            }
            xhr.send(s.hasContent && s.data || null);
            /**
             * @param {string} type
             * @param {Function} name
             * @return {undefined}
             */
            callback = function(type, name) {
              var e;
              var statusText;
              var responseHeaders;
              var responses;
              var xml;
              try {
                if (callback && (name || xhr.readyState === 4)) {
                  /** @type {Object} */
                  callback = load;
                  if (id) {
                    xhr.onreadystatechange = jQuery.noop;
                    if (xhrOnUnloadAbort) {
                      delete map[id];
                    }
                  }
                  if (name) {
                    if (xhr.readyState !== 4) {
                      xhr.abort();
                    }
                  } else {
                    e = xhr.status;
                    responseHeaders = xhr.getAllResponseHeaders();
                    responses = {};
                    if ((xml = xhr.responseXML) && xml.documentElement) {
                      responses.xml = xml;
                    }
                    try {
                      responses.text = xhr.responseText;
                    } catch (G) {
                    }
                    try {
                      statusText = xhr.statusText;
                    } catch (m) {
                      /** @type {string} */
                      statusText = "";
                    }
                    if (!e && (s.isLocal && !s.crossDomain)) {
                      /** @type {number} */
                      e = responses.text ? 200 : 404;
                    } else {
                      if (e === 1223) {
                        /** @type {number} */
                        e = 204;
                      }
                    }
                  }
                }
              } catch (ex) {
                if (!name) {
                  complete(-1, ex);
                }
              }
              if (responses) {
                complete(e, statusText, responses, responseHeaders);
              }
            };
            if (!s.async || xhr.readyState === 4) {
              callback();
            } else {
              /** @type {number} */
              id = ++counter;
              if (xhrOnUnloadAbort) {
                if (!map) {
                  map = {};
                  jQuery(fix).unload(xhrOnUnloadAbort);
                }
                /** @type {function (string, Function): undefined} */
                map[id] = callback;
              }
              /** @type {function (string, Function): undefined} */
              xhr.onreadystatechange = callback;
            }
          },
          /**
           * @return {undefined}
           */
          abort : function() {
            if (callback) {
              callback(0, 1);
            }
          }
        };
      }
    });
  }
  var elem = {};
  var iframe;
  var doc;
  /** @type {RegExp} */
  var fnTest = /^(?:toggle|show|hide)$/;
  /** @type {RegExp} */
  var rfxnum = /^([+\-]=)?([\d+.\-]+)([a-z%]*)$/i;
  var scrollIntervalId;
  /** @type {Array} */
  var fxAttrs = [["height", "marginTop", "marginBottom", "paddingTop", "paddingBottom"], ["width", "marginLeft", "marginRight", "paddingLeft", "paddingRight"], ["opacity"]];
  var fxNow;
  jQuery.fn.extend({
    /**
     * @param {string} type
     * @param {Function} name
     * @param {Function} types
     * @return {?}
     */
    show : function(type, name, types) {
      if (type || type === 0) {
        return this.animate(genFx("show", 3), type, name, types);
      }
      /** @type {number} */
      types = 0;
      var l = this.length;
      for (;types < l;types++) {
        type = this[types];
        if (type.style) {
          name = type.style.display;
          if (!jQuery._data(type, "olddisplay") && name === "none") {
            /** @type {string} */
            name = type.style.display = "";
          }
          if (name === "" && jQuery.css(type, "display") === "none" || !jQuery.contains(type.ownerDocument.documentElement, type)) {
            jQuery._data(type, "olddisplay", defaultDisplay(type.nodeName));
          }
        }
      }
      /** @type {number} */
      types = 0;
      for (;types < l;types++) {
        type = this[types];
        if (type.style) {
          name = type.style.display;
          if (name === "" || name === "none") {
            type.style.display = jQuery._data(type, "olddisplay") || "";
          }
        }
      }
      return this;
    },
    /**
     * @param {string} type
     * @param {Function} name
     * @param {Function} types
     * @return {?}
     */
    hide : function(type, name, types) {
      if (type || type === 0) {
        return this.animate(genFx("hide", 3), type, name, types);
      }
      /** @type {number} */
      types = 0;
      var l = this.length;
      for (;types < l;types++) {
        type = this[types];
        if (type.style) {
          name = jQuery.css(type, "display");
          if (name !== "none") {
            if (!jQuery._data(type, "olddisplay")) {
              jQuery._data(type, "olddisplay", name);
            }
          }
        }
      }
      /** @type {number} */
      types = 0;
      for (;types < l;types++) {
        if (this[types].style) {
          /** @type {string} */
          this[types].style.display = "none";
        }
      }
      return this;
    },
    _toggle : jQuery.fn.toggle,
    /**
     * @param {string} type
     * @param {Function} name
     * @param {Function} types
     * @return {?}
     */
    toggle : function(type, name, types) {
      /** @type {boolean} */
      var bool = typeof type === "boolean";
      if (jQuery.isFunction(type) && jQuery.isFunction(name)) {
        this._toggle.apply(this, arguments);
      } else {
        if (type == null || bool) {
          this.each(function() {
            var state = bool ? type : jQuery(this).is(":hidden");
            jQuery(this)[state ? "show" : "hide"]();
          });
        } else {
          this.animate(genFx("toggle", 3), type, name, types);
        }
      }
      return this;
    },
    /**
     * @param {number} callback
     * @param {number} to
     * @param {Function} cb
     * @param {Function} element
     * @return {?}
     */
    fadeTo : function(callback, to, cb, element) {
      return this.filter(":hidden").css("opacity", 0).show().end().animate({
        opacity : to
      }, callback, cb, element);
    },
    /**
     * @param {?} prop
     * @param {string} cycle
     * @param {Function} rvar
     * @param {Function} ready
     * @return {?}
     */
    animate : function(prop, cycle, rvar, ready) {
      /**
       * @return {?}
       */
      function optgroup() {
        if (optall.queue === false) {
          jQuery._mark(this);
        }
        var opt = jQuery.extend({}, optall);
        /** @type {boolean} */
        var e = this.nodeType === 1;
        var hidden = e && jQuery(this).is(":hidden");
        var name;
        var val;
        var optgroup;
        var start;
        var unit;
        opt.animatedProperties = {};
        for (optgroup in prop) {
          name = jQuery.camelCase(optgroup);
          if (optgroup !== name) {
            prop[name] = prop[optgroup];
            delete prop[optgroup];
          }
          if ((val = jQuery.cssHooks[name]) && "expand" in val) {
            start = val.expand(prop[name]);
            delete prop[name];
            for (optgroup in start) {
              if (!(optgroup in prop)) {
                prop[optgroup] = start[optgroup];
              }
            }
          }
        }
        for (name in prop) {
          val = prop[name];
          if (jQuery.isArray(val)) {
            opt.animatedProperties[name] = val[1];
            val = prop[name] = val[0];
          } else {
            opt.animatedProperties[name] = opt.specialEasing && opt.specialEasing[name] || (opt.easing || "swing");
          }
          if (val === "hide" && hidden || val === "show" && !hidden) {
            return opt.complete.call(this);
          }
          if (e && (name === "height" || name === "width")) {
            /** @type {Array} */
            opt.overflow = [this.style.overflow, this.style.overflowX, this.style.overflowY];
            if (jQuery.css(this, "display") === "inline" && jQuery.css(this, "float") === "none") {
              if (!jQuery.support.inlineBlockNeedsLayout || defaultDisplay(this.nodeName) === "inline") {
                /** @type {string} */
                this.style.display = "inline-block";
              } else {
                /** @type {number} */
                this.style.zoom = 1;
              }
            }
          }
        }
        if (opt.overflow != null) {
          /** @type {string} */
          this.style.overflow = "hidden";
        }
        for (optgroup in prop) {
          e = new jQuery.fx(this, opt, optgroup);
          val = prop[optgroup];
          if (fnTest.test(val)) {
            if (name = jQuery._data(this, "toggle" + optgroup) || (val === "toggle" ? hidden ? "show" : "hide" : 0)) {
              jQuery._data(this, "toggle" + optgroup, name === "show" ? "hide" : "show");
              e[name]();
            } else {
              e[val]();
            }
          } else {
            /** @type {(Array.<string>|null)} */
            name = rfxnum.exec(val);
            start = e.cur();
            if (name) {
              /** @type {number} */
              val = parseFloat(name[2]);
              /** @type {string} */
              unit = name[3] || (jQuery.cssNumber[optgroup] ? "" : "px");
              if (unit !== "px") {
                jQuery.style(this, optgroup, (val || 1) + unit);
                /** @type {number} */
                start = (val || 1) / e.cur() * start;
                jQuery.style(this, optgroup, start + unit);
              }
              if (name[1]) {
                val = (name[1] === "-=" ? -1 : 1) * val + start;
              }
              e.custom(start, val, unit);
            } else {
              e.custom(start, val, "");
            }
          }
        }
        return true;
      }
      var optall = jQuery.speed(cycle, rvar, ready);
      if (jQuery.isEmptyObject(prop)) {
        return this.each(optall.complete, [false]);
      }
      prop = jQuery.extend({}, prop);
      return optall.queue === false ? this.each(optgroup) : this.queue(optall.queue, optgroup);
    },
    /**
     * @param {Object} type
     * @param {Object} recurring
     * @param {Object} event
     * @return {?}
     */
    stop : function(type, recurring, event) {
      if (typeof type !== "string") {
        /** @type {Object} */
        event = recurring;
        /** @type {Object} */
        recurring = type;
        /** @type {Object} */
        type = load;
      }
      if (recurring) {
        if (type !== false) {
          this.queue(type || "fx", []);
        }
      }
      return this.each(function() {
        var index;
        /** @type {boolean} */
        var bindings = false;
        var timers = jQuery.timers;
        var data = jQuery._data(this);
        if (!event) {
          jQuery._unmark(true, this);
        }
        if (type == null) {
          for (index in data) {
            if (data[index] && (data[index].stop && index.indexOf(".run") === index.length - 4)) {
              var evt = data[index];
              jQuery.removeData(this, index, true);
              evt.stop(event);
            }
          }
        } else {
          if (data[index = type + ".run"] && data[index].stop) {
            data = data[index];
            jQuery.removeData(this, index, true);
            data.stop(event);
          }
        }
        index = timers.length;
        for (;index--;) {
          if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
            if (event) {
              timers[index](true);
            } else {
              timers[index].saveState();
            }
            /** @type {boolean} */
            bindings = true;
            timers.splice(index, 1);
          }
        }
        if (!event || !bindings) {
          jQuery.dequeue(this, type);
        }
      });
    }
  });
  jQuery.each({
    slideDown : genFx("show", 1),
    slideUp : genFx("hide", 1),
    slideToggle : genFx("toggle", 1),
    fadeIn : {
      opacity : "show"
    },
    fadeOut : {
      opacity : "hide"
    },
    fadeToggle : {
      opacity : "toggle"
    }
  }, function(original, attributes) {
    /**
     * @param {string} cycle
     * @param {Function} callback
     * @param {Function} ready
     * @return {?}
     */
    jQuery.fn[original] = function(cycle, callback, ready) {
      return this.animate(attributes, cycle, callback, ready);
    };
  });
  jQuery.extend({
    /**
     * @param {string} type
     * @param {Function} name
     * @param {Function} types
     * @return {?}
     */
    speed : function(type, name, types) {
      var opt = type && typeof type === "object" ? jQuery.extend({}, type) : {
        complete : types || (!types && name || jQuery.isFunction(type) && type),
        duration : type,
        easing : types && name || name && (!jQuery.isFunction(name) && name)
      };
      opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;
      if (opt.queue == null || opt.queue === true) {
        /** @type {string} */
        opt.queue = "fx";
      }
      opt.old = opt.complete;
      /**
       * @param {string} type
       * @return {undefined}
       */
      opt.complete = function(type) {
        if (jQuery.isFunction(opt.old)) {
          opt.old.call(this);
        }
        if (opt.queue) {
          jQuery.dequeue(this, opt.queue);
        } else {
          if (type !== false) {
            jQuery._unmark(this);
          }
        }
      };
      return opt;
    },
    easing : {
      /**
       * @param {?} t
       * @return {?}
       */
      linear : function(t) {
        return t;
      },
      /**
       * @param {number} p
       * @return {?}
       */
      swing : function(p) {
        return-Math.cos(p * Math.PI) / 2 + 0.5;
      }
    },
    timers : [],
    /**
     * @param {string} type
     * @param {Function} name
     * @param {Function} types
     * @return {undefined}
     */
    fx : function(type, name, types) {
      /** @type {Function} */
      this.options = name;
      /** @type {string} */
      this.elem = type;
      /** @type {Function} */
      this.prop = types;
      name.orig = name.orig || {};
    }
  });
  jQuery.fx.prototype = {
    /**
     * @return {undefined}
     */
    update : function() {
      if (this.options.step) {
        this.options.step.call(this.elem, this.now, this);
      }
      (jQuery.fx.step[this.prop] || jQuery.fx.step._default)(this);
    },
    /**
     * @return {?}
     */
    cur : function() {
      if (this.elem[this.prop] != null && (!this.elem.style || this.elem.style[this.prop] == null)) {
        return this.elem[this.prop];
      }
      var parsed;
      var r = jQuery.css(this.elem, this.prop);
      return isNaN(parsed = parseFloat(r)) ? !r || r === "auto" ? 0 : r : parsed;
    },
    /**
     * @param {number} from
     * @param {number} to
     * @param {Node} unit
     * @return {undefined}
     */
    custom : function(from, to, unit) {
      /**
       * @param {string} v
       * @return {?}
       */
      function t(v) {
        return self.step(v);
      }
      var self = this;
      var fx = jQuery.fx;
      this.startTime = fxNow || createFxNow();
      /** @type {number} */
      this.end = to;
      this.now = this.start = from;
      /** @type {number} */
      this.pos = this.state = 0;
      this.unit = unit || (this.unit || (jQuery.cssNumber[this.prop] ? "" : "px"));
      t.queue = this.options.queue;
      t.elem = this.elem;
      /**
       * @return {undefined}
       */
      t.saveState = function() {
        if (jQuery._data(self.elem, "fxshow" + self.prop) === load) {
          if (self.options.hide) {
            jQuery._data(self.elem, "fxshow" + self.prop, self.start);
          } else {
            if (self.options.show) {
              jQuery._data(self.elem, "fxshow" + self.prop, self.end);
            }
          }
        }
      };
      if (t()) {
        if (jQuery.timers.push(t) && !scrollIntervalId) {
          /** @type {number} */
          scrollIntervalId = setInterval(fx.tick, fx.interval);
        }
      }
    },
    /**
     * @return {undefined}
     */
    show : function() {
      var after = jQuery._data(this.elem, "fxshow" + this.prop);
      this.options.orig[this.prop] = after || jQuery.style(this.elem, this.prop);
      /** @type {boolean} */
      this.options.show = true;
      if (after !== load) {
        this.custom(this.cur(), after);
      } else {
        this.custom(this.prop === "width" || this.prop === "height" ? 1 : 0, this.cur());
      }
      jQuery(this.elem).show();
    },
    /**
     * @return {undefined}
     */
    hide : function() {
      this.options.orig[this.prop] = jQuery._data(this.elem, "fxshow" + this.prop) || jQuery.style(this.elem, this.prop);
      /** @type {boolean} */
      this.options.hide = true;
      this.custom(this.cur(), 0);
    },
    /**
     * @param {string} n
     * @return {?}
     */
    step : function(n) {
      var optgroup;
      var t = fxNow || createFxNow();
      /** @type {boolean} */
      var d = true;
      var cycle = this.elem;
      var options = this.options;
      if (n || t >= options.duration + this.startTime) {
        this.now = this.end;
        /** @type {number} */
        this.pos = this.state = 1;
        this.update();
        /** @type {boolean} */
        options.animatedProperties[this.prop] = true;
        for (optgroup in options.animatedProperties) {
          if (options.animatedProperties[optgroup] !== true) {
            /** @type {boolean} */
            d = false;
          }
        }
        if (d) {
          if (options.overflow != null) {
            if (!jQuery.support.shrinkWrapBlocks) {
              jQuery.each(["", "X", "Y"], function(index, value) {
                cycle.style["overflow" + value] = options.overflow[index];
              });
            }
          }
          if (options.hide) {
            jQuery(cycle).hide();
          }
          if (options.hide || options.show) {
            for (optgroup in options.animatedProperties) {
              jQuery.style(cycle, optgroup, options.orig[optgroup]);
              jQuery.removeData(cycle, "fxshow" + optgroup, true);
              jQuery.removeData(cycle, "toggle" + optgroup, true);
            }
          }
          if (n = options.complete) {
            /** @type {boolean} */
            options.complete = false;
            n.call(cycle);
          }
        }
        return false;
      }
      if (options.duration == Infinity) {
        this.now = t;
      } else {
        /** @type {number} */
        n = t - this.startTime;
        /** @type {number} */
        this.state = n / options.duration;
        this.pos = jQuery.easing[options.animatedProperties[this.prop]](this.state, n, 0, 1, options.duration);
        this.now = this.start + (this.end - this.start) * this.pos;
      }
      this.update();
      return true;
    }
  };
  jQuery.extend(jQuery.fx, {
    /**
     * @return {undefined}
     */
    tick : function() {
      var timer;
      var timers = jQuery.timers;
      /** @type {number} */
      var i = 0;
      for (;i < timers.length;i++) {
        timer = timers[i];
        if (!timer()) {
          if (timers[i] === timer) {
            timers.splice(i--, 1);
          }
        }
      }
      if (!timers.length) {
        jQuery.fx.stop();
      }
    },
    interval : 13,
    /**
     * @return {undefined}
     */
    stop : function() {
      clearInterval(scrollIntervalId);
      /** @type {null} */
      scrollIntervalId = null;
    },
    speeds : {
      slow : 600,
      fast : 200,
      _default : 400
    },
    step : {
      /**
       * @param {string} type
       * @return {undefined}
       */
      opacity : function(type) {
        jQuery.style(type.elem, "opacity", type.now);
      },
      /**
       * @param {string} type
       * @return {undefined}
       */
      _default : function(type) {
        if (type.elem.style && type.elem.style[type.prop] != null) {
          type.elem.style[type.prop] = type.now + type.unit;
        } else {
          type.elem[type.prop] = type.now;
        }
      }
    }
  });
  jQuery.each(fxAttrs.concat.apply([], fxAttrs), function(dataAndEvents, optgroup) {
    if (optgroup.indexOf("margin")) {
      /**
       * @param {Object} fx
       * @return {undefined}
       */
      jQuery.fx.step[optgroup] = function(fx) {
        jQuery.style(fx.elem, optgroup, Math.max(0, fx.now) + fx.unit);
      };
    }
  });
  if (jQuery.expr) {
    if (jQuery.expr.filters) {
      /**
       * @param {string} elem
       * @return {?}
       */
      jQuery.expr.filters.animated = function(elem) {
        return jQuery.grep(jQuery.timers, function(fn) {
          return elem === fn.elem;
        }).length;
      };
    }
  }
  var matcher;
  /** @type {RegExp} */
  var nocode = /^t(?:able|d|h)$/i;
  /** @type {RegExp} */
  var rinputs = /^(?:body|html)$/i;
  /** @type {Function} */
  matcher = "getBoundingClientRect" in cycle.documentElement ? function(b, win, doc, box) {
    try {
      box = b.getBoundingClientRect();
    } catch (h) {
    }
    if (!box || !jQuery.contains(doc, b)) {
      return box ? {
        top : box.top,
        left : box.left
      } : {
        top : 0,
        left : 0
      };
    }
    b = win.body;
    win = getWindow(win);
    return{
      top : box.top + (win.pageYOffset || (jQuery.support.boxModel && doc.scrollTop || b.scrollTop)) - (doc.clientTop || (b.clientTop || 0)),
      left : box.left + (win.pageXOffset || (jQuery.support.boxModel && doc.scrollLeft || b.scrollLeft)) - (doc.clientLeft || (b.clientLeft || 0))
    };
  } : function(node, view, win) {
    var cs;
    var parent = node.offsetParent;
    var el = view.body;
    cs = (view = view.defaultView) ? view.getComputedStyle(node, null) : node.currentStyle;
    var top = node.offsetTop;
    var left = node.offsetLeft;
    for (;(node = node.parentNode) && (node !== el && node !== win);) {
      if (jQuery.support.fixedPosition && cs.position === "fixed") {
        break;
      }
      cs = view ? view.getComputedStyle(node, null) : node.currentStyle;
      /** @type {number} */
      top = top - node.scrollTop;
      /** @type {number} */
      left = left - node.scrollLeft;
      if (node === parent) {
        top = top + node.offsetTop;
        left = left + node.offsetLeft;
        if (jQuery.support.doesNotAddBorder && (!jQuery.support.doesAddBorderForTableAndCells || !nocode.test(node.nodeName))) {
          top = top + (parseFloat(cs.borderTopWidth) || 0);
          left = left + (parseFloat(cs.borderLeftWidth) || 0);
        }
        parent = node.offsetParent;
      }
      if (jQuery.support.subtractsBorderForOverflowNotVisible && cs.overflow !== "visible") {
        top = top + (parseFloat(cs.borderTopWidth) || 0);
        left = left + (parseFloat(cs.borderLeftWidth) || 0);
      }
    }
    if (cs.position === "relative" || cs.position === "static") {
      top = top + el.offsetTop;
      left = left + el.offsetLeft;
    }
    if (jQuery.support.fixedPosition && cs.position === "fixed") {
      top = top + Math.max(win.scrollTop, el.scrollTop);
      left = left + Math.max(win.scrollLeft, el.scrollLeft);
    }
    return{
      top : top,
      left : left
    };
  };
  /**
   * @param {string} type
   * @return {?}
   */
  jQuery.fn.offset = function(type) {
    if (arguments.length) {
      return type === load ? this : this.each(function(dataName) {
        jQuery.offset.setOffset(this, type, dataName);
      });
    }
    var elem = this[0];
    var doc = elem && elem.ownerDocument;
    return!doc ? null : elem === doc.body ? jQuery.offset.bodyOffset(elem) : matcher(elem, doc, doc.documentElement);
  };
  jQuery.offset = {
    /**
     * @param {Object} body
     * @return {?}
     */
    bodyOffset : function(body) {
      var top = body.offsetTop;
      var left = body.offsetLeft;
      if (jQuery.support.doesNotIncludeMarginInBodyOffset) {
        top = top + (parseFloat(jQuery.css(body, "marginTop")) || 0);
        left = left + (parseFloat(jQuery.css(body, "marginLeft")) || 0);
      }
      return{
        top : top,
        left : left
      };
    },
    /**
     * @param {string} cycle
     * @param {Object} options
     * @param {?} i
     * @return {undefined}
     */
    setOffset : function(cycle, options, i) {
      var position = jQuery.css(cycle, "position");
      if (position === "static") {
        /** @type {string} */
        cycle.style.position = "relative";
      }
      var elem = jQuery(cycle);
      var curOffset = elem.offset();
      var curCSSTop = jQuery.css(cycle, "top");
      var curCSSLeft = jQuery.css(cycle, "left");
      var optgroup = {};
      var from = {};
      if ((position === "absolute" || position === "fixed") && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1) {
        from = elem.position();
        position = from.top;
        curCSSLeft = from.left;
      } else {
        /** @type {number} */
        position = parseFloat(curCSSTop) || 0;
        /** @type {number} */
        curCSSLeft = parseFloat(curCSSLeft) || 0;
      }
      if (jQuery.isFunction(options)) {
        options = options.call(cycle, i, curOffset);
      }
      if (options.top != null) {
        optgroup.top = options.top - curOffset.top + position;
      }
      if (options.left != null) {
        optgroup.left = options.left - curOffset.left + curCSSLeft;
      }
      if ("using" in options) {
        options.using.call(cycle, optgroup);
      } else {
        elem.css(optgroup);
      }
    }
  };
  jQuery.fn.extend({
    /**
     * @return {?}
     */
    position : function() {
      if (!this[0]) {
        return null;
      }
      var rvar = this[0];
      var offsetParent = this.offsetParent();
      var offset = this.offset();
      var parentOffset = rinputs.test(offsetParent[0].nodeName) ? {
        top : 0,
        left : 0
      } : offsetParent.offset();
      /** @type {number} */
      offset.top = offset.top - (parseFloat(jQuery.css(rvar, "marginTop")) || 0);
      /** @type {number} */
      offset.left = offset.left - (parseFloat(jQuery.css(rvar, "marginLeft")) || 0);
      parentOffset.top = parentOffset.top + (parseFloat(jQuery.css(offsetParent[0], "borderTopWidth")) || 0);
      parentOffset.left = parentOffset.left + (parseFloat(jQuery.css(offsetParent[0], "borderLeftWidth")) || 0);
      return{
        top : offset.top - parentOffset.top,
        left : offset.left - parentOffset.left
      };
    },
    /**
     * @return {?}
     */
    offsetParent : function() {
      return this.map(function() {
        var elem = this.offsetParent || cycle.body;
        for (;elem && (!rinputs.test(elem.nodeName) && jQuery.css(elem, "position") === "static");) {
          elem = elem.offsetParent;
        }
        return elem;
      });
    }
  });
  jQuery.each({
    scrollLeft : "pageXOffset",
    scrollTop : "pageYOffset"
  }, function(name, key) {
    /** @type {boolean} */
    var i = /Y/.test(key);
    /**
     * @param {string} value
     * @return {?}
     */
    jQuery.fn[name] = function(value) {
      return jQuery.access(this, function(element, method, val) {
        var cycle = getWindow(element);
        if (val === load) {
          return cycle ? key in cycle ? cycle[key] : jQuery.support.boxModel && cycle.document.documentElement[method] || cycle.document.body[method] : element[method];
        }
        if (cycle) {
          cycle.scrollTo(!i ? val : jQuery(cycle).scrollLeft(), i ? val : jQuery(cycle).scrollTop());
        } else {
          /** @type {string} */
          element[method] = val;
        }
      }, name, value, arguments.length, null);
    };
  });
  jQuery.each({
    Height : "height",
    Width : "width"
  }, function(method, name) {
    /** @type {string} */
    var item = "client" + method;
    /** @type {string} */
    var i = "scroll" + method;
    /** @type {string} */
    var offset = "offset" + method;
    /**
     * @return {?}
     */
    jQuery.fn["inner" + method] = function() {
      var rvar = this[0];
      return rvar ? rvar.style ? parseFloat(jQuery.css(rvar, name, "padding")) : this[name]() : null;
    };
    /**
     * @param {boolean} margin
     * @return {?}
     */
    jQuery.fn["outer" + method] = function(margin) {
      var rvar = this[0];
      return rvar ? rvar.style ? parseFloat(jQuery.css(rvar, name, margin ? "margin" : "border")) : this[name]() : null;
    };
    /**
     * @param {string} value
     * @return {?}
     */
    jQuery.fn[name] = function(value) {
      return jQuery.access(this, function(cycle, a, isXML) {
        if (jQuery.isWindow(cycle)) {
          a = cycle.document;
          cycle = a.documentElement[item];
          return jQuery.support.boxModel && cycle || (a.body && a.body[item] || cycle);
        }
        if (cycle.nodeType === 9) {
          a = cycle.documentElement;
          return a[item] >= a[i] ? a[item] : Math.max(cycle.body[i], a[i], cycle.body[offset], a[offset]);
        }
        if (isXML === load) {
          cycle = jQuery.css(cycle, a);
          /** @type {number} */
          a = parseFloat(cycle);
          return jQuery.isNumeric(a) ? a : cycle;
        }
        jQuery(cycle).css(a, isXML);
      }, name, value, arguments.length, null);
    };
  });
  /** @type {function (string, Function): ?} */
  fix.jQuery = fix.$ = jQuery;
  if ("function" === typeof define) {
    if (define.amd && define.amd.jQuery) {
      define("jquery", [], function() {
        return jQuery;
      });
    }
  }
})(window);
(function($, relativeRoot) {
  /**
   * @param {Object} element
   * @param {boolean} isTabIndexNotNaN
   * @return {?}
   */
  function focusable(element, isTabIndexNotNaN) {
    var b;
    var _ref5;
    b = element.nodeName.toLowerCase();
    if ("area" === b) {
      b = element.parentNode;
      _ref5 = b.name;
      if (!element.href || (!_ref5 || "map" !== b.nodeName.toLowerCase())) {
        return false;
      }
      b = $("img[usemap=#" + _ref5 + "]")[0];
      return!!b && visible(b);
    }
    return(/input|select|textarea|button|object/.test(b) ? !element.disabled : "a" === b ? element.href || isTabIndexNotNaN : isTabIndexNotNaN) && visible(element);
  }
  /**
   * @param {string} cycle
   * @return {?}
   */
  function visible(cycle) {
    return $.expr.filters.visible(cycle) && !$(cycle).parents().andSelf().filter(function() {
      return "hidden" === $.css(this, "visibility");
    }).length;
  }
  /** @type {number} */
  var uuid = 0;
  /** @type {RegExp} */
  var runiqueId = /^ui-id-\d+$/;
  $.ui = $.ui || {};
  if (!$.ui.version) {
    $.extend($.ui, {
      version : "1.9.2",
      keyCode : {
        BACKSPACE : 8,
        COMMA : 188,
        DELETE : 46,
        DOWN : 40,
        END : 35,
        ENTER : 13,
        ESCAPE : 27,
        HOME : 36,
        LEFT : 37,
        NUMPAD_ADD : 107,
        NUMPAD_DECIMAL : 110,
        NUMPAD_DIVIDE : 111,
        NUMPAD_ENTER : 108,
        NUMPAD_MULTIPLY : 106,
        NUMPAD_SUBTRACT : 109,
        PAGE_DOWN : 34,
        PAGE_UP : 33,
        PERIOD : 190,
        RIGHT : 39,
        SPACE : 32,
        TAB : 9,
        UP : 38
      }
    });
    $.fn.extend({
      _focus : $.fn.focus,
      /**
       * @param {string} type
       * @param {Function} name
       * @return {?}
       */
      focus : function(type, name) {
        return "number" === typeof type ? this.each(function() {
          var input = this;
          setTimeout(function() {
            $(input).focus();
            if (name) {
              name.call(input);
            }
          }, type);
        }) : this._focus.apply(this, arguments);
      },
      /**
       * @return {?}
       */
      scrollParent : function() {
        var codeSegments;
        codeSegments = $.ui.ie && /(static|relative)/.test(this.css("position")) || /absolute/.test(this.css("position")) ? this.parents().filter(function() {
          return/(relative|absolute|fixed)/.test($.css(this, "position")) && /(auto|scroll)/.test($.css(this, "overflow") + $.css(this, "overflow-y") + $.css(this, "overflow-x"));
        }).eq(0) : this.parents().filter(function() {
          return/(auto|scroll)/.test($.css(this, "overflow") + $.css(this, "overflow-y") + $.css(this, "overflow-x"));
        }).eq(0);
        return/fixed/.test(this.css("position")) || !codeSegments.length ? $(document) : codeSegments;
      },
      /**
       * @param {?} elem
       * @return {?}
       */
      zIndex : function(elem) {
        if (elem !== relativeRoot) {
          return this.css("zIndex", elem);
        }
        if (this.length) {
          elem = $(this[0]);
          var value;
          for (;elem.length && elem[0] !== document;) {
            value = elem.css("position");
            if ("absolute" === value || ("relative" === value || "fixed" === value)) {
              if (value = parseInt(elem.css("zIndex"), 10), !isNaN(value) && 0 !== value) {
                return value;
              }
            }
            elem = elem.parent();
          }
        }
        return 0;
      },
      /**
       * @return {?}
       */
      uniqueId : function() {
        return this.each(function() {
          if (!this.id) {
            /** @type {string} */
            this.id = "ui-id-" + ++uuid;
          }
        });
      },
      /**
       * @return {?}
       */
      removeUniqueId : function() {
        return this.each(function() {
          if (runiqueId.test(this.id)) {
            $(this).removeAttr("id");
          }
        });
      }
    });
    $.extend($.expr[":"], {
      data : $.expr.createPseudo ? $.expr.createPseudo(function(optgroup) {
        return function(cycle) {
          return!!$.data(cycle, optgroup);
        };
      }) : function(type, name, types) {
        return!!$.data(type, types[3]);
      },
      /**
       * @param {string} optgroup
       * @return {?}
       */
      focusable : function(optgroup) {
        return focusable(optgroup, !isNaN($.attr(optgroup, "tabindex")));
      },
      /**
       * @param {string} optgroup
       * @return {?}
       */
      tabbable : function(optgroup) {
        var tabIndex = $.attr(optgroup, "tabindex");
        /** @type {boolean} */
        var isTabIndexNaN = isNaN(tabIndex);
        return(isTabIndexNaN || 0 <= tabIndex) && focusable(optgroup, !isTabIndexNaN);
      }
    });
    $(function() {
      /** @type {(HTMLElement|null)} */
      var body = document.body;
      /** @type {(Node|null)} */
      var div = body.appendChild(div = document.createElement("div"));
      div.offsetHeight;
      $.extend(div.style, {
        minHeight : "100px",
        height : "auto",
        padding : 0,
        borderWidth : 0
      });
      /** @type {boolean} */
      $.support.minHeight = 100 === div.offsetHeight;
      /** @type {boolean} */
      $.support.selectstart = "onselectstart" in div;
      /** @type {string} */
      body.removeChild(div).style.display = "none";
    });
    if (!$("<a>").outerWidth(1).jquery) {
      $.each(["Width", "Height"], function(dataAndEvents, name) {
        /**
         * @param {string} elem
         * @param {?} size
         * @param {boolean} dataAndEvents
         * @param {?} margin
         * @return {?}
         */
        function reduce(elem, size, dataAndEvents, margin) {
          $.each(attributes, function() {
            size -= parseFloat($.css(elem, "padding" + this)) || 0;
            if (dataAndEvents) {
              size -= parseFloat($.css(elem, "border" + this + "Width")) || 0;
            }
            if (margin) {
              size -= parseFloat($.css(elem, "margin" + this)) || 0;
            }
          });
          return size;
        }
        /** @type {Array} */
        var attributes = "Width" === name ? ["Left", "Right"] : ["Top", "Bottom"];
        var rvar = name.toLowerCase();
        var orig = {
          innerWidth : $.fn.innerWidth,
          innerHeight : $.fn.innerHeight,
          outerWidth : $.fn.outerWidth,
          outerHeight : $.fn.outerHeight
        };
        /**
         * @param {?} size
         * @return {?}
         */
        $.fn["inner" + name] = function(size) {
          return size === relativeRoot ? orig["inner" + name].call(this) : this.each(function() {
            $(this).css(rvar, reduce(this, size) + "px");
          });
        };
        /**
         * @param {?} size
         * @param {?} margin
         * @return {?}
         */
        $.fn["outer" + name] = function(size, margin) {
          return "number" !== typeof size ? orig["outer" + name].call(this, size) : this.each(function() {
            $(this).css(rvar, reduce(this, size, true, margin) + "px");
          });
        };
      });
    }
    if ($("<a>").data("a-b", "a").removeData("a-b").data("a-b")) {
      var removeData = $.fn.removeData;
      /**
       * @param {string} type
       * @return {?}
       */
      $.fn.removeData = function(type) {
        return arguments.length ? removeData.call(this, $.camelCase(type)) : removeData.call(this);
      };
    }
    /** @type {Array} */
    var components = /msie ([\w.]+)/.exec(navigator.userAgent.toLowerCase()) || [];
    /** @type {boolean} */
    $.ui.ie = components.length ? true : false;
    /** @type {boolean} */
    $.ui.ie6 = 6 === parseFloat(components[1], 10);
    $.fn.extend({
      /**
       * @return {?}
       */
      disableSelection : function() {
        return this.bind(($.support.selectstart ? "selectstart" : "mousedown") + ".ui-disableSelection", function(types) {
          types.preventDefault();
        });
      },
      /**
       * @return {?}
       */
      enableSelection : function() {
        return this.unbind(".ui-disableSelection");
      }
    });
    $.extend($.ui, {
      plugin : {
        /**
         * @param {string} type
         * @param {Function} name
         * @param {Function} types
         * @return {undefined}
         */
        add : function(type, name, types) {
          var i;
          type = $.ui[type].prototype;
          for (i in types) {
            type.plugins[i] = type.plugins[i] || [];
            type.plugins[i].push([name, types[i]]);
          }
        },
        /**
         * @param {Object} type
         * @param {?} name
         * @param {string} a
         * @return {undefined}
         */
        call : function(type, name, a) {
          var old = type.plugins[name];
          if (old && (type.element[0].parentNode && 11 !== type.element[0].parentNode.nodeType)) {
            /** @type {number} */
            name = 0;
            for (;name < old.length;name++) {
              if (type.options[old[name][0]]) {
                old[name][1].apply(type.element, a);
              }
            }
          }
        }
      },
      contains : $.contains,
      /**
       * @param {Object} el
       * @param {string} a
       * @return {?}
       */
      hasScroll : function(el, a) {
        if ("hidden" === $(el).css("overflow")) {
          return false;
        }
        /** @type {string} */
        var scroll = a && "left" === a ? "scrollLeft" : "scrollTop";
        /** @type {boolean} */
        var has = false;
        if (0 < el[scroll]) {
          return true;
        }
        /** @type {number} */
        el[scroll] = 1;
        /** @type {boolean} */
        has = 0 < el[scroll];
        /** @type {number} */
        el[scroll] = 0;
        return has;
      },
      /**
       * @param {?} x
       * @param {?} reference
       * @param {?} size
       * @return {?}
       */
      isOverAxis : function(x, reference, size) {
        return x > reference && x < reference + size;
      },
      /**
       * @param {?} y
       * @param {?} x
       * @param {?} top
       * @param {?} left
       * @param {?} height
       * @param {?} width
       * @return {?}
       */
      isOver : function(y, x, top, left, height, width) {
        return $.ui.isOverAxis(y, top, height) && $.ui.isOverAxis(x, left, width);
      }
    });
  }
})(jQuery);
(function($, mouseover) {
  /**
   * @return {undefined}
   */
  function Datepicker() {
    /** @type {boolean} */
    this.debug = false;
    /** @type {null} */
    this._curInst = null;
    /** @type {boolean} */
    this._keyEvent = false;
    /** @type {Array} */
    this._disabledInputs = [];
    /** @type {boolean} */
    this._inDialog = this._datepickerShowing = false;
    /** @type {string} */
    this._mainDivId = "ui-datepicker-div";
    /** @type {string} */
    this._inlineClass = "ui-datepicker-inline";
    /** @type {string} */
    this._appendClass = "ui-datepicker-append";
    /** @type {string} */
    this._triggerClass = "ui-datepicker-trigger";
    /** @type {string} */
    this._dialogClass = "ui-datepicker-dialog";
    /** @type {string} */
    this._disableClass = "ui-datepicker-disabled";
    /** @type {string} */
    this._unselectableClass = "ui-datepicker-unselectable";
    /** @type {string} */
    this._currentClass = "ui-datepicker-current-day";
    /** @type {string} */
    this._dayOverClass = "ui-datepicker-days-cell-over";
    /** @type {Array} */
    this.regional = [];
    this.regional[""] = {
      closeText : "Done",
      prevText : "Prev",
      nextText : "Next",
      currentText : "Today",
      monthNames : "January February March April May June July August September October November December".split(" "),
      monthNamesShort : "Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split(" "),
      dayNames : "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),
      dayNamesShort : "Sun Mon Tue Wed Thu Fri Sat".split(" "),
      dayNamesMin : "Su Mo Tu We Th Fr Sa".split(" "),
      weekHeader : "Wk",
      dateFormat : "mm/dd/yy",
      firstDay : 0,
      isRTL : false,
      showMonthAfterYear : false,
      yearSuffix : ""
    };
    this._defaults = {
      showOn : "focus",
      showAnim : "fadeIn",
      showOptions : {},
      defaultDate : null,
      appendText : "",
      buttonText : "...",
      buttonImage : "",
      buttonImageOnly : false,
      hideIfNoPrevNext : false,
      navigationAsDateFormat : false,
      gotoCurrent : false,
      changeMonth : false,
      changeYear : false,
      yearRange : "c-10:c+10",
      showOtherMonths : false,
      selectOtherMonths : false,
      showWeek : false,
      calculateWeek : this.iso8601Week,
      shortYearCutoff : "+10",
      minDate : null,
      maxDate : null,
      duration : "fast",
      beforeShowDay : null,
      beforeShow : null,
      onSelect : null,
      onChangeMonthYear : null,
      onClose : null,
      numberOfMonths : 1,
      showCurrentAtPos : 0,
      stepMonths : 1,
      stepBigMonths : 12,
      altField : "",
      altFormat : "",
      constrainInput : true,
      showButtonPanel : false,
      autoSize : false,
      disabled : false
    };
    $.extend(this._defaults, this.regional[""]);
    this.dpDiv = bindHover($('<div id="' + this._mainDivId + '" class="ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"></div>'));
  }
  /**
   * @param {Object} dpDiv
   * @return {?}
   */
  function bindHover(dpDiv) {
    return dpDiv.delegate("button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a", "mouseout", function() {
      $(this).removeClass("ui-state-hover");
      if (-1 != this.className.indexOf("ui-datepicker-prev")) {
        $(this).removeClass("ui-datepicker-prev-hover");
      }
      if (-1 != this.className.indexOf("ui-datepicker-next")) {
        $(this).removeClass("ui-datepicker-next-hover");
      }
    }).delegate("button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a", "mouseover", function() {
      if (!$.datepicker._isDisabledDatepicker(instActive.inline ? dpDiv.parent()[0] : instActive.input[0])) {
        $(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover");
        $(this).addClass("ui-state-hover");
        if (-1 != this.className.indexOf("ui-datepicker-prev")) {
          $(this).addClass("ui-datepicker-prev-hover");
        }
        if (-1 != this.className.indexOf("ui-datepicker-next")) {
          $(this).addClass("ui-datepicker-next-hover");
        }
      }
    });
  }
  /**
   * @param {?} target
   * @param {?} props
   * @return {?}
   */
  function extendRemove(target, props) {
    $.extend(target, props);
    var name;
    for (name in props) {
      if (null == props[name] || props[name] == mouseover) {
        target[name] = props[name];
      }
    }
    return target;
  }
  $.extend($.ui, {
    datepicker : {
      version : "1.9.2"
    }
  });
  /** @type {number} */
  var dpuuid = (new Date).getTime();
  var instActive;
  $.extend(Datepicker.prototype, {
    markerClassName : "hasDatepicker",
    maxRows : 4,
    /**
     * @return {undefined}
     */
    log : function() {
      if (this.debug) {
        console.log.apply("", arguments);
      }
    },
    /**
     * @return {?}
     */
    _widgetDatepicker : function() {
      return this.dpDiv;
    },
    /**
     * @param {Object} settings
     * @return {?}
     */
    setDefaults : function(settings) {
      extendRemove(this._defaults, settings || {});
      return this;
    },
    /**
     * @param {Object} target
     * @param {Object} settings
     * @return {undefined}
     */
    _attachDatepicker : function(target, settings) {
      /** @type {null} */
      var inlineSettings = null;
      var attrName;
      for (attrName in this._defaults) {
        var attrValue = target.getAttribute("date:" + attrName);
        if (attrValue) {
          inlineSettings = inlineSettings || {};
          try {
            /** @type {*} */
            inlineSettings[attrName] = eval(attrValue);
          } catch (j) {
            inlineSettings[attrName] = attrValue;
          }
        }
      }
      attrName = target.nodeName.toLowerCase();
      /** @type {boolean} */
      attrValue = "div" == attrName || "span" == attrName;
      if (!target.id) {
        this.uuid += 1;
        /** @type {string} */
        target.id = "dp" + this.uuid;
      }
      var inst = this._newInst($(target), attrValue);
      inst.settings = $.extend({}, settings || {}, inlineSettings || {});
      if ("input" == attrName) {
        this._connectDatepicker(target, inst);
      } else {
        if (attrValue) {
          this._inlineDatepicker(target, inst);
        }
      }
    },
    /**
     * @param {string} target
     * @param {boolean} inline
     * @return {?}
     */
    _newInst : function(target, inline) {
      return{
        id : target[0].id.replace(/([^A-Za-z0-9_-])/g, "\\\\$1"),
        input : target,
        selectedDay : 0,
        selectedMonth : 0,
        selectedYear : 0,
        drawMonth : 0,
        drawYear : 0,
        inline : inline,
        dpDiv : !inline ? this.dpDiv : bindHover($('<div class="' + this._inlineClass + ' ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"></div>'))
      };
    },
    /**
     * @param {string} cycle
     * @param {Function} ready
     * @return {undefined}
     */
    _connectDatepicker : function(cycle, ready) {
      var input = $(cycle);
      ready.append = $([]);
      ready.trigger = $([]);
      if (!input.hasClass(this.markerClassName)) {
        this._attachments(input, ready);
        input.addClass(this.markerClassName).keydown(this._doKeyDown).keypress(this._doKeyPress).keyup(this._doKeyUp).bind("setData.datepicker", function(dataAndEvents, i, offsetPosition) {
          /** @type {string} */
          ready.settings[i] = offsetPosition;
        }).bind("getData.datepicker", function(dataAndEvents, key) {
          return this._get(ready, key);
        });
        this._autoSize(ready);
        $.data(cycle, "datepicker", ready);
        if (ready.settings.disabled) {
          this._disableDatepicker(cycle);
        }
      }
    },
    /**
     * @param {Object} input
     * @param {Object} inst
     * @return {undefined}
     */
    _attachments : function(input, inst) {
      var buttonText = this._get(inst, "appendText");
      var isRTL = this._get(inst, "isRTL");
      if (inst.append) {
        inst.append.remove();
      }
      if (buttonText) {
        inst.append = $('<span class="' + this._appendClass + '">' + buttonText + "</span>");
        input[isRTL ? "before" : "after"](inst.append);
      }
      input.unbind("focus", this._showDatepicker);
      if (inst.trigger) {
        inst.trigger.remove();
      }
      buttonText = this._get(inst, "showOn");
      if ("focus" == buttonText || "both" == buttonText) {
        input.focus(this._showDatepicker);
      }
      if ("button" == buttonText || "both" == buttonText) {
        buttonText = this._get(inst, "buttonText");
        var buttonImage = this._get(inst, "buttonImage");
        inst.trigger = $(this._get(inst, "buttonImageOnly") ? $("<img/>").addClass(this._triggerClass).attr({
          src : buttonImage,
          alt : buttonText,
          title : buttonText
        }) : $('<button type="button"></button>').addClass(this._triggerClass).html("" == buttonImage ? buttonText : $("<img/>").attr({
          src : buttonImage,
          alt : buttonText,
          title : buttonText
        })));
        input[isRTL ? "before" : "after"](inst.trigger);
        inst.trigger.click(function() {
          if ($.datepicker._datepickerShowing && $.datepicker._lastInput == input[0]) {
            $.datepicker._hideDatepicker();
          } else {
            if ($.datepicker._datepickerShowing) {
              if ($.datepicker._lastInput != input[0]) {
                $.datepicker._hideDatepicker();
              }
            }
            $.datepicker._showDatepicker(input[0]);
          }
          return false;
        });
      }
    },
    /**
     * @param {Object} inst
     * @return {undefined}
     */
    _autoSize : function(inst) {
      if (this._get(inst, "autoSize") && !inst.inline) {
        /** @type {Date} */
        var date = new Date(2009, 11, 20);
        var dateFormat = this._get(inst, "dateFormat");
        if (dateFormat.match(/[DM]/)) {
          /**
           * @param {Array} codeSegments
           * @return {?}
           */
          var findMax = function(codeSegments) {
            /** @type {number} */
            var maxLineLength = 0;
            /** @type {number} */
            var maxI = 0;
            /** @type {number} */
            var i = 0;
            for (;i < codeSegments.length;i++) {
              if (codeSegments[i].length > maxLineLength) {
                maxLineLength = codeSegments[i].length;
                /** @type {number} */
                maxI = i;
              }
            }
            return maxI;
          };
          date.setMonth(findMax(this._get(inst, dateFormat.match(/MM/) ? "monthNames" : "monthNamesShort")));
          date.setDate(findMax(this._get(inst, dateFormat.match(/DD/) ? "dayNames" : "dayNamesShort")) + 20 - date.getDay());
        }
        inst.input.attr("size", this._formatDate(inst, date).length);
      }
    },
    /**
     * @param {string} cycle
     * @param {Function} ready
     * @return {undefined}
     */
    _inlineDatepicker : function(cycle, ready) {
      var divSpan = $(cycle);
      if (!divSpan.hasClass(this.markerClassName)) {
        divSpan.addClass(this.markerClassName).append(ready.dpDiv).bind("setData.datepicker", function(dataAndEvents, k, args) {
          /** @type {string} */
          ready.settings[k] = args;
        }).bind("getData.datepicker", function(dataAndEvents, key) {
          return this._get(ready, key);
        });
        $.data(cycle, "datepicker", ready);
        this._setDate(ready, this._getDefaultDate(ready), true);
        this._updateDatepicker(ready);
        this._updateAlternate(ready);
        if (ready.settings.disabled) {
          this._disableDatepicker(cycle);
        }
        ready.dpDiv.css("display", "block");
      }
    },
    /**
     * @param {Function} ready
     * @param {Object} date
     * @param {Function} onSelect
     * @param {Object} settings
     * @param {Object} pos
     * @return {?}
     */
    _dialogDatepicker : function(ready, date, onSelect, settings, pos) {
      ready = this._dialogInst;
      if (!ready) {
        this.uuid += 1;
        this._dialogInput = $('<input type="text" id="dp' + this.uuid + '" style="position: absolute; top: -100px; width: 0px;"/>');
        this._dialogInput.keydown(this._doKeyDown);
        $("body").append(this._dialogInput);
        ready = this._dialogInst = this._newInst(this._dialogInput, false);
        ready.settings = {};
        $.data(this._dialogInput[0], "datepicker", ready);
      }
      extendRemove(ready.settings, settings || {});
      date = date && date.constructor == Date ? this._formatDate(ready, date) : date;
      this._dialogInput.val(date);
      this._pos = pos ? pos.length ? pos : [pos.pageX, pos.pageY] : null;
      if (!this._pos) {
        /** @type {Array} */
        this._pos = [document.documentElement.clientWidth / 2 - 100 + (document.documentElement.scrollLeft || document.body.scrollLeft), document.documentElement.clientHeight / 2 - 150 + (document.documentElement.scrollTop || document.body.scrollTop)];
      }
      this._dialogInput.css("left", this._pos[0] + 20 + "px").css("top", this._pos[1] + "px");
      /** @type {Function} */
      ready.settings.onSelect = onSelect;
      /** @type {boolean} */
      this._inDialog = true;
      this.dpDiv.addClass(this._dialogClass);
      this._showDatepicker(this._dialogInput[0]);
      if ($.blockUI) {
        $.blockUI(this.dpDiv);
      }
      $.data(this._dialogInput[0], "datepicker", ready);
      return this;
    },
    /**
     * @param {string} cycle
     * @return {undefined}
     */
    _destroyDatepicker : function(cycle) {
      var $target = $(cycle);
      var inst = $.data(cycle, "datepicker");
      if ($target.hasClass(this.markerClassName)) {
        var no = cycle.nodeName.toLowerCase();
        $.removeData(cycle, "datepicker");
        if ("input" == no) {
          inst.append.remove();
          inst.trigger.remove();
          $target.removeClass(this.markerClassName).unbind("focus", this._showDatepicker).unbind("keydown", this._doKeyDown).unbind("keypress", this._doKeyPress).unbind("keyup", this._doKeyUp);
        } else {
          if ("div" == no || "span" == no) {
            $target.removeClass(this.markerClassName).empty();
          }
        }
      }
    },
    /**
     * @param {string} cycle
     * @return {undefined}
     */
    _enableDatepicker : function(cycle) {
      var $target = $(cycle);
      var inst = $.data(cycle, "datepicker");
      if ($target.hasClass(this.markerClassName)) {
        var no = cycle.nodeName.toLowerCase();
        if ("input" == no) {
          /** @type {boolean} */
          cycle.disabled = false;
          inst.trigger.filter("button").each(function() {
            /** @type {boolean} */
            this.disabled = false;
          }).end().filter("img").css({
            opacity : "1.0",
            cursor : ""
          });
        } else {
          if ("div" == no || "span" == no) {
            $target = $target.children("." + this._inlineClass);
            $target.children().removeClass("ui-state-disabled");
            $target.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", false);
          }
        }
        this._disabledInputs = $.map(this._disabledInputs, function(deepDataAndEvents) {
          return deepDataAndEvents == cycle ? null : deepDataAndEvents;
        });
      }
    },
    /**
     * @param {string} cycle
     * @return {undefined}
     */
    _disableDatepicker : function(cycle) {
      var $target = $(cycle);
      var inst = $.data(cycle, "datepicker");
      if ($target.hasClass(this.markerClassName)) {
        var no = cycle.nodeName.toLowerCase();
        if ("input" == no) {
          /** @type {boolean} */
          cycle.disabled = true;
          inst.trigger.filter("button").each(function() {
            /** @type {boolean} */
            this.disabled = true;
          }).end().filter("img").css({
            opacity : "0.5",
            cursor : "default"
          });
        } else {
          if ("div" == no || "span" == no) {
            $target = $target.children("." + this._inlineClass);
            $target.children().addClass("ui-state-disabled");
            $target.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", true);
          }
        }
        this._disabledInputs = $.map(this._disabledInputs, function(deepDataAndEvents) {
          return deepDataAndEvents == cycle ? null : deepDataAndEvents;
        });
        /** @type {string} */
        this._disabledInputs[this._disabledInputs.length] = cycle;
      }
    },
    /**
     * @param {Object} target
     * @return {?}
     */
    _isDisabledDatepicker : function(target) {
      if (!target) {
        return false;
      }
      /** @type {number} */
      var i = 0;
      for (;i < this._disabledInputs.length;i++) {
        if (this._disabledInputs[i] == target) {
          return true;
        }
      }
      return false;
    },
    /**
     * @param {string} cycle
     * @return {?}
     */
    _getInst : function(cycle) {
      try {
        return $.data(cycle, "datepicker");
      } catch (c) {
        throw "Missing instance data for this datepicker";
      }
    },
    /**
     * @param {string} target
     * @param {string} name
     * @param {?} value
     * @return {?}
     */
    _optionDatepicker : function(target, name, value) {
      var inst = this._getInst(target);
      if (2 == arguments.length && "string" == typeof name) {
        return "defaults" == name ? $.extend({}, $.datepicker._defaults) : inst ? "all" == name ? $.extend({}, inst.settings) : this._get(inst, name) : null;
      }
      var settings = name || {};
      if ("string" == typeof name) {
        settings = {};
        settings[name] = value;
      }
      if (inst) {
        if (this._curInst == inst) {
          this._hideDatepicker();
        }
        var date = this._getDateDatepicker(target, true);
        var minDate = this._getMinMaxDate(inst, "min");
        var maxDate = this._getMinMaxDate(inst, "max");
        extendRemove(inst.settings, settings);
        if (null !== minDate) {
          if (settings.dateFormat !== mouseover && settings.minDate === mouseover) {
            inst.settings.minDate = this._formatDate(inst, minDate);
          }
        }
        if (null !== maxDate) {
          if (settings.dateFormat !== mouseover && settings.maxDate === mouseover) {
            inst.settings.maxDate = this._formatDate(inst, maxDate);
          }
        }
        this._attachments($(target), inst);
        this._autoSize(inst);
        this._setDate(inst, date);
        this._updateAlternate(inst);
        this._updateDatepicker(inst);
      }
    },
    /**
     * @param {string} target
     * @param {string} name
     * @param {?} value
     * @return {undefined}
     */
    _changeDatepicker : function(target, name, value) {
      this._optionDatepicker(target, name, value);
    },
    /**
     * @param {Object} inst
     * @return {undefined}
     */
    _refreshDatepicker : function(inst) {
      if (inst = this._getInst(inst)) {
        this._updateDatepicker(inst);
      }
    },
    /**
     * @param {string} target
     * @param {Date} date
     * @return {undefined}
     */
    _setDateDatepicker : function(target, date) {
      var inst = this._getInst(target);
      if (inst) {
        this._setDate(inst, date);
        this._updateDatepicker(inst);
        this._updateAlternate(inst);
      }
    },
    /**
     * @param {string} target
     * @param {boolean} noDefault
     * @return {?}
     */
    _getDateDatepicker : function(target, noDefault) {
      var inst = this._getInst(target);
      if (inst) {
        if (!inst.inline) {
          this._setDateFromField(inst, noDefault);
        }
      }
      return inst ? this._getDate(inst) : null;
    },
    /**
     * @param {Object} event
     * @return {?}
     */
    _doKeyDown : function(event) {
      var inst = $.datepicker._getInst(event.target);
      /** @type {boolean} */
      var status = true;
      var isRTL = inst.dpDiv.is(".ui-datepicker-rtl");
      /** @type {boolean} */
      inst._keyEvent = true;
      if ($.datepicker._datepickerShowing) {
        switch(event.keyCode) {
          case 9:
            $.datepicker._hideDatepicker();
            /** @type {boolean} */
            status = false;
            break;
          case 13:
            return status = $("td." + $.datepicker._dayOverClass + ":not(." + $.datepicker._currentClass + ")", inst.dpDiv), status[0] && $.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, status[0]), (event = $.datepicker._get(inst, "onSelect")) ? (status = $.datepicker._formatDate(inst), event.apply(inst.input ? inst.input[0] : null, [status, inst])) : $.datepicker._hideDatepicker(), false;
          case 27:
            $.datepicker._hideDatepicker();
            break;
          case 33:
            $.datepicker._adjustDate(event.target, event.ctrlKey ? -$.datepicker._get(inst, "stepBigMonths") : -$.datepicker._get(inst, "stepMonths"), "M");
            break;
          case 34:
            $.datepicker._adjustDate(event.target, event.ctrlKey ? +$.datepicker._get(inst, "stepBigMonths") : +$.datepicker._get(inst, "stepMonths"), "M");
            break;
          case 35:
            if (event.ctrlKey || event.metaKey) {
              $.datepicker._clearDate(event.target);
            }
            status = event.ctrlKey || event.metaKey;
            break;
          case 36:
            if (event.ctrlKey || event.metaKey) {
              $.datepicker._gotoToday(event.target);
            }
            status = event.ctrlKey || event.metaKey;
            break;
          case 37:
            if (event.ctrlKey || event.metaKey) {
              $.datepicker._adjustDate(event.target, isRTL ? 1 : -1, "D");
            }
            status = event.ctrlKey || event.metaKey;
            if (event.originalEvent.altKey) {
              $.datepicker._adjustDate(event.target, event.ctrlKey ? -$.datepicker._get(inst, "stepBigMonths") : -$.datepicker._get(inst, "stepMonths"), "M");
            }
            break;
          case 38:
            if (event.ctrlKey || event.metaKey) {
              $.datepicker._adjustDate(event.target, -7, "D");
            }
            status = event.ctrlKey || event.metaKey;
            break;
          case 39:
            if (event.ctrlKey || event.metaKey) {
              $.datepicker._adjustDate(event.target, isRTL ? -1 : 1, "D");
            }
            status = event.ctrlKey || event.metaKey;
            if (event.originalEvent.altKey) {
              $.datepicker._adjustDate(event.target, event.ctrlKey ? +$.datepicker._get(inst, "stepBigMonths") : +$.datepicker._get(inst, "stepMonths"), "M");
            }
            break;
          case 40:
            if (event.ctrlKey || event.metaKey) {
              $.datepicker._adjustDate(event.target, 7, "D");
            }
            status = event.ctrlKey || event.metaKey;
            break;
          default:
            /** @type {boolean} */
            status = false;
        }
      } else {
        if (36 == event.keyCode && event.ctrlKey) {
          $.datepicker._showDatepicker(this);
        } else {
          /** @type {boolean} */
          status = false;
        }
      }
      if (status) {
        event.preventDefault();
        event.stopPropagation();
      }
    },
    /**
     * @param {Object} ev
     * @return {?}
     */
    _doKeyPress : function(ev) {
      var inst = $.datepicker._getInst(ev.target);
      if ($.datepicker._get(inst, "constrainInput")) {
        inst = $.datepicker._possibleChars($.datepicker._get(inst, "dateFormat"));
        /** @type {string} */
        var foo = String.fromCharCode(ev.charCode == mouseover ? ev.keyCode : ev.charCode);
        return ev.ctrlKey || (ev.metaKey || (" " > foo || (!inst || -1 < inst.indexOf(foo))));
      }
    },
    /**
     * @param {Object} inst
     * @return {?}
     */
    _doKeyUp : function(inst) {
      inst = $.datepicker._getInst(inst.target);
      if (inst.input.val() != inst.lastVal) {
        try {
          if ($.datepicker.parseDate($.datepicker._get(inst, "dateFormat"), inst.input ? inst.input.val() : null, $.datepicker._getFormatConfig(inst))) {
            $.datepicker._setDateFromField(inst);
            $.datepicker._updateAlternate(inst);
            $.datepicker._updateDatepicker(inst);
          }
        } catch (fmt) {
          $.datepicker.log(fmt);
        }
      }
      return true;
    },
    /**
     * @param {Object} input
     * @return {undefined}
     */
    _showDatepicker : function(input) {
      input = input.target || input;
      if ("input" != input.nodeName.toLowerCase()) {
        input = $("input", input.parentNode)[0];
      }
      if (!($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput == input)) {
        var inst = $.datepicker._getInst(input);
        if ($.datepicker._curInst) {
          if ($.datepicker._curInst != inst) {
            $.datepicker._curInst.dpDiv.stop(true, true);
            if (inst) {
              if ($.datepicker._datepickerShowing) {
                $.datepicker._hideDatepicker($.datepicker._curInst.input[0]);
              }
            }
          }
        }
        var cycle = $.datepicker._get(inst, "beforeShow");
        cycle = cycle ? cycle.apply(input, [input, inst]) : {};
        if (false !== cycle) {
          extendRemove(inst.settings, cycle);
          /** @type {null} */
          inst.lastVal = null;
          /** @type {Object} */
          $.datepicker._lastInput = input;
          $.datepicker._setDateFromField(inst);
          if ($.datepicker._inDialog) {
            /** @type {string} */
            input.value = "";
          }
          if (!$.datepicker._pos) {
            $.datepicker._pos = $.datepicker._findPos(input);
            $.datepicker._pos[1] += input.offsetHeight;
          }
          /** @type {boolean} */
          var isFixed = false;
          $(input).parents().each(function() {
            /** @type {number} */
            isFixed = isFixed | $(this).css("position") == "fixed";
            return!isFixed;
          });
          cycle = {
            left : $.datepicker._pos[0],
            top : $.datepicker._pos[1]
          };
          /** @type {null} */
          $.datepicker._pos = null;
          inst.dpDiv.empty();
          inst.dpDiv.css({
            position : "absolute",
            display : "block",
            top : "-1000px"
          });
          $.datepicker._updateDatepicker(inst);
          cycle = $.datepicker._checkOffset(inst, cycle, isFixed);
          inst.dpDiv.css({
            position : $.datepicker._inDialog && $.blockUI ? "static" : isFixed ? "fixed" : "absolute",
            display : "none",
            left : cycle.left + "px",
            top : cycle.top + "px"
          });
          if (!inst.inline) {
            cycle = $.datepicker._get(inst, "showAnim");
            var ready = $.datepicker._get(inst, "duration");
            /**
             * @return {undefined}
             */
            var type = function() {
              var cover = inst.dpDiv.find("iframe.ui-datepicker-cover");
              if (cover.length) {
                var d = $.datepicker._getBorders(inst.dpDiv);
                cover.css({
                  left : -d[0],
                  top : -d[1],
                  width : inst.dpDiv.outerWidth(),
                  height : inst.dpDiv.outerHeight()
                });
              }
            };
            inst.dpDiv.zIndex($(input).zIndex() + 1);
            /** @type {boolean} */
            $.datepicker._datepickerShowing = true;
            if ($.effects && ($.effects.effect[cycle] || $.effects[cycle])) {
              inst.dpDiv.show(cycle, $.datepicker._get(inst, "showOptions"), ready, type);
            } else {
              inst.dpDiv[cycle || "show"](cycle ? ready : null, type);
            }
            if (!cycle || !ready) {
              type();
            }
            if (inst.input.is(":visible")) {
              if (!inst.input.is(":disabled")) {
                inst.input.focus();
              }
            }
            $.datepicker._curInst = inst;
          }
        }
      }
    },
    /**
     * @param {Object} inst
     * @return {undefined}
     */
    _updateDatepicker : function(inst) {
      /** @type {number} */
      this.maxRows = 4;
      var lines = $.datepicker._getBorders(inst.dpDiv);
      /** @type {Object} */
      instActive = inst;
      inst.dpDiv.empty().append(this._generateHTML(inst));
      this._attachHandlers(inst);
      var line = inst.dpDiv.find("iframe.ui-datepicker-cover");
      if (line.length) {
        line.css({
          left : -lines[0],
          top : -lines[1],
          width : inst.dpDiv.outerWidth(),
          height : inst.dpDiv.outerHeight()
        });
      }
      inst.dpDiv.find("." + this._dayOverClass + " a").mouseover();
      lines = this._getNumberOfMonths(inst);
      line = lines[1];
      inst.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width("");
      if (1 < line) {
        inst.dpDiv.addClass("ui-datepicker-multi-" + line).css("width", 17 * line + "em");
      }
      inst.dpDiv[(1 != lines[0] || 1 != lines[1] ? "add" : "remove") + "Class"]("ui-datepicker-multi");
      inst.dpDiv[(this._get(inst, "isRTL") ? "add" : "remove") + "Class"]("ui-datepicker-rtl");
      if (inst == $.datepicker._curInst) {
        if ($.datepicker._datepickerShowing && (inst.input && (inst.input.is(":visible") && (!inst.input.is(":disabled") && inst.input[0] != document.activeElement)))) {
          inst.input.focus();
        }
      }
      if (inst.yearshtml) {
        var origyearshtml = inst.yearshtml;
        setTimeout(function() {
          if (origyearshtml === inst.yearshtml) {
            if (inst.yearshtml) {
              inst.dpDiv.find("select.ui-datepicker-year:first").replaceWith(inst.yearshtml);
            }
          }
          /** @type {null} */
          origyearshtml = inst.yearshtml = null;
        }, 0);
      }
    },
    /**
     * @param {?} elem
     * @return {?}
     */
    _getBorders : function(elem) {
      /**
       * @param {string} value
       * @return {?}
       */
      var convert = function(value) {
        return{
          thin : 1,
          medium : 2,
          thick : 3
        }[value] || value;
      };
      return[parseFloat(convert(elem.css("border-left-width"))), parseFloat(convert(elem.css("border-top-width")))];
    },
    /**
     * @param {?} inst
     * @param {?} offset
     * @param {boolean} isFixed
     * @return {?}
     */
    _checkOffset : function(inst, offset, isFixed) {
      var dpWidth = inst.dpDiv.outerWidth();
      var dpHeight = inst.dpDiv.outerHeight();
      var inputWidth = inst.input ? inst.input.outerWidth() : 0;
      var inputHeight = inst.input ? inst.input.outerHeight() : 0;
      var viewWidth = document.documentElement.clientWidth + (isFixed ? 0 : $(document).scrollLeft());
      var viewHeight = document.documentElement.clientHeight + (isFixed ? 0 : $(document).scrollTop());
      offset.left -= this._get(inst, "isRTL") ? dpWidth - inputWidth : 0;
      offset.left -= isFixed && offset.left == inst.input.offset().left ? $(document).scrollLeft() : 0;
      offset.top -= isFixed && offset.top == inst.input.offset().top + inputHeight ? $(document).scrollTop() : 0;
      offset.left -= Math.min(offset.left, offset.left + dpWidth > viewWidth && viewWidth > dpWidth ? Math.abs(offset.left + dpWidth - viewWidth) : 0);
      offset.top -= Math.min(offset.top, offset.top + dpHeight > viewHeight && viewHeight > dpHeight ? Math.abs(dpHeight + inputHeight) : 0);
      return offset;
    },
    /**
     * @param {string} cycle
     * @return {?}
     */
    _findPos : function(cycle) {
      var inst = this._getInst(cycle);
      inst = this._get(inst, "isRTL");
      for (;cycle && ("hidden" == cycle.type || (1 != cycle.nodeType || $.expr.filters.hidden(cycle)));) {
        cycle = cycle[inst ? "previousSibling" : "nextSibling"];
      }
      cycle = $(cycle).offset();
      return[cycle.left, cycle.top];
    },
    /**
     * @param {string} cycle
     * @return {undefined}
     */
    _hideDatepicker : function(cycle) {
      var inst = this._curInst;
      if (inst && (!(cycle && inst != $.data(cycle, "datepicker")) && this._datepickerShowing)) {
        cycle = this._get(inst, "showAnim");
        var ready = this._get(inst, "duration");
        /**
         * @return {undefined}
         */
        var key = function() {
          $.datepicker._tidyDialog(inst);
        };
        if ($.effects && ($.effects.effect[cycle] || $.effects[cycle])) {
          inst.dpDiv.hide(cycle, $.datepicker._get(inst, "showOptions"), ready, key);
        } else {
          inst.dpDiv["slideDown" == cycle ? "slideUp" : "fadeIn" == cycle ? "fadeOut" : "hide"](cycle ? ready : null, key);
        }
        if (!cycle) {
          key();
        }
        /** @type {boolean} */
        this._datepickerShowing = false;
        if (cycle = this._get(inst, "onClose")) {
          cycle.apply(inst.input ? inst.input[0] : null, [inst.input ? inst.input.val() : "", inst]);
        }
        /** @type {null} */
        this._lastInput = null;
        if (this._inDialog) {
          this._dialogInput.css({
            position : "absolute",
            left : "0",
            top : "-100px"
          });
          if ($.blockUI) {
            $.unblockUI();
            $("body").append(this.dpDiv);
          }
        }
        /** @type {boolean} */
        this._inDialog = false;
      }
    },
    /**
     * @param {?} inst
     * @return {undefined}
     */
    _tidyDialog : function(inst) {
      inst.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-calendar");
    },
    /**
     * @param {Object} elem
     * @return {undefined}
     */
    _checkExternalClick : function(elem) {
      if ($.datepicker._curInst) {
        elem = $(elem.target);
        var inst = $.datepicker._getInst(elem[0]);
        if (elem[0].id != $.datepicker._mainDivId && (0 == elem.parents("#" + $.datepicker._mainDivId).length && (!elem.hasClass($.datepicker.markerClassName) && (!elem.closest("." + $.datepicker._triggerClass).length && ($.datepicker._datepickerShowing && (!$.datepicker._inDialog || !$.blockUI))))) || elem.hasClass($.datepicker.markerClassName) && $.datepicker._curInst != inst) {
          $.datepicker._hideDatepicker();
        }
      }
    },
    /**
     * @param {(Array|string)} target
     * @param {number} opt_attributes
     * @param {string} period
     * @return {undefined}
     */
    _adjustDate : function(target, opt_attributes, period) {
      target = $(target);
      var inst = this._getInst(target[0]);
      if (!this._isDisabledDatepicker(target[0])) {
        this._adjustInstDate(inst, opt_attributes + ("M" == period ? this._get(inst, "showCurrentAtPos") : 0), period);
        this._updateDatepicker(inst);
      }
    },
    /**
     * @param {(Array|string)} target
     * @return {undefined}
     */
    _gotoToday : function(target) {
      target = $(target);
      var inst = this._getInst(target[0]);
      if (this._get(inst, "gotoCurrent") && inst.currentDay) {
        inst.selectedDay = inst.currentDay;
        inst.drawMonth = inst.selectedMonth = inst.currentMonth;
        inst.drawYear = inst.selectedYear = inst.currentYear;
      } else {
        /** @type {Date} */
        var tempDate = new Date;
        /** @type {number} */
        inst.selectedDay = tempDate.getDate();
        /** @type {number} */
        inst.drawMonth = inst.selectedMonth = tempDate.getMonth();
        /** @type {number} */
        inst.drawYear = inst.selectedYear = tempDate.getFullYear();
      }
      this._notifyChange(inst);
      this._adjustDate(target);
    },
    /**
     * @param {(Array|string)} target
     * @param {Element} select
     * @param {string} period
     * @return {undefined}
     */
    _selectMonthYear : function(target, select, period) {
      target = $(target);
      var inst = this._getInst(target[0]);
      /** @type {number} */
      inst["selected" + ("M" == period ? "Month" : "Year")] = inst["draw" + ("M" == period ? "Month" : "Year")] = parseInt(select.options[select.selectedIndex].value, 10);
      this._notifyChange(inst);
      this._adjustDate(target);
    },
    /**
     * @param {?} id
     * @param {?} month
     * @param {?} year
     * @param {?} td
     * @return {undefined}
     */
    _selectDay : function(id, month, year, td) {
      var inst = $(id);
      if (!$(td).hasClass(this._unselectableClass)) {
        if (!this._isDisabledDatepicker(inst[0])) {
          inst = this._getInst(inst[0]);
          inst.selectedDay = inst.currentDay = $("a", td).html();
          inst.selectedMonth = inst.currentMonth = month;
          inst.selectedYear = inst.currentYear = year;
          this._selectDate(id, this._formatDate(inst, inst.currentDay, inst.currentMonth, inst.currentYear));
        }
      }
    },
    /**
     * @param {(Array|number)} target
     * @return {undefined}
     */
    _clearDate : function(target) {
      target = $(target);
      this._getInst(target[0]);
      this._selectDate(target, "");
    },
    /**
     * @param {?} id
     * @param {string} min
     * @return {undefined}
     */
    _selectDate : function(id, min) {
      var inst = $(id);
      inst = this._getInst(inst[0]);
      min = null != min ? min : this._formatDate(inst);
      if (inst.input) {
        inst.input.val(min);
      }
      this._updateAlternate(inst);
      var onSelect = this._get(inst, "onSelect");
      if (onSelect) {
        onSelect.apply(inst.input ? inst.input[0] : null, [min, inst]);
      } else {
        if (inst.input) {
          inst.input.trigger("change");
        }
      }
      if (inst.inline) {
        this._updateDatepicker(inst);
      } else {
        this._hideDatepicker();
        this._lastInput = inst.input[0];
        if ("object" != typeof inst.input[0]) {
          inst.input.focus();
        }
        /** @type {null} */
        this._lastInput = null;
      }
    },
    /**
     * @param {Function} inst
     * @return {undefined}
     */
    _updateAlternate : function(inst) {
      var altField = this._get(inst, "altField");
      if (altField) {
        var altFormat = this._get(inst, "altFormat") || this._get(inst, "dateFormat");
        var date = this._getDate(inst);
        var dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));
        $(altField).each(function() {
          $(this).val(dateStr);
        });
      }
    },
    /**
     * @param {number} date
     * @return {?}
     */
    noWeekends : function(date) {
      date = date.getDay();
      return[0 < date && 6 > date, ""];
    },
    /**
     * @param {Date} date
     * @return {?}
     */
    iso8601Week : function(date) {
      /** @type {Date} */
      date = new Date(date.getTime());
      date.setDate(date.getDate() + 4 - (date.getDay() || 7));
      /** @type {number} */
      var curDate = date.getTime();
      date.setMonth(0);
      date.setDate(1);
      return Math.floor(Math.round((curDate - date) / 864E5) / 7) + 1;
    },
    /**
     * @param {string} format
     * @param {string} value
     * @param {number} settings
     * @return {?}
     */
    parseDate : function(format, value, settings) {
      if (null == format || null == value) {
        throw "Invalid arguments";
      }
      value = "object" == typeof value ? value.toString() : value + "";
      if ("" == value) {
        return null;
      }
      var string = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff;
      string = "string" != typeof string ? string : (new Date).getFullYear() % 100 + parseInt(string, 10);
      var extra = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort;
      var dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames;
      var monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort;
      var monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames;
      /** @type {number} */
      var month = settings = -1;
      /** @type {number} */
      var day = -1;
      /** @type {number} */
      var doy = -1;
      /** @type {boolean} */
      var w = false;
      /**
       * @param {boolean} match
       * @return {?}
       */
      var lookAhead = function(match) {
        if (match = iFormat + 1 < format.length && format.charAt(iFormat + 1) == match) {
          iFormat++;
        }
        return match;
      };
      /**
       * @param {string} match
       * @return {?}
       */
      var getNumber = function(match) {
        var isDoubled = lookAhead(match);
        /** @type {RegExp} */
        match = RegExp("^\\d{1," + ("@" == match ? 14 : "!" == match ? 20 : "y" == match && isDoubled ? 4 : "o" == match ? 3 : 2) + "}");
        match = value.substring(iValue).match(match);
        if (!match) {
          throw "Missing number at position " + iValue;
        }
        iValue += match[0].length;
        return parseInt(match[0], 10);
      };
      /**
       * @param {Object} match
       * @param {?} shortNames
       * @param {?} longNames
       * @return {?}
       */
      var getName = function(match, shortNames, longNames) {
        match = $.map(lookAhead(match) ? longNames : shortNames, function(dataAndEvents, deepDataAndEvents) {
          return[[deepDataAndEvents, dataAndEvents]];
        }).sort(function(replies, captures) {
          return-(replies[1].length - captures[1].length);
        });
        /** @type {number} */
        var item = -1;
        $.each(match, function(dataAndEvents, items) {
          var name = items[1];
          if (value.substr(iValue, name.length).toLowerCase() == name.toLowerCase()) {
            return item = items[0], iValue += name.length, false;
          }
        });
        if (-1 != item) {
          return item + 1;
        }
        throw "Unknown name at position " + iValue;
      };
      /**
       * @return {undefined}
       */
      var checkLiteral = function() {
        if (value.charAt(iValue) != format.charAt(iFormat)) {
          throw "Unexpected literal at position " + iValue;
        }
        iValue++;
      };
      /** @type {number} */
      var iValue = 0;
      /** @type {number} */
      var iFormat = 0;
      for (;iFormat < format.length;iFormat++) {
        if (w) {
          if ("'" == format.charAt(iFormat) && !lookAhead("'")) {
            /** @type {boolean} */
            w = false;
          } else {
            checkLiteral();
          }
        } else {
          switch(format.charAt(iFormat)) {
            case "d":
              day = getNumber("d");
              break;
            case "D":
              getName("D", extra, dayNames);
              break;
            case "o":
              doy = getNumber("o");
              break;
            case "m":
              month = getNumber("m");
              break;
            case "M":
              month = getName("M", monthNamesShort, monthNames);
              break;
            case "y":
              settings = getNumber("y");
              break;
            case "@":
              /** @type {Date} */
              var date = new Date(getNumber("@"));
              /** @type {number} */
              settings = date.getFullYear();
              /** @type {number} */
              month = date.getMonth() + 1;
              /** @type {number} */
              day = date.getDate();
              break;
            case "!":
              /** @type {Date} */
              date = new Date((getNumber("!") - this._ticksTo1970) / 1E4);
              /** @type {number} */
              settings = date.getFullYear();
              /** @type {number} */
              month = date.getMonth() + 1;
              /** @type {number} */
              day = date.getDate();
              break;
            case "'":
              if (lookAhead("'")) {
                checkLiteral();
              } else {
                /** @type {boolean} */
                w = true;
              }
              break;
            default:
              checkLiteral();
          }
        }
      }
      if (iValue < value.length && (extra = value.substr(iValue), !/^\s+/.test(extra))) {
        throw "Extra/unparsed characters found in date: " + extra;
      }
      if (-1 == settings) {
        /** @type {number} */
        settings = (new Date).getFullYear();
      } else {
        if (100 > settings) {
          settings += (new Date).getFullYear() - (new Date).getFullYear() % 100 + (settings <= string ? 0 : -100);
        }
      }
      if (-1 < doy) {
        /** @type {number} */
        month = 1;
        day = doy;
        do {
          string = this._getDaysInMonth(settings, month - 1);
          if (day <= string) {
            break;
          }
          month++;
          day -= string;
        } while (1);
      }
      date = this._daylightSavingAdjust(new Date(settings, month - 1, day));
      if (date.getFullYear() != settings || (date.getMonth() + 1 != month || date.getDate() != day)) {
        throw "Invalid date";
      }
      return date;
    },
    ATOM : "yy-mm-dd",
    COOKIE : "D, dd M yy",
    ISO_8601 : "yy-mm-dd",
    RFC_822 : "D, d M y",
    RFC_850 : "DD, dd-M-y",
    RFC_1036 : "D, d M y",
    RFC_1123 : "D, d M yy",
    RFC_2822 : "D, d M yy",
    RSS : "D, d M y",
    TICKS : "!",
    TIMESTAMP : "@",
    W3C : "yy-mm-dd",
    _ticksTo1970 : 864E9 * (718685 + Math.floor(492.5) - Math.floor(19.7) + Math.floor(4.925)),
    /**
     * @param {string} format
     * @param {Date} date
     * @param {string} settings
     * @return {?}
     */
    formatDate : function(format, date, settings) {
      if (!date) {
        return "";
      }
      var remove = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort;
      var lineStart = (settings ? settings.dayNames : null) || this._defaults.dayNames;
      var fx = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort;
      settings = (settings ? settings.monthNames : null) || this._defaults.monthNames;
      /**
       * @param {boolean} x
       * @return {?}
       */
      var pad = function(x) {
        if (x = iFormat + 1 < format.length && format.charAt(iFormat + 1) == x) {
          iFormat++;
        }
        return x;
      };
      /**
       * @param {string} value
       * @param {string} num
       * @param {number} len
       * @return {?}
       */
      var formatNumber = function(value, num, len) {
        /** @type {string} */
        num = "" + num;
        if (pad(value)) {
          for (;num.length < len;) {
            /** @type {string} */
            num = "0" + num;
          }
        }
        return num;
      };
      /** @type {string} */
      var output = "";
      /** @type {boolean} */
      var y = false;
      if (date) {
        /** @type {number} */
        var iFormat = 0;
        for (;iFormat < format.length;iFormat++) {
          if (y) {
            if ("'" == format.charAt(iFormat) && !pad("'")) {
              /** @type {boolean} */
              y = false;
            } else {
              output += format.charAt(iFormat);
            }
          } else {
            switch(format.charAt(iFormat)) {
              case "d":
                output += formatNumber("d", date.getDate(), 2);
                break;
              case "D":
                var i;
                i = date.getDay();
                var type = remove;
                var j = lineStart;
                i = pad("D") ? j[i] : type[i];
                output += i;
                break;
              case "o":
                output += formatNumber("o", Math.round(((new Date(date.getFullYear(), date.getMonth(), date.getDate())).getTime() - (new Date(date.getFullYear(), 0, 0)).getTime()) / 864E5), 3);
                break;
              case "m":
                output += formatNumber("m", date.getMonth() + 1, 2);
                break;
              case "M":
                i = date.getMonth();
                type = fx;
                /** @type {string} */
                j = settings;
                i = pad("M") ? j[i] : type[i];
                output += i;
                break;
              case "y":
                output += pad("y") ? date.getFullYear() : (10 > date.getYear() % 100 ? "0" : "") + date.getYear() % 100;
                break;
              case "@":
                output += date.getTime();
                break;
              case "!":
                output += 1E4 * date.getTime() + this._ticksTo1970;
                break;
              case "'":
                if (pad("'")) {
                  output += "'";
                } else {
                  /** @type {boolean} */
                  y = true;
                }
                break;
              default:
                output += format.charAt(iFormat);
            }
          }
        }
      }
      return output;
    },
    /**
     * @param {string} format
     * @return {?}
     */
    _possibleChars : function(format) {
      /** @type {string} */
      var chars = "";
      /** @type {boolean} */
      var c = false;
      /**
       * @param {boolean} object
       * @return {?}
       */
      var freeze = function(object) {
        if (object = iFormat + 1 < format.length && format.charAt(iFormat + 1) == object) {
          iFormat++;
        }
        return object;
      };
      /** @type {number} */
      var iFormat = 0;
      for (;iFormat < format.length;iFormat++) {
        if (c) {
          if ("'" == format.charAt(iFormat) && !freeze("'")) {
            /** @type {boolean} */
            c = false;
          } else {
            chars += format.charAt(iFormat);
          }
        } else {
          switch(format.charAt(iFormat)) {
            case "d":
            ;
            case "m":
            ;
            case "y":
            ;
            case "@":
              chars += "0123456789";
              break;
            case "D":
            ;
            case "M":
              return null;
            case "'":
              if (freeze("'")) {
                chars += "'";
              } else {
                /** @type {boolean} */
                c = true;
              }
              break;
            default:
              chars += format.charAt(iFormat);
          }
        }
      }
      return chars;
    },
    /**
     * @param {Function} inst
     * @param {string} name
     * @return {?}
     */
    _get : function(inst, name) {
      return inst.settings[name] !== mouseover ? inst.settings[name] : this._defaults[name];
    },
    /**
     * @param {Object} inst
     * @param {boolean} noDefault
     * @return {undefined}
     */
    _setDateFromField : function(inst, noDefault) {
      if (inst.input.val() != inst.lastVal) {
        var dateFormat = this._get(inst, "dateFormat");
        var dates = inst.lastVal = inst.input ? inst.input.val() : null;
        var date;
        var defaultDate;
        date = defaultDate = this._getDefaultDate(inst);
        var settings = this._getFormatConfig(inst);
        try {
          date = this.parseDate(dateFormat, dates, settings) || defaultDate;
        } catch (trace) {
          this.log(trace);
          dates = noDefault ? "" : dates;
        }
        inst.selectedDay = date.getDate();
        inst.drawMonth = inst.selectedMonth = date.getMonth();
        inst.drawYear = inst.selectedYear = date.getFullYear();
        inst.currentDay = dates ? date.getDate() : 0;
        inst.currentMonth = dates ? date.getMonth() : 0;
        inst.currentYear = dates ? date.getFullYear() : 0;
        this._adjustInstDate(inst);
      }
    },
    /**
     * @param {Object} inst
     * @return {?}
     */
    _getDefaultDate : function(inst) {
      return this._restrictMinMax(inst, this._determineDate(inst, this._get(inst, "defaultDate"), new Date));
    },
    /**
     * @param {string} inst
     * @param {Object} value
     * @param {number} default_value
     * @return {?}
     */
    _determineDate : function(inst, value, default_value) {
      if (null == value || "" === value) {
        /** @type {number} */
        value = default_value;
      } else {
        var month;
        if ("string" == typeof value) {
          a: {
            try {
              month = $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"), value, $.datepicker._getFormatConfig(inst));
              break a;
            } catch (g) {
            }
            var recurring = (value.toLowerCase().match(/^c/) ? $.datepicker._getDate(inst) : null) || new Date;
            inst = recurring.getFullYear();
            month = recurring.getMonth();
            recurring = recurring.getDate();
            /** @type {RegExp} */
            var rtagName = /([+-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g;
            /** @type {(Array.<string>|null)} */
            var isFunction = rtagName.exec(value);
            for (;isFunction;) {
              switch(isFunction[2] || "d") {
                case "d":
                ;
                case "D":
                  recurring += parseInt(isFunction[1], 10);
                  break;
                case "w":
                ;
                case "W":
                  recurring += 7 * parseInt(isFunction[1], 10);
                  break;
                case "m":
                ;
                case "M":
                  month += parseInt(isFunction[1], 10);
                  /** @type {number} */
                  recurring = Math.min(recurring, $.datepicker._getDaysInMonth(inst, month));
                  break;
                case "y":
                ;
                case "Y":
                  inst += parseInt(isFunction[1], 10);
                  /** @type {number} */
                  recurring = Math.min(recurring, $.datepicker._getDaysInMonth(inst, month));
              }
              /** @type {(Array.<string>|null)} */
              isFunction = rtagName.exec(value);
            }
            /** @type {Date} */
            month = new Date(inst, month, recurring);
          }
        } else {
          if ("number" == typeof value) {
            if (isNaN(value)) {
              /** @type {number} */
              value = default_value;
            } else {
              /** @type {Date} */
              inst = new Date;
              inst.setDate(inst.getDate() + value);
              /** @type {string} */
              value = inst;
            }
          } else {
            /** @type {Date} */
            value = new Date(value.getTime());
          }
          /** @type {Object} */
          month = value;
        }
        value = month;
      }
      if (value = value && "Invalid Date" == value.toString() ? default_value : value) {
        value.setHours(0);
        value.setMinutes(0);
        value.setSeconds(0);
        value.setMilliseconds(0);
      }
      return this._daylightSavingAdjust(value);
    },
    /**
     * @param {Date} date
     * @return {?}
     */
    _daylightSavingAdjust : function(date) {
      if (!date) {
        return null;
      }
      date.setHours(12 < date.getHours() ? date.getHours() + 2 : 0);
      return date;
    },
    /**
     * @param {?} inst
     * @param {Date} date
     * @param {boolean} dataAndEvents
     * @return {undefined}
     */
    _setDate : function(inst, date, dataAndEvents) {
      /** @type {boolean} */
      var clear = !date;
      var origMonth = inst.selectedMonth;
      var origYear = inst.selectedYear;
      date = this._restrictMinMax(inst, this._determineDate(inst, date, new Date));
      inst.selectedDay = inst.currentDay = date.getDate();
      inst.drawMonth = inst.selectedMonth = inst.currentMonth = date.getMonth();
      inst.drawYear = inst.selectedYear = inst.currentYear = date.getFullYear();
      if (origMonth != inst.selectedMonth || origYear != inst.selectedYear) {
        if (!dataAndEvents) {
          this._notifyChange(inst);
        }
      }
      this._adjustInstDate(inst);
      if (inst.input) {
        inst.input.val(clear ? "" : this._formatDate(inst));
      }
    },
    /**
     * @param {Object} inst
     * @return {?}
     */
    _getDate : function(inst) {
      return!inst.currentYear || inst.input && "" == inst.input.val() ? null : this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay));
    },
    /**
     * @param {Object} inst
     * @return {undefined}
     */
    _attachHandlers : function(inst) {
      var stepMonths = this._get(inst, "stepMonths");
      var id = "#" + inst.id.replace(/\\\\/g, "\\");
      inst.dpDiv.find("[data-handler]").map(function() {
        $(this).bind(this.getAttribute("data-event"), {
          /**
           * @return {undefined}
           */
          prev : function() {
            window["DP_jQuery_" + dpuuid].datepicker._adjustDate(id, -stepMonths, "M");
          },
          /**
           * @return {undefined}
           */
          next : function() {
            window["DP_jQuery_" + dpuuid].datepicker._adjustDate(id, +stepMonths, "M");
          },
          /**
           * @return {undefined}
           */
          hide : function() {
            window["DP_jQuery_" + dpuuid].datepicker._hideDatepicker();
          },
          /**
           * @return {undefined}
           */
          today : function() {
            window["DP_jQuery_" + dpuuid].datepicker._gotoToday(id);
          },
          /**
           * @return {?}
           */
          selectDay : function() {
            window["DP_jQuery_" + dpuuid].datepicker._selectDay(id, +this.getAttribute("data-month"), +this.getAttribute("data-year"), this);
            return false;
          },
          /**
           * @return {?}
           */
          selectMonth : function() {
            window["DP_jQuery_" + dpuuid].datepicker._selectMonthYear(id, this, "M");
            return false;
          },
          /**
           * @return {?}
           */
          selectYear : function() {
            window["DP_jQuery_" + dpuuid].datepicker._selectMonthYear(id, this, "Y");
            return false;
          }
        }[this.getAttribute("data-handler")]);
      });
    },
    /**
     * @param {Object} inst
     * @return {?}
     */
    _generateHTML : function(inst) {
      /** @type {Date} */
      var selectedDate = new Date;
      selectedDate = this._daylightSavingAdjust(new Date(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate()));
      var isRTL = this._get(inst, "isRTL");
      var ret = this._get(inst, "showButtonPanel");
      var hideIfNoPrevNext = this._get(inst, "hideIfNoPrevNext");
      var firstDay = this._get(inst, "navigationAsDateFormat");
      var numMonths = this._getNumberOfMonths(inst);
      var drawMonth = this._get(inst, "showCurrentAtPos");
      var currentText = this._get(inst, "stepMonths");
      /** @type {boolean} */
      var date = 1 != numMonths[0] || 1 != numMonths[1];
      var currentDate = this._daylightSavingAdjust(!inst.currentDay ? new Date(9999, 9, 9) : new Date(inst.currentYear, inst.currentMonth, inst.currentDay));
      var minDate = this._getMinMaxDate(inst, "min");
      var maxDate = this._getMinMaxDate(inst, "max");
      /** @type {number} */
      drawMonth = inst.drawMonth - drawMonth;
      var drawYear = inst.drawYear;
      if (0 > drawMonth) {
        drawMonth += 12;
        drawYear--;
      }
      if (maxDate) {
        var maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(), maxDate.getMonth() - numMonths[0] * numMonths[1] + 1, maxDate.getDate()));
        maxDraw = minDate && maxDraw < minDate ? minDate : maxDraw;
        for (;this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw;) {
          drawMonth--;
          if (0 > drawMonth) {
            /** @type {number} */
            drawMonth = 11;
            drawYear--;
          }
        }
      }
      /** @type {number} */
      inst.drawMonth = drawMonth;
      inst.drawYear = drawYear;
      maxDraw = this._get(inst, "prevText");
      maxDraw = !firstDay ? maxDraw : this.formatDate(maxDraw, this._daylightSavingAdjust(new Date(drawYear, drawMonth - currentText, 1)), this._getFormatConfig(inst));
      /** @type {string} */
      maxDraw = this._canAdjustMonth(inst, -1, drawYear, drawMonth) ? '<a class="ui-datepicker-prev ui-corner-all" data-handler="prev" data-event="click" title="' + maxDraw + '"><span class="ui-icon ui-icon-circle-triangle-' + (isRTL ? "e" : "w") + '">' + maxDraw + "</span></a>" : hideIfNoPrevNext ? "" : '<a class="ui-datepicker-prev ui-corner-all ui-state-disabled" title="' + maxDraw + '"><span class="ui-icon ui-icon-circle-triangle-' + (isRTL ? "e" : "w") + '">' + maxDraw + "</span></a>";
      var nextText = this._get(inst, "nextText");
      nextText = !firstDay ? nextText : this.formatDate(nextText, this._daylightSavingAdjust(new Date(drawYear, drawMonth + currentText, 1)), this._getFormatConfig(inst));
      /** @type {string} */
      hideIfNoPrevNext = this._canAdjustMonth(inst, 1, drawYear, drawMonth) ? '<a class="ui-datepicker-next ui-corner-all" data-handler="next" data-event="click" title="' + nextText + '"><span class="ui-icon ui-icon-circle-triangle-' + (isRTL ? "w" : "e") + '">' + nextText + "</span></a>" : hideIfNoPrevNext ? "" : '<a class="ui-datepicker-next ui-corner-all ui-state-disabled" title="' + nextText + '"><span class="ui-icon ui-icon-circle-triangle-' + (isRTL ? "w" : "e") + '">' + nextText + "</span></a>";
      currentText = this._get(inst, "currentText");
      nextText = this._get(inst, "gotoCurrent") && inst.currentDay ? currentDate : selectedDate;
      currentText = !firstDay ? currentText : this.formatDate(currentText, nextText, this._getFormatConfig(inst));
      /** @type {string} */
      firstDay = !inst.inline ? '<button type="button" class="ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all" data-handler="hide" data-event="click">' + this._get(inst, "closeText") + "</button>" : "";
      /** @type {string} */
      ret = ret ? '<div class="ui-datepicker-buttonpane ui-widget-content">' + (isRTL ? firstDay : "") + (this._isInRange(inst, nextText) ? '<button type="button" class="ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all" data-handler="today" data-event="click">' + currentText + "</button>" : "") + (isRTL ? "" : firstDay) + "</div>" : "";
      /** @type {number} */
      firstDay = parseInt(this._get(inst, "firstDay"), 10);
      /** @type {number} */
      firstDay = isNaN(firstDay) ? 0 : firstDay;
      currentText = this._get(inst, "showWeek");
      nextText = this._get(inst, "dayNames");
      this._get(inst, "dayNamesShort");
      var dayNamesMin = this._get(inst, "dayNamesMin");
      var monthNames = this._get(inst, "monthNames");
      var monthNamesShort = this._get(inst, "monthNamesShort");
      var beforeShowDay = this._get(inst, "beforeShowDay");
      var showOtherMonths = this._get(inst, "showOtherMonths");
      var selectOtherMonths = this._get(inst, "selectOtherMonths");
      this._get(inst, "calculateWeek");
      var defaultDate = this._getDefaultDate(inst);
      /** @type {string} */
      var html = "";
      /** @type {number} */
      var y2 = 0;
      for (;y2 < numMonths[0];y2++) {
        /** @type {string} */
        var group = "";
        /** @type {number} */
        this.maxRows = 4;
        /** @type {number} */
        var y1 = 0;
        for (;y1 < numMonths[1];y1++) {
          var today = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));
          /** @type {string} */
          var newValue = " ui-corner-all";
          /** @type {string} */
          var base = "";
          if (date) {
            base += '<div class="ui-datepicker-group';
            if (1 < numMonths[1]) {
              switch(y1) {
                case 0:
                  base += " ui-datepicker-group-first";
                  /** @type {string} */
                  newValue = " ui-corner-" + (isRTL ? "right" : "left");
                  break;
                case numMonths[1] - 1:
                  base += " ui-datepicker-group-last";
                  /** @type {string} */
                  newValue = " ui-corner-" + (isRTL ? "left" : "right");
                  break;
                default:
                  base += " ui-datepicker-group-middle";
                  /** @type {string} */
                  newValue = "";
              }
            }
            base += '">';
          }
          /** @type {string} */
          base = base + ('<div class="ui-datepicker-header ui-widget-header ui-helper-clearfix' + newValue + '">' + (/all|left/.test(newValue) && 0 == y2 ? isRTL ? hideIfNoPrevNext : maxDraw : "") + (/all|right/.test(newValue) && 0 == y2 ? isRTL ? maxDraw : hideIfNoPrevNext : "") + this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate, 0 < y2 || 0 < y1, monthNames, monthNamesShort) + '</div><table class="ui-datepicker-calendar"><thead><tr>');
          /** @type {string} */
          var value = currentText ? '<th class="ui-datepicker-week-col">' + this._get(inst, "weekHeader") + "</th>" : "";
          /** @type {number} */
          newValue = 0;
          for (;7 > newValue;newValue++) {
            /** @type {number} */
            var printDate = (newValue + firstDay) % 7;
            /** @type {string} */
            value = value + ("<th" + (5 <= (newValue + firstDay + 6) % 7 ? ' class="ui-datepicker-week-end"' : "") + '><span title="' + nextText[printDate] + '">' + dayNamesMin[printDate] + "</span></th>");
          }
          base += value + "</tr></thead><tbody>";
          value = this._getDaysInMonth(drawYear, drawMonth);
          if (drawYear == inst.selectedYear) {
            if (drawMonth == inst.selectedMonth) {
              /** @type {number} */
              inst.selectedDay = Math.min(inst.selectedDay, value);
            }
          }
          /** @type {number} */
          newValue = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;
          /** @type {number} */
          value = Math.ceil((newValue + value) / 7);
          /** @type {number} */
          this.maxRows = value = date ? this.maxRows > value ? this.maxRows : value : value;
          printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - newValue));
          /** @type {number} */
          var upper = 0;
          for (;upper < value;upper++) {
            /** @type {string} */
            base = base + "<tr>";
            /** @type {string} */
            var indent = !currentText ? "" : '<td class="ui-datepicker-week-col">' + this._get(inst, "calculateWeek")(printDate) + "</td>";
            /** @type {number} */
            newValue = 0;
            for (;7 > newValue;newValue++) {
              var daySettings = beforeShowDay ? beforeShowDay.apply(inst.input ? inst.input[0] : null, [printDate]) : [true, ""];
              /** @type {boolean} */
              var otherMonth = printDate.getMonth() != drawMonth;
              var unselectable = otherMonth && !selectOtherMonths || (!daySettings[0] || (minDate && printDate < minDate || maxDate && printDate > maxDate));
              /** @type {string} */
              indent = indent + ('<td class="' + (5 <= (newValue + firstDay + 6) % 7 ? " ui-datepicker-week-end" : "") + (otherMonth ? " ui-datepicker-other-month" : "") + (printDate.getTime() == today.getTime() && (drawMonth == inst.selectedMonth && inst._keyEvent) || defaultDate.getTime() == printDate.getTime() && defaultDate.getTime() == today.getTime() ? " " + this._dayOverClass : "") + (unselectable ? " " + this._unselectableClass + " ui-state-disabled" : "") + (otherMonth && !showOtherMonths ? 
              "" : " " + daySettings[1] + (printDate.getTime() == currentDate.getTime() ? " " + this._currentClass : "") + (printDate.getTime() == selectedDate.getTime() ? " ui-datepicker-today" : "")) + '"' + ((!otherMonth || showOtherMonths) && daySettings[2] ? ' title="' + daySettings[2] + '"' : "") + (unselectable ? "" : ' data-handler="selectDay" data-event="click" data-month="' + printDate.getMonth() + '" data-year="' + printDate.getFullYear() + '"') + ">" + (otherMonth && !showOtherMonths ? 
              "&#xa0;" : unselectable ? '<span class="ui-state-default">' + printDate.getDate() + "</span>" : '<a class="ui-state-default' + (printDate.getTime() == selectedDate.getTime() ? " ui-state-highlight" : "") + (printDate.getTime() == currentDate.getTime() ? " ui-state-active" : "") + (otherMonth ? " ui-priority-secondary" : "") + '" href="#">' + printDate.getDate() + "</a>") + "</td>");
              printDate.setDate(printDate.getDate() + 1);
              printDate = this._daylightSavingAdjust(printDate);
            }
            base += indent + "</tr>";
          }
          drawMonth++;
          if (11 < drawMonth) {
            /** @type {number} */
            drawMonth = 0;
            drawYear++;
          }
          base += "</tbody></table>" + (date ? "</div>" + (0 < numMonths[0] && y1 == numMonths[1] - 1 ? '<div class="ui-datepicker-row-break"></div>' : "") : "");
          group += base;
        }
        html += group;
      }
      html += ret + ($.ui.ie6 && !inst.inline ? '<iframe src="javascript:false;" class="ui-datepicker-cover" frameborder="0"></iframe>' : "");
      /** @type {boolean} */
      inst._keyEvent = false;
      return html;
    },
    /**
     * @param {Function} inst
     * @param {number} year
     * @param {number} drawYear
     * @param {string} minDate
     * @param {boolean} maxDate
     * @param {boolean} secondary
     * @param {Function} determineYear
     * @param {number} recurring
     * @return {?}
     */
    _generateMonthYearHeader : function(inst, year, drawYear, minDate, maxDate, secondary, determineYear, recurring) {
      var changeMonth = this._get(inst, "changeMonth");
      var changeYear = this._get(inst, "changeYear");
      var showMonthAfterYear = this._get(inst, "showMonthAfterYear");
      /** @type {string} */
      var html = '<div class="ui-datepicker-title">';
      /** @type {string} */
      var monthHtml = "";
      if (secondary || !changeMonth) {
        monthHtml += '<span class="ui-datepicker-month">' + determineYear[year] + "</span>";
      } else {
        determineYear = minDate && minDate.getFullYear() == drawYear;
        var inMaxYear = maxDate && maxDate.getFullYear() == drawYear;
        /** @type {string} */
        monthHtml = monthHtml + '<select class="ui-datepicker-month" data-handler="selectMonth" data-event="change">';
        /** @type {number} */
        var month = 0;
        for (;12 > month;month++) {
          if ((!determineYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth())) {
            monthHtml += '<option value="' + month + '"' + (month == year ? ' selected="selected"' : "") + ">" + recurring[month] + "</option>";
          }
        }
        monthHtml += "</select>";
      }
      if (!showMonthAfterYear) {
        html += monthHtml + (secondary || (!changeMonth || !changeYear) ? "&#xa0;" : "");
      }
      if (!inst.yearshtml) {
        if (inst.yearshtml = "", secondary || !changeYear) {
          html += '<span class="ui-datepicker-year">' + drawYear + "</span>";
        } else {
          recurring = this._get(inst, "yearRange").split(":");
          /** @type {number} */
          var thisYear = (new Date).getFullYear();
          /**
           * @param {number} value
           * @return {?}
           */
          determineYear = function(value) {
            value = value.match(/c[+-].*/) ? drawYear + parseInt(value.substring(1), 10) : value.match(/[+-].*/) ? thisYear + parseInt(value, 10) : parseInt(value, 10);
            return isNaN(value) ? thisYear : value;
          };
          year = determineYear(recurring[0]);
          /** @type {number} */
          recurring = Math.max(year, determineYear(recurring[1] || ""));
          year = minDate ? Math.max(year, minDate.getFullYear()) : year;
          /** @type {number} */
          recurring = maxDate ? Math.min(recurring, maxDate.getFullYear()) : recurring;
          inst.yearshtml += '<select class="ui-datepicker-year" data-handler="selectYear" data-event="change">';
          for (;year <= recurring;year++) {
            inst.yearshtml += '<option value="' + year + '"' + (year == drawYear ? ' selected="selected"' : "") + ">" + year + "</option>";
          }
          inst.yearshtml += "</select>";
          html += inst.yearshtml;
          /** @type {null} */
          inst.yearshtml = null;
        }
      }
      html += this._get(inst, "yearSuffix");
      if (showMonthAfterYear) {
        html += (secondary || (!changeMonth || !changeYear) ? "&#xa0;" : "") + monthHtml;
      }
      return html + "</div>";
    },
    /**
     * @param {?} inst
     * @param {number} offset
     * @param {string} period
     * @return {undefined}
     */
    _adjustInstDate : function(inst, offset, period) {
      var year = inst.drawYear + ("Y" == period ? offset : 0);
      var month = inst.drawMonth + ("M" == period ? offset : 0);
      offset = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) + ("D" == period ? offset : 0);
      year = this._restrictMinMax(inst, this._daylightSavingAdjust(new Date(year, month, offset)));
      inst.selectedDay = year.getDate();
      inst.drawMonth = inst.selectedMonth = year.getMonth();
      inst.drawYear = inst.selectedYear = year.getFullYear();
      if ("M" == period || "Y" == period) {
        this._notifyChange(inst);
      }
    },
    /**
     * @param {?} inst
     * @param {?} date
     * @return {?}
     */
    _restrictMinMax : function(inst, date) {
      var minDate = this._getMinMaxDate(inst, "min");
      var maxDate = this._getMinMaxDate(inst, "max");
      minDate = minDate && date < minDate ? minDate : date;
      return maxDate && minDate > maxDate ? maxDate : minDate;
    },
    /**
     * @param {?} inst
     * @return {undefined}
     */
    _notifyChange : function(inst) {
      var onChange = this._get(inst, "onChangeMonthYear");
      if (onChange) {
        onChange.apply(inst.input ? inst.input[0] : null, [inst.selectedYear, inst.selectedMonth + 1, inst]);
      }
    },
    /**
     * @param {Object} inst
     * @return {?}
     */
    _getNumberOfMonths : function(inst) {
      inst = this._get(inst, "numberOfMonths");
      return null == inst ? [1, 1] : "number" == typeof inst ? [1, inst] : inst;
    },
    /**
     * @param {Object} inst
     * @param {string} minMax
     * @return {?}
     */
    _getMinMaxDate : function(inst, minMax) {
      return this._determineDate(inst, this._get(inst, minMax + "Date"), null);
    },
    /**
     * @param {string} year
     * @param {number} month
     * @return {?}
     */
    _getDaysInMonth : function(year, month) {
      return 32 - this._daylightSavingAdjust(new Date(year, month, 32)).getDate();
    },
    /**
     * @param {string} year
     * @param {Function} month
     * @return {?}
     */
    _getFirstDayOfMonth : function(year, month) {
      return(new Date(year, month, 1)).getDay();
    },
    /**
     * @param {Object} inst
     * @param {number} offset
     * @param {(Object|number)} date
     * @param {number} curMonth
     * @return {?}
     */
    _canAdjustMonth : function(inst, offset, date, curMonth) {
      var numMonths = this._getNumberOfMonths(inst);
      date = this._daylightSavingAdjust(new Date(date, curMonth + (0 > offset ? offset : numMonths[0] * numMonths[1]), 1));
      if (0 > offset) {
        date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()));
      }
      return this._isInRange(inst, date);
    },
    /**
     * @param {Object} inst
     * @param {(Object|number)} date
     * @return {?}
     */
    _isInRange : function(inst, date) {
      var minDate = this._getMinMaxDate(inst, "min");
      var maxDate = this._getMinMaxDate(inst, "max");
      return(!minDate || date.getTime() >= minDate.getTime()) && (!maxDate || date.getTime() <= maxDate.getTime());
    },
    /**
     * @param {Function} inst
     * @return {?}
     */
    _getFormatConfig : function(inst) {
      var shortYearCutoff = this._get(inst, "shortYearCutoff");
      shortYearCutoff = "string" != typeof shortYearCutoff ? shortYearCutoff : (new Date).getFullYear() % 100 + parseInt(shortYearCutoff, 10);
      return{
        shortYearCutoff : shortYearCutoff,
        dayNamesShort : this._get(inst, "dayNamesShort"),
        dayNames : this._get(inst, "dayNames"),
        monthNamesShort : this._get(inst, "monthNamesShort"),
        monthNames : this._get(inst, "monthNames")
      };
    },
    /**
     * @param {Function} inst
     * @param {string} day
     * @param {string} month
     * @param {string} year
     * @return {?}
     */
    _formatDate : function(inst, day, month, year) {
      if (!day) {
        inst.currentDay = inst.selectedDay;
        inst.currentMonth = inst.selectedMonth;
        inst.currentYear = inst.selectedYear;
      }
      day = day ? "object" == typeof day ? day : this._daylightSavingAdjust(new Date(year, month, day)) : this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay));
      return this.formatDate(this._get(inst, "dateFormat"), day, this._getFormatConfig(inst));
    }
  });
  /**
   * @param {string} options
   * @return {?}
   */
  $.fn.datepicker = function(options) {
    if (!this.length) {
      return this;
    }
    if (!$.datepicker.initialized) {
      $(document).mousedown($.datepicker._checkExternalClick).find(document.body).append($.datepicker.dpDiv);
      /** @type {boolean} */
      $.datepicker.initialized = true;
    }
    /** @type {Array.<?>} */
    var otherArgs = Array.prototype.slice.call(arguments, 1);
    return "string" == typeof options && ("isDisabled" == options || ("getDate" == options || "widget" == options)) || "option" == options && (2 == arguments.length && "string" == typeof arguments[1]) ? $.datepicker["_" + options + "Datepicker"].apply($.datepicker, [this[0]].concat(otherArgs)) : this.each(function() {
      if (typeof options == "string") {
        $.datepicker["_" + options + "Datepicker"].apply($.datepicker, [this].concat(otherArgs));
      } else {
        $.datepicker._attachDatepicker(this, options);
      }
    });
  };
  $.datepicker = new Datepicker;
  /** @type {boolean} */
  $.datepicker.initialized = false;
  /** @type {number} */
  $.datepicker.uuid = (new Date).getTime();
  /** @type {string} */
  $.datepicker.version = "1.9.2";
  /** @type {Object} */
  window["DP_jQuery_" + dpuuid] = $;
})(jQuery);
(function($) {
  /**
   * @param {string} key
   * @param {string} value
   * @param {?} opt_attributes
   * @return {?}
   */
  $.cookie = function(key, value, opt_attributes) {
    if (1 < arguments.length && (!/Object/.test(Object.prototype.toString.call(value)) || (null === value || void 0 === value))) {
      opt_attributes = $.extend({}, opt_attributes);
      if (null === value || void 0 === value) {
        /** @type {number} */
        opt_attributes.expires = -1;
      }
      if ("number" === typeof opt_attributes.expires) {
        /** @type {number} */
        var decode = opt_attributes.expires;
        /** @type {Date} */
        var dt = opt_attributes.expires = new Date;
        dt.setDate(dt.getDate() + decode);
      }
      /** @type {string} */
      value = String(value);
      return document.cookie = [encodeURIComponent(key), "=", opt_attributes.raw ? value : encodeURIComponent(value), opt_attributes.expires ? "; expires=" + opt_attributes.expires.toUTCString() : "", opt_attributes.path ? "; path=" + opt_attributes.path : "", opt_attributes.domain ? "; domain=" + opt_attributes.domain : "", opt_attributes.secure ? "; secure" : ""].join("");
    }
    opt_attributes = value || {};
    /** @type {Function} */
    decode = opt_attributes.raw ? function(s) {
      return s;
    } : decodeURIComponent;
    /** @type {Array.<string>} */
    dt = document.cookie.split("; ");
    /** @type {number} */
    var i = 0;
    var pair;
    for (;pair = dt[i] && dt[i].split("=");i++) {
      if (decode(pair[0]) === key) {
        return decode(pair[1] || "");
      }
    }
    return null;
  };
})(jQuery);
(function($) {
  /**
   * @param {Object} e
   * @return {undefined}
   */
  function type(e) {
    var options = e.data;
    if (!e.isDefaultPrevented()) {
      e.preventDefault();
      $(this).ajaxSubmit(options);
    }
  }
  /**
   * @param {Object} e
   * @return {undefined}
   */
  function ready(e) {
    var target = e.target;
    var el = $(target);
    if (!el.is(":submit,input:image")) {
      target = el.closest(":submit");
      if (0 === target.length) {
        return;
      }
      target = target[0];
    }
    var form = this;
    form.clk = target;
    if ("image" == target.type) {
      if (void 0 !== e.offsetX) {
        form.clk_x = e.offsetX;
        form.clk_y = e.offsetY;
      } else {
        if ("function" == typeof $.fn.offset) {
          el = el.offset();
          /** @type {number} */
          form.clk_x = e.pageX - el.left;
          /** @type {number} */
          form.clk_y = e.pageY - el.top;
        } else {
          /** @type {number} */
          form.clk_x = e.pageX - target.offsetLeft;
          /** @type {number} */
          form.clk_y = e.pageY - target.offsetTop;
        }
      }
    }
    setTimeout(function() {
      /** @type {null} */
      form.clk = form.clk_x = form.clk_y = null;
    }, 100);
  }
  /**
   * @return {undefined}
   */
  function log() {
    if ($.fn.ajaxSubmit.debug) {
      /** @type {string} */
      var fmt = "[jquery.form] " + Array.prototype.join.call(arguments, "");
      if (window.console && window.console.log) {
        window.console.log(fmt);
      } else {
        if (window.opera) {
          if (window.opera.postError) {
            window.opera.postError(fmt);
          }
        }
      }
    }
  }
  var k;
  var d;
  /** @type {boolean} */
  k = void 0 !== $("<input type='file'/>").get(0).files;
  /** @type {boolean} */
  d = void 0 !== window.FormData;
  /**
   * @param {string} cycle
   * @return {?}
   */
  $.fn.ajaxSubmit = function(cycle) {
    /**
     * @param {Object} c
     * @return {undefined}
     */
    function fileUploadIframe(c) {
      /**
       * @return {undefined}
       */
      function doSubmit() {
        /**
         * @return {undefined}
         */
        function checkState() {
          try {
            var state = (io.contentWindow ? io.contentWindow.document : io.contentDocument ? io.contentDocument : io.document).readyState;
            log("state = " + state);
            if (state) {
              if ("uninitialized" == state.toLowerCase()) {
                setTimeout(checkState, 50);
              }
            }
          } catch (e) {
            log("Server abort: ", e, " (", e.name, ")");
            cb(success);
            if (tref) {
              clearTimeout(tref);
            }
            tref = void 0;
          }
        }
        var theId = $form.attr("target");
        var a = $form.attr("action");
        fix.setAttribute("target", caption);
        if (!method) {
          fix.setAttribute("method", "POST");
        }
        if (a != s.url) {
          fix.setAttribute("action", s.url);
        }
        if (!s.skipEncodingOverride) {
          if (!method || /post/i.test(method)) {
            $form.attr({
              encoding : "multipart/form-data",
              enctype : "multipart/form-data"
            });
          }
        }
        if (s.timeout) {
          /** @type {number} */
          tref = setTimeout(function() {
            /** @type {boolean} */
            G = true;
            cb(fail);
          }, s.timeout);
        }
        /** @type {Array} */
        var scripts = [];
        try {
          if (s.extraData) {
            var n;
            for (n in s.extraData) {
              if (s.extraData.hasOwnProperty(n)) {
                scripts.push($('<input type="hidden" name="' + n + '">').attr("value", s.extraData[n]).appendTo(fix)[0]);
              }
            }
          }
          if (!s.iframeTarget) {
            $io.appendTo("body");
            if (io.attachEvent) {
              io.attachEvent("onload", cb);
            } else {
              io.addEventListener("load", cb, false);
            }
          }
          setTimeout(checkState, 15);
          fix.submit();
        } finally {
          fix.setAttribute("action", a);
          if (theId) {
            fix.setAttribute("target", theId);
          } else {
            $form.removeAttr("target");
          }
          $(scripts).remove();
        }
      }
      /**
       * @param {string} status
       * @return {undefined}
       */
      function cb(status) {
        if (!xhr.aborted && !C) {
          try {
            doc = io.contentWindow ? io.contentWindow.document : io.contentDocument ? io.contentDocument : io.document;
          } catch (ex) {
            log("cannot access response document: ", ex);
            /** @type {number} */
            status = success;
          }
          if (status === fail && xhr) {
            xhr.abort("timeout");
          } else {
            if (status == success && xhr) {
              xhr.abort("server abort");
            } else {
              if (doc && doc.location.href != s.iframeSrc || G) {
                if (io.detachEvent) {
                  io.detachEvent("onload", cb);
                } else {
                  io.removeEventListener("load", cb, false);
                }
                /** @type {string} */
                status = "success";
                var errMsg;
                try {
                  if (G) {
                    throw "timeout";
                  }
                  var req = "xml" == s.dataType || (doc.XMLDocument || $.isXMLDoc(doc));
                  log("isXml=" + req);
                  if (!req && (window.opera && (null === doc.body || !doc.body.innerHTML) && --T)) {
                    log("requeing onLoad callback, DOM not available");
                    setTimeout(cb, 250);
                    return;
                  }
                  var docRoot = doc.body ? doc.body : doc.documentElement;
                  xhr.responseText = docRoot ? docRoot.innerHTML : null;
                  xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc;
                  if (req) {
                    /** @type {string} */
                    s.dataType = "xml";
                  }
                  /**
                   * @param {string} key
                   * @return {?}
                   */
                  xhr.getResponseHeader = function(key) {
                    return{
                      "content-type" : s.dataType
                    }[key];
                  };
                  if (docRoot) {
                    xhr.status = Number(docRoot.getAttribute("status")) || xhr.status;
                    xhr.statusText = docRoot.getAttribute("statusText") || xhr.statusText;
                  }
                  var dt = (s.dataType || "").toLowerCase();
                  /** @type {boolean} */
                  var scr = /(json|script|text)/.test(dt);
                  if (scr || s.textarea) {
                    var ta = doc.getElementsByTagName("textarea")[0];
                    if (ta) {
                      xhr.responseText = ta.value;
                      xhr.status = Number(ta.getAttribute("status")) || xhr.status;
                      xhr.statusText = ta.getAttribute("statusText") || xhr.statusText;
                    } else {
                      if (scr) {
                        var pre = doc.getElementsByTagName("pre")[0];
                        var b = doc.getElementsByTagName("body")[0];
                        if (pre) {
                          xhr.responseText = pre.textContent ? pre.textContent : pre.innerText;
                        } else {
                          if (b) {
                            xhr.responseText = b.textContent ? b.textContent : b.innerText;
                          }
                        }
                      }
                    }
                  } else {
                    if ("xml" == dt) {
                      if (!xhr.responseXML && xhr.responseText) {
                        xhr.responseXML = toXml(xhr.responseText);
                      }
                    }
                  }
                  try {
                    req = xhr;
                    docRoot = s;
                    var ct = req.getResponseHeader("content-type") || "";
                    /** @type {boolean} */
                    var xml = "xml" === dt || !dt && 0 <= ct.indexOf("xml");
                    var data = xml ? req.responseXML : req.responseText;
                    if (xml) {
                      if ("parsererror" === data.documentElement.nodeName) {
                        if ($.error) {
                          $.error("parsererror");
                        }
                      }
                    }
                    if (docRoot) {
                      if (docRoot.dataFilter) {
                        data = docRoot.dataFilter(data, dt);
                      }
                    }
                    if ("string" === typeof data) {
                      if ("json" === dt || !dt && 0 <= ct.indexOf("json")) {
                        data = fun(data);
                      } else {
                        if ("script" === dt || !dt && 0 <= ct.indexOf("javascript")) {
                          $.globalEval(data);
                        }
                      }
                    }
                    header = data;
                  } catch (err) {
                    /** @type {string} */
                    status = "parsererror";
                    xhr.error = errMsg = err || status;
                  }
                } catch (e) {
                  log("error caught: ", e);
                  /** @type {string} */
                  status = "error";
                  xhr.error = errMsg = e || status;
                }
                if (xhr.aborted) {
                  log("upload aborted");
                  /** @type {null} */
                  status = null;
                }
                if (xhr.status) {
                  /** @type {string} */
                  status = 200 <= xhr.status && 300 > xhr.status || 304 === xhr.status ? "success" : "error";
                }
                if ("success" === status) {
                  if (s.success) {
                    s.success.call(s.context, header, "success", xhr);
                  }
                  if (g) {
                    $.event.trigger("ajaxSuccess", [xhr, s]);
                  }
                } else {
                  if (status) {
                    if (void 0 === errMsg) {
                      errMsg = xhr.statusText;
                    }
                    if (s.error) {
                      s.error.call(s.context, xhr, status, errMsg);
                    }
                    if (g) {
                      $.event.trigger("ajaxError", [xhr, s, errMsg]);
                    }
                  }
                }
                if (g) {
                  $.event.trigger("ajaxComplete", [xhr, s]);
                }
                if (g) {
                  if (!--$.active) {
                    $.event.trigger("ajaxStop");
                  }
                }
                if (s.complete) {
                  s.complete.call(s.context, xhr, status);
                }
                /** @type {boolean} */
                C = true;
                if (s.timeout) {
                  clearTimeout(tref);
                }
                setTimeout(function() {
                  if (!s.iframeTarget) {
                    $io.remove();
                  }
                  /** @type {null} */
                  xhr.responseXML = null;
                }, 100);
              }
            }
          }
        }
      }
      var fix = $form[0];
      var i;
      var s;
      var g;
      var caption;
      var $io;
      var io;
      var xhr;
      var d;
      var G;
      var tref;
      /** @type {boolean} */
      d = !!$.fn.prop;
      if ($(":input[name=submit],:input[id=submit]", fix).length) {
        alert('Error: Form elements must not have name or id of "submit".');
      } else {
        if (c) {
          /** @type {number} */
          i = 0;
          for (;i < elements.length;i++) {
            c = $(elements[i]);
            if (d) {
              c.prop("disabled", false);
            } else {
              c.removeAttr("disabled");
            }
          }
        }
        s = $.extend(true, {}, $.ajaxSettings, cycle);
        s.context = s.context || s;
        /** @type {string} */
        caption = "jqFormIO" + (new Date).getTime();
        if (s.iframeTarget) {
          $io = $(s.iframeTarget);
          if (c = $io.attr("name")) {
            /** @type {Object} */
            caption = c;
          } else {
            $io.attr("name", caption);
          }
        } else {
          $io = $('<iframe name="' + caption + '" src="' + s.iframeSrc + '" />');
          $io.css({
            position : "absolute",
            top : "-1000px",
            left : "-1000px"
          });
        }
        io = $io[0];
        xhr = {
          aborted : 0,
          responseText : null,
          responseXML : null,
          status : 0,
          statusText : "n/a",
          /**
           * @return {undefined}
           */
          getAllResponseHeaders : function() {
          },
          /**
           * @return {undefined}
           */
          getResponseHeader : function() {
          },
          /**
           * @return {undefined}
           */
          setRequestHeader : function() {
          },
          /**
           * @param {string} status
           * @return {undefined}
           */
          abort : function(status) {
            /** @type {string} */
            var e = status === "timeout" ? "timeout" : "aborted";
            log("aborting upload... " + e);
            /** @type {number} */
            this.aborted = 1;
            $io.attr("src", s.iframeSrc);
            /** @type {string} */
            xhr.error = e;
            if (s.error) {
              s.error.call(s.context, xhr, e, status);
            }
            if (g) {
              $.event.trigger("ajaxError", [xhr, s, e]);
            }
            if (s.complete) {
              s.complete.call(s.context, xhr, e);
            }
          }
        };
        if (g = s.global) {
          if (0 === $.active++) {
            $.event.trigger("ajaxStart");
          }
        }
        if (g) {
          $.event.trigger("ajaxSend", [xhr, s]);
        }
        if (s.beforeSend && false === s.beforeSend.call(s.context, xhr, s)) {
          if (s.global) {
            $.active--;
          }
        } else {
          if (!xhr.aborted) {
            if (d = fix.clk) {
              if ((c = d.name) && !d.disabled) {
                s.extraData = s.extraData || {};
                s.extraData[c] = d.value;
                if ("image" == d.type) {
                  s.extraData[c + ".x"] = fix.clk_x;
                  s.extraData[c + ".y"] = fix.clk_y;
                }
              }
            }
            /** @type {number} */
            var fail = 1;
            /** @type {number} */
            var success = 2;
            d = $("meta[name=csrf-token]").attr("content");
            if ((c = $("meta[name=csrf-param]").attr("content")) && d) {
              s.extraData = s.extraData || {};
              s.extraData[c] = d;
            }
            if (s.forceSync) {
              doSubmit();
            } else {
              setTimeout(doSubmit, 10);
            }
            var header;
            var doc;
            /** @type {number} */
            var T = 50;
            var C;
            var toXml = $.parseXML || function(s, doc) {
              if (window.ActiveXObject) {
                doc = new ActiveXObject("Microsoft.XMLDOM");
                /** @type {string} */
                doc.async = "false";
                doc.loadXML(s);
              } else {
                /** @type {(Document|null)} */
                doc = (new DOMParser).parseFromString(s, "text/xml");
              }
              return doc && (doc.documentElement && doc.documentElement.nodeName != "parsererror") ? doc : null;
            };
            var fun = $.parseJSON || function(triggerChange) {
              return window.eval("(" + triggerChange + ")");
            };
          }
        }
      }
    }
    if (!this.length) {
      return log("ajaxSubmit: skipping submit process - no element selected"), this;
    }
    var method;
    var url;
    var $form = this;
    if ("function" == typeof cycle) {
      cycle = {
        success : cycle
      };
    }
    method = this.attr("method");
    url = this.attr("action");
    if (url = (url = "string" === typeof url ? $.trim(url) : "") || (window.location.href || "")) {
      url = (url.match(/^([^#]+)/) || [])[1];
    }
    cycle = $.extend(true, {
      url : url,
      success : $.ajaxSettings.success,
      type : method || "GET",
      iframeSrc : /^https/i.test(window.location.href || "") ? "javascript:false" : "about:blank"
    }, cycle);
    url = {};
    this.trigger("form-pre-serialize", [this, cycle, url]);
    if (url.veto) {
      return log("ajaxSubmit: submit vetoed via form-pre-serialize trigger"), this;
    }
    if (cycle.beforeSerialize && false === cycle.beforeSerialize(this, cycle)) {
      return log("ajaxSubmit: submit aborted via beforeSerialize callback"), this;
    }
    var traditional = cycle.traditional;
    if (void 0 === traditional) {
      traditional = $.ajaxSettings.traditional;
    }
    /** @type {Array} */
    var elements = [];
    var i;
    var a = this.formToArray(cycle.semantic, elements);
    if (cycle.data) {
      cycle.extraData = cycle.data;
      i = $.param(cycle.data, traditional);
    }
    if (cycle.beforeSubmit && false === cycle.beforeSubmit(a, this, cycle)) {
      return log("ajaxSubmit: submit aborted via beforeSubmit callback"), this;
    }
    this.trigger("form-submit-validate", [a, this, cycle, url]);
    if (url.veto) {
      return log("ajaxSubmit: submit vetoed via form-submit-validate trigger"), this;
    }
    url = $.param(a, traditional);
    if (i) {
      url = url ? url + "&" + i : i;
    }
    if ("GET" == cycle.type.toUpperCase()) {
      cycle.url += (0 <= cycle.url.indexOf("?") ? "&" : "?") + url;
      /** @type {null} */
      cycle.data = null;
    } else {
      cycle.data = url;
    }
    /** @type {Array} */
    var callbacks = [];
    if (cycle.resetForm) {
      callbacks.push(function() {
        $form.resetForm();
      });
    }
    if (cycle.clearForm) {
      callbacks.push(function() {
        $form.clearForm(cycle.includeHidden);
      });
    }
    if (!cycle.dataType && cycle.target) {
      /** @type {Function} */
      var attributes = cycle.success || function() {
      };
      callbacks.push(function(data) {
        /** @type {string} */
        var fn = cycle.replaceTarget ? "replaceWith" : "html";
        $(cycle.target)[fn](data).each(attributes, arguments);
      });
    } else {
      if (cycle.success) {
        callbacks.push(cycle.success);
      }
    }
    /**
     * @param {string} type
     * @param {Function} name
     * @param {Function} types
     * @return {undefined}
     */
    cycle.success = function(type, name, types) {
      var newArgs = cycle.context || cycle;
      /** @type {number} */
      var i = 0;
      /** @type {number} */
      var len = callbacks.length;
      for (;i < len;i++) {
        callbacks[i].apply(newArgs, [type, name, types || $form, $form]);
      }
    };
    /** @type {boolean} */
    i = 0 < $("input:file:enabled[value]", this).length;
    /** @type {boolean} */
    url = "multipart/form-data" == $form.attr("enctype") || "multipart/form-data" == $form.attr("encoding");
    traditional = k && d;
    log("fileAPI :" + traditional);
    if (false !== cycle.iframe && (cycle.iframe || (i || url) && !traditional)) {
      if (cycle.closeKeepAlive) {
        $.get(cycle.closeKeepAlive, function() {
          fileUploadIframe(a);
        });
      } else {
        fileUploadIframe(a);
      }
    } else {
      if ((i || url) && traditional) {
        /** @type {FormData} */
        var formdata = new FormData;
        /** @type {number} */
        i = 0;
        for (;i < a.length;i++) {
          formdata.append(a[i].name, a[i].value);
        }
        if (cycle.extraData) {
          var fix;
          for (fix in cycle.extraData) {
            if (cycle.extraData.hasOwnProperty(fix)) {
              formdata.append(fix, cycle.extraData[fix]);
            }
          }
        }
        /** @type {null} */
        cycle.data = null;
        fix = $.extend(true, {}, $.ajaxSettings, cycle, {
          contentType : false,
          processData : false,
          cache : false,
          type : "POST"
        });
        if (cycle.uploadProgress) {
          /**
           * @return {?}
           */
          fix.xhr = function() {
            var xhr = jQuery.ajaxSettings.xhr();
            if (xhr.upload) {
              /**
               * @param {Object} event
               * @return {undefined}
               */
              xhr.upload.onprogress = function(event) {
                /** @type {number} */
                var percent = 0;
                var position = event.loaded || event.position;
                var total = event.total;
                if (event.lengthComputable) {
                  /** @type {number} */
                  percent = Math.ceil(position / total * 100);
                }
                cycle.uploadProgress(event, position, total, percent);
              };
            }
            return xhr;
          };
        }
        /** @type {null} */
        fix.data = null;
        var beforeSend = fix.beforeSend;
        /**
         * @param {?} xhr
         * @param {Object} o
         * @return {undefined}
         */
        fix.beforeSend = function(xhr, o) {
          /** @type {FormData} */
          o.data = formdata;
          if (beforeSend) {
            beforeSend.call(o, xhr, cycle);
          }
        };
        $.ajax(fix);
      } else {
        $.ajax(cycle);
      }
    }
    /** @type {number} */
    fix = 0;
    for (;fix < elements.length;fix++) {
      /** @type {null} */
      elements[fix] = null;
    }
    this.trigger("form-submit-notify", [this, cycle]);
    return this;
  };
  /**
   * @param {Function} name
   * @return {?}
   */
  $.fn.ajaxForm = function(name) {
    name = name || {};
    name.delegation = name.delegation && $.isFunction($.fn.on);
    if (!name.delegation && 0 === this.length) {
      var sel = this.selector;
      var context = this.context;
      if (!$.isReady && sel) {
        return log("DOM not ready, queuing ajaxForm"), $(function() {
          $(sel, context).ajaxForm(name);
        }), this;
      }
      log("terminating; zero elements found by selector" + ($.isReady ? "" : " (DOM not ready)"));
      return this;
    }
    return name.delegation ? ($(document).off("submit.form-plugin", this.selector, type).off("click.form-plugin", this.selector, ready).on("submit.form-plugin", this.selector, name, type).on("click.form-plugin", this.selector, name, ready), this) : this.ajaxFormUnbind().bind("submit.form-plugin", name, type).bind("click.form-plugin", name, ready);
  };
  /**
   * @return {?}
   */
  $.fn.ajaxFormUnbind = function() {
    return this.unbind("submit.form-plugin click.form-plugin");
  };
  /**
   * @param {Object} semantic
   * @param {Array} elements
   * @return {?}
   */
  $.fn.formToArray = function(semantic, elements) {
    /** @type {Array} */
    var a = [];
    if (0 === this.length) {
      return a;
    }
    var form = this[0];
    var els = semantic ? form.getElementsByTagName("*") : form.elements;
    if (!els) {
      return a;
    }
    var e;
    var j;
    var n;
    var val;
    var el;
    var _len;
    /** @type {number} */
    e = 0;
    _len = els.length;
    for (;e < _len;e++) {
      if (el = els[e], n = el.name) {
        if (semantic && (form.clk && "image" == el.type)) {
          if (!el.disabled) {
            if (form.clk == el) {
              a.push({
                name : n,
                value : $(el).val(),
                type : el.type
              });
              a.push({
                name : n + ".x",
                value : form.clk_x
              }, {
                name : n + ".y",
                value : form.clk_y
              });
            }
          }
        } else {
          if ((val = $.fieldValue(el, true)) && val.constructor == Array) {
            if (elements) {
              elements.push(el);
            }
            /** @type {number} */
            j = 0;
            el = val.length;
            for (;j < el;j++) {
              a.push({
                name : n,
                value : val[j]
              });
            }
          } else {
            if (k && ("file" == el.type && !el.disabled)) {
              if (elements && elements.push(el), val = el.files, val.length) {
                /** @type {number} */
                j = 0;
                for (;j < val.length;j++) {
                  a.push({
                    name : n,
                    value : val[j],
                    type : el.type
                  });
                }
              } else {
                a.push({
                  name : n,
                  value : "",
                  type : el.type
                });
              }
            } else {
              if (null !== val) {
                if ("undefined" != typeof val) {
                  if (elements) {
                    elements.push(el);
                  }
                  a.push({
                    name : n,
                    value : val,
                    type : el.type,
                    required : el.required
                  });
                }
              }
            }
          }
        }
      }
    }
    if (!semantic && (form.clk && (els = $(form.clk), e = els[0], (n = e.name) && (!e.disabled && "image" == e.type)))) {
      a.push({
        name : n,
        value : els.val()
      });
      a.push({
        name : n + ".x",
        value : form.clk_x
      }, {
        name : n + ".y",
        value : form.clk_y
      });
    }
    return a;
  };
  /**
   * @param {Object} semantic
   * @return {?}
   */
  $.fn.formSerialize = function(semantic) {
    return $.param(this.formToArray(semantic));
  };
  /**
   * @param {Object} successful
   * @return {?}
   */
  $.fn.fieldSerialize = function(successful) {
    /** @type {Array} */
    var a = [];
    this.each(function() {
      var n = this.name;
      if (n) {
        var v = $.fieldValue(this, successful);
        if (v && v.constructor == Array) {
          /** @type {number} */
          var j = 0;
          var m = v.length;
          for (;j < m;j++) {
            a.push({
              name : n,
              value : v[j]
            });
          }
        } else {
          if (null !== v) {
            if ("undefined" != typeof v) {
              a.push({
                name : this.name,
                value : v
              });
            }
          }
        }
      }
    });
    return $.param(a);
  };
  /**
   * @param {Error} successful
   * @return {?}
   */
  $.fn.fieldValue = function(successful) {
    /** @type {Array} */
    var scripts = [];
    /** @type {number} */
    var i = 0;
    var l = this.length;
    for (;i < l;i++) {
      var elem = $.fieldValue(this[i], successful);
      if (!(null === elem)) {
        if (!("undefined" == typeof elem || elem.constructor == Array && !elem.length)) {
          if (elem.constructor == Array) {
            $.merge(scripts, elem);
          } else {
            scripts.push(elem);
          }
        }
      }
    }
    return scripts;
  };
  /**
   * @param {Element} el
   * @param {Object} successful
   * @return {?}
   */
  $.fieldValue = function(el, successful) {
    var a = el.name;
    var type = el.type;
    var codeSegments = el.tagName.toLowerCase();
    if (void 0 === successful) {
      /** @type {boolean} */
      successful = true;
    }
    if (successful && (!a || (el.disabled || ("reset" == type || ("button" == type || (("checkbox" == type || "radio" == type) && !el.checked || (("submit" == type || "image" == type) && (el.form && el.form.clk != el) || "select" == codeSegments && -1 == el.selectedIndex))))))) {
      return null;
    }
    if ("select" == codeSegments) {
      var i = el.selectedIndex;
      if (0 > i) {
        return null;
      }
      /** @type {Array} */
      a = [];
      codeSegments = el.options;
      var padLength = (type = "select-one" == type) ? i + 1 : codeSegments.length;
      i = type ? i : 0;
      for (;i < padLength;i++) {
        var option = codeSegments[i];
        if (option.selected) {
          var val = option.value;
          if (!val) {
            val = option.attributes && (option.attributes.value && !option.attributes.value.specified) ? option.text : option.value;
          }
          if (type) {
            return val;
          }
          a.push(val);
        }
      }
      return a;
    }
    return $(el).val();
  };
  /**
   * @param {?} includeHidden
   * @return {?}
   */
  $.fn.clearForm = function(includeHidden) {
    return this.each(function() {
      $("input,select,textarea", this).clearFields(includeHidden);
    });
  };
  /** @type {function (string): ?} */
  $.fn.clearFields = $.fn.clearInputs = function(cycle) {
    /** @type {RegExp} */
    var exclude = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i;
    return this.each(function() {
      var type = this.type;
      var name = this.tagName.toLowerCase();
      if (exclude.test(type) || "textarea" == name) {
        /** @type {string} */
        this.value = "";
      } else {
        if ("checkbox" == type || "radio" == type) {
          /** @type {boolean} */
          this.checked = false;
        } else {
          if ("select" == name) {
            /** @type {number} */
            this.selectedIndex = -1;
          } else {
            if (cycle && (true === cycle && /hidden/.test(type) || "string" == typeof cycle && $(this).is(cycle))) {
              /** @type {string} */
              this.value = "";
            }
          }
        }
      }
    });
  };
  /**
   * @return {?}
   */
  $.fn.resetForm = function() {
    return this.each(function() {
      if ("function" == typeof this.reset || "object" == typeof this.reset && !this.reset.nodeType) {
        this.reset();
      }
    });
  };
  /**
   * @param {boolean} b
   * @return {?}
   */
  $.fn.enable = function(b) {
    if (void 0 === b) {
      /** @type {boolean} */
      b = true;
    }
    return this.each(function() {
      /** @type {boolean} */
      this.disabled = !b;
    });
  };
  /**
   * @param {string} type
   * @return {?}
   */
  $.fn.selected = function(type) {
    if (void 0 === type) {
      /** @type {boolean} */
      type = true;
    }
    return this.each(function() {
      var data = this.type;
      if ("checkbox" == data || "radio" == data) {
        this.checked = type;
      } else {
        if ("option" == this.tagName.toLowerCase()) {
          data = $(this).parent("select");
          if (type) {
            if (data[0] && "select-one" == data[0].type) {
              data.find("option").selected(false);
            }
          }
          /** @type {string} */
          this.selected = type;
        }
      }
    });
  };
  /** @type {boolean} */
  $.fn.ajaxSubmit.debug = false;
})(jQuery);
(function($) {
  $.extend({
    metadata : {
      defaults : {
        type : "class",
        name : "metadata",
        cre : /({.*})/,
        single : "metadata"
      },
      /**
       * @param {?} type
       * @param {string} name
       * @return {undefined}
       */
      setType : function(type, name) {
        this.defaults.type = type;
        /** @type {string} */
        this.defaults.name = name;
      },
      /**
       * @param {string} cycle
       * @param {boolean} name
       * @return {?}
       */
      get : function(cycle, name) {
        var d = $.extend({}, this.defaults, name);
        if (!d.single.length) {
          /** @type {string} */
          d.single = "metadata";
        }
        var ready = $.data(cycle, d.single);
        if (ready) {
          return ready;
        }
        /** @type {string} */
        ready = "{}";
        if ("class" == d.type) {
          var code = d.cre.exec(cycle.className);
          if (code) {
            ready = code[1];
          }
        } else {
          if ("elem" == d.type) {
            if (!cycle.getElementsByTagName) {
              return;
            }
            code = cycle.getElementsByTagName(d.name);
            if (code.length) {
              ready = $.trim(code[0].innerHTML);
            }
          } else {
            if (void 0 != cycle.getAttribute) {
              if (code = cycle.getAttribute(d.name)) {
                ready = code;
              }
            }
          }
        }
        if (0 > ready.indexOf("{")) {
          /** @type {string} */
          ready = "{" + ready + "}";
        }
        /** @type {*} */
        ready = eval("(" + ready + ")");
        $.data(cycle, d.single, ready);
        return ready;
      }
    }
  });
  /**
   * @param {string} type
   * @return {?}
   */
  $.fn.metadata = function(type) {
    return $.metadata.get(this[0], type);
  };
})(jQuery);
(function($) {
  /**
   * @return {?}
   */
  jQuery.fn.gtmenu = function() {
    return $(this).each(function() {
      var self = $(this);
      /** @type {number} */
      self.selectedIndex = -1;
      /** @type {number} */
      var now = 0;
      var $el;
      var name;
      var frame;
      var that;
      var ul;
      if ("select" === this.tagName.toLowerCase()) {
        self.css({
          position : "absolute"
        }).hide();
        ul = $('<ul class="gtmenu"></ul>');
        self.children("option").each(function() {
          var li = $("<li></li>").text($(this).text());
          if (this.selected) {
            li.addClass("gtmenu-active");
          }
          li.attr("data-value", $(this).val());
          ul.append(li);
        });
        that = ul.children();
      } else {
        self.addClass("gtmenu");
        that = self.children();
      }
      that.children("a,span").each(function() {
        var pdataOld;
        if ($(this).attr("href")) {
          pdataOld = $(this).attr("href");
          $(this).removeAttr("href");
        } else {
          pdataOld = $(this).attr("data-href");
          $(this).removeAttr("data-href");
        }
        if (pdataOld !== void 0) {
          $(this).parent().attr("data-value", pdataOld);
        }
      });
      $el = self.wrap('<a class="gtmenu-wrap" href="#"></a>').parent();
      if ("select" === this.tagName.toLowerCase()) {
        $el.append(ul);
      }
      that.each(function() {
        /** @type {number} */
        now = Math.max($(this).outerHeight(), now);
        if ($(this).children().length > 0) {
          $(this).children().bind("click", function(types) {
            types.preventDefault();
          });
        }
      }).addClass("gtmenu-option");
      name = $('<div class="gtmenu-arrow"></div>');
      frame = $('<div class="gtmenu-arrow-wrap"></div>');
      $el.append(frame.append(name));
      if (-1 < self.css("width").indexOf("px")) {
        $el.css({
          minWidth : self.css("width"),
          minHeight : now + "px"
        });
      } else {
        $el.css({
          minHeight : now + "px"
        });
      }
      if (0 === $(".gtmenu-active", $el).length) {
        that.first().addClass("gtmenu-active");
        /** @type {number} */
        self.selectedIndex = 0;
      } else {
        self.selectedIndex = that.index($(".gtmenu-active", $el));
      }
      self.attr("data-value", $(".gtmenu-active", $el).attr("data-value"));
      /** @type {boolean} */
      $el[0].hideFocus = true;
      $el[0].setAttribute("tabindex", 0);
      $el.bind("click.gtmenu", {
        choices : that,
        self : self
      }, $.fn.gtmenu.showMenu);
      $el.bind("focus.gtmenu", function() {
        /** @type {boolean} */
        this.hasFocus = true;
      }).bind("blur.gtmenu", function() {
        $(".gtmenu-open").removeClass("gtmenu-open");
        /** @type {boolean} */
        this.hasFocus = false;
        if (that.index($(".gtmenu-active", $el)) != self.selectedIndex) {
          self.selectedIndex = that.index($(".gtmenu-active", $el));
          self.attr("data-value", that.eq(self.selectedIndex).attr("data-value"));
          self.trigger("change");
        }
        return false;
      });
      $el.bind("keydown.gtmenu", function(e) {
        if ($.inArray(e.keyCode, [0, 32]) !== -1) {
          $(this).trigger("click.gtmenu");
        } else {
          if ($.inArray(e.keyCode, [38, 40] !== -1)) {
            switch(e.keyCode) {
              case 38:
                if (that.index($(".gtmenu-active", $el)) > 0) {
                  that.parent().children(".gtmenu-active").removeClass("gtmenu-active").prev().addClass("gtmenu-active");
                }
                break;
              case 40:
                if (that.index($(".gtmenu-active", $el)) < that.length - 1) {
                  that.parent().children(".gtmenu-active").removeClass("gtmenu-active").next().addClass("gtmenu-active");
                }
              ;
            }
            selectedIndex = that.index($(".gtmenu-active", $el));
          }
        }
      });
    });
  };
  /**
   * @param {Event} event
   * @return {?}
   */
  $.fn.gtmenu.showMenu = function(event) {
    var self = event.data.self;
    var that = event.data.choices;
    if ($(this).children("ul").hasClass("gtmenu-open")) {
      event.stopPropagation();
      event.preventDefault();
      $(this).trigger("blur");
    } else {
      return $(this).children("ul").addClass("gtmenu-open"), self.parents(".gtmenu-wrap")[0].focus(), that.unbind("click.gtmenu").bind("click.gtmenu", function(event) {
        event.stopPropagation();
        that.removeClass("gtmenu-active").removeAttr("style");
        $(this).addClass("gtmenu-active");
        $(".gtmenu-open").removeClass("gtmenu-open");
        that.unbind("click.gtmenu");
        self.selectedIndex = that.index($(".gtmenu-active", self.parent()));
        self.attr("data-value", that.eq(self.selectedIndex).attr("data-value"));
        self.trigger("change");
        return false;
      }), $(document).bind("click.gtmenu", function() {
        $(".gtmenu-open").removeClass("gtmenu-open");
        that.unbind("click.gtmenu");
        $(document).unbind("click.gtmenu");
      }), event.stopPropagation(), event.preventDefault(), false;
    }
  };
})(jQuery);
(function(a) {
  var b = {
    vertical : false,
    rtl : false,
    start : 1,
    offset : 1,
    size : null,
    scroll : 3,
    visible : null,
    animation : "normal",
    easing : "swing",
    auto : 0,
    wrap : null,
    initCallback : null,
    setupCallback : null,
    reloadCallback : null,
    itemLoadCallback : null,
    itemFirstInCallback : null,
    itemFirstOutCallback : null,
    itemLastInCallback : null,
    itemLastOutCallback : null,
    itemVisibleInCallback : null,
    itemVisibleOutCallback : null,
    animationStepCallback : null,
    buttonNextHTML : "<div></div>",
    buttonPrevHTML : "<div></div>",
    buttonNextEvent : "click",
    buttonPrevEvent : "click",
    buttonNextCallback : null,
    buttonPrevCallback : null,
    itemFallbackDimension : null
  };
  /** @type {boolean} */
  var c = false;
  a(window).bind("load.jcarousel", function() {
    /** @type {boolean} */
    c = true;
  });
  /**
   * @param {Node} e
   * @param {Object} f
   * @return {undefined}
   */
  a.jcarousel = function(e, f) {
    this.options = a.extend({}, b, f || {});
    /** @type {boolean} */
    this.autoStopped = this.locked = false;
    /** @type {null} */
    this.buttonPrevState = this.buttonNextState = this.buttonPrev = this.buttonNext = this.list = this.clip = this.container = null;
    if (!f || void 0 === f.rtl) {
      /** @type {boolean} */
      this.options.rtl = "rtl" == (a(e).attr("dir") || (a("html").attr("dir") || "")).toLowerCase();
    }
    /** @type {string} */
    this.wh = !this.options.vertical ? "width" : "height";
    /** @type {string} */
    this.lt = !this.options.vertical ? this.options.rtl ? "right" : "left" : "top";
    /** @type {string} */
    var obj = "";
    var codeSegments = e.className.split(" ");
    /** @type {number} */
    var i = 0;
    for (;i < codeSegments.length;i++) {
      if (-1 != codeSegments[i].indexOf("jcarousel-skin")) {
        a(e).removeClass(codeSegments[i]);
        obj = codeSegments[i];
        break;
      }
    }
    if ("UL" == e.nodeName.toUpperCase() || "OL" == e.nodeName.toUpperCase()) {
      this.list = a(e);
      this.clip = this.list.parents(".jcarousel-clip");
      this.container = this.list.parents(".jcarousel-container");
    } else {
      this.container = a(e);
      this.list = this.container.find("ul,ol").eq(0);
      this.clip = this.container.find(".jcarousel-clip");
    }
    if (0 === this.clip.size()) {
      this.clip = this.list.wrap("<div></div>").parent();
    }
    if (0 === this.container.size()) {
      this.container = this.clip.wrap("<div></div>").parent();
    }
    if ("" !== obj) {
      if (-1 == this.container.parent()[0].className.indexOf("jcarousel-skin")) {
        this.container.wrap('<div class=" ' + obj + '"></div>');
      }
    }
    this.buttonPrev = a(".jcarousel-prev", this.container);
    if (0 === this.buttonPrev.size()) {
      if (null !== this.options.buttonPrevHTML) {
        this.buttonPrev = a(this.options.buttonPrevHTML).appendTo(this.container);
      }
    }
    this.buttonPrev.addClass(this.className("jcarousel-prev"));
    this.buttonNext = a(".jcarousel-next", this.container);
    if (0 === this.buttonNext.size()) {
      if (null !== this.options.buttonNextHTML) {
        this.buttonNext = a(this.options.buttonNextHTML).appendTo(this.container);
      }
    }
    this.buttonNext.addClass(this.className("jcarousel-next"));
    this.clip.addClass(this.className("jcarousel-clip")).css({
      position : "relative"
    });
    this.list.addClass(this.className("jcarousel-list")).css({
      overflow : "hidden",
      position : "relative",
      top : 0,
      margin : 0,
      padding : 0
    }).css(this.options.rtl ? "right" : "left", 0);
    this.container.addClass(this.className("jcarousel-container")).css({
      position : "relative"
    });
    if (!this.options.vertical) {
      if (this.options.rtl) {
        this.container.addClass("jcarousel-direction-rtl").attr("dir", "rtl");
      }
    }
    /** @type {(null|number)} */
    var funcToCall = null !== this.options.visible ? Math.ceil(this.clipping() / this.options.visible) : null;
    obj = this.list.children("li");
    var self = this;
    if (0 < obj.size()) {
      /** @type {number} */
      var maxWidth = 0;
      var n = this.options.offset;
      obj.each(function() {
        self.format(this, n++);
        maxWidth = maxWidth + self.dimension(this, funcToCall);
      });
      this.list.css(this.wh, maxWidth + 100 + "px");
      if (!f || void 0 === f.size) {
        this.options.size = obj.size();
      }
    }
    this.container.css("display", "block");
    this.buttonNext.css("display", "block");
    this.buttonPrev.css("display", "block");
    /**
     * @return {?}
     */
    this.funcNext = function() {
      self.next();
      return false;
    };
    /**
     * @return {?}
     */
    this.funcPrev = function() {
      self.prev();
      return false;
    };
    /**
     * @return {undefined}
     */
    this.funcResize = function() {
      if (self.resizeTimer) {
        clearTimeout(self.resizeTimer);
      }
      /** @type {number} */
      self.resizeTimer = setTimeout(function() {
        self.reload();
      }, 100);
    };
    if (null !== this.options.initCallback) {
      this.options.initCallback(this, "init");
    }
    if (!c && d.isSafari()) {
      this.buttons(false, false);
      a(window).bind("load.jcarousel", function() {
        self.setup();
      });
    } else {
      this.setup();
    }
  };
  /** @type {function (Node, Object): undefined} */
  var d = a.jcarousel;
  d.fn = d.prototype = {
    jcarousel : "0.2.9"
  };
  d.fn.extend = d.extend = a.extend;
  d.fn.extend({
    /**
     * @return {undefined}
     */
    setup : function() {
      /** @type {null} */
      this.prevLast = this.prevFirst = this.last = this.first = null;
      /** @type {boolean} */
      this.animating = false;
      /** @type {null} */
      this.tail = this.resizeTimer = this.timer = null;
      /** @type {boolean} */
      this.inTail = false;
      if (!this.locked) {
        this.list.css(this.lt, this.pos(this.options.offset) + "px");
        var attributes = this.pos(this.options.start, true);
        /** @type {null} */
        this.prevFirst = this.prevLast = null;
        this.animate(attributes, false);
        a(window).unbind("resize.jcarousel", this.funcResize).bind("resize.jcarousel", this.funcResize);
        if (null !== this.options.setupCallback) {
          this.options.setupCallback(this);
        }
      }
    },
    /**
     * @return {undefined}
     */
    reset : function() {
      this.list.empty();
      this.list.css(this.lt, "0px");
      this.list.css(this.wh, "10px");
      if (null !== this.options.initCallback) {
        this.options.initCallback(this, "reset");
      }
      this.setup();
    },
    /**
     * @return {undefined}
     */
    reload : function() {
      if (null !== this.tail) {
        if (this.inTail) {
          this.list.css(this.lt, d.intval(this.list.css(this.lt)) + this.tail);
        }
      }
      /** @type {null} */
      this.tail = null;
      /** @type {boolean} */
      this.inTail = false;
      if (null !== this.options.reloadCallback) {
        this.options.reloadCallback(this);
      }
      if (null !== this.options.visible) {
        var self = this;
        /** @type {number} */
        var funcToCall = Math.ceil(this.clipping() / this.options.visible);
        /** @type {number} */
        var c = 0;
        /** @type {number} */
        var e = 0;
        this.list.children("li").each(function(dataAndEvents) {
          c += self.dimension(this, funcToCall);
          if (dataAndEvents + 1 < self.first) {
            e = c;
          }
        });
        this.list.css(this.wh, c + "px");
        this.list.css(this.lt, -e + "px");
      }
      this.scroll(this.first, false);
    },
    /**
     * @return {undefined}
     */
    lock : function() {
      /** @type {boolean} */
      this.locked = true;
      this.buttons();
    },
    /**
     * @return {undefined}
     */
    unlock : function() {
      /** @type {boolean} */
      this.locked = false;
      this.buttons();
    },
    /**
     * @param {string} type
     * @return {?}
     */
    size : function(type) {
      if (void 0 !== type) {
        /** @type {string} */
        this.options.size = type;
        if (!this.locked) {
          this.buttons();
        }
      }
      return this.options.size;
    },
    /**
     * @param {Object} type
     * @param {Object} b
     * @return {?}
     */
    has : function(type, b) {
      if (void 0 === b || !b) {
        /** @type {Object} */
        b = type;
      }
      if (null !== this.options.size) {
        if (b > this.options.size) {
          b = this.options.size;
        }
      }
      /** @type {Object} */
      var optgroup = type;
      for (;optgroup <= b;optgroup++) {
        var el = this.get(optgroup);
        if (!el.length || el.hasClass("jcarousel-item-placeholder")) {
          return false;
        }
      }
      return true;
    },
    /**
     * @param {string} name
     * @return {?}
     */
    get : function(name) {
      return a(">.jcarousel-item-" + name, this.list);
    },
    /**
     * @param {string} type
     * @param {Function} name
     * @return {?}
     */
    add : function(type, name) {
      var e = this.get(type);
      /** @type {number} */
      var f = 0;
      var g = a(name);
      if (0 === e.length) {
        var h;
        var i = d.intval(type);
        e = this.create(type);
        for (;;) {
          if (h = this.get(--i), 0 >= i || h.length) {
            if (0 >= i) {
              this.list.prepend(e);
            } else {
              h.after(e);
            }
            break;
          }
        }
      } else {
        f = this.dimension(e);
      }
      if ("LI" == g.get(0).nodeName.toUpperCase()) {
        e.replaceWith(g);
        e = g;
      } else {
        e.empty().append(name);
      }
      this.format(e.removeClass(this.className("jcarousel-item-placeholder")), type);
      /** @type {(null|number)} */
      g = null !== this.options.visible ? Math.ceil(this.clipping() / this.options.visible) : null;
      /** @type {number} */
      f = this.dimension(e, g) - f;
      if (0 < type) {
        if (type < this.first) {
          this.list.css(this.lt, d.intval(this.list.css(this.lt)) - f + "px");
        }
      }
      this.list.css(this.wh, d.intval(this.list.css(this.wh)) + f + "px");
      return e;
    },
    /**
     * @param {string} type
     * @return {undefined}
     */
    remove : function(type) {
      var control = this.get(type);
      if (control.length && !(type >= this.first && type <= this.last)) {
        var c = this.dimension(control);
        if (type < this.first) {
          this.list.css(this.lt, d.intval(this.list.css(this.lt)) + c + "px");
        }
        control.remove();
        this.list.css(this.wh, d.intval(this.list.css(this.wh)) - c + "px");
      }
    },
    /**
     * @return {undefined}
     */
    next : function() {
      if (null !== this.tail && !this.inTail) {
        this.scrollTail(false);
      } else {
        this.scroll(("both" == this.options.wrap || "last" == this.options.wrap) && (null !== this.options.size && this.last == this.options.size) ? 1 : this.first + this.options.scroll);
      }
    },
    /**
     * @return {undefined}
     */
    prev : function() {
      if (null !== this.tail && this.inTail) {
        this.scrollTail(true);
      } else {
        this.scroll(("both" == this.options.wrap || "first" == this.options.wrap) && (null !== this.options.size && 1 == this.first) ? this.options.size : this.first - this.options.scroll);
      }
    },
    /**
     * @param {boolean} recurring
     * @return {undefined}
     */
    scrollTail : function(recurring) {
      if (!this.locked && (!this.animating && this.tail)) {
        this.pauseAuto();
        var attributes = d.intval(this.list.css(this.lt));
        attributes = !recurring ? attributes - this.tail : attributes + this.tail;
        /** @type {boolean} */
        this.inTail = !recurring;
        this.prevFirst = this.first;
        this.prevLast = this.last;
        this.animate(attributes);
      }
    },
    /**
     * @param {string} a
     * @param {Object} t
     * @return {undefined}
     */
    scroll : function(a, t) {
      if (!this.locked) {
        if (!this.animating) {
          this.pauseAuto();
          this.animate(this.pos(a), t);
        }
      }
    },
    /**
     * @param {string} optgroup
     * @param {(boolean|number|string)} keepData
     * @return {?}
     */
    pos : function(optgroup, keepData) {
      var c = d.intval(this.list.css(this.lt));
      if (this.locked || this.animating) {
        return c;
      }
      if ("circular" != this.options.wrap) {
        optgroup = 1 > optgroup ? 1 : this.options.size && optgroup > this.options.size ? this.options.size : optgroup;
      }
      /** @type {boolean} */
      var e = this.first > optgroup;
      var vvarText = "circular" != this.options.wrap && 1 >= this.first ? 1 : this.first;
      var g = e ? this.get(vvarText) : this.get(this.last);
      var cycle = e ? vvarText : vvarText - 1;
      /** @type {null} */
      var i = null;
      /** @type {number} */
      var rvar = 0;
      /** @type {boolean} */
      var v = false;
      /** @type {number} */
      var l = 0;
      for (;e ? --cycle >= optgroup : ++cycle < optgroup;) {
        i = this.get(cycle);
        /** @type {boolean} */
        v = !i.length;
        if (0 === i.length && (i = this.create(cycle).addClass(this.className("jcarousel-item-placeholder")), g[e ? "before" : "after"](i), null !== this.first && ("circular" == this.options.wrap && (null !== this.options.size && (0 >= cycle || cycle > this.options.size))))) {
          g = this.get(this.index(cycle));
          if (g.length) {
            i = this.add(cycle, g.clone(true));
          }
        }
        g = i;
        l = this.dimension(i);
        if (v) {
          rvar += l;
        }
        if (null !== this.first && ("circular" == this.options.wrap || 1 <= cycle && (null === this.options.size || cycle <= this.options.size))) {
          c = e ? c + l : c - l;
        }
      }
      vvarText = this.clipping();
      /** @type {Array} */
      var wrappers = [];
      /** @type {number} */
      var y = 0;
      /** @type {number} */
      var q = 0;
      g = this.get(optgroup - 1);
      /** @type {string} */
      cycle = optgroup;
      for (;++y;) {
        i = this.get(cycle);
        /** @type {boolean} */
        v = !i.length;
        if (0 === i.length) {
          i = this.create(cycle).addClass(this.className("jcarousel-item-placeholder"));
          if (0 === g.length) {
            this.list.prepend(i);
          } else {
            g[e ? "before" : "after"](i);
          }
          if (null !== this.first && ("circular" == this.options.wrap && (null !== this.options.size && (0 >= cycle || cycle > this.options.size)))) {
            g = this.get(this.index(cycle));
            if (g.length) {
              i = this.add(cycle, g.clone(true));
            }
          }
        }
        g = i;
        l = this.dimension(i);
        if (0 === l) {
          throw Error("jCarousel: No width/height set for items. This will cause an infinite loop. Aborting...");
        }
        if ("circular" != this.options.wrap && (null !== this.options.size && cycle > this.options.size)) {
          wrappers.push(i);
        } else {
          if (v) {
            rvar += l;
          }
        }
        q += l;
        if (q >= vvarText) {
          break;
        }
        cycle++;
      }
      /** @type {number} */
      i = 0;
      for (;i < wrappers.length;i++) {
        wrappers[i].remove();
      }
      if (0 < rvar) {
        this.list.css(this.wh, this.dimension(this.list) + rvar + "px");
        if (e) {
          c -= rvar;
          this.list.css(this.lt, d.intval(this.list.css(this.lt)) - rvar + "px");
        }
      }
      /** @type {number} */
      rvar = optgroup + y - 1;
      if ("circular" != this.options.wrap) {
        if (this.options.size && rvar > this.options.size) {
          rvar = this.options.size;
        }
      }
      if (cycle > rvar) {
        /** @type {number} */
        y = 0;
        cycle = rvar;
        /** @type {number} */
        q = 0;
        for (;++y;) {
          i = this.get(cycle--);
          if (!i.length) {
            break;
          }
          q += this.dimension(i);
          if (q >= vvarText) {
            break;
          }
        }
      }
      /** @type {number} */
      cycle = rvar - y + 1;
      if ("circular" != this.options.wrap) {
        if (1 > cycle) {
          /** @type {number} */
          cycle = 1;
        }
      }
      if (this.inTail) {
        if (e) {
          c += this.tail;
          /** @type {boolean} */
          this.inTail = false;
        }
      }
      /** @type {null} */
      this.tail = null;
      if ("circular" != this.options.wrap) {
        if (rvar == this.options.size && 1 <= rvar - y + 1) {
          e = d.intval(this.get(rvar).css(!this.options.vertical ? "marginRight" : "marginBottom"));
          if (q - e > vvarText) {
            /** @type {number} */
            this.tail = q - vvarText - e;
          }
        }
      }
      if (keepData) {
        if (optgroup === this.options.size && this.tail) {
          c -= this.tail;
          /** @type {boolean} */
          this.inTail = true;
        }
      }
      for (;optgroup-- > cycle;) {
        c += this.dimension(this.get(optgroup));
      }
      this.prevFirst = this.first;
      this.prevLast = this.last;
      /** @type {number} */
      this.first = cycle;
      this.last = rvar;
      return c;
    },
    /**
     * @param {number} opt_attributes
     * @param {Object} type
     * @return {undefined}
     */
    animate : function(opt_attributes, type) {
      if (!this.locked && !this.animating) {
        /** @type {boolean} */
        this.animating = true;
        var d = this;
        /**
         * @return {undefined}
         */
        var e = function() {
          /** @type {boolean} */
          d.animating = false;
          if (0 === opt_attributes) {
            d.list.css(d.lt, 0);
          }
          if (!d.autoStopped) {
            if ("circular" == d.options.wrap || ("both" == d.options.wrap || ("last" == d.options.wrap || (null === d.options.size || (d.last < d.options.size || d.last == d.options.size && (null !== d.tail && !d.inTail)))))) {
              d.startAuto();
            }
          }
          d.buttons();
          d.notify("onAfterAnimation");
          if ("circular" == d.options.wrap && null !== d.options.size) {
            var cycle = d.prevFirst;
            for (;cycle <= d.prevLast;cycle++) {
              if (null !== cycle) {
                if (!(cycle >= d.first && cycle <= d.last) && (1 > cycle || cycle > d.options.size)) {
                  d.remove(cycle);
                }
              }
            }
          }
        };
        this.notify("onBeforeAnimation");
        if (!this.options.animation || false === type) {
          this.list.css(this.lt, opt_attributes + "px");
          e();
        } else {
          /** @type {({left: ?}|{right: ?}|{top: ?})} */
          var attributes = !this.options.vertical ? this.options.rtl ? {
            right : opt_attributes
          } : {
            left : opt_attributes
          } : {
            top : opt_attributes
          };
          e = {
            duration : this.options.animation,
            easing : this.options.easing,
            /** @type {function (): undefined} */
            complete : e
          };
          if (a.isFunction(this.options.animationStepCallback)) {
            e.step = this.options.animationStepCallback;
          }
          this.list.animate(attributes, e);
        }
      }
    },
    /**
     * @param {number} a
     * @return {?}
     */
    startAuto : function(a) {
      if (void 0 !== a) {
        /** @type {number} */
        this.options.auto = a;
      }
      if (0 === this.options.auto) {
        return this.stopAuto();
      }
      if (null === this.timer) {
        /** @type {boolean} */
        this.autoStopped = false;
        var stream = this;
        /** @type {number} */
        this.timer = window.setTimeout(function() {
          stream.next();
        }, 1E3 * this.options.auto);
      }
    },
    /**
     * @return {undefined}
     */
    stopAuto : function() {
      this.pauseAuto();
      /** @type {boolean} */
      this.autoStopped = true;
    },
    /**
     * @return {undefined}
     */
    pauseAuto : function() {
      if (null !== this.timer) {
        window.clearTimeout(this.timer);
        /** @type {null} */
        this.timer = null;
      }
    },
    /**
     * @param {Function} rvar
     * @param {Function} optgroup
     * @return {undefined}
     */
    buttons : function(rvar, optgroup) {
      if (null == rvar && (rvar = !this.locked && (0 !== this.options.size && (this.options.wrap && "first" != this.options.wrap || (null === this.options.size || this.last < this.options.size))), !this.locked && ((!this.options.wrap || "first" == this.options.wrap) && (null !== this.options.size && this.last >= this.options.size)))) {
        /** @type {boolean} */
        rvar = null !== this.tail && !this.inTail;
      }
      if (null == optgroup && (optgroup = !this.locked && (0 !== this.options.size && (this.options.wrap && "last" != this.options.wrap || 1 < this.first)), !this.locked && ((!this.options.wrap || "last" == this.options.wrap) && (null !== this.options.size && 1 == this.first)))) {
        optgroup = null !== this.tail && this.inTail;
      }
      var c = this;
      if (0 < this.buttonNext.size()) {
        this.buttonNext.unbind(this.options.buttonNextEvent + ".jcarousel", this.funcNext);
        if (rvar) {
          this.buttonNext.bind(this.options.buttonNextEvent + ".jcarousel", this.funcNext);
        }
        this.buttonNext[rvar ? "removeClass" : "addClass"](this.className("jcarousel-next-disabled")).attr("disabled", rvar ? false : true);
        if (null !== this.options.buttonNextCallback) {
          if (this.buttonNext.data("jcarouselstate") != rvar) {
            this.buttonNext.each(function() {
              c.options.buttonNextCallback(c, this, rvar);
            }).data("jcarouselstate", rvar);
          }
        }
      } else {
        if (null !== this.options.buttonNextCallback) {
          if (this.buttonNextState != rvar) {
            this.options.buttonNextCallback(c, null, rvar);
          }
        }
      }
      if (0 < this.buttonPrev.size()) {
        this.buttonPrev.unbind(this.options.buttonPrevEvent + ".jcarousel", this.funcPrev);
        if (optgroup) {
          this.buttonPrev.bind(this.options.buttonPrevEvent + ".jcarousel", this.funcPrev);
        }
        this.buttonPrev[optgroup ? "removeClass" : "addClass"](this.className("jcarousel-prev-disabled")).attr("disabled", optgroup ? false : true);
        if (null !== this.options.buttonPrevCallback) {
          if (this.buttonPrev.data("jcarouselstate") != optgroup) {
            this.buttonPrev.each(function() {
              c.options.buttonPrevCallback(c, this, optgroup);
            }).data("jcarouselstate", optgroup);
          }
        }
      } else {
        if (null !== this.options.buttonPrevCallback) {
          if (this.buttonPrevState != optgroup) {
            this.options.buttonPrevCallback(c, null, optgroup);
          }
        }
      }
      /** @type {Function} */
      this.buttonNextState = rvar;
      /** @type {Function} */
      this.buttonPrevState = optgroup;
    },
    /**
     * @param {string} a
     * @return {undefined}
     */
    notify : function(a) {
      /** @type {string} */
      var expectationResult = null === this.prevFirst ? "init" : this.prevFirst < this.first ? "next" : "prev";
      this.callback("itemLoadCallback", a, expectationResult);
      if (this.prevFirst !== this.first) {
        this.callback("itemFirstInCallback", a, expectationResult, this.first);
        this.callback("itemFirstOutCallback", a, expectationResult, this.prevFirst);
      }
      if (this.prevLast !== this.last) {
        this.callback("itemLastInCallback", a, expectationResult, this.last);
        this.callback("itemLastOutCallback", a, expectationResult, this.prevLast);
      }
      this.callback("itemVisibleInCallback", a, expectationResult, this.first, this.last, this.prevFirst, this.prevLast);
      this.callback("itemVisibleOutCallback", a, expectationResult, this.prevFirst, this.prevLast, this.first, this.last);
    },
    /**
     * @param {(Object|string)} b
     * @param {string} c
     * @param {string} result
     * @param {string} optgroup
     * @param {?} __
     * @param {?} min
     * @param {?} max
     * @return {undefined}
     */
    callback : function(b, c, result, optgroup, __, min, max) {
      if (!(null == this.options[b] || "object" != typeof this.options[b] && "onAfterAnimation" != c)) {
        var complete = "object" == typeof this.options[b] ? this.options[b][c] : this.options[b];
        if (a.isFunction(complete)) {
          var $next = this;
          if (void 0 === optgroup) {
            complete($next, result, c);
          } else {
            if (void 0 === __) {
              this.get(optgroup).each(function() {
                complete($next, this, optgroup, result, c);
              });
            } else {
              /**
               * @param {string} optgroup
               * @return {undefined}
               */
              b = function(optgroup) {
                $next.get(optgroup).each(function() {
                  complete($next, this, optgroup, result, c);
                });
              };
              /** @type {string} */
              var f = optgroup;
              for (;f <= __;f++) {
                if (null !== f) {
                  if (!(f >= min && f <= max)) {
                    b(f);
                  }
                }
              }
            }
          }
        }
      }
    },
    /**
     * @param {string} type
     * @return {?}
     */
    create : function(type) {
      return this.format("<li></li>", type);
    },
    /**
     * @param {Node} b
     * @param {string} val
     * @return {?}
     */
    format : function(b, val) {
      b = a(b);
      var codeSegments = b.get(0).className.split(" ");
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        if (-1 != codeSegments[i].indexOf("jcarousel-")) {
          b.removeClass(codeSegments[i]);
        }
      }
      b.addClass(this.className("jcarousel-item")).addClass(this.className("jcarousel-item-" + val)).css({
        "float" : this.options.rtl ? "right" : "left",
        "list-style" : "none"
      }).attr("jcarouselindex", val);
      return b;
    },
    /**
     * @param {string} type
     * @return {?}
     */
    className : function(type) {
      return type + " " + type + (!this.options.vertical ? "-horizontal" : "-vertical");
    },
    /**
     * @param {?} b
     * @param {number} funcToCall
     * @return {?}
     */
    dimension : function(b, funcToCall) {
      var e = a(b);
      if (null == funcToCall) {
        return!this.options.vertical ? e.innerWidth() + d.intval(e.css("margin-left")) + d.intval(e.css("margin-right")) + d.intval(e.css("border-left-width")) + d.intval(e.css("border-right-width")) || d.intval(this.options.itemFallbackDimension) : e.innerHeight() + d.intval(e.css("margin-top")) + d.intval(e.css("margin-bottom")) + d.intval(e.css("border-top-width")) + d.intval(e.css("border-bottom-width")) || d.intval(this.options.itemFallbackDimension);
      }
      /** @type {number} */
      var f = !this.options.vertical ? funcToCall - d.intval(e.css("marginLeft")) - d.intval(e.css("marginRight")) : funcToCall - d.intval(e.css("marginTop")) - d.intval(e.css("marginBottom"));
      a(e).css(this.wh, f + "px");
      return this.dimension(e);
    },
    /**
     * @return {?}
     */
    clipping : function() {
      return!this.options.vertical ? this.clip[0].offsetWidth - d.intval(this.clip.css("borderLeftWidth")) - d.intval(this.clip.css("borderRightWidth")) : this.clip[0].offsetHeight - d.intval(this.clip.css("borderTopWidth")) - d.intval(this.clip.css("borderBottomWidth"));
    },
    /**
     * @param {number} type
     * @param {number} b
     * @return {?}
     */
    index : function(type, b) {
      if (null == b) {
        b = this.options.size;
      }
      return Math.round(((type - 1) / b - Math.floor((type - 1) / b)) * b) + 1;
    }
  });
  d.extend({
    /**
     * @param {?} args
     * @return {?}
     */
    defaults : function(args) {
      return a.extend(b, args || {});
    },
    /**
     * @param {?} state
     * @return {?}
     */
    intval : function(state) {
      /** @type {number} */
      state = parseInt(state, 10);
      return isNaN(state) ? 0 : state;
    },
    /**
     * @return {undefined}
     */
    windowLoaded : function() {
      /** @type {boolean} */
      c = true;
    },
    /**
     * @return {?}
     */
    isSafari : function() {
      /** @type {string} */
      var expectedArgs = navigator.userAgent.toLowerCase();
      return "webkit" === ((/(chrome)[ \/]([\w.]+)/.exec(expectedArgs) || (/(webkit)[ \/]([\w.]+)/.exec(expectedArgs) || []))[1] || "");
    }
  });
  /**
   * @param {?} b
   * @return {?}
   */
  a.fn.jcarousel = function(b) {
    if ("string" == typeof b) {
      var c = a(this).data("jcarousel");
      /** @type {Array.<?>} */
      var args = Array.prototype.slice.call(arguments, 1);
      return c[b].apply(c, args);
    }
    return this.each(function() {
      var c = a(this).data("jcarousel");
      if (c) {
        if (b) {
          a.extend(c.options, b);
        }
        c.reload();
      } else {
        a(this).data("jcarousel", new d(this, b));
      }
    });
  };
})(jQuery);
(function($) {
  /**
   * @param {string} message
   * @return {undefined}
   */
  function debug(message) {
    if ($.fn.cycle.debug) {
      log(message);
    }
  }
  /**
   * @return {undefined}
   */
  function log() {
    if (window.console) {
      if (console.log) {
        console.log("[cycle] " + Array.prototype.join.call(arguments, " "));
      }
    }
  }
  /**
   * @param {Object} opts
   * @param {Object} options
   * @param {(Function|string)} arg2
   * @return {?}
   */
  function handleArguments(opts, options, arg2) {
    /**
     * @param {Object} options
     * @param {boolean} arg2
     * @param {Object} cont
     * @return {?}
     */
    function checkInstantResume(options, arg2, cont) {
      if (!options && true === arg2) {
        options = $(cont).data("cycle.opts");
        if (!options) {
          return log("options not found, can not resume"), false;
        }
        if (cont.cycleTimeout) {
          clearTimeout(cont.cycleTimeout);
          /** @type {number} */
          cont.cycleTimeout = 0;
        }
        go(options.elements, options, 1, !options.backwards);
      }
    }
    if (void 0 == opts.cycleStop) {
      /** @type {number} */
      opts.cycleStop = 0;
    }
    if (void 0 === options || null === options) {
      options = {};
    }
    if (options.constructor == String) {
      switch(options) {
        case "destroy":
        ;
        case "stop":
          arg2 = $(opts).data("cycle.opts");
          if (!arg2) {
            return false;
          }
          opts.cycleStop++;
          if (opts.cycleTimeout) {
            clearTimeout(opts.cycleTimeout);
          }
          /** @type {number} */
          opts.cycleTimeout = 0;
          $(opts).removeData("cycle.opts");
          if ("destroy" == options) {
            /** @type {(Function|string)} */
            opts = arg2;
            if (opts.next) {
              $(opts.next).unbind(opts.prevNextEvent);
            }
            if (opts.prev) {
              $(opts.prev).unbind(opts.prevNextEvent);
            }
            if (opts.pager || opts.pagerAnchorBuilder) {
              $.each(opts.pagerAnchors || [], function() {
                this.unbind().remove();
              });
            }
            /** @type {null} */
            opts.pagerAnchors = null;
            if (opts.destroy) {
              opts.destroy(opts);
            }
          }
          return false;
        case "toggle":
          return opts.cyclePause = 1 === opts.cyclePause ? 0 : 1, checkInstantResume(opts.cyclePause, arg2, opts), false;
        case "pause":
          return opts.cyclePause = 1, false;
        case "resume":
          return opts.cyclePause = 0, checkInstantResume(false, arg2, opts), false;
        case "prev":
        ;
        case "next":
          arg2 = $(opts).data("cycle.opts");
          if (!arg2) {
            return log('options not found, "prev/next" ignored'), false;
          }
          $.fn.cycle[options](arg2);
          return false;
        default:
          options = {
            fx : options
          };
      }
    } else {
      if (options.constructor == Number) {
        /** @type {Object} */
        var num = options;
        options = $(opts).data("cycle.opts");
        if (!options) {
          return log("options not found, can not advance slide"), false;
        }
        if (0 > num || num >= options.elements.length) {
          return log("invalid slide index: " + num), false;
        }
        options.nextSlide = num;
        if (opts.cycleTimeout) {
          clearTimeout(opts.cycleTimeout);
          /** @type {number} */
          opts.cycleTimeout = 0;
        }
        if ("string" == typeof arg2) {
          /** @type {(Function|string)} */
          options.oneTimeFx = arg2;
        }
        go(options.elements, options, 1, num >= options.currSlide);
        return false;
      }
    }
    return options;
  }
  /**
   * @param {Element} el
   * @param {?} opts
   * @return {undefined}
   */
  function removeFilter(el, opts) {
    if (!$.support.opacity && (opts.cleartype && el.style.filter)) {
      try {
        el.style.removeAttribute("filter");
      } catch (d) {
      }
    }
  }
  /**
   * @param {string} cycle
   * @param {Object} optgroup
   * @param {Object} els
   * @param {Object} options
   * @param {Object} o
   * @return {?}
   */
  function buildOptions(cycle, optgroup, els, options, o) {
    var opts = $.extend({}, $.fn.cycle.defaults, options || {}, $.metadata ? cycle.metadata() : $.meta ? cycle.data() : {});
    if (opts.autostop) {
      opts.countdown = opts.autostopCount || els.length;
    }
    var i = cycle[0];
    cycle.data("cycle.opts", opts);
    /** @type {string} */
    opts.$cont = cycle;
    opts.stopCount = i.cycleStop;
    /** @type {Object} */
    opts.elements = els;
    /** @type {Array} */
    opts.before = opts.before ? [opts.before] : [];
    /** @type {Array} */
    opts.after = opts.after ? [opts.after] : [];
    if (!$.support.opacity) {
      if (opts.cleartype) {
        opts.after.push(function() {
          removeFilter(this, opts);
        });
      }
    }
    if (opts.continuous) {
      opts.after.push(function() {
        go(els, opts, 0, !opts.backwards);
      });
    }
    opts.original = {
      before : [],
      after : []
    };
    opts.original.cssBefore = $.extend({}, opts.cssBefore);
    opts.original.cssAfter = $.extend({}, opts.cssAfter);
    opts.original.animIn = $.extend({}, opts.animIn);
    opts.original.animOut = $.extend({}, opts.animOut);
    $.each(opts.before, function() {
      opts.original.before.push(this);
    });
    $.each(opts.after, function() {
      opts.original.after.push(this);
    });
    if (!$.support.opacity) {
      if (opts.cleartype && !opts.cleartypeNoBg) {
        clearTypeFix(optgroup);
      }
    }
    if ("static" == cycle.css("position")) {
      cycle.css("position", "relative");
    }
    if (opts.width) {
      cycle.width(opts.width);
    }
    if (opts.height) {
      if ("auto" != opts.height) {
        cycle.height(opts.height);
      }
    }
    if (opts.startingSlide) {
      /** @type {number} */
      opts.startingSlide = parseInt(opts.startingSlide);
    } else {
      if (opts.backwards) {
        /** @type {number} */
        opts.startingSlide = els.length - 1;
      }
    }
    if (opts.random) {
      /** @type {Array} */
      opts.randomMap = [];
      /** @type {number} */
      i = 0;
      for (;i < els.length;i++) {
        opts.randomMap.push(i);
      }
      opts.randomMap.sort(function() {
        return Math.random() - 0.5;
      });
      /** @type {number} */
      opts.randomIndex = 1;
      opts.startingSlide = opts.randomMap[1];
    } else {
      if (opts.startingSlide >= els.length) {
        /** @type {number} */
        opts.startingSlide = 0;
      }
    }
    opts.currSlide = opts.startingSlide || 0;
    var first = opts.startingSlide;
    optgroup.css({
      position : "absolute",
      top : 0,
      left : 0
    }).hide().each(function(i) {
      i = opts.backwards ? first ? i <= first ? els.length + (i - first) : first - i : els.length - i : first ? i >= first ? els.length - (i - first) : first - i : els.length - i;
      $(this).css("z-index", i);
    });
    $(els[first]).css("opacity", 1).show();
    removeFilter(els[first], opts);
    if (opts.fit) {
      if (opts.width) {
        optgroup.width(opts.width);
      }
    }
    if (opts.fit) {
      if (opts.height && "auto" != opts.height) {
        optgroup.height(opts.height);
      }
    }
    if (opts.containerResize && !cycle.innerHeight()) {
      /** @type {number} */
      var height = i = 0;
      /** @type {number} */
      var k = 0;
      for (;k < els.length;k++) {
        var l = $(els[k]);
        var source = l[0];
        var phaseX = l.outerWidth();
        var h = l.outerHeight();
        if (!phaseX) {
          phaseX = source.offsetWidth || (source.width || l.attr("width"));
        }
        if (!h) {
          h = source.offsetHeight || (source.height || l.attr("height"));
        }
        i = phaseX > i ? phaseX : i;
        height = h > height ? h : height;
      }
      if (0 < i) {
        if (0 < height) {
          cycle.css({
            width : i + "px",
            height : height + "px"
          });
        }
      }
    }
    if (opts.pause) {
      cycle.hover(function() {
        this.cyclePause++;
      }, function() {
        this.cyclePause--;
      });
    }
    a: {
      k = $.fn.cycle.transitions;
      if (0 < opts.fx.indexOf(",")) {
        /** @type {boolean} */
        opts.multiFx = true;
        opts.fxs = opts.fx.replace(/\s*/g, "").split(",");
        /** @type {number} */
        i = 0;
        for (;i < opts.fxs.length;i++) {
          if (l = opts.fxs[i], height = k[l], !height || (!k.hasOwnProperty(l) || !$.isFunction(height))) {
            log("discarding unknown transition: ", l);
            opts.fxs.splice(i, 1);
            i--;
          }
        }
        if (!opts.fxs.length) {
          log("No valid transitions named; slideshow terminating.");
          /** @type {boolean} */
          i = false;
          break a;
        }
      } else {
        if ("all" == opts.fx) {
          for (p in opts.multiFx = true, opts.fxs = [], k) {
            height = k[p];
            if (k.hasOwnProperty(p)) {
              if ($.isFunction(height)) {
                opts.fxs.push(p);
              }
            }
          }
        }
      }
      if (opts.multiFx && opts.randomizeEffects) {
        /** @type {number} */
        height = Math.floor(20 * Math.random()) + 30;
        /** @type {number} */
        i = 0;
        for (;i < height;i++) {
          /** @type {number} */
          k = Math.floor(Math.random() * opts.fxs.length);
          opts.fxs.push(opts.fxs.splice(k, 1)[0]);
        }
        debug("randomized fx sequence: ", opts.fxs);
      }
      /** @type {boolean} */
      i = true;
    }
    if (false === i) {
      return false;
    }
    /** @type {boolean} */
    var J = false;
    options.requeueAttempts = options.requeueAttempts || 0;
    optgroup.each(function() {
      var $this = $(this);
      this.cycleH = opts.fit && opts.height ? opts.height : $this.height() || (this.offsetHeight || (this.height || ($this.attr("height") || 0)));
      this.cycleW = opts.fit && opts.width ? opts.width : $this.width() || (this.offsetWidth || (this.width || ($this.attr("width") || 0)));
      if ($this.is("img")) {
        $this = $.browser.mozilla && (this.cycleW == 34 && (this.cycleH == 19 && !this.complete));
        var program = $.browser.opera && ((this.cycleW == 42 && this.cycleH == 19 || this.cycleW == 37 && this.cycleH == 17) && !this.complete);
        /** @type {boolean} */
        var inverse = this.cycleH == 0 && (this.cycleW == 0 && !this.complete);
        if ($.browser.msie && (this.cycleW == 28 && (this.cycleH == 30 && !this.complete)) || ($this || (program || inverse))) {
          if (o.s && (opts.requeueOnImageNotLoaded && ++options.requeueAttempts < 100)) {
            log(options.requeueAttempts, " - img slide not loaded, requeuing slideshow: ", this.src, this.cycleW, this.cycleH);
            setTimeout(function() {
              $(o.s, o.c).cycle(options);
            }, opts.requeueTimeout);
            /** @type {boolean} */
            J = true;
            return false;
          }
          log("could not determine size of image: " + this.src, this.cycleW, this.cycleH);
        }
      }
      return true;
    });
    if (J) {
      return false;
    }
    opts.cssBefore = opts.cssBefore || {};
    opts.cssAfter = opts.cssAfter || {};
    opts.cssFirst = opts.cssFirst || {};
    opts.animIn = opts.animIn || {};
    opts.animOut = opts.animOut || {};
    optgroup.not(":eq(" + first + ")").css(opts.cssBefore);
    $(optgroup[first]).css(opts.cssFirst);
    if (opts.timeout) {
      /** @type {number} */
      opts.timeout = parseInt(opts.timeout);
      if (opts.speed.constructor == String) {
        opts.speed = $.fx.speeds[opts.speed] || parseInt(opts.speed);
      }
      if (!opts.sync) {
        opts.speed /= 2;
      }
      /** @type {number} */
      i = "none" == opts.fx ? 0 : "shuffle" == opts.fx ? 500 : 250;
      for (;opts.timeout - opts.speed < i;) {
        opts.timeout += opts.speed;
      }
    }
    if (opts.easing) {
      opts.easeIn = opts.easeOut = opts.easing;
    }
    if (!opts.speedIn) {
      opts.speedIn = opts.speed;
    }
    if (!opts.speedOut) {
      opts.speedOut = opts.speed;
    }
    opts.slideCount = els.length;
    opts.currSlide = opts.lastSlide = first;
    if (opts.random) {
      if (++opts.randomIndex == els.length) {
        /** @type {number} */
        opts.randomIndex = 0;
      }
      opts.nextSlide = opts.randomMap[opts.randomIndex];
    } else {
      opts.nextSlide = opts.backwards ? 0 == opts.startingSlide ? els.length - 1 : opts.startingSlide - 1 : opts.startingSlide >= els.length - 1 ? 0 : opts.startingSlide + 1;
    }
    if (!opts.multiFx) {
      if (i = $.fn.cycle.transitions[opts.fx], $.isFunction(i)) {
        i(cycle, optgroup, opts);
      } else {
        if ("custom" != opts.fx && !opts.multiFx) {
          return log("unknown transition: " + opts.fx, "; slideshow terminating"), false;
        }
      }
    }
    cycle = optgroup[first];
    if (opts.before.length) {
      opts.before[0].apply(cycle, [cycle, cycle, opts, true]);
    }
    if (opts.after.length) {
      opts.after[0].apply(cycle, [cycle, cycle, opts, true]);
    }
    if (opts.next) {
      $(opts.next).bind(opts.prevNextEvent, function() {
        return advance(opts, 1);
      });
    }
    if (opts.prev) {
      $(opts.prev).bind(opts.prevNextEvent, function() {
        return advance(opts, 0);
      });
    }
    if (opts.pager || opts.pagerAnchorBuilder) {
      var $p = $(opts.pager);
      $.each(els, function(i, o) {
        $.fn.cycle.createPagerAnchor(i, o, $p, els, opts);
      });
      opts.updateActivePagerLink(opts.pager, opts.startingSlide, opts.activePagerClass);
    }
    /**
     * @param {?} newSlide
     * @param {boolean} prepend
     * @return {undefined}
     */
    opts.addSlide = function(newSlide, prepend) {
      var $s = $(newSlide);
      var s = $s[0];
      if (!opts.autostopCount) {
        opts.countdown++;
      }
      els[prepend ? "unshift" : "push"](s);
      if (opts.els) {
        opts.els[prepend ? "unshift" : "push"](s);
      }
      opts.slideCount = els.length;
      $s.css("position", "absolute");
      $s[prepend ? "prependTo" : "appendTo"](opts.$cont);
      if (prepend) {
        opts.currSlide++;
        opts.nextSlide++;
      }
      if (!$.support.opacity) {
        if (opts.cleartype && !opts.cleartypeNoBg) {
          clearTypeFix($s);
        }
      }
      if (opts.fit) {
        if (opts.width) {
          $s.width(opts.width);
        }
      }
      if (opts.fit) {
        if (opts.height && opts.height != "auto") {
          $s.height(opts.height);
        }
      }
      s.cycleH = opts.fit && opts.height ? opts.height : $s.height();
      s.cycleW = opts.fit && opts.width ? opts.width : $s.width();
      $s.css(opts.cssBefore);
      if (opts.pager || opts.pagerAnchorBuilder) {
        $.fn.cycle.createPagerAnchor(els.length - 1, s, $(opts.pager), els, opts);
      }
      if ($.isFunction(opts.onAddSlide)) {
        opts.onAddSlide($s);
      } else {
        $s.hide();
      }
    };
    return opts;
  }
  /**
   * @param {Object} els
   * @param {string} cycle
   * @param {number} recurring
   * @param {boolean} fwd
   * @return {undefined}
   */
  function go(els, cycle, recurring, fwd) {
    if (cycle.skipClassOn && ($(els[cycle.nextSlide]).hasClass(cycle.skipClass) || cycle.currSlide == cycle.nextSlide)) {
      if (cycle.nextSlide == cycle.currSlide) {
        if (cycle.lastSlide = cycle.currSlide, cycle.random) {
          if (cycle.currSlide = cycle.nextSlide, ++cycle.randomIndex == els.length && (cycle.randomIndex = 0), cycle.nextSlide = cycle.randomMap[cycle.randomIndex], cycle.nextSlide == cycle.currSlide) {
            cycle.nextSlide = cycle.currSlide == cycle.slideCount - 1 ? 0 : cycle.currSlide + 1;
          }
        } else {
          if (cycle.backwards) {
            /** @type {boolean} */
            var ms = 0 > cycle.nextSlide - 1;
            if (ms && cycle.bounce) {
              /** @type {boolean} */
              cycle.backwards = !cycle.backwards;
              /** @type {number} */
              cycle.nextSlide = 1;
              /** @type {number} */
              cycle.currSlide = 0;
            } else {
              /** @type {number} */
              cycle.nextSlide = ms ? els.length - 1 : cycle.nextSlide - 1;
              /** @type {number} */
              cycle.currSlide = ms ? 0 : cycle.nextSlide + 1;
            }
          } else {
            if ((ms = cycle.nextSlide + 1 == els.length) && cycle.bounce) {
              /** @type {boolean} */
              cycle.backwards = !cycle.backwards;
              /** @type {number} */
              cycle.nextSlide = els.length - 2;
              /** @type {number} */
              cycle.currSlide = els.length - 1;
            } else {
              cycle.nextSlide = ms ? 0 : cycle.nextSlide + 1;
              /** @type {number} */
              cycle.currSlide = ms ? els.length - 1 : cycle.nextSlide - 1;
            }
          }
        }
      }
      if (cycle.currSlide == cycle.nextSlide) {
        setTimeout(function() {
          go(els, cycle, recurring, fwd);
        }, cycle.timeout);
      } else {
        setTimeout(function() {
          go(els, cycle, recurring, fwd);
        }, 50);
      }
    } else {
      if (recurring && (cycle.busy && cycle.manualTrump && (debug("manualTrump in go(), stopping active transition"), $(els).stop(true, true), cycle.busy = 0)), cycle.busy) {
        debug("transition active, ignoring new tx request");
      } else {
        var p = cycle.$cont[0];
        var curr = els[cycle.currSlide];
        var next = els[cycle.nextSlide];
        if (!(p.cycleStop != cycle.stopCount || 0 === p.cycleTimeout && !recurring)) {
          if (!recurring && (!p.cyclePause && (!cycle.bounce && (cycle.autostop && 0 >= --cycle.countdown || cycle.nowrap && (!cycle.random && cycle.nextSlide < cycle.currSlide))))) {
            if (cycle.end) {
              cycle.end(cycle);
            }
          } else {
            /** @type {boolean} */
            ms = false;
            if ((recurring || !p.cyclePause) && cycle.nextSlide != cycle.currSlide) {
              /** @type {boolean} */
              ms = true;
              var fx = cycle.fx;
              curr.cycleH = curr.cycleH || $(curr).height();
              curr.cycleW = curr.cycleW || $(curr).width();
              next.cycleH = next.cycleH || $(next).height();
              next.cycleW = next.cycleW || $(next).width();
              if (cycle.multiFx) {
                if (void 0 == cycle.lastFx || ++cycle.lastFx >= cycle.fxs.length) {
                  /** @type {number} */
                  cycle.lastFx = 0;
                }
                fx = cycle.fxs[cycle.lastFx];
                cycle.currFx = fx;
              }
              if (cycle.oneTimeFx) {
                fx = cycle.oneTimeFx;
                /** @type {null} */
                cycle.oneTimeFx = null;
              }
              $.fn.cycle.resetState(cycle, fx);
              if (cycle.before.length) {
                $.each(cycle.before, function(dataAndEvents, o) {
                  if (p.cycleStop == cycle.stopCount) {
                    o.apply(next, [curr, next, cycle, fwd]);
                  }
                });
              }
              /**
               * @return {undefined}
               */
              var after = function() {
                /** @type {number} */
                cycle.busy = 0;
                $.each(cycle.after, function(dataAndEvents, o) {
                  if (p.cycleStop == cycle.stopCount) {
                    o.apply(next, [curr, next, cycle, fwd]);
                  }
                });
              };
              debug("tx firing(" + fx + "); currSlide: " + cycle.currSlide + "; nextSlide: " + cycle.nextSlide);
              /** @type {number} */
              cycle.busy = 1;
              if (cycle.fxFn) {
                cycle.fxFn(curr, next, cycle, after, fwd, recurring && cycle.fastOnEvent);
              } else {
                if ($.isFunction($.fn.cycle[cycle.fx])) {
                  $.fn.cycle[cycle.fx](curr, next, cycle, after, fwd, recurring && cycle.fastOnEvent);
                } else {
                  $.fn.cycle.custom(curr, next, cycle, after, fwd, recurring && cycle.fastOnEvent);
                }
              }
            }
            if (ms || cycle.nextSlide == cycle.currSlide) {
              if (cycle.lastSlide = cycle.currSlide, cycle.random) {
                if (cycle.currSlide = cycle.nextSlide, ++cycle.randomIndex == els.length && (cycle.randomIndex = 0), cycle.nextSlide = cycle.randomMap[cycle.randomIndex], cycle.nextSlide == cycle.currSlide) {
                  cycle.nextSlide = cycle.currSlide == cycle.slideCount - 1 ? 0 : cycle.currSlide + 1;
                }
              } else {
                if (cycle.backwards) {
                  if ((fx = 0 > cycle.nextSlide - 1) && cycle.bounce) {
                    /** @type {boolean} */
                    cycle.backwards = !cycle.backwards;
                    /** @type {number} */
                    cycle.nextSlide = 1;
                    /** @type {number} */
                    cycle.currSlide = 0;
                  } else {
                    /** @type {number} */
                    cycle.nextSlide = fx ? els.length - 1 : cycle.nextSlide - 1;
                    /** @type {number} */
                    cycle.currSlide = fx ? 0 : cycle.nextSlide + 1;
                  }
                } else {
                  if ((fx = cycle.nextSlide + 1 == els.length) && cycle.bounce) {
                    /** @type {boolean} */
                    cycle.backwards = !cycle.backwards;
                    /** @type {number} */
                    cycle.nextSlide = els.length - 2;
                    /** @type {number} */
                    cycle.currSlide = els.length - 1;
                  } else {
                    cycle.nextSlide = fx ? 0 : cycle.nextSlide + 1;
                    /** @type {number} */
                    cycle.currSlide = fx ? els.length - 1 : cycle.nextSlide - 1;
                  }
                }
              }
            }
            if (ms) {
              if (cycle.pager) {
                cycle.updateActivePagerLink(cycle.pager, cycle.currSlide, cycle.activePagerClass);
              }
            }
            /** @type {number} */
            ms = 0;
            if (cycle.timeout && !cycle.continuous) {
              ms = getTimeout(els[cycle.currSlide], els[cycle.nextSlide], cycle, fwd);
            } else {
              if (cycle.continuous) {
                if (p.cyclePause) {
                  /** @type {number} */
                  ms = 10;
                }
              }
            }
            if (0 < ms) {
              /** @type {number} */
              p.cycleTimeout = setTimeout(function() {
                go(els, cycle, 0, !cycle.backwards);
              }, ms);
            }
          }
        }
      }
    }
  }
  /**
   * @param {string} t
   * @param {string} next
   * @param {Object} opts
   * @param {boolean} fwd
   * @return {?}
   */
  function getTimeout(t, next, opts, fwd) {
    if (opts.timeoutFn) {
      t = opts.timeoutFn.call(t, t, next, opts, fwd);
      for (;"none" != opts.fx && 250 > t - opts.speed;) {
        t += opts.speed;
      }
      debug("calculated timeout: " + t + "; speed: " + opts.speed);
      if (false !== t) {
        return t;
      }
    }
    return opts.timeout;
  }
  /**
   * @param {?} opts
   * @param {Object} moveForward
   * @return {?}
   */
  function advance(opts, moveForward) {
    /** @type {number} */
    var val = moveForward ? 1 : -1;
    var els = opts.elements;
    var cb = opts.$cont[0];
    var timeout = cb.cycleTimeout;
    if (timeout) {
      clearTimeout(timeout);
      /** @type {number} */
      cb.cycleTimeout = 0;
    }
    if (opts.random && 0 > val) {
      opts.randomIndex--;
      if (-2 == --opts.randomIndex) {
        /** @type {number} */
        opts.randomIndex = els.length - 2;
      } else {
        if (-1 == opts.randomIndex) {
          /** @type {number} */
          opts.randomIndex = els.length - 1;
        }
      }
      opts.nextSlide = opts.randomMap[opts.randomIndex];
    } else {
      if (opts.random) {
        opts.nextSlide = opts.randomMap[opts.randomIndex];
      } else {
        if (opts.nextSlide = opts.currSlide + val, 0 > opts.nextSlide) {
          if (opts.nowrap) {
            return false;
          }
          /** @type {number} */
          opts.nextSlide = els.length - 1;
        } else {
          if (opts.nextSlide >= els.length) {
            if (opts.nowrap) {
              return false;
            }
            /** @type {number} */
            opts.nextSlide = 0;
          }
        }
      }
    }
    cb = opts.onPrevNextEvent || opts.prevNextClick;
    if ($.isFunction(cb)) {
      cb(0 < val, opts.nextSlide, els[opts.nextSlide]);
    }
    go(els, opts, 1, moveForward);
    return false;
  }
  /**
   * @param {Object} $slides
   * @return {undefined}
   */
  function clearTypeFix($slides) {
    /**
     * @param {string} s
     * @return {?}
     */
    function hex(s) {
      /** @type {string} */
      s = parseInt(s).toString(16);
      return 2 > s.length ? "0" + s : s;
    }
    /**
     * @param {Object} elem
     * @return {?}
     */
    function getBg(elem) {
      for (;elem && "html" != elem.nodeName.toLowerCase();elem = elem.parentNode) {
        var v = $.css(elem, "background-color");
        if (v && 0 <= v.indexOf("rgb")) {
          return elem = v.match(/\d+/g), "#" + hex(elem[0]) + hex(elem[1]) + hex(elem[2]);
        }
        if (v && "transparent" != v) {
          return v;
        }
      }
      return "#ffffff";
    }
    debug("applying clearType background-color hack");
    $slides.each(function() {
      $(this).css("background-color", getBg(this));
    });
  }
  if (void 0 == $.support) {
    $.support = {
      opacity : !$.browser.msie
    };
  }
  /**
   * @param {?} el
   * @return {?}
   */
  $.expr[":"].paused = function(el) {
    return el.cyclePause;
  };
  /**
   * @param {string} options
   * @param {(Array|string)} arg2
   * @return {?}
   */
  $.fn.cycle = function(options, arg2) {
    var o = {
      s : this.selector,
      c : this.context
    };
    if (this.length === 0 && options != "stop") {
      if (!$.isReady && o.s) {
        log("DOM not ready, queuing slideshow");
        $(function() {
          $(o.s, o.c).cycle(options, arg2);
        });
        return this;
      }
      log("terminating; zero elements found by selector" + ($.isReady ? "" : " (DOM not ready)"));
      return this;
    }
    return this.each(function() {
      var opts = handleArguments(this, options, arg2);
      if (opts !== false) {
        opts.updateActivePagerLink = opts.updateActivePagerLink || $.fn.cycle.updateActivePagerLink;
        if (this.cycleTimeout) {
          clearTimeout(this.cycleTimeout);
        }
        /** @type {number} */
        this.cycleTimeout = this.cyclePause = 0;
        var startTime = $(this);
        var $slides = opts.slideExpr ? $(opts.slideExpr, this) : startTime.children();
        var els = $slides.get();
        if (els.length < 2) {
          log("terminating; too few slides: " + els.length);
        } else {
          var opts2 = buildOptions(startTime, $slides, els, opts, o);
          if (opts2 !== false) {
            if (startTime = opts2.continuous ? 10 : getTimeout(els[opts2.currSlide], els[opts2.nextSlide], opts2, !opts2.backwards)) {
              startTime = startTime + (opts2.delay || 0);
              if (startTime < 10) {
                /** @type {number} */
                startTime = 10;
              }
              debug("first timeout: " + startTime);
              /** @type {number} */
              this.cycleTimeout = setTimeout(function() {
                go(els, opts2, 0, !opts.backwards);
              }, startTime);
            }
          }
        }
      }
    });
  };
  /**
   * @param {Object} opts
   * @param {Node} fx
   * @return {undefined}
   */
  $.fn.cycle.resetState = function(opts, fx) {
    fx = fx || opts.fx;
    /** @type {Array} */
    opts.before = [];
    /** @type {Array} */
    opts.after = [];
    opts.cssBefore = $.extend({}, opts.original.cssBefore);
    opts.cssAfter = $.extend({}, opts.original.cssAfter);
    opts.animIn = $.extend({}, opts.original.animIn);
    opts.animOut = $.extend({}, opts.original.animOut);
    /** @type {null} */
    opts.fxFn = null;
    $.each(opts.original.before, function() {
      opts.before.push(this);
    });
    $.each(opts.original.after, function() {
      opts.after.push(this);
    });
    var init = $.fn.cycle.transitions[fx];
    if ($.isFunction(init)) {
      init(opts.$cont, $(opts.elements), opts);
    }
  };
  /**
   * @param {?} pager
   * @param {number} currSlide
   * @param {string} klass
   * @return {undefined}
   */
  $.fn.cycle.updateActivePagerLink = function(pager, currSlide, klass) {
    $(pager).each(function() {
      $(this).children().removeClass(klass).eq(currSlide).addClass(klass);
    });
  };
  /**
   * @param {?} opts
   * @return {undefined}
   */
  $.fn.cycle.next = function(opts) {
    advance(opts, 1);
  };
  /**
   * @param {?} opts
   * @return {undefined}
   */
  $.fn.cycle.prev = function(opts) {
    advance(opts, 0);
  };
  /**
   * @param {number} i
   * @param {string} el
   * @param {string} cycle
   * @param {Object} els
   * @param {string} opts
   * @return {undefined}
   */
  $.fn.cycle.createPagerAnchor = function(i, el, cycle, els, opts) {
    if ($.isFunction(opts.pagerAnchorBuilder)) {
      el = opts.pagerAnchorBuilder(i, el);
      debug("pagerAnchorBuilder(" + i + ", el) returned: " + el);
    } else {
      /** @type {string} */
      el = '<a href="#">' + (i + 1) + "</a>";
    }
    if (el) {
      var $a = $(el);
      if ($a.parents("body").length === 0) {
        /** @type {Array} */
        var arr = [];
        if (cycle.length > 1) {
          cycle.each(function() {
            var self = $a.clone(true);
            $(this).append(self);
            arr.push(self[0]);
          });
          $a = $(arr);
        } else {
          $a.appendTo(cycle);
        }
      }
      opts.pagerAnchors = opts.pagerAnchors || [];
      opts.pagerAnchors.push($a);
      $a.bind(opts.pagerEvent, function(cb) {
        cb.preventDefault();
        /** @type {number} */
        opts.nextSlide = i;
        cb = opts.$cont[0];
        var timeout = cb.cycleTimeout;
        if (timeout) {
          clearTimeout(timeout);
          /** @type {number} */
          cb.cycleTimeout = 0;
        }
        cb = opts.onPagerEvent || opts.pagerClick;
        if ($.isFunction(cb)) {
          cb(opts.nextSlide, els[opts.nextSlide]);
        }
        go(els, opts, 1, opts.currSlide < i);
      });
      if (!/^click/.test(opts.pagerEvent)) {
        if (!opts.allowPagerClickBubble) {
          $a.bind("click.cycle", function() {
            return false;
          });
        }
      }
      if (opts.pauseOnPagerHover) {
        $a.hover(function() {
          opts.$cont[0].cyclePause++;
        }, function() {
          opts.$cont[0].cyclePause--;
        });
      }
    }
  };
  /**
   * @param {?} opts
   * @param {boolean} fwd
   * @return {?}
   */
  $.fn.cycle.hopsFromLast = function(opts, fwd) {
    var l = opts.lastSlide;
    var c = opts.currSlide;
    return fwd ? c > l ? c - l : opts.slideCount - l : c < l ? l - c : l + opts.slideCount - c;
  };
  /**
   * @param {string} curr
   * @param {?} next
   * @param {HTMLFormElement} opts
   * @param {boolean} w
   * @param {boolean} rev
   * @param {boolean} h
   * @return {undefined}
   */
  $.fn.cycle.commonReset = function(curr, next, opts, w, rev, h) {
    $(opts.elements).not(curr).hide();
    if (typeof opts.cssBefore.opacity == "undefined") {
      /** @type {number} */
      opts.cssBefore.opacity = 1;
    }
    /** @type {string} */
    opts.cssBefore.display = "block";
    if (opts.slideResize && (w !== false && next.cycleW > 0)) {
      opts.cssBefore.width = next.cycleW;
    }
    if (opts.slideResize && (rev !== false && next.cycleH > 0)) {
      opts.cssBefore.height = next.cycleH;
    }
    opts.cssAfter = opts.cssAfter || {};
    /** @type {string} */
    opts.cssAfter.display = "none";
    $(curr).css("zIndex", opts.slideCount + (h === true ? 1 : 0));
    $(next).css("zIndex", opts.slideCount + (h === true ? 0 : 1));
  };
  /**
   * @param {Object} from
   * @param {(Function|string)} cb
   * @param {Object} opts
   * @param {Function} next
   * @param {boolean} fwd
   * @param {Object} to
   * @return {undefined}
   */
  $.fn.cycle.custom = function(from, cb, opts, next, fwd, to) {
    var $l = $(from);
    var $n = $(cb);
    var speedIn = opts.speedIn;
    from = opts.speedOut;
    var easeIn = opts.easeIn;
    cb = opts.easeOut;
    $n.css(opts.cssBefore);
    if (to) {
      /** @type {number} */
      speedIn = typeof to == "number" ? from = to : from = 1;
      /** @type {null} */
      easeIn = cb = null;
    }
    /**
     * @return {undefined}
     */
    var fn = function() {
      $n.animate(opts.animIn, speedIn, easeIn, function() {
        next();
      });
    };
    $l.animate(opts.animOut, from, cb, function() {
      $l.css(opts.cssAfter);
      if (!opts.sync) {
        fn();
      }
    });
    if (opts.sync) {
      fn();
    }
  };
  $.fn.cycle.transitions = {
    /**
     * @param {boolean} dataAndEvents
     * @param {Object} $slides
     * @param {string} opts
     * @return {undefined}
     */
    fade : function(dataAndEvents, $slides, opts) {
      $slides.not(":eq(" + opts.currSlide + ")").css("opacity", 0);
      opts.before.push(function(curr, next, opts) {
        $.fn.cycle.commonReset(curr, next, opts);
        /** @type {number} */
        opts.cssBefore.opacity = 0;
      });
      opts.animIn = {
        opacity : 1
      };
      opts.animOut = {
        opacity : 0
      };
      opts.cssBefore = {
        top : 0,
        left : 0
      };
    }
  };
  /**
   * @return {?}
   */
  $.fn.cycle.ver = function() {
    return "2.99";
  };
  $.fn.cycle.defaults = {
    activePagerClass : "activeSlide",
    after : null,
    allowPagerClickBubble : false,
    animIn : null,
    animOut : null,
    autostop : 0,
    autostopCount : 0,
    backwards : false,
    before : null,
    cleartype : !$.support.opacity,
    cleartypeNoBg : false,
    containerResize : 1,
    continuous : 0,
    cssAfter : null,
    cssBefore : null,
    delay : 0,
    easeIn : null,
    easeOut : null,
    easing : null,
    end : null,
    fastOnEvent : 0,
    fit : 0,
    fx : "fade",
    fxFn : null,
    height : "auto",
    manualTrump : true,
    next : null,
    nowrap : 0,
    onPagerEvent : null,
    onPrevNextEvent : null,
    pager : null,
    pagerAnchorBuilder : null,
    pagerEvent : "click.cycle",
    pause : 0,
    pauseOnPagerHover : 0,
    prev : null,
    prevNextEvent : "click.cycle",
    random : 0,
    randomizeEffects : 1,
    requeueOnImageNotLoaded : true,
    requeueTimeout : 250,
    rev : 0,
    shuffle : null,
    slideExpr : null,
    slideResize : 1,
    speed : 1E3,
    speedIn : null,
    speedOut : null,
    startingSlide : 0,
    sync : 1,
    timeout : 4E3,
    timeoutFn : null,
    updateActivePagerLink : null,
    skipClassOn : false,
    skipClass : "slideNotReady"
  };
})(jQuery);
(function($) {
  /**
   * @param {Object} val
   * @return {?}
   */
  function both(val) {
    return "object" == typeof val ? val : {
      top : val,
      left : val
    };
  }
  /** @type {function (Object, number, Object): undefined} */
  var $scrollTo = $.scrollTo = function(target, pos, settings) {
    $(window).scrollTo(target, pos, settings);
  };
  $scrollTo.defaults = {
    axis : "xy",
    duration : 1.3 <= parseFloat($.fn.jquery) ? 0 : 1
  };
  /**
   * @return {?}
   */
  $scrollTo.window = function() {
    return $(window).scrollable();
  };
  /**
   * @return {?}
   */
  $.fn.scrollable = function() {
    return this.map(function() {
      if (this.nodeName && -1 == $.inArray(this.nodeName.toLowerCase(), ["iframe", "#document", "html", "body"])) {
        return this;
      }
      var DOC = (this.contentWindow || this).document || (this.ownerDocument || this);
      return $.browser.safari || "BackCompat" == DOC.compatMode ? DOC.body : DOC.documentElement;
    });
  };
  /**
   * @param {Object} node
   * @param {number} options
   * @param {Object} settings
   * @return {?}
   */
  $.fn.scrollTo = function(node, options, settings) {
    if ("object" == typeof options) {
      /** @type {number} */
      settings = options;
      /** @type {number} */
      options = 0;
    }
    if ("function" == typeof settings) {
      settings = {
        onAfter : settings
      };
    }
    if ("max" == node) {
      /** @type {number} */
      node = 9E9;
    }
    settings = $.extend({}, $scrollTo.defaults, settings);
    options = options || (settings.speed || settings.duration);
    settings.queue = settings.queue && 1 < settings.axis.length;
    if (settings.queue) {
      options /= 2;
    }
    settings.offset = both(settings.offset);
    settings.over = both(settings.over);
    return this.scrollable().each(function() {
      /**
       * @param {Function} callback
       * @return {undefined}
       */
      function animate(callback) {
        $elem.animate(attr, options, settings.easing, callback && function() {
          callback.call(this, node, settings);
        });
      }
      /**
       * @param {string} i
       * @return {?}
       */
      function max(i) {
        /** @type {string} */
        var h = "scroll" + i;
        if (!win) {
          return elem[h];
        }
        /** @type {string} */
        i = "client" + i;
        var l = elem.ownerDocument.documentElement;
        var m = elem.ownerDocument.body;
        return Math.max(l[h], m[h]) - Math.min(l[i], m[i]);
      }
      var elem = this;
      var $elem = $(elem);
      var targ = node;
      var toff;
      var attr = {};
      var win = $elem.is("html,body");
      switch(typeof targ) {
        case "number":
        ;
        case "string":
          if (/^([+-]=)?\d+(\.\d+)?(px)?jQuery/.test(targ)) {
            targ = both(targ);
            break;
          }
          targ = $(targ, this);
        case "object":
          if (targ.is || targ.style) {
            toff = (targ = $(targ)).offset();
          }
        ;
      }
      $.each(settings.axis.split(""), function(a, i) {
        /** @type {string} */
        var Pos = i == "x" ? "Left" : "Top";
        /** @type {string} */
        var pos = Pos.toLowerCase();
        /** @type {string} */
        var key = "scroll" + Pos;
        var old = elem[key];
        /** @type {string} */
        var Dim = i == "x" ? "Width" : "Height";
        if (toff) {
          attr[key] = toff[pos] + (win ? 0 : old - $elem.offset()[pos]);
          if (settings.margin) {
            /** @type {number} */
            attr[key] = attr[key] - (parseInt(targ.css("margin" + Pos)) || 0);
            /** @type {number} */
            attr[key] = attr[key] - (parseInt(targ.css("border" + Pos + "Width")) || 0);
          }
          attr[key] = attr[key] + (settings.offset[pos] || 0);
          if (settings.over[pos]) {
            attr[key] = attr[key] + targ[Dim.toLowerCase()]() * settings.over[pos];
          }
        } else {
          attr[key] = targ[pos];
        }
        if (/^\d+jQuery/.test(attr[key])) {
          /** @type {number} */
          attr[key] = attr[key] <= 0 ? 0 : Math.min(attr[key], max(Dim));
        }
        if (!a && settings.queue) {
          if (old != attr[key]) {
            animate(settings.onAfterFirst);
          }
          delete attr[key];
        }
      });
      animate(settings.onAfter);
    }).end();
  };
})(jQuery);
(function(elems, doc, $) {
  /**
   * @param {Object} elem
   * @return {?}
   */
  function args(elem) {
    var newAttrs = {};
    /** @type {RegExp} */
    var rinlinejQuery = /^jQuery\d+$/;
    $.each(elem.attributes, function(dataAndEvents, attr) {
      if (attr.specified) {
        if (!rinlinejQuery.test(attr.name)) {
          newAttrs[attr.name] = attr.value;
        }
      }
    });
    return newAttrs;
  }
  /**
   * @param {boolean} dataAndEvents
   * @param {?} data
   * @return {?}
   */
  function optgroup(dataAndEvents, data) {
    var $input = $(this);
    if (this.value == $input.attr("placeholder") && $input.hasClass("placeholder")) {
      if ($input.data("placeholder-password")) {
        $input = $input.hide().next().show().attr("id", $input.removeAttr("id").data("placeholder-id"));
        if (true === dataAndEvents) {
          return $input[0].value = data;
        }
        $input.focus();
      } else {
        /** @type {string} */
        this.value = "";
        $input.removeClass("placeholder");
        if (this == doc.activeElement) {
          this.select();
        }
      }
    }
  }
  /**
   * @return {undefined}
   */
  function setPlaceholder() {
    var $replacement;
    var $input = $(this);
    var pdataOld = this.id;
    if ("" == this.value) {
      if ("password" == this.type) {
        if (!$input.data("placeholder-textinput")) {
          try {
            $replacement = $input.clone().attr({
              type : "text"
            });
          } catch (h) {
            $replacement = $("<input>").attr($.extend(args(this), {
              type : "text"
            }));
          }
          $replacement.removeAttr("name").data({
            "placeholder-password" : true,
            "placeholder-id" : pdataOld
          }).bind("focus.placeholder", optgroup);
          $input.data({
            "placeholder-textinput" : $replacement,
            "placeholder-id" : pdataOld
          }).before($replacement);
        }
        $input = $input.removeAttr("id").hide().prev().attr("id", pdataOld).show();
      }
      $input.addClass("placeholder");
      $input[0].value = $input.attr("placeholder");
    } else {
      $input.removeClass("placeholder");
    }
  }
  /** @type {boolean} */
  var isInputSupported = "placeholder" in doc.createElement("input");
  /** @type {boolean} */
  var isTextareaSupported = "placeholder" in doc.createElement("textarea");
  var hooks = $.fn;
  var valHooks = $.valHooks;
  if (isInputSupported && isTextareaSupported) {
    /** @type {function (): ?} */
    hooks = hooks.placeholder = function() {
      return this;
    };
    /** @type {boolean} */
    hooks.input = hooks.textarea = true;
  } else {
    /** @type {function (): ?} */
    hooks = hooks.placeholder = function() {
      this.filter((isInputSupported ? "textarea" : ":input") + "[placeholder]").not(".placeholder").bind({
        /** @type {function (boolean, ?): ?} */
        "focus.placeholder" : optgroup,
        /** @type {function (): undefined} */
        "blur.placeholder" : setPlaceholder
      }).data("placeholder-enabled", true).trigger("blur.placeholder");
      return this;
    };
    /** @type {boolean} */
    hooks.input = isInputSupported;
    /** @type {boolean} */
    hooks.textarea = isTextareaSupported;
    hooks = {
      /**
       * @param {string} name
       * @return {?}
       */
      get : function(name) {
        var $input = $(name);
        return $input.data("placeholder-enabled") && $input.hasClass("placeholder") ? "" : name.value;
      },
      /**
       * @param {string} opt_attributes
       * @param {string} type
       * @return {?}
       */
      set : function(opt_attributes, type) {
        var $element = $(opt_attributes);
        if (!$element.data("placeholder-enabled")) {
          return opt_attributes.value = type;
        }
        if ("" == type) {
          /** @type {string} */
          opt_attributes.value = type;
          if (opt_attributes != doc.activeElement) {
            setPlaceholder.call(opt_attributes);
          }
        } else {
          if ($element.hasClass("placeholder")) {
            if (!optgroup.call(opt_attributes, true, type)) {
              /** @type {string} */
              opt_attributes.value = type;
            }
          } else {
            /** @type {string} */
            opt_attributes.value = type;
          }
        }
        return $element;
      }
    };
    if (!isInputSupported) {
      valHooks.input = hooks;
    }
    if (!isTextareaSupported) {
      valHooks.textarea = hooks;
    }
    $(function() {
      $(doc).delegate("form", "submit.placeholder", function() {
        var $inputs = $(".placeholder", this).each(optgroup);
        setTimeout(function() {
          $inputs.each(setPlaceholder);
        }, 10);
      });
    });
    $(elems).bind("beforeunload.placeholder", function() {
      $(".placeholder").each(function() {
        /** @type {string} */
        this.value = "";
      });
    });
  }
})(this, document, jQuery);
(function(factory) {
  if ("function" === typeof define && define.amd) {
    define(["jquery"], factory);
  } else {
    factory(jQuery);
  }
})(function($) {
  /** @type {Array} */
  var vals = [];
  var $d = $(document);
  /** @type {string} */
  var prefix = navigator.userAgent.toLowerCase();
  var $win = $(window);
  /** @type {Array} */
  var size = [];
  /** @type {null} */
  var handle = null;
  /** @type {boolean} */
  var ontype = /msie/.test(prefix) && !/opera/.test(prefix);
  /** @type {boolean} */
  var testSource = /opera/.test(prefix);
  var which;
  var selected;
  /** @type {boolean} */
  which = ontype && (/msie 6./.test(prefix) && "object" !== typeof window.XMLHttpRequest);
  /** @type {boolean} */
  selected = ontype && /msie 7.0/.test(prefix);
  /**
   * @param {string} option
   * @param {string} options
   * @return {?}
   */
  $.modal = function(option, options) {
    return $.modal.impl.init(option, options);
  };
  /**
   * @return {undefined}
   */
  $.modal.close = function() {
    $.modal.impl.close();
  };
  /**
   * @param {string} type
   * @return {undefined}
   */
  $.modal.focus = function(type) {
    $.modal.impl.focus(type);
  };
  /**
   * @return {undefined}
   */
  $.modal.setContainerDimensions = function() {
    $.modal.impl.setContainerDimensions();
  };
  /**
   * @return {undefined}
   */
  $.modal.setPosition = function() {
    $.modal.impl.setPosition();
  };
  /**
   * @param {?} type
   * @param {string} value
   * @return {undefined}
   */
  $.modal.update = function(type, value) {
    $.modal.impl.update(type, value);
  };
  /**
   * @param {string} options
   * @return {?}
   */
  $.fn.modal = function(options) {
    return $.modal.impl.init(this, options);
  };
  $.modal.defaults = {
    appendTo : "body",
    focus : true,
    opacity : 50,
    overlayId : "simplemodal-overlay",
    overlayCss : {},
    containerId : "simplemodal-container",
    containerCss : {},
    dataId : "simplemodal-data",
    dataCss : {},
    minHeight : null,
    minWidth : null,
    maxHeight : null,
    maxWidth : null,
    autoResize : false,
    autoPosition : true,
    zIndex : 1E3,
    close : true,
    closeHTML : '<a class="modalCloseImg" title="Close"></a>',
    closeClass : "simplemodal-close",
    escClose : true,
    overlayClose : false,
    fixed : true,
    position : null,
    persist : false,
    modal : true,
    onOpen : null,
    onShow : null,
    onClose : null
  };
  $.modal.impl = {
    d : {},
    /**
     * @param {string} cycle
     * @param {string} options
     * @return {?}
     */
    init : function(cycle, options) {
      if (this.d.data) {
        return false;
      }
      /** @type {boolean} */
      handle = ontype && !$.support.boxModel;
      this.o = $.extend({}, $.modal.defaults, options);
      this.zIndex = this.o.zIndex;
      /** @type {boolean} */
      this.occb = false;
      if ("object" === typeof cycle) {
        cycle = cycle instanceof $ ? cycle : $(cycle);
        /** @type {boolean} */
        this.d.placeholder = false;
        if (0 < cycle.parent().parent().size()) {
          cycle.before($("<span></span>").attr("id", "simplemodal-placeholder").css({
            display : "none"
          }));
          /** @type {boolean} */
          this.d.placeholder = true;
          this.display = cycle.css("display");
          if (!this.o.persist) {
            this.d.orig = cycle.clone(true);
          }
        }
      } else {
        if ("string" === typeof cycle || "number" === typeof cycle) {
          cycle = $("<div></div>").html(cycle);
        } else {
          return alert("SimpleModal Error: Unsupported data type: " + typeof cycle), this;
        }
      }
      this.create(cycle);
      this.open();
      if ($.isFunction(this.o.onShow)) {
        this.o.onShow.apply(this, [this.d]);
      }
      return this;
    },
    /**
     * @param {string} type
     * @return {undefined}
     */
    create : function(type) {
      this.getDimensions();
      if (this.o.modal) {
        if (which) {
          this.d.iframe = $('<iframe src="javascript:false;"></iframe>').css($.extend(this.o.iframeCss, {
            display : "none",
            opacity : 0,
            position : "fixed",
            height : size[0],
            width : size[1],
            zIndex : this.o.zIndex,
            top : 0,
            left : 0
          })).appendTo(this.o.appendTo);
        }
      }
      this.d.overlay = $("<div></div>").attr("id", this.o.overlayId).addClass("simplemodal-overlay").css($.extend(this.o.overlayCss, {
        display : "none",
        opacity : this.o.opacity / 100,
        height : this.o.modal ? vals[0] : 0,
        width : this.o.modal ? vals[1] : 0,
        position : "fixed",
        left : 0,
        top : 0,
        zIndex : this.o.zIndex + 1
      })).appendTo(this.o.appendTo);
      this.d.container = $("<div></div>").attr("id", this.o.containerId).addClass("simplemodal-container").css($.extend({
        position : this.o.fixed ? "fixed" : "absolute"
      }, this.o.containerCss, {
        display : "none",
        zIndex : this.o.zIndex + 2
      })).append(this.o.close && this.o.closeHTML ? $(this.o.closeHTML).addClass(this.o.closeClass) : "").appendTo(this.o.appendTo);
      this.d.wrap = $("<div></div>").attr("tabIndex", -1).addClass("simplemodal-wrap").css({
        height : "100%",
        outline : 0,
        width : "100%"
      }).appendTo(this.d.container);
      this.d.data = type.attr("id", type.attr("id") || this.o.dataId).addClass("simplemodal-data").css($.extend(this.o.dataCss, {
        display : "none"
      })).appendTo("body");
      this.setContainerDimensions();
      this.d.data.appendTo(this.d.wrap);
      if (which || handle) {
        this.fixIE();
      }
    },
    /**
     * @return {undefined}
     */
    bindEvents : function() {
      var self = this;
      $("." + self.o.closeClass).bind("click.simplemodal", function(types) {
        types.preventDefault();
        self.close();
      });
      if (self.o.modal) {
        if (self.o.close && self.o.overlayClose) {
          self.d.overlay.bind("click.simplemodal", function(types) {
            types.preventDefault();
            self.close();
          });
        }
      }
      $d.bind("keydown.simplemodal", function(e) {
        if (self.o.modal && 9 === e.keyCode) {
          self.watchTab(e);
        } else {
          if (self.o.close) {
            if (self.o.escClose) {
              if (27 === e.keyCode) {
                e.preventDefault();
                self.close();
              }
            }
          }
        }
      });
      $win.bind("resize.simplemodal orientationchange.simplemodal", function() {
        self.getDimensions();
        if (self.o.autoResize) {
          self.setContainerDimensions();
        } else {
          if (self.o.autoPosition) {
            self.setPosition();
          }
        }
        if (which || handle) {
          self.fixIE();
        } else {
          if (self.o.modal) {
            if (self.d.iframe) {
              self.d.iframe.css({
                height : size[0],
                width : size[1]
              });
            }
            self.d.overlay.css({
              height : vals[0],
              width : vals[1]
            });
          }
        }
      });
    },
    /**
     * @return {undefined}
     */
    unbindEvents : function() {
      $("." + this.o.closeClass).unbind("click.simplemodal");
      $d.unbind("keydown.simplemodal");
      $win.unbind(".simplemodal");
      this.d.overlay.unbind("click.simplemodal");
    },
    /**
     * @return {undefined}
     */
    fixIE : function() {
      var p = this.o.position;
      $.each([this.d.iframe || null, !this.o.modal ? null : this.d.overlay, "fixed" === this.d.container.css("position") ? this.d.container : null], function(dataAndEvents, li) {
        if (li) {
          var s = li[0].style;
          /** @type {string} */
          s.position = "absolute";
          if (2 > dataAndEvents) {
            s.removeExpression("height");
            s.removeExpression("width");
            s.setExpression("height", 'document.body.scrollHeight > document.body.clientHeight ? document.body.scrollHeight : document.body.clientHeight + "px"');
            s.setExpression("width", 'document.body.scrollWidth > document.body.clientWidth ? document.body.scrollWidth : document.body.clientWidth + "px"');
          } else {
            var expression;
            var attrValue;
            if (p && p.constructor === Array) {
              expression = p[0] ? "number" === typeof p[0] ? p[0].toString() : p[0].replace(/px/, "") : li.css("top").replace(/px/, "");
              /** @type {string} */
              expression = -1 === expression.indexOf("%") ? expression + ' + (t = document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop) + "px"' : parseInt(expression.replace(/%/, "")) + ' * ((document.documentElement.clientHeight || document.body.clientHeight) / 100) + (t = document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop) + "px"';
              if (p[1]) {
                attrValue = "number" === typeof p[1] ? p[1].toString() : p[1].replace(/px/, "");
                /** @type {string} */
                attrValue = -1 === attrValue.indexOf("%") ? attrValue + ' + (t = document.documentElement.scrollLeft ? document.documentElement.scrollLeft : document.body.scrollLeft) + "px"' : parseInt(attrValue.replace(/%/, "")) + ' * ((document.documentElement.clientWidth || document.body.clientWidth) / 100) + (t = document.documentElement.scrollLeft ? document.documentElement.scrollLeft : document.body.scrollLeft) + "px"';
              }
            } else {
              /** @type {string} */
              expression = '(document.documentElement.clientHeight || document.body.clientHeight) / 2 - (this.offsetHeight / 2) + (t = document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop) + "px"';
              /** @type {string} */
              attrValue = '(document.documentElement.clientWidth || document.body.clientWidth) / 2 - (this.offsetWidth / 2) + (t = document.documentElement.scrollLeft ? document.documentElement.scrollLeft : document.body.scrollLeft) + "px"';
            }
            s.removeExpression("top");
            s.removeExpression("left");
            s.setExpression("top", expression);
            s.setExpression("left", attrValue);
          }
        }
      });
    },
    /**
     * @param {string} type
     * @return {undefined}
     */
    focus : function(type) {
      var w = this;
      type = type && -1 !== $.inArray(type, ["first", "last"]) ? type : "first";
      var pageTitle = $(":input:enabled:visible:" + type, w.d.wrap);
      setTimeout(function() {
        if (0 < pageTitle.length) {
          pageTitle.focus();
        } else {
          w.d.wrap.focus();
        }
      }, 10);
    },
    /**
     * @return {undefined}
     */
    getDimensions : function() {
      var ts = "undefined" === typeof window.innerHeight ? $win.height() : window.innerHeight;
      /** @type {Array} */
      vals = [$d.height(), $d.width()];
      /** @type {Array} */
      size = [ts, $win.width()];
    },
    /**
     * @param {number} val
     * @param {string} e
     * @return {?}
     */
    getVal : function(val, e) {
      return val ? "number" === typeof val ? val : "auto" === val ? 0 : 0 < val.indexOf("%") ? parseInt(val.replace(/%/, "")) / 100 * ("h" === e ? size[0] : size[1]) : parseInt(val.replace(/px/, "")) : null;
    },
    /**
     * @param {string} type
     * @param {string} value
     * @return {?}
     */
    update : function(type, value) {
      if (!this.d.data) {
        return false;
      }
      this.d.origHeight = this.getVal(type, "h");
      this.d.origWidth = this.getVal(value, "w");
      this.d.data.hide();
      if (type) {
        this.d.container.css("height", type);
      }
      if (value) {
        this.d.container.css("width", value);
      }
      this.setContainerDimensions();
      this.d.data.show();
      if (this.o.focus) {
        this.focus();
      }
      this.unbindEvents();
      this.bindEvents();
    },
    /**
     * @return {undefined}
     */
    setContainerDimensions : function() {
      var w = which || selected;
      var val = this.d.origHeight ? this.d.origHeight : testSource ? this.d.container.height() : this.getVal(w ? this.d.container[0].currentStyle.height : this.d.container.css("height"), "h");
      w = this.d.origWidth ? this.d.origWidth : testSource ? this.d.container.width() : this.getVal(w ? this.d.container[0].currentStyle.width : this.d.container.css("width"), "w");
      var value = this.d.data.outerHeight(true);
      var v = this.d.data.outerWidth(true);
      this.d.origHeight = this.d.origHeight || val;
      this.d.origWidth = this.d.origWidth || w;
      var max = this.o.maxHeight ? this.getVal(this.o.maxHeight, "h") : null;
      var bottom = this.o.maxWidth ? this.getVal(this.o.maxWidth, "w") : null;
      max = max && max < size[0] ? max : size[0];
      bottom = bottom && bottom < size[1] ? bottom : size[1];
      var min = this.o.minHeight ? this.getVal(this.o.minHeight, "h") : "auto";
      val = val ? this.o.autoResize && val > max ? max : val < min ? min : val : value ? value > max ? max : this.o.minHeight && ("auto" !== min && value < min) ? min : value : min;
      max = this.o.minWidth ? this.getVal(this.o.minWidth, "w") : "auto";
      w = w ? this.o.autoResize && w > bottom ? bottom : w < max ? max : w : v ? v > bottom ? bottom : this.o.minWidth && ("auto" !== max && v < max) ? max : v : max;
      this.d.container.css({
        height : val,
        width : w
      });
      this.d.wrap.css({
        overflow : value > val || v > w ? "auto" : "visible"
      });
      if (this.o.autoPosition) {
        this.setPosition();
      }
    },
    /**
     * @return {undefined}
     */
    setPosition : function() {
      var name;
      var x;
      /** @type {number} */
      name = size[0] / 2 - this.d.container.outerHeight(true) / 2;
      /** @type {number} */
      x = size[1] / 2 - this.d.container.outerWidth(true) / 2;
      var _ = "fixed" !== this.d.container.css("position") ? $win.scrollTop() : 0;
      if (this.o.position && "[object Array]" === Object.prototype.toString.call(this.o.position)) {
        name = _ + (this.o.position[0] || name);
        x = this.o.position[1] || x;
      } else {
        name = _ + name;
      }
      this.d.container.css({
        left : x,
        top : name
      });
    },
    /**
     * @param {Event} e
     * @return {undefined}
     */
    watchTab : function(e) {
      if (0 < $(e.target).parents(".simplemodal-container").length) {
        if (this.inputs = $(":input:enabled:visible:first, :input:enabled:visible:last", this.d.data[0]), !e.shiftKey && e.target === this.inputs[this.inputs.length - 1] || (e.shiftKey && e.target === this.inputs[0] || 0 === this.inputs.length)) {
          e.preventDefault();
          this.focus(e.shiftKey ? "last" : "first");
        }
      } else {
        e.preventDefault();
        this.focus();
      }
    },
    /**
     * @return {undefined}
     */
    open : function() {
      if (this.d.iframe) {
        this.d.iframe.show();
      }
      if ($.isFunction(this.o.onOpen)) {
        this.o.onOpen.apply(this, [this.d]);
      } else {
        this.d.overlay.show();
        this.d.container.show();
        this.d.data.show();
      }
      if (this.o.focus) {
        this.focus();
      }
      this.bindEvents();
    },
    /**
     * @return {?}
     */
    close : function() {
      if (!this.d.data) {
        return false;
      }
      this.unbindEvents();
      if ($.isFunction(this.o.onClose) && !this.occb) {
        /** @type {boolean} */
        this.occb = true;
        this.o.onClose.apply(this, [this.d]);
      } else {
        if (this.d.placeholder) {
          var $main = $("#simplemodal-placeholder");
          if (this.o.persist) {
            $main.replaceWith(this.d.data.removeClass("simplemodal-data").css("display", this.display));
          } else {
            this.d.data.hide().remove();
            $main.replaceWith(this.d.orig);
          }
        } else {
          this.d.data.hide().remove();
        }
        this.d.container.hide().remove();
        this.d.overlay.hide();
        if (this.d.iframe) {
          this.d.iframe.hide().remove();
        }
        this.d.overlay.remove();
        this.d = {};
      }
    }
  };
});
(function(factory) {
  if ("function" === typeof define && define.amd) {
    define(["jquery", "simplemodal"], factory);
  } else {
    factory(jQuery);
  }
})(function($) {
  var $d = $(document);
  /** @type {string} */
  var prefix = navigator.userAgent.toLowerCase();
  var $win = $(window);
  /** @type {Array} */
  var result = [];
  /** @type {null} */
  var inverse = null;
  /** @type {boolean} */
  var ontype = /msie/.test(prefix) && !/opera/.test(prefix);
  /** @type {boolean} */
  var testSource = /opera/.test(prefix);
  var program;
  var handle;
  /** @type {boolean} */
  program = ontype && (/msie 6./.test(prefix) && "object" !== typeof window.XMLHttpRequest);
  /** @type {boolean} */
  handle = ontype && /msie 7.0/.test(prefix);
  /** @type {null} */
  var pdataOld = null;
  $.extend(true, $.modal, {
    defaults : {
      focus : false,
      modal : false
    },
    impl : {
      /**
       * @param {string} cycle
       * @param {string} options
       * @return {?}
       */
      init : function(cycle, options) {
        /** @type {boolean} */
        var optgroup = false;
        if (this.d.data) {
          this.recycle(cycle, options);
          /** @type {boolean} */
          optgroup = true;
        }
        pdataOld = $("html").css("overflow-y");
        if (pdataOld == "scroll") {
          $("html").css("overflow-y", "hidden");
        }
        /** @type {boolean} */
        inverse = ontype && !$.support.boxModel;
        this.o = $.extend({}, $.modal.defaults, options);
        this.zIndex = this.o.zIndex;
        /** @type {boolean} */
        this.occb = false;
        if (typeof cycle === "object") {
          cycle = cycle instanceof $ ? cycle : $(cycle);
          /** @type {boolean} */
          this.d.placeholder = false;
          if (cycle.parent().parent().size() > 0) {
            cycle.before($("<span></span>").attr("id", "simplemodal-placeholder").css({
              display : "none"
            }));
            /** @type {boolean} */
            this.d.placeholder = true;
            this.display = cycle.css("display");
            if (!this.o.persist) {
              this.d.orig = cycle.clone(true);
            }
          }
        } else {
          if (typeof cycle === "string" || typeof cycle === "number") {
            cycle = $("<div></div>").html(cycle);
          } else {
            alert("SimpleModal Error: Unsupported data type: " + typeof cycle);
            return this;
          }
        }
        this.create(cycle, optgroup);
        this.open();
        if ($.isFunction(this.o.onShow)) {
          this.o.onShow.apply(this, [this.d]);
        }
        return this;
      },
      /**
       * @param {string} type
       * @param {Function} name
       * @return {undefined}
       */
      create : function(type, name) {
        var self = this;
        if (navigator.userAgent.match(/Android/i) != null) {
          /** @type {number} */
          var position = ($(document).width() - 500) / 2;
          /** @type {Array} */
          self.o.position = [0, position];
        }
        self.getDimensions();
        if (!name) {
          if (ontype) {
            $("#page-top-advert").css("display", "none");
          } else {
            $("#page-top-advert").css("position", "relative").css("z-index", "0");
          }
          $(self.o.appendTo).css({
            overflow : "hidden"
          });
          self.d.container = $("<div></div>").attr("id", self.o.containerId).addClass("modal-container").css($.extend(self.o.containerCss, {
            display : "none",
            position : "fixed",
            height : "100%",
            width : "100%",
            top : 0,
            left : 0,
            zIndex : self.o.zIndex + 1
          })).appendTo(self.o.appendTo);
          self.d.overlay = $("<div></div>").attr("id", self.o.overlayId).addClass("modal-overlay").css($.extend(self.o.overlayCss, {
            display : "none",
            opacity : self.o.opacity / 100,
            height : "100%",
            width : "100%",
            position : "absolute",
            left : 0,
            top : 0,
            zIndex : self.o.zIndex + 1
          })).appendTo(self.d.container);
          self.d.wrap = $("<div></div>").attr("tabIndex", -1).addClass("modal-wrap").css({
            height : "100%",
            outline : 0,
            width : "100%",
            overflow : "auto",
            position : "absolute",
            zIndex : self.o.zIndex + 2
          }).appendTo(self.d.container);
        }
        self.d.data = type.attr("id", type.attr("id") || self.o.dataId).addClass(self.o.dataId).css($.extend(self.o.dataCss, {
          display : "none",
          position : "absolute"
        })).appendTo("body");
        if (typeof self.o.buttons != "undefined") {
          $.each(self.o.buttons, function(dataAndEvents, opts) {
            if (typeof opts.href == "undefined") {
              /** @type {string} */
              opts.href = "";
            }
            if (typeof opts.cssClass == "undefined") {
              opts.cssClass = self.o.buttonClass;
            }
            var input = $('<a href="' + opts.href + '" class="' + opts.cssClass + '"><span>' + opts.label + "</span></a>");
            if (typeof opts.handler != "undefined") {
              input.click(opts.handler);
            }
            self.d.data.append(input);
          });
        }
        /** @type {null} */
        type = null;
        self.setContainerDimensions();
        self.d.data.appendTo(self.d.wrap);
        self.d.data.append(self.o.close && self.o.closeHTML ? $(self.o.closeHTML).addClass(self.o.closeClass) : "");
        if (program || inverse) {
          self.fixIE();
        }
        if (navigator.userAgent.match(/iPad/i) != null) {
          window.scroll(0, 0);
        }
      },
      /**
       * @return {undefined}
       */
      bindEvents : function() {
        var self = this;
        self.getDimensions();
        $("." + self.o.closeClass).bind("click.simplemodal", function(types) {
          types.preventDefault();
          self.close();
        });
        if (self.o.modal && (self.o.close && self.o.overlayClose)) {
          self.d.wrap.bind("click.simplemodal", function(types) {
            types.preventDefault();
            self.close();
          });
          self.d.data.bind("click.simplemodal", function(event) {
            /** @type {boolean} */
            event.cancelBubble = true;
            if (event.stopPropagation) {
              event.stopPropagation();
            }
          });
        }
        $d.bind("keydown.simplemodal", function(e) {
          if (self.o.modal && e.keyCode === 9) {
            self.watchTab(e);
          } else {
            if (self.o.close && (self.o.escClose && e.keyCode === 27)) {
              e.preventDefault();
              self.close();
            }
          }
        });
        $win.bind("resize.simplemodal orientationchange.simplemodal", function() {
          self.getDimensions();
          if (self.o.autoResize) {
            self.setContainerDimensions();
          } else {
            if (self.o.autoPosition) {
              self.setPosition();
            }
          }
          if (program || inverse) {
            self.fixIE();
          } else {
            if (self.o.modal) {
              if (self.d.iframe) {
                self.d.iframe.css({
                  height : result[0],
                  width : result[1]
                });
              }
            }
          }
        });
      },
      /**
       * @param {?} type
       * @param {string} value
       * @return {?}
       */
      update : function(type, value) {
        if (!this.d.data) {
          return false;
        }
        this.d.origHeight = this.getVal(type, "h");
        this.d.origWidth = this.getVal(value, "w");
        this.d.data.hide();
        this.setContainerDimensions();
        this.d.data.show();
        if (this.o.focus) {
          this.focus();
        }
        this.unbindEvents();
        this.bindEvents();
      },
      /**
       * @return {undefined}
       */
      getDimensions : function() {
        var er = typeof window.innerHeight === "undefined" ? $win.height() : window.innerHeight;
        $d.height();
        $d.width();
        /** @type {Array} */
        result = [er, $win.width()];
      },
      /**
       * @param {string} val
       * @param {string} type
       * @return {?}
       */
      getVal : function(val, type) {
        return val ? typeof val === "number" ? val : val === "auto" ? 0 : val.indexOf("%") > 0 ? parseInt(val.replace(/%/, "")) / 100 * (type === "h" ? result[0] : result[1]) : parseInt(val.replace(/px/, "")) : null;
      },
      /**
       * @return {undefined}
       */
      setContainerDimensions : function() {
        var frame = program || handle;
        this.getDimensions();
        var origHeight = this.d.origHeight ? this.d.origHeight : testSource ? this.d.container.height() : this.getVal(frame ? this.d.container[0].currentStyle.height : this.d.container.css("height"), "h");
        frame = this.d.origWidth ? this.d.origWidth : testSource ? this.d.container.width() : this.getVal(frame ? this.d.container[0].currentStyle.width : this.d.container.css("width"), "w");
        this.d.data.outerHeight(true);
        this.d.data.outerWidth(true);
        this.d.origHeight = this.d.origHeight || origHeight;
        this.d.origWidth = this.d.origWidth || frame;
        if (this.o.maxHeight) {
          this.getVal(this.o.maxHeight, "h");
        }
        if (this.o.maxWidth) {
          this.getVal(this.o.maxWidth, "w");
        }
        if (this.o.minHeight) {
          this.getVal(this.o.minHeight, "h");
        }
        if (this.o.minWidth) {
          this.getVal(this.o.minWidth, "w");
        }
        if (this.o.autoPosition) {
          this.setPosition();
        }
      },
      /**
       * @return {undefined}
       */
      setPosition : function() {
        var h;
        var x;
        /** @type {number} */
        h = result[0] / 2 - this.d.container.outerHeight(true) / 2;
        /** @type {number} */
        x = result[1] / 2 - this.d.container.outerWidth(true) / 2;
        var base = this.d.container.css("position") !== "fixed" ? $win.scrollTop() : 0;
        if (this.o.position && Object.prototype.toString.call(this.o.position) === "[object Array]") {
          h = base + (this.o.position[0] || h);
          x = this.o.position[1] || x;
        } else {
          /** @type {number} */
          x = ($(window).width() - this.d.data.outerWidth(true)) / 2;
          /** @type {number} */
          h = ($(window).height() - this.d.data.outerHeight(true)) / 2;
        }
        if (h < 0) {
          /** @type {number} */
          h = 0;
        }
        this.d.data.css({
          left : x + "px",
          top : h + "px"
        });
      },
      /**
       * @return {undefined}
       */
      recycle : function() {
        this.removeData();
        /** @type {null} */
        this.d.data = null;
      },
      /**
       * @return {undefined}
       */
      removeData : function() {
        if (this.d.placeholder) {
          var $main = $("#simplemodal-placeholder");
          if (this.o.persist) {
            $main.replaceWith(this.d.data.removeClass(this.o.dataId).css("display", this.display));
          } else {
            this.d.data.hide().remove();
            $main.replaceWith(this.d.orig);
          }
        } else {
          this.d.data.hide().remove();
        }
      },
      /**
       * @return {?}
       */
      close : function() {
        var self = this;
        if (!self.d.data) {
          return false;
        }
        self.unbindEvents();
        if ($.isFunction(self.o.onClose) && !self.occb) {
          /** @type {boolean} */
          self.occb = true;
          self.o.onClose.apply(self, [self.d]);
        }
        self.removeData();
        self.d.container.hide().remove();
        self.d.overlay.hide();
        if (self.d.iframe) {
          self.d.iframe.hide().remove();
        }
        if (ontype) {
          $("#page-top-advert").css("display", "block");
        } else {
          $("#page-top-advert").css("position", "").css("z-index", "");
        }
        setTimeout(function() {
          self.d.overlay.remove();
          self.d = {};
        }, 10);
        if (pdataOld != null) {
          $("html").css("overflow-y", pdataOld);
        }
        $(self.o.appendTo).css({
          overflow : ""
        });
      }
    }
  });
});
(function(factory) {
  if ("function" === typeof define && define.amd) {
    define(["jquery"], factory);
  } else {
    factory(jQuery);
  }
})(function($) {
  /**
   * @return {undefined}
   */
  function log() {
    log.history = log.history || [];
    log.history.push(arguments);
    if ("object" === typeof console) {
      var fn = console[console.warn ? "warn" : "log"];
      /** @type {Array.<?>} */
      var args = Array.prototype.slice.call(arguments);
      if ("string" === typeof arguments[0]) {
        /** @type {string} */
        args[0] = "qTip2: " + args[0];
      }
      if (fn.apply) {
        fn.apply(console, args);
      } else {
        fn(args);
      }
    }
  }
  /**
   * @param {Object} opts
   * @return {?}
   */
  function sanitizeOptions(opts) {
    var c;
    if (!opts || "object" !== typeof opts) {
      return ready;
    }
    if (opts.metadata === NULL || "object" !== typeof opts.metadata) {
      opts.metadata = {
        type : opts.metadata
      };
    }
    if ("content" in opts) {
      if (opts.content === NULL || ("object" !== typeof opts.content || opts.content.jquery)) {
        opts.content = {
          text : opts.content
        };
      }
      c = opts.content.text || ready;
      if (!$.isFunction(c) && (!c && !c.attr || (1 > c.length || "object" === typeof c && !c.jquery))) {
        /** @type {boolean} */
        opts.content.text = ready;
      }
      if ("title" in opts.content) {
        if (opts.content.title === NULL || "object" !== typeof opts.content.title) {
          opts.content.title = {
            text : opts.content.title
          };
        }
        c = opts.content.title.text || ready;
        if (!$.isFunction(c) && (!c && !c.attr || (1 > c.length || "object" === typeof c && !c.jquery))) {
          /** @type {boolean} */
          opts.content.title.text = ready;
        }
      }
    }
    if ("position" in opts && (opts.position === NULL || "object" !== typeof opts.position)) {
      opts.position = {
        my : opts.position,
        at : opts.position
      };
    }
    if ("show" in opts && (opts.show === NULL || "object" !== typeof opts.show)) {
      /** @type {({event: ??}|{target: ??})} */
      opts.show = opts.show.jquery ? {
        target : opts.show
      } : {
        event : opts.show
      };
    }
    if ("hide" in opts && (opts.hide === NULL || "object" !== typeof opts.hide)) {
      /** @type {({event: ??}|{target: ??})} */
      opts.hide = opts.hide.jquery ? {
        target : opts.hide
      } : {
        event : opts.hide
      };
    }
    if ("style" in opts && (opts.style === NULL || "object" !== typeof opts.style)) {
      opts.style = {
        classes : opts.style
      };
    }
    $.each(PLUGINS, function() {
      if (this.sanitize) {
        this.sanitize(opts);
      }
    });
    return opts;
  }
  /**
   * @param {Object} target
   * @param {Object} options
   * @param {string} id
   * @param {string} attr
   * @return {undefined}
   */
  function QTip(target, options, id, attr) {
    /**
     * @param {string} levels
     * @return {?}
     */
    function convertNotation(levels) {
      /** @type {number} */
      var i = 0;
      var obj;
      /** @type {Object} */
      var option = options;
      levels = levels.split(".");
      for (;option = option[levels[i++]];) {
        if (i < levels.length) {
          obj = option;
        }
      }
      return[obj || options, levels.pop()];
    }
    /**
     * @return {undefined}
     */
    function setWidget() {
      var on = options.style.widget;
      tooltip.toggleClass(widget, on).toggleClass(defaultClass, options.style.def && !on);
      elements.content.toggleClass(widget + "-content", on);
      if (elements.titlebar) {
        elements.titlebar.toggleClass(widget + "-header", on);
      }
      if (elements.button) {
        elements.button.toggleClass(uitooltip + "-icon", !on);
      }
    }
    /**
     * @param {string} evt
     * @return {undefined}
     */
    function removeTitle(evt) {
      if (elements.title) {
        elements.titlebar.remove();
        /** @type {null} */
        elements.titlebar = elements.title = elements.button = NULL;
        if (evt !== ready) {
          dblclick.reposition();
        }
      }
    }
    /**
     * @return {undefined}
     */
    function createButton() {
      var node = options.content.title.button;
      /** @type {string} */
      var close = "string" === typeof node ? node : "Close tooltip";
      if (elements.button) {
        elements.button.remove();
      }
      elements.button = node.jquery ? node : $("<a />", {
        "class" : "ui-state-default ui-tooltip-close " + (options.style.widget ? "" : uitooltip + "-icon"),
        title : close,
        "aria-label" : close
      }).prepend($("<span />", {
        "class" : "ui-icon ui-icon-close",
        html : "&times;"
      }));
      elements.button.appendTo(elements.titlebar).attr("role", "button").click(function(cycle) {
        if (!tooltip.hasClass(disabled)) {
          dblclick.hide(cycle);
        }
        return ready;
      });
      dblclick.redraw();
    }
    /**
     * @return {undefined}
     */
    function createTitle() {
      /** @type {string} */
      var id = tooltipID + "-title";
      if (elements.titlebar) {
        removeTitle();
      }
      elements.titlebar = $("<div />", {
        "class" : uitooltip + "-titlebar " + (options.style.widget ? "ui-widget-header" : "")
      }).append(elements.title = $("<div />", {
        id : id,
        "class" : uitooltip + "-title",
        "aria-atomic" : fix
      })).insertBefore(elements.content).delegate(".ui-tooltip-close", "mousedown keydown mouseup keyup mouseout", function(event) {
        $(this).toggleClass("ui-state-active ui-state-focus", "down" === event.type.substr(-4));
      }).delegate(".ui-tooltip-close", "mouseover mouseout", function(statement) {
        $(this).toggleClass("ui-state-hover", "mouseover" === statement.type);
      });
      if (options.content.title.button) {
        createButton();
      } else {
        if (dblclick.rendered) {
          dblclick.redraw();
        }
      }
    }
    /**
     * @param {string} content
     * @param {string} html
     * @return {?}
     */
    function updateTitle(content, html) {
      var elem = elements.title;
      if (!dblclick.rendered || !content) {
        return ready;
      }
      if ($.isFunction(content)) {
        content = content.call(target, cache.event, dblclick);
      }
      if (content === ready || !content && "" !== content) {
        return removeTitle(ready);
      }
      if (content.jquery && 0 < content.length) {
        elem.empty().append(content.css({
          display : "block"
        }));
      } else {
        elem.html(content);
      }
      dblclick.redraw();
      if (html !== ready) {
        if (dblclick.rendered && 0 < tooltip[0].offsetWidth) {
          dblclick.reposition(cache.event);
        }
      }
    }
    /**
     * @param {Object} match
     * @param {string} evt
     * @return {?}
     */
    function updateContent(match, evt) {
      /**
       * @param {?} next
       * @return {?}
       */
      function optgroup(next) {
        /**
         * @param {Image} image
         * @return {undefined}
         */
        function imageLoad(image) {
          if (image) {
            delete images[image.src];
            clearTimeout(dblclick.timers.img[image.src]);
            $(image).unbind(namespace);
          }
          if ($.isEmptyObject(images)) {
            dblclick.redraw();
            if (evt !== ready) {
              dblclick.reposition(cache.event);
            }
            next();
          }
        }
        var object;
        var images = {};
        if (0 === (object = el.find("img[src]:not([height]):not([width])")).length) {
          return imageLoad();
        }
        object.each(function(dataAndEvents, img) {
          if (images[img.src] === undef) {
            /** @type {number} */
            var f = 0;
            (function timer() {
              if (img.height || (img.width || 3 < f)) {
                return imageLoad(img);
              }
              f += 1;
              /** @type {number} */
              dblclick.timers.img[img.src] = setTimeout(timer, 700);
            })();
            $(img).bind("error" + namespace + " load" + namespace, function() {
              imageLoad(this);
            });
            /** @type {Image} */
            images[img.src] = img;
          }
        });
      }
      var el = elements.content;
      if (!dblclick.rendered || !match) {
        return ready;
      }
      if ($.isFunction(match)) {
        match = match.call(target, cache.event, dblclick) || "";
      }
      if (match.jquery && 0 < match.length) {
        el.empty().append(match.css({
          display : "block"
        }));
      } else {
        el.html(match);
      }
      if (0 > dblclick.rendered) {
        tooltip.queue("fx", optgroup);
      } else {
        /** @type {number} */
        b = 0;
        optgroup($.noop);
      }
      return dblclick;
    }
    /**
     * @return {undefined}
     */
    function assignEvents() {
      /**
       * @param {Function} optgroup
       * @return {?}
       */
      function vvarText(optgroup) {
        if (tooltip.hasClass(disabled)) {
          return ready;
        }
        clearTimeout(dblclick.timers.show);
        clearTimeout(dblclick.timers.hide);
        /**
         * @return {undefined}
         */
        var show = function() {
          dblclick.toggle(fix, optgroup);
        };
        if (0 < options.show.delay) {
          /** @type {number} */
          dblclick.timers.show = setTimeout(show, options.show.delay);
        } else {
          show();
        }
      }
      /**
       * @param {string} cycle
       * @return {?}
       */
      function optgroup(cycle) {
        if (tooltip.hasClass(disabled) || (a || b)) {
          return ready;
        }
        var target = $(cycle.relatedTarget || cycle.target);
        /** @type {boolean} */
        var parent = target.closest(selector)[0] === tooltip[0];
        /** @type {boolean} */
        target = target[0] === targets.show[0];
        clearTimeout(dblclick.timers.show);
        clearTimeout(dblclick.timers.hide);
        if ("mouse" === posOptions.target && parent || options.hide.fixed && (/mouse(out|leave|move)/.test(cycle.type) && (parent || target))) {
          try {
            cycle.preventDefault();
            cycle.stopImmediatePropagation();
          } catch (h) {
          }
        } else {
          if (0 < options.hide.delay) {
            /** @type {number} */
            dblclick.timers.hide = setTimeout(function() {
              dblclick.hide(cycle);
            }, options.hide.delay);
          } else {
            dblclick.hide(cycle);
          }
        }
      }
      /**
       * @param {string} cycle
       * @return {?}
       */
      function rvar(cycle) {
        if (tooltip.hasClass(disabled)) {
          return ready;
        }
        clearTimeout(dblclick.timers.inactive);
        /** @type {number} */
        dblclick.timers.inactive = setTimeout(function() {
          dblclick.hide(cycle);
        }, options.hide.inactive);
      }
      /**
       * @param {Object} event
       * @return {undefined}
       */
      function vvar(event) {
        if (dblclick.rendered) {
          if (0 < tooltip[0].offsetWidth) {
            dblclick.reposition(event);
          }
        }
      }
      var posOptions = options.position;
      var targets = {
        show : options.show.target,
        hide : options.hide.target,
        viewport : $(posOptions.viewport),
        document : $(document),
        body : $(document.body),
        window : $(window)
      };
      var attributes = $.trim("" + options.show.event).split(" ");
      var opt_attributes = $.trim("" + options.hide.event).split(" ");
      var allowSingle = $.browser.msie && 6 === parseInt($.browser.version, 10);
      tooltip.bind("mouseenter" + namespace + " mouseleave" + namespace, function(cycle) {
        /** @type {boolean} */
        var stateVal = "mouseenter" === cycle.type;
        if (stateVal) {
          dblclick.focus(cycle);
        }
        tooltip.toggleClass(hoverClass, stateVal);
      });
      if (options.hide.fixed) {
        targets.hide = targets.hide.add(tooltip);
        tooltip.bind("mouseover" + namespace, function() {
          if (!tooltip.hasClass(disabled)) {
            clearTimeout(dblclick.timers.hide);
          }
        });
      }
      if (/mouse(out|leave)/i.test(options.hide.event)) {
        if ("window" === options.hide.leave) {
          targets.window.bind("mouseout" + namespace + " blur" + namespace, function(cycle) {
            if (/select|option/.test(cycle.target)) {
              if (!cycle.relatedTarget) {
                dblclick.hide(cycle);
              }
            }
          });
        }
      } else {
        if (/mouse(over|enter)/i.test(options.show.event)) {
          targets.hide.bind("mouseleave" + namespace, function() {
            clearTimeout(dblclick.timers.show);
          });
        }
      }
      if (-1 < ("" + options.hide.event).indexOf("unfocus")) {
        posOptions.container.closest("html").bind("mousedown" + namespace, function(cycle) {
          var elem = $(cycle.target);
          if (dblclick.rendered) {
            tooltip.hasClass(disabled);
          }
          /** @type {boolean} */
          var f = elem.parents(selector).filter(tooltip[0]).length > 0;
          if (elem[0] !== target[0]) {
            if (elem[0] !== tooltip[0] && (!f && (!target.has(elem[0]).length && !elem.attr("disabled")))) {
              dblclick.hide(cycle);
            }
          }
        });
      }
      if ("number" === typeof options.hide.inactive) {
        targets.show.bind("qtip-" + id + "-inactive", rvar);
        $.each(QTIP.inactiveEvents, function(dataAndEvents, type) {
          targets.hide.add(elements.tooltip).bind(type + namespace + "-inactive", rvar);
        });
      }
      $.each(opt_attributes, function(dataAndEvents, type) {
        var attr = $.inArray(type, attributes);
        var targetHide = $(targets.hide);
        if (attr > -1 && targetHide.add(targets.show).length === targetHide.length || type === "unfocus") {
          targets.show.bind(type + namespace, function(cycle) {
            if (tooltip[0].offsetWidth > 0) {
              optgroup(cycle);
            } else {
              vvarText(cycle);
            }
          });
          delete attributes[attr];
        } else {
          targets.hide.bind(type + namespace, optgroup);
        }
      });
      $.each(attributes, function(dataAndEvents, event) {
        targets.show.bind(event + namespace, vvarText);
      });
      if ("number" === typeof options.hide.distance) {
        targets.show.add(tooltip).bind("mousemove" + namespace, function(cycle) {
          var touch0 = cache.origin || {};
          var limit = options.hide.distance;
          /** @type {function (*): number} */
          var abs = Math.abs;
          if (abs(cycle.pageX - touch0.pageX) >= limit || abs(cycle.pageY - touch0.pageY) >= limit) {
            dblclick.hide(cycle);
          }
        });
      }
      if ("mouse" === posOptions.target) {
        targets.show.bind("mousemove" + namespace, function(ev) {
          MOUSE = {
            pageX : ev.pageX,
            pageY : ev.pageY,
            type : "mousemove"
          };
        });
        if (posOptions.adjust.mouse) {
          if (options.hide.event) {
            tooltip.bind("mouseleave" + namespace, function(cycle) {
              if ((cycle.relatedTarget || cycle.target) !== targets.show[0]) {
                dblclick.hide(cycle);
              }
            });
            elements.target.bind("mouseenter" + namespace + " mouseleave" + namespace, function(event) {
              /** @type {boolean} */
              cache.onTarget = event.type === "mouseenter";
            });
          }
          targets.document.bind("mousemove" + namespace, function(event) {
            if (dblclick.rendered) {
              if (cache.onTarget && (!tooltip.hasClass(disabled) && tooltip[0].offsetWidth > 0)) {
                dblclick.reposition(event || MOUSE);
              }
            }
          });
        }
      }
      if (posOptions.adjust.resize || targets.viewport.length) {
        ($.event.special.resize ? targets.viewport : targets.window).bind("resize" + namespace, vvar);
      }
      if (targets.viewport.length || allowSingle && "fixed" === tooltip.css("position")) {
        targets.viewport.bind("scroll" + namespace, vvar);
      }
    }
    /**
     * @return {undefined}
     */
    function unassignEvents() {
      /** @type {Array} */
      var value = [options.show.target[0], options.hide.target[0], dblclick.rendered && elements.tooltip[0], options.position.container[0], options.position.viewport[0], window, document];
      if (dblclick.rendered) {
        $([]).pushStack($.grep(value, function(object) {
          return "object" === typeof object;
        })).unbind(namespace);
      } else {
        options.show.target.unbind(namespace + "-create");
      }
    }
    var dblclick = this;
    /** @type {(HTMLElement|null)} */
    var docBody = document.body;
    /** @type {string} */
    var tooltipID = uitooltip + "-" + id;
    /** @type {number} */
    var a = 0;
    /** @type {number} */
    var b = 0;
    var tooltip = $();
    /** @type {string} */
    var namespace = ".qtip-" + id;
    var elements;
    var cache;
    /** @type {string} */
    dblclick.id = id;
    /** @type {boolean} */
    dblclick.rendered = ready;
    /** @type {boolean} */
    dblclick.destroyed = ready;
    dblclick.elements = elements = {
      target : target
    };
    dblclick.timers = {
      img : {}
    };
    /** @type {Object} */
    dblclick.options = options;
    dblclick.checks = {};
    dblclick.plugins = {};
    dblclick.cache = cache = {
      event : {},
      target : $(),
      disabled : ready,
      attr : attr,
      onTarget : ready
    };
    dblclick.checks.builtin = {
      /**
       * @param {string} j
       * @param {string} id
       * @param {boolean} v
       * @return {undefined}
       */
      "^id$" : function(j, id, v) {
        j = v === fix ? QTIP.nextid : v;
        /** @type {string} */
        id = uitooltip + "-" + j;
        if (j !== ready) {
          if (0 < j.length && !$("#" + id).length) {
            /** @type {string} */
            tooltip[0].id = id;
            /** @type {string} */
            elements.content[0].id = id + "-content";
            /** @type {string} */
            elements.title[0].id = id + "-title";
          }
        }
      },
      /**
       * @param {?} dataAndEvents
       * @param {?} deepDataAndEvents
       * @param {Object} $match
       * @return {undefined}
       */
      "^content.text$" : function(dataAndEvents, deepDataAndEvents, $match) {
        updateContent($match);
      },
      /**
       * @param {?} dataAndEvents
       * @param {?} deepDataAndEvents
       * @param {string} v
       * @return {?}
       */
      "^content.title.text$" : function(dataAndEvents, deepDataAndEvents, v) {
        if (!v) {
          return removeTitle();
        }
        if (!elements.title) {
          if (v) {
            createTitle();
          }
        }
        updateTitle(v);
      },
      /**
       * @param {Object} button
       * @param {(Function|string)} key
       * @param {?} dataAndEvents
       * @return {undefined}
       */
      "^content.title.button$" : function(button, key, dataAndEvents) {
        button = elements.button;
        key = elements.title;
        if (dblclick.rendered) {
          if (dataAndEvents) {
            if (!key) {
              createTitle();
            }
            createButton();
          } else {
            button.remove();
          }
        }
      },
      /**
       * @param {Array} obj
       * @param {number} implementation
       * @param {?} v
       * @return {undefined}
       */
      "^position.(my|at)$" : function(obj, implementation, v) {
        if ("string" === typeof v) {
          obj[implementation] = new PLUGINS.Corner(v);
        }
      },
      /**
       * @param {?} dataAndEvents
       * @param {?} deepDataAndEvents
       * @param {string} cycle
       * @return {undefined}
       */
      "^position.container$" : function(dataAndEvents, deepDataAndEvents, cycle) {
        if (dblclick.rendered) {
          tooltip.appendTo(cycle);
        }
      },
      /**
       * @return {undefined}
       */
      "^show.ready$" : function() {
        if (dblclick.rendered) {
          dblclick.toggle(fix);
        } else {
          dblclick.render(1);
        }
      },
      /**
       * @param {?} dataAndEvents
       * @param {?} deepDataAndEvents
       * @param {string} v
       * @return {undefined}
       */
      "^style.classes$" : function(dataAndEvents, deepDataAndEvents, v) {
        tooltip.attr("class", uitooltip + " qtip ui-helper-reset " + v);
      },
      /** @type {function (): undefined} */
      "^style.widget|content.title" : setWidget,
      /**
       * @param {?} dataAndEvents
       * @param {string} o
       * @param {string} v
       * @return {undefined}
       */
      "^events.(render|show|move|hide|focus|blur)$" : function(dataAndEvents, o, v) {
        tooltip[($.isFunction(v) ? "" : "un") + "bind"]("tooltip" + o, v);
      },
      /**
       * @return {undefined}
       */
      "^(show|hide|position).(event|target|fixed|inactive|leave|distance|viewport|adjust)" : function() {
        var posOptions = options.position;
        tooltip.attr("tracking", "mouse" === posOptions.target && posOptions.adjust.mouse);
        unassignEvents();
        assignEvents();
      }
    };
    $.extend(dblclick, {
      /**
       * @param {string} type
       * @return {?}
       */
      render : function(type) {
        if (dblclick.rendered) {
          return dblclick;
        }
        var text = options.content.text;
        var title = options.content.title.text;
        var posOptions = options.position;
        var cycle = $.Event("tooltiprender");
        $.attr(target[0], "aria-describedby", tooltipID);
        tooltip = elements.tooltip = $("<div/>", {
          id : tooltipID,
          "class" : uitooltip + " qtip ui-helper-reset " + defaultClass + " " + options.style.classes + " " + uitooltip + "-pos-" + options.position.my.abbrev(),
          width : options.style.width || "",
          height : options.style.height || "",
          tracking : "mouse" === posOptions.target && posOptions.adjust.mouse,
          role : "alert",
          "aria-live" : "polite",
          "aria-atomic" : ready,
          "aria-describedby" : tooltipID + "-content",
          "aria-hidden" : fix
        }).toggleClass(disabled, cache.disabled).data("qtip", dblclick).appendTo(options.position.container).append(elements.content = $("<div />", {
          "class" : uitooltip + "-content",
          id : tooltipID + "-content",
          "aria-atomic" : fix
        }));
        /** @type {number} */
        dblclick.rendered = -1;
        /** @type {number} */
        a = b = 1;
        if (title) {
          createTitle();
          if (!$.isFunction(title)) {
            updateTitle(title, ready);
          }
        }
        if (!$.isFunction(text)) {
          updateContent(text, ready);
        }
        /** @type {boolean} */
        dblclick.rendered = fix;
        setWidget();
        $.each(options.events, function(name, optgroup) {
          if ($.isFunction(optgroup)) {
            tooltip.bind(name === "toggle" ? "tooltipshow tooltiphide" : "tooltip" + name, optgroup);
          }
        });
        $.each(PLUGINS, function() {
          if (this.initialize === "render") {
            this(dblclick);
          }
        });
        assignEvents();
        tooltip.queue("fx", function(next) {
          cycle.originalEvent = cache.event;
          tooltip.trigger(cycle, [dblclick]);
          /** @type {number} */
          a = b = 0;
          dblclick.redraw();
          if (options.show.ready || type) {
            dblclick.toggle(fix, cache.event, ready);
          }
          next();
        });
        return dblclick;
      },
      /**
       * @param {string} name
       * @return {?}
       */
      get : function(name) {
        switch(name.toLowerCase()) {
          case "dimensions":
            name = {
              height : tooltip.outerHeight(),
              width : tooltip.outerWidth()
            };
            break;
          case "offset":
            name = PLUGINS.offset(tooltip, options.position.container);
            break;
          default:
            name = convertNotation(name.toLowerCase());
            name = name[0][name[1]];
            name = name.precedance ? name.string() : name;
        }
        return name;
      },
      /**
       * @param {string} opt_attributes
       * @param {string} type
       * @return {?}
       */
      set : function(opt_attributes, type) {
        /** @type {RegExp} */
        var rchecked = /^position\.(my|at|adjust|target|container)|style|content|show\.ready/i;
        /** @type {RegExp} */
        var exclude = /^content\.(title|attr)|style/i;
        /** @type {boolean} */
        var result = ready;
        /** @type {boolean} */
        var handled = ready;
        var types = dblclick.checks;
        var typeID;
        if ("string" === typeof opt_attributes) {
          /** @type {string} */
          typeID = opt_attributes;
          opt_attributes = {};
          /** @type {string} */
          opt_attributes[typeID] = type;
        } else {
          opt_attributes = $.extend(fix, {}, opt_attributes);
        }
        $.each(opt_attributes, function(name, object) {
          var obj = convertNotation(name.toLowerCase());
          var offsetZ;
          offsetZ = obj[0][obj[1]];
          obj[0][obj[1]] = "object" === typeof object && object.nodeType ? $(object) : object;
          /** @type {Array} */
          opt_attributes[name] = [obj[0], obj[1], object, offsetZ];
          result = rchecked.test(name) || result;
          handled = exclude.test(name) || handled;
        });
        sanitizeOptions(options);
        /** @type {number} */
        a = b = 1;
        $.each(opt_attributes, function(cssText, argNames) {
          var type;
          var name;
          var cycle;
          for (type in types) {
            for (name in types[type]) {
              if (cycle = RegExp(name, "i").exec(cssText)) {
                argNames.push(cycle);
                types[type][name].apply(dblclick, argNames);
              }
            }
          }
        });
        /** @type {number} */
        a = b = 0;
        if (dblclick.rendered) {
          if (0 < tooltip[0].offsetWidth) {
            if (result) {
              dblclick.reposition("mouse" === options.position.target ? NULL : cache.event);
            }
            if (handled) {
              dblclick.redraw();
            }
          }
        }
        return dblclick;
      },
      /**
       * @param {string} type
       * @param {string} name
       * @param {Function} types
       * @return {?}
       */
      toggle : function(type, name, types) {
        /**
         * @return {undefined}
         */
        function after() {
          if (type) {
            if ($.browser.msie) {
              tooltip[0].style.removeAttribute("filter");
            }
            tooltip.css("overflow", "");
            if ("string" === typeof opts.autofocus) {
              $(opts.autofocus, tooltip).focus();
            }
            opts.target.trigger("qtip-" + id + "-inactive");
          } else {
            tooltip.css({
              display : "",
              visibility : "",
              opacity : "",
              left : "",
              top : ""
            });
          }
          cycle = $.Event("tooltip" + (type ? "visible" : "hidden"));
          cycle.originalEvent = name ? cache.event : NULL;
          tooltip.trigger(cycle, [dblclick]);
        }
        if (!dblclick.rendered) {
          return type ? dblclick.render(1) : dblclick;
        }
        /** @type {string} */
        var event = type ? "show" : "hide";
        var opts = options[event];
        var posOptions = options.position;
        var contentOptions = options.content;
        /** @type {boolean} */
        var c = 0 < tooltip[0].offsetWidth;
        var newState = type || 1 === opts.target.length;
        /** @type {boolean} */
        var s = !name || (2 > opts.target.length || cache.target[0] === name.target);
        var cycle;
        if ((typeof type).search("boolean|number")) {
          /** @type {boolean} */
          type = !c;
        }
        if (!tooltip.is(":animated") && (c === type && s)) {
          return dblclick;
        }
        if (name) {
          if (/over|enter/.test(name.type) && (/out|leave/.test(cache.event.type) && (options.show.target.add(name.target).length === options.show.target.length && tooltip.has(name.relatedTarget).length))) {
            return dblclick;
          }
          cache.event = $.extend({}, name);
        }
        cycle = $.Event("tooltip" + event);
        cycle.originalEvent = name ? cache.event : NULL;
        tooltip.trigger(cycle, [dblclick, 90]);
        if (cycle.isDefaultPrevented()) {
          return dblclick;
        }
        $.attr(tooltip[0], "aria-hidden", !type);
        if (type) {
          cache.origin = $.extend({}, MOUSE);
          dblclick.focus(name);
          if ($.isFunction(contentOptions.text)) {
            updateContent(contentOptions.text, ready);
          }
          if ($.isFunction(contentOptions.title.text)) {
            updateTitle(contentOptions.title.text, ready);
          }
          if (!pending) {
            if ("mouse" === posOptions.target && posOptions.adjust.mouse) {
              $(document).bind("mousemove.qtip", function(ev) {
                MOUSE = {
                  pageX : ev.pageX,
                  pageY : ev.pageY,
                  type : "mousemove"
                };
              });
              /** @type {boolean} */
              pending = fix;
            }
          }
          dblclick.reposition(name, types);
          if (cycle.solo = !!opts.solo) {
            $(selector, opts.solo).not(tooltip).qtip("hide", cycle);
          }
        } else {
          clearTimeout(dblclick.timers.show);
          delete cache.origin;
          if (pending) {
            if (!$(selector + '[tracking="true"]:visible', opts.solo).not(tooltip).length) {
              $(document).unbind("mousemove.qtip");
              /** @type {boolean} */
              pending = ready;
            }
          }
          dblclick.blur(name);
        }
        if (opts.effect === ready || newState === ready) {
          tooltip[event]();
          after.call(tooltip);
        } else {
          if ($.isFunction(opts.effect)) {
            tooltip.stop(1, 1);
            opts.effect.call(tooltip, dblclick);
            tooltip.queue("fx", function(n) {
              after();
              n();
            });
          } else {
            tooltip.fadeTo(90, type ? 1 : 0, after);
          }
        }
        if (type) {
          opts.target.trigger("qtip-" + id + "-inactive");
        }
        return dblclick;
      },
      /**
       * @param {string} type
       * @return {?}
       */
      show : function(type) {
        return dblclick.toggle(fix, type);
      },
      /**
       * @param {string} type
       * @return {?}
       */
      hide : function(type) {
        return dblclick.toggle(ready, type);
      },
      /**
       * @param {string} type
       * @return {?}
       */
      focus : function(type) {
        if (!dblclick.rendered) {
          return dblclick;
        }
        var qtips = $(selector);
        /** @type {number} */
        var curIndex = parseInt(tooltip[0].style.zIndex, 10);
        var newIndex = QTIP.zindex + qtips.length;
        type = $.extend({}, type);
        var cycle;
        if (!tooltip.hasClass(klass)) {
          cycle = $.Event("tooltipfocus");
          /** @type {string} */
          cycle.originalEvent = type;
          tooltip.trigger(cycle, [dblclick, newIndex]);
          if (!cycle.isDefaultPrevented()) {
            if (curIndex !== newIndex) {
              qtips.each(function() {
                if (this.style.zIndex > curIndex) {
                  this.style.zIndex -= 1;
                }
              });
              qtips.filter("." + klass).qtip("blur", type);
            }
            tooltip.addClass(klass)[0].style.zIndex = newIndex;
          }
        }
        return dblclick;
      },
      /**
       * @param {string} type
       * @return {?}
       */
      blur : function(type) {
        type = $.extend({}, type);
        var cycle;
        tooltip.removeClass(klass);
        cycle = $.Event("tooltipblur");
        /** @type {string} */
        cycle.originalEvent = type;
        tooltip.trigger(cycle, [dblclick]);
        return dblclick;
      },
      /**
       * @param {Object} event
       * @param {boolean} x
       * @return {?}
       */
      reposition : function(event, x) {
        if (!dblclick.rendered || a) {
          return dblclick;
        }
        /** @type {number} */
        a = 1;
        var cycle = options.position.target;
        var posOptions = options.position;
        var mimic = posOptions.my;
        var target = posOptions.at;
        var adjust = posOptions.adjust;
        var win = adjust.method.split(" ");
        var queueHooks = tooltip.outerWidth();
        var selector = tooltip.outerHeight();
        /** @type {number} */
        var left = 0;
        /** @type {number} */
        var targetHeight = 0;
        var fix = $.Event("tooltipmove");
        /** @type {boolean} */
        var top = "fixed" === tooltip.css("position");
        var viewport = posOptions.viewport;
        var position = {
          left : 0,
          top : 0
        };
        var optgroup = posOptions.container;
        /** @type {boolean} */
        var offset = ready;
        var tip = dblclick.plugins.tip;
        /** @type {boolean} */
        var Q = 0 < tooltip[0].offsetWidth;
        var that = {
          horizontal : win[0],
          vertical : win[1] = win[1] || win[0],
          enabled : viewport.jquery && (cycle[0] !== window && (cycle[0] !== docBody && "none" !== adjust.method)),
          /**
           * @param {string} type
           * @return {?}
           */
          left : function(type) {
            /** @type {boolean} */
            var x = "shift" === that.horizontal;
            /** @type {number} */
            var additionalHorizontal = adjust.x * ("invert" === that.horizontal.substr(-6) ? 2 : 0);
            var viewportScroll = -optgroup.offset.left + viewport.offset.left + viewport.scrollLeft;
            var myLength = "left" === mimic.x ? queueHooks : "right" === mimic.x ? -queueHooks : -queueHooks / 2;
            var offset = "left" === target.x ? left : "right" === target.x ? -left : -left / 2;
            var tipLength = tip && tip.size ? tip.size.width || 0 : 0;
            var tipAdjust = tip && (tip.corner && ("x" === tip.corner.precedance && !x)) ? tipLength : 0;
            var targetWidth = viewportScroll - type + tipAdjust;
            var overflow2 = type + queueHooks - viewport.width - viewportScroll + tipAdjust;
            /** @type {number} */
            offset = myLength - ("x" === mimic.precedance || mimic.x === mimic.y ? offset : 0) - ("center" === target.x ? left / 2 : 0);
            /** @type {boolean} */
            tipAdjust = "center" === mimic.x;
            if (x) {
              tipAdjust = tip && (tip.corner && "y" === tip.corner.precedance) ? tipLength : 0;
              /** @type {number} */
              offset = ("left" === mimic.x ? 1 : -1) * myLength - tipAdjust;
              position.left += 0 < targetWidth ? targetWidth : 0 < overflow2 ? -overflow2 : 0;
              /** @type {number} */
              position.left = Math.max(-optgroup.offset.left + viewport.offset.left + (tipAdjust && "center" === tip.corner.x ? tip.offset : 0), type - offset, Math.min(Math.max(-optgroup.offset.left + viewport.offset.left + viewport.width, type + offset), position.left));
            } else {
              if (0 < targetWidth && ("left" !== mimic.x || 0 < overflow2)) {
                position.left -= offset + additionalHorizontal;
              } else {
                if (0 < overflow2 && ("right" !== mimic.x || 0 < targetWidth)) {
                  position.left -= (tipAdjust ? -offset : offset) + additionalHorizontal;
                }
              }
              if (position.left < viewportScroll) {
                if (-position.left > overflow2) {
                  /** @type {string} */
                  position.left = type;
                }
              }
            }
            return position.left - type;
          },
          /**
           * @param {string} type
           * @return {?}
           */
          top : function(type) {
            /** @type {boolean} */
            var y = "shift" === that.vertical;
            /** @type {number} */
            var DISTANCE = adjust.y * ("invert" === that.vertical.substr(-6) ? 2 : 0);
            var viewportScroll = -optgroup.offset.top + viewport.offset.top + viewport.scrollTop;
            var fn = "top" === mimic.y ? selector : "bottom" === mimic.y ? -selector : -selector / 2;
            var offset = "top" === target.y ? targetHeight : "bottom" === target.y ? -targetHeight : -targetHeight / 2;
            var tipLength = tip && tip.size ? tip.size.height || 0 : 0;
            var tipAdjust = tip && (tip.corner && ("y" === tip.corner.precedance && !y)) ? tipLength : 0;
            var targetWidth = viewportScroll - type + tipAdjust;
            viewportScroll = type + selector - viewport.height - viewportScroll + tipAdjust;
            /** @type {number} */
            offset = fn - ("y" === mimic.precedance || mimic.x === mimic.y ? offset : 0) - ("center" === target.y ? targetHeight / 2 : 0);
            /** @type {boolean} */
            tipAdjust = "center" === mimic.y;
            if (y) {
              tipAdjust = tip && (tip.corner && "x" === tip.corner.precedance) ? tipLength : 0;
              /** @type {number} */
              offset = ("top" === mimic.y ? 1 : -1) * fn - tipAdjust;
              position.top += 0 < targetWidth ? targetWidth : 0 < viewportScroll ? -viewportScroll : 0;
              /** @type {number} */
              position.top = Math.max(-optgroup.offset.top + viewport.offset.top + (tipAdjust && "center" === tip.corner.x ? tip.offset : 0), type - offset, Math.min(Math.max(-optgroup.offset.top + viewport.offset.top + viewport.height, type + offset), position.top));
            } else {
              if (0 < targetWidth && ("top" !== mimic.y || 0 < viewportScroll)) {
                position.top -= offset + DISTANCE;
              } else {
                if (0 < viewportScroll && ("bottom" !== mimic.y || 0 < targetWidth)) {
                  position.top -= (tipAdjust ? -offset : offset) + DISTANCE;
                }
              }
              if (0 > position.top) {
                if (-position.top > viewportScroll) {
                  /** @type {string} */
                  position.top = type;
                }
              }
            }
            return position.top - type;
          }
        };
        if ($.isArray(cycle) && 2 === cycle.length) {
          target = {
            x : "left",
            y : "top"
          };
          position = {
            left : cycle[0],
            top : cycle[1]
          };
        } else {
          if ("mouse" === cycle && (event && event.pageX || cache.event.pageX)) {
            target = {
              x : "left",
              y : "top"
            };
            event = (event && ("resize" === event.type || "scroll" === event.type) ? cache.event : event && (event.pageX && "mousemove" === event.type) ? event : MOUSE && (MOUSE.pageX && (adjust.mouse || (!event || !event.pageX))) ? {
              pageX : MOUSE.pageX,
              pageY : MOUSE.pageY
            } : !adjust.mouse && (cache.origin && (cache.origin.pageX && options.show.distance)) ? cache.origin : event) || (event || (cache.event || (MOUSE || {})));
            position = {
              top : event.pageY,
              left : event.pageX
            };
          } else {
            cycle = "event" === cycle ? event && (event.target && ("scroll" !== event.type && "resize" !== event.type)) ? cache.target = $(event.target) : cache.target : cache.target = $(cycle.jquery ? cycle : elements.target);
            cycle = $(cycle).eq(0);
            if (0 === cycle.length) {
              return dblclick;
            }
            if (cycle[0] === document || cycle[0] === window) {
              left = PLUGINS.iOS ? window.innerWidth : cycle.width();
              targetHeight = PLUGINS.iOS ? window.innerHeight : cycle.height();
              if (cycle[0] === window) {
                position = {
                  top : (viewport || cycle).scrollTop(),
                  left : (viewport || cycle).scrollLeft()
                };
              }
            } else {
              if (cycle.is("area") && PLUGINS.imagemap) {
                position = PLUGINS.imagemap(cycle, target, that.enabled ? win : ready);
              } else {
                if ("http://www.w3.org/2000/svg" === cycle[0].namespaceURI && PLUGINS.svg) {
                  position = PLUGINS.svg(cycle, target);
                } else {
                  left = cycle.outerWidth();
                  targetHeight = cycle.outerHeight();
                  position = PLUGINS.offset(cycle, optgroup);
                }
              }
            }
            if (position.offset) {
              left = position.width;
              targetHeight = position.height;
              offset = position.flipoffset;
              position = position.offset;
            }
            if (3.1 < PLUGINS.iOS && 4.1 > PLUGINS.iOS || (4.3 <= PLUGINS.iOS && 4.33 > PLUGINS.iOS || !PLUGINS.iOS && top)) {
              win = $(window);
              position.left -= win.scrollLeft();
              position.top -= win.scrollTop();
            }
            position.left += "right" === target.x ? left : "center" === target.x ? left / 2 : 0;
            position.top += "bottom" === target.y ? targetHeight : "center" === target.y ? targetHeight / 2 : 0;
          }
        }
        position.left += adjust.x + ("right" === mimic.x ? -queueHooks : "center" === mimic.x ? -queueHooks / 2 : 0);
        position.top += adjust.y + ("bottom" === mimic.y ? -selector : "center" === mimic.y ? -selector / 2 : 0);
        if (that.enabled) {
          if (viewport = {
            elem : viewport,
            height : viewport[(viewport[0] === window ? "h" : "outerH") + "eight"](),
            width : viewport[(viewport[0] === window ? "w" : "outerW") + "idth"](),
            scrollLeft : top ? 0 : viewport.scrollLeft(),
            scrollTop : top ? 0 : viewport.scrollTop(),
            offset : viewport.offset() || {
              left : 0,
              top : 0
            }
          }, optgroup = {
            elem : optgroup,
            scrollLeft : optgroup.scrollLeft(),
            scrollTop : optgroup.scrollTop(),
            offset : optgroup.offset() || {
              left : 0,
              top : 0
            }
          }, position.adjusted = {
            left : "none" !== that.horizontal ? that.left(position.left) : 0,
            top : "none" !== that.vertical ? that.top(position.top) : 0
          }, position.adjusted.left + position.adjusted.top && tooltip.attr("class", tooltip[0].className.replace(/ui-tooltip-pos-\w+/i, uitooltip + "-pos-" + mimic.abbrev())), offset && (position.adjusted.left && (position.left += offset.left)), offset && position.adjusted.top) {
            position.top += offset.top;
          }
        } else {
          position.adjusted = {
            left : 0,
            top : 0
          };
        }
        fix.originalEvent = $.extend({}, event);
        tooltip.trigger(fix, [dblclick, position, viewport.elem || viewport]);
        if (fix.isDefaultPrevented()) {
          return dblclick;
        }
        delete position.adjusted;
        if (x === ready || (!Q || (isNaN(position.left) || (isNaN(position.top) || ("mouse" === cycle || !$.isFunction(posOptions.effect)))))) {
          tooltip.css(position);
        } else {
          if ($.isFunction(posOptions.effect)) {
            posOptions.effect.call(tooltip, dblclick, $.extend({}, position));
            tooltip.queue(function(next) {
              $(this).css({
                opacity : "",
                height : ""
              });
              if ($.browser.msie) {
                this.style.removeAttribute("filter");
              }
              next();
            });
          }
        }
        /** @type {number} */
        a = 0;
        return dblclick;
      },
      /**
       * @return {?}
       */
      redraw : function() {
        if (1 > dblclick.rendered || b) {
          return dblclick;
        }
        var perc = options.position.container;
        var width;
        var max;
        var min;
        /** @type {number} */
        b = 1;
        if (options.style.height) {
          tooltip.css("height", options.style.height);
        }
        if (options.style.width) {
          tooltip.css("width", options.style.width);
        } else {
          tooltip.css("width", "").addClass(name);
          width = tooltip.width() + 1;
          max = tooltip.css("max-width") || "";
          min = tooltip.css("min-width") || "";
          /** @type {number} */
          perc = -1 < (max + min).indexOf("%") ? perc.width() / 100 : 0;
          max = (-1 < max.indexOf("%") ? perc : 1) * parseInt(max, 10) || width;
          /** @type {number} */
          min = (-1 < min.indexOf("%") ? perc : 1) * parseInt(min, 10) || 0;
          width = max + min ? Math.min(Math.max(width, min), max) : width;
          tooltip.css("width", Math.round(width)).removeClass(name);
        }
        /** @type {number} */
        b = 0;
        return dblclick;
      },
      /**
       * @param {boolean} state
       * @return {?}
       */
      disable : function(state) {
        if ("boolean" !== typeof state) {
          /** @type {boolean} */
          state = !(tooltip.hasClass(disabled) || cache.disabled);
        }
        if (dblclick.rendered) {
          tooltip.toggleClass(disabled, state);
          $.attr(tooltip[0], "aria-disabled", state);
        } else {
          /** @type {boolean} */
          cache.disabled = !!state;
        }
        return dblclick;
      },
      /**
       * @return {?}
       */
      enable : function() {
        return dblclick.disable(ready);
      },
      /**
       * @return {?}
       */
      destroy : function() {
        var elem = target[0];
        var val = $.attr(elem, key);
        var elemAPI = target.data("qtip");
        /** @type {boolean} */
        dblclick.destroyed = fix;
        if (dblclick.rendered) {
          tooltip.stop(1, 0).remove();
          $.each(dblclick.plugins, function() {
            if (this.destroy) {
              this.destroy();
            }
          });
        }
        clearTimeout(dblclick.timers.show);
        clearTimeout(dblclick.timers.hide);
        unassignEvents();
        if (!elemAPI || dblclick === elemAPI) {
          $.removeData(elem, "qtip");
          if (options.suppress) {
            if (val) {
              $.attr(elem, "title", val);
              target.removeAttr(key);
            }
          }
          target.removeAttr("aria-describedby");
        }
        target.unbind(".qtip-" + id);
        delete ids[dblclick.id];
        return target;
      }
    });
  }
  /**
   * @param {Object} api
   * @return {undefined}
   */
  function Ajax(api) {
    var self = this;
    var tooltip = api.elements.tooltip;
    var opts = api.options.content.ajax;
    var defaults = QTIP.defaults.content.ajax;
    /** @type {RegExp} */
    var rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi;
    /** @type {boolean} */
    var value = fix;
    /** @type {boolean} */
    var pending = ready;
    var handler;
    api.checks.ajax = {
      /**
       * @param {?} deepDataAndEvents
       * @param {string} dataAndEvents
       * @param {?} v
       * @return {undefined}
       */
      "^content.ajax" : function(deepDataAndEvents, dataAndEvents, v) {
        if ("ajax" === dataAndEvents) {
          opts = v;
        }
        if ("once" === dataAndEvents) {
          self.init();
        } else {
          if (opts && opts.url) {
            self.load();
          } else {
            tooltip.unbind(".qtip-ajax");
          }
        }
      }
    };
    $.extend(self, {
      /**
       * @return {?}
       */
      init : function() {
        if (opts && opts.url) {
          tooltip.unbind(".qtip-ajax")[opts.once ? "one" : "bind"]("tooltipshow.qtip-ajax", self.load);
        }
        return self;
      },
      /**
       * @param {Object} event
       * @return {?}
       */
      load : function(event) {
        /**
         * @return {undefined}
         */
        function after() {
          var complete;
          if (!api.destroyed && (value = ready, proceed && (pending = fix, api.show(event.originalEvent)), (complete = defaults.complete || opts.complete) && $.isFunction(complete))) {
            complete.apply(opts.context || api, arguments);
          }
        }
        /**
         * @param {string} type
         * @param {Function} name
         * @param {Function} types
         * @return {undefined}
         */
        function trigger(type, name, types) {
          var complete;
          if (!api.destroyed) {
            if (cycle) {
              type = $("<div/>").append(type.replace(rscript, "")).find(cycle);
            }
            if ((complete = defaults.success || opts.success) && $.isFunction(complete)) {
              complete.call(opts.context || api, type, name, types);
            } else {
              api.set("content.text", type);
            }
          }
        }
        /**
         * @param {string} type
         * @param {Function} name
         * @param {Function} types
         * @return {undefined}
         */
        function errorHandler(type, name, types) {
          if (!api.destroyed) {
            if (!(0 === type.status)) {
              api.set("content.text", name + ": " + types);
            }
          }
        }
        if (pending) {
          /** @type {boolean} */
          pending = ready;
        } else {
          var n = opts.url.indexOf(" ");
          var source = opts.url;
          var cycle;
          var proceed = !opts.loading && value;
          if (proceed) {
            try {
              event.preventDefault();
            } catch (E) {
            }
          } else {
            if (event && event.isDefaultPrevented()) {
              return self;
            }
          }
          if (handler) {
            if (handler.abort) {
              handler.abort();
            }
          }
          if (-1 < n) {
            cycle = source.substr(n);
            source = source.substr(0, n);
          }
          handler = $.ajax($.extend({
            error : defaults.error || errorHandler,
            context : api
          }, opts, {
            url : source,
            /** @type {function (string, Function, Function): undefined} */
            success : trigger,
            /** @type {function (): undefined} */
            complete : after
          }));
        }
      },
      /**
       * @return {undefined}
       */
      destroy : function() {
        if (handler) {
          if (handler.abort) {
            handler.abort();
          }
        }
        /** @type {boolean} */
        api.destroyed = fix;
      }
    });
    self.init();
  }
  /**
   * @param {Element} qTip
   * @return {undefined}
   */
  function Tip(qTip) {
    /**
     * @param {string} cycle
     * @param {Function} optgroup
     * @param {?} position
     * @return {undefined}
     */
    function optgroup(cycle, optgroup, position) {
      if (elems.tip) {
        cycle = self.corner.clone();
        optgroup = position.adjusted;
        var parts = qTip.options.position.adjust.method.split(" ");
        var spaceAfter = parts[0];
        parts = parts[1] || parts[0];
        /** @type {boolean} */
        var name = ready;
        /** @type {boolean} */
        var callback = ready;
        /** @type {number} */
        var a = 0;
        /** @type {number} */
        var b = 0;
        var offset;
        var rvar = {};
        var props;
        if (self.corner.fixed !== fix) {
          if ("shift" === spaceAfter && ("x" === cycle.precedance && (optgroup.left && "center" !== cycle.y))) {
            /** @type {string} */
            cycle.precedance = "x" === cycle.precedance ? "y" : "x";
          } else {
            if ("shift" !== spaceAfter) {
              if (optgroup.left) {
                /** @type {string} */
                cycle.x = "center" === cycle.x ? 0 < optgroup.left ? "left" : "right" : "left" === cycle.x ? "right" : "left";
              }
            }
          }
          if ("shift" === parts && ("y" === cycle.precedance && (optgroup.top && "center" !== cycle.x))) {
            /** @type {string} */
            cycle.precedance = "y" === cycle.precedance ? "x" : "y";
          } else {
            if ("shift" !== parts) {
              if (optgroup.top) {
                /** @type {string} */
                cycle.y = "center" === cycle.y ? 0 < optgroup.top ? "top" : "bottom" : "top" === cycle.y ? "bottom" : "top";
              }
            }
          }
          if (cycle.string() !== cache.corner.string()) {
            if (cache.top !== optgroup.top || cache.left !== optgroup.left) {
              self.update(cycle, ready);
            }
          }
        }
        offset = self.position(cycle, optgroup);
        offset[cycle.x] += parseWidth(cycle, cycle.x, fix);
        offset[cycle.y] += parseWidth(cycle, cycle.y, fix);
        if (offset.right !== undef) {
          /** @type {number} */
          offset.left = -offset.right;
        }
        if (offset.bottom !== undef) {
          /** @type {number} */
          offset.top = -offset.bottom;
        }
        /** @type {number} */
        offset.user = Math.max(0, opts.offset);
        if (name = "shift" === spaceAfter && !!optgroup.left) {
          if ("center" === cycle.x) {
            /** @type {number} */
            rvar["margin-left"] = a = offset["margin-left"] - optgroup.left;
          } else {
            /** @type {Array} */
            props = offset.right !== undef ? [optgroup.left, -offset.left] : [-optgroup.left, offset.left];
            if ((a = Math.max(props[0], props[1])) > props[0]) {
              position.left -= optgroup.left;
              /** @type {boolean} */
              name = ready;
            }
            /** @type {number} */
            rvar[offset.right !== undef ? "right" : "left"] = a;
          }
        }
        if (callback = "shift" === parts && !!optgroup.top) {
          if ("center" === cycle.y) {
            /** @type {number} */
            rvar["margin-top"] = b = offset["margin-top"] - optgroup.top;
          } else {
            /** @type {Array} */
            props = offset.bottom !== undef ? [optgroup.top, -offset.top] : [-optgroup.top, offset.top];
            if ((b = Math.max(props[0], props[1])) > props[0]) {
              position.top -= optgroup.top;
              /** @type {boolean} */
              callback = ready;
            }
            /** @type {number} */
            rvar[offset.bottom !== undef ? "bottom" : "top"] = b;
          }
        }
        elems.tip.css(rvar).toggle(!(a && b || ("center" === cycle.x && b || "center" === cycle.y && a)));
        position.left -= offset.left.charAt ? offset.user : "shift" !== spaceAfter || (callback || !name && !callback) ? offset.left : 0;
        position.top -= offset.top.charAt ? offset.user : "shift" !== parts || (name || !name && !callback) ? offset.top : 0;
        cache.left = optgroup.left;
        cache.top = optgroup.top;
        cache.corner = cycle.clone();
      }
    }
    /**
     * @param {number} type
     * @param {string} optgroup
     * @param {boolean} data
     * @return {?}
     */
    function parseWidth(type, optgroup, data) {
      optgroup = !optgroup ? type[type.precedance] : optgroup;
      var stateVal = $el.hasClass(name);
      type = elems.titlebar && "top" === type.y ? elems.titlebar : elems.tooltip;
      /** @type {string} */
      optgroup = "border-" + optgroup + "-width";
      $el.addClass(name);
      /** @type {number} */
      type = parseInt(type.css(optgroup), 10);
      /** @type {number} */
      type = (data ? type || parseInt($el.css(optgroup), 10) : type) || 0;
      $el.toggleClass(name, stateVal);
      return type;
    }
    /**
     * @param {string} round
     * @return {?}
     */
    function calculateSize(round) {
      /** @type {boolean} */
      var y = "y" === round.precedance;
      var result = data[y ? "width" : "height"];
      var height = data[y ? "height" : "width"];
      /** @type {boolean} */
      var ratio = -1 < round.string().indexOf("center");
      /** @type {number} */
      var base = result * (ratio ? 0.5 : 1);
      /** @type {function (*, *): number} */
      var pow = Math.pow;
      /** @type {function (*): number} */
      round = Math.round;
      /** @type {number} */
      var smallHyp = Math.sqrt(pow(base, 2) + pow(height, 2));
      /** @type {Array} */
      base = [border / base * smallHyp, border / height * smallHyp];
      /** @type {number} */
      base[2] = Math.sqrt(pow(base[0], 2) - pow(border, 2));
      /** @type {number} */
      base[3] = Math.sqrt(pow(base[1], 2) - pow(border, 2));
      /** @type {number} */
      ratio = (smallHyp + base[2] + base[3] + (ratio ? 0 : base[0])) / smallHyp;
      /** @type {Array} */
      result = [round(ratio * height), round(ratio * result)];
      return{
        height : result[y ? 0 : 1],
        width : result[y ? 1 : 0]
      };
    }
    var self = this;
    var opts = qTip.options.style.tip;
    var elems = qTip.elements;
    var $el = elems.tooltip;
    var cache = {
      top : 0,
      left : 0
    };
    var data = {
      width : opts.width,
      height : opts.height
    };
    var color;
    var start;
    var border = opts.border || 0;
    /** @type {boolean} */
    var hasCanvas = !!($("<canvas />")[0] || {}).getContext;
    /** @type {null} */
    self.corner = NULL;
    /** @type {null} */
    self.mimic = NULL;
    self.border = border;
    self.offset = opts.offset;
    self.size = data;
    qTip.checks.tip = {
      /**
       * @return {undefined}
       */
      "^position.my|style.tip.(corner|mimic|border)$" : function() {
        if (!self.init()) {
          self.destroy();
        }
        qTip.reposition();
      },
      /**
       * @return {undefined}
       */
      "^style.tip.(height|width)$" : function() {
        data = {
          width : opts.width,
          height : opts.height
        };
        self.create();
        self.update();
        qTip.reposition();
      },
      /**
       * @return {undefined}
       */
      "^content.title.text|style.(classes|widget)$" : function() {
        if (elems.tip) {
          if (elems.tip.length) {
            self.update();
          }
        }
      }
    };
    $.extend(self, {
      /**
       * @return {?}
       */
      init : function() {
        var enabled = self.detectCorner() && (hasCanvas || $.browser.msie);
        if (enabled) {
          self.create();
          self.update();
          $el.unbind(".qtip-tip").bind("tooltipmove.qtip-tip", optgroup);
        }
        return enabled;
      },
      /**
       * @return {?}
       */
      detectCorner : function() {
        var corner = opts.corner;
        var posOptions = qTip.options.position;
        var at = posOptions.at;
        posOptions = posOptions.my.string ? posOptions.my.string() : posOptions.my;
        if (corner === ready || posOptions === ready && at === ready) {
          return ready;
        }
        if (corner === fix) {
          self.corner = new PLUGINS.Corner(posOptions);
        } else {
          if (!corner.string) {
            self.corner = new PLUGINS.Corner(corner);
            /** @type {boolean} */
            self.corner.fixed = fix;
          }
        }
        cache.corner = new PLUGINS.Corner(self.corner.string());
        return "centercenter" !== self.corner.string();
      },
      /**
       * @param {string} optgroup
       * @return {undefined}
       */
      detectColours : function(optgroup) {
        var result;
        var value;
        var cycle = elems.tip.css("cssText", "");
        result = optgroup || self.corner;
        var dir = result[result.precedance];
        /** @type {string} */
        optgroup = "border-" + dir + "-color";
        /** @type {string} */
        dir = "border" + dir.charAt(0) + dir.substr(1) + "Color";
        /** @type {RegExp} */
        var rchecked = /rgba?\(0, 0, 0(, 0)?\)|transparent|#123456/i;
        var element = elems.titlebar && ("top" === result.y || "center" === result.y && cycle.position().top + data.height / 2 + opts.offset < elems.titlebar.outerHeight(1)) ? elems.titlebar : elems.tooltip;
        $el.addClass(name);
        color = result = cycle.css("background-color");
        start = value = cycle[0].style[dir] || (cycle.css(optgroup) || $el.css(optgroup));
        if (!result || rchecked.test(result)) {
          color = element.css("background-color") || "transparent";
          if (rchecked.test(color)) {
            color = $el.css("background-color") || result;
          }
        }
        if (!value || (rchecked.test(value) || value === $(document.body).css("color"))) {
          if (start = element.css(optgroup) || "transparent", rchecked.test(start) || start === element.css("color")) {
            start = $el.css(optgroup) || ($el.css(dir) || value);
          }
        }
        $("*", cycle).add(cycle).css("cssText", "background-color:transparent !important;border:0 !important;");
        $el.removeClass(name);
      },
      /**
       * @return {undefined}
       */
      create : function() {
        var mapWidth = data.width;
        var mapHeight = data.height;
        if (elems.tip) {
          elems.tip.remove();
        }
        elems.tip = $("<div />", {
          "class" : "ui-tooltip-tip"
        }).css({
          width : mapWidth,
          height : mapHeight
        }).prependTo($el);
        if (hasCanvas) {
          $("<canvas />").appendTo(elems.tip)[0].getContext("2d").save();
        } else {
          elems.tip.html('<vml:shape coordorigin="0,0" style="display:inline-block; position:absolute; behavior:url(#default#VML);"></vml:shape><vml:shape coordorigin="0,0" style="display:inline-block; position:absolute; behavior:url(#default#VML);"></vml:shape>');
          $("*", elems.tip).bind("click mousedown", function(event) {
            event.stopPropagation();
          });
        }
      },
      /**
       * @param {string} cycle
       * @param {string} value
       * @return {undefined}
       */
      update : function(cycle, value) {
        var t = elems.tip;
        var context = t.children();
        var width = data.width;
        var height = data.height;
        var mimic = opts.mimic;
        /** @type {function (*): number} */
        var round = Math.round;
        var precedance;
        var ps;
        var size;
        if (!cycle) {
          cycle = cache.corner || self.corner;
        }
        if (mimic === ready) {
          /** @type {string} */
          mimic = cycle;
        } else {
          mimic = new PLUGINS.Corner(mimic);
          mimic.precedance = cycle.precedance;
          if ("inherit" === mimic.x) {
            mimic.x = cycle.x;
          } else {
            if ("inherit" === mimic.y) {
              mimic.y = cycle.y;
            } else {
              if (mimic.x === mimic.y) {
                mimic[cycle.precedance] = cycle[cycle.precedance];
              }
            }
          }
        }
        precedance = mimic.precedance;
        if ("x" === cycle.precedance) {
          size = data.width;
          data.width = data.height;
          data.height = size;
        } else {
          data.width = opts.width;
          data.height = opts.height;
        }
        elems.tip.css({
          width : width = data.width,
          height : height = data.height
        });
        self.detectColours(cycle);
        if ("transparent" !== start) {
          border = parseWidth(cycle, NULL, fix);
          if (0 === opts.border) {
            if (0 < border) {
              color = start;
            }
          }
          self.border = border = opts.border !== fix ? opts.border : border;
        } else {
          /** @type {number} */
          self.border = border = 0;
        }
        size = mimic;
        var tips = width;
        var destHeight = height;
        /** @type {number} */
        var Ba = Math.ceil(tips / 2);
        /** @type {number} */
        var Ja = Math.ceil(destHeight / 2);
        tips = {
          bottomright : [[0, 0], [tips, destHeight], [tips, 0]],
          bottomleft : [[0, 0], [tips, 0], [0, destHeight]],
          topright : [[0, destHeight], [tips, 0], [tips, destHeight]],
          topleft : [[0, 0], [0, destHeight], [tips, destHeight]],
          topcenter : [[0, destHeight], [Ba, 0], [tips, destHeight]],
          bottomcenter : [[0, 0], [tips, 0], [Ba, destHeight]],
          rightcenter : [[0, 0], [tips, Ja], [0, destHeight]],
          leftcenter : [[tips, 0], [tips, destHeight], [0, Ja]]
        };
        /** @type {Array} */
        tips.lefttop = tips.bottomright;
        /** @type {Array} */
        tips.righttop = tips.bottomleft;
        /** @type {Array} */
        tips.leftbottom = tips.topright;
        /** @type {Array} */
        tips.rightbottom = tips.topleft;
        ps = tips[size.string()];
        self.size = size = calculateSize(cycle);
        t.css(size);
        /** @type {Array} */
        t = "y" === cycle.precedance ? [round("left" === mimic.x ? border : "right" === mimic.x ? size.width - width - border : (size.width - width) / 2), round("top" === mimic.y ? size.height - height : 0)] : [round("left" === mimic.x ? size.width - width : 0), round("top" === mimic.y ? border : "bottom" === mimic.y ? size.height - height - border : (size.height - height) / 2)];
        if (hasCanvas) {
          context.attr(size);
          context = context[0].getContext("2d");
          context.restore();
          context.save();
          context.clearRect(0, 0, 3E3, 3E3);
          context.fillStyle = color;
          context.strokeStyle = start;
          /** @type {number} */
          context.lineWidth = 2 * border;
          /** @type {string} */
          context.lineJoin = "miter";
          /** @type {number} */
          context.miterLimit = 100;
          context.translate(t[0], t[1]);
          context.beginPath();
          context.moveTo(ps[0][0], ps[0][1]);
          context.lineTo(ps[1][0], ps[1][1]);
          context.lineTo(ps[2][0], ps[2][1]);
          context.closePath();
          if (border) {
            if ("border-box" === $el.css("background-clip")) {
              context.strokeStyle = color;
              context.stroke();
            }
            context.strokeStyle = start;
            context.stroke();
          }
          context.fill();
        } else {
          /** @type {string} */
          ps = "m" + ps[0][0] + "," + ps[0][1] + " l" + ps[1][0] + "," + ps[1][1] + " " + ps[2][0] + "," + ps[2][1] + " xe";
          /** @type {number} */
          t[2] = border && /^(r|b)/i.test(cycle.string()) ? 8 === parseFloat($.browser.version, 10) ? 2 : 1 : 0;
          context.css({
            antialias : "" + (-1 < mimic.string().indexOf("center")),
            left : t[0] - t[2] * Number("x" === precedance),
            top : t[1] - t[2] * Number("y" === precedance),
            width : width + border,
            height : height + border
          }).each(function(i) {
            var $this = $(this);
            $this[$this.prop ? "prop" : "attr"]({
              coordsize : width + border + " " + (height + border),
              path : ps,
              fillcolor : color,
              filled : !!i,
              stroked : !i
            }).css({
              display : border || i ? "block" : "none"
            });
            if (!i) {
              if ($this.html() === "") {
                $this.html('<vml:stroke weight="' + border * 2 + 'px" color="' + start + '" miterlimit="1000" joinstyle="miter"  style="behavior:url(#default#VML); display:inline-block;" />');
              }
            }
          });
        }
        if (value !== ready) {
          self.position(cycle);
        }
      },
      /**
       * @param {string} type
       * @return {?}
       */
      position : function(type) {
        var tip = elems.tip;
        var rvar = {};
        /** @type {number} */
        var userOffset = Math.max(0, opts.offset);
        var j;
        var element;
        var attributes;
        if (opts.corner === ready || !tip) {
          return ready;
        }
        type = type || self.corner;
        j = type.precedance;
        element = calculateSize(type);
        /** @type {Array} */
        attributes = [type.x, type.y];
        if ("x" === j) {
          attributes.reverse();
        }
        $.each(attributes, function(i, side) {
          var b;
          var optgroup;
          if ("center" === side) {
            /** @type {string} */
            b = "y" === j ? "left" : "top";
            /** @type {string} */
            rvar[b] = "50%";
            /** @type {number} */
            rvar["margin-" + b] = -Math.round(element["y" === j ? "width" : "height"] / 2) + userOffset;
          } else {
            b = parseWidth(type, side);
            optgroup = $.browser.mozilla;
            /** @type {string} */
            var pos = type.y + (optgroup ? "" : "-") + type.x;
            /** @type {string} */
            optgroup = (optgroup ? "-moz-" : $.browser.webkit ? "-webkit-" : "") + (optgroup ? "border-radius-" + pos : "border-" + pos + "-radius");
            /** @type {number} */
            optgroup = parseInt((elems.titlebar && "top" === type.y ? elems.titlebar : elems.content).css(optgroup), 10) || (parseInt($el.css(optgroup), 10) || 0);
            /** @type {number} */
            rvar[side] = i ? 0 : userOffset + (optgroup > b ? optgroup : -b);
          }
        });
        rvar[type[j]] -= element["x" === j ? "width" : "height"];
        tip.css({
          top : "",
          bottom : "",
          left : "",
          right : "",
          margin : ""
        }).css(rvar);
        return rvar;
      },
      /**
       * @return {undefined}
       */
      destroy : function() {
        if (elems.tip) {
          elems.tip.remove();
        }
        /** @type {boolean} */
        elems.tip = false;
        $el.unbind(".qtip-tip");
      }
    });
    self.init();
  }
  /**
   * @param {Element} api
   * @return {undefined}
   */
  function Modal(api) {
    /**
     * @param {Element} el
     * @return {undefined}
     */
    function hide(el) {
      var dropdowns = tooltip.find("input:visible");
      if (1 > dropdowns.length) {
        el.blur();
      } else {
        dropdowns.first().focus();
      }
    }
    /**
     * @param {Event} data
     * @return {undefined}
     */
    function optgroup(data) {
      var target = $(data.target);
      var cTaskName1 = target.closest(".qtip");
      if (!(1 > cTaskName1.length ? ready : parseInt(cTaskName1[0].style.zIndex, 10) > parseInt(tooltip[0].style.zIndex, 10))) {
        if ($(data.target).closest(selector)[0] !== tooltip[0]) {
          hide(target);
        }
      }
    }
    var self = this;
    var options = api.options.show.modal;
    var elems = api.elements;
    var tooltip = elems.tooltip;
    /** @type {string} */
    var namespace = ".qtipmodal" + api.id;
    var docBody = $(document.body);
    var overlay;
    api.checks.modal = {
      /**
       * @return {undefined}
       */
      "^show.modal.(on|blur)$" : function() {
        self.init();
        elems.overlay.toggle(tooltip.is(":visible"));
      }
    };
    $.extend(self, {
      /**
       * @return {?}
       */
      init : function() {
        if (!options.on) {
          return self;
        }
        overlay = self.create();
        tooltip.attr("is-modal-qtip", fix).css("z-index", PLUGINS.modal.zindex + $(selector + "[is-modal-qtip]").length).unbind(".qtipmodal").unbind(namespace).bind("tooltipshow.qtipmodal tooltiphide.qtipmodal", function(event, e, debug) {
          e = event.originalEvent;
          if (event.target === tooltip[0]) {
            if (e && ("tooltiphide" === event.type && (/mouse(leave|enter)/.test(e.type) && $(e.relatedTarget).closest(overlay[0]).length))) {
              try {
                event.preventDefault();
              } catch (g) {
              }
            } else {
              if (!e || e && !e.solo) {
                self[event.type.replace("tooltip", "")](event, debug);
              }
            }
          }
        }).bind("tooltipfocus.qtipmodal", function(event) {
          if (!(event.isDefaultPrevented() || event.target !== tooltip[0])) {
            var qtips = $(selector).filter("[is-modal-qtip]");
            var newIndex = PLUGINS.modal.zindex + qtips.length;
            /** @type {number} */
            var curIndex = parseInt(tooltip[0].style.zIndex, 10);
            /** @type {number} */
            overlay[0].style.zIndex = newIndex - 2;
            qtips.each(function() {
              if (this.style.zIndex > curIndex) {
                this.style.zIndex -= 1;
              }
            });
            qtips.end().filter("." + klass).qtip("blur", event.originalEvent);
            tooltip.addClass(klass)[0].style.zIndex = newIndex;
            try {
              event.preventDefault();
            } catch (g) {
            }
          }
        }).bind("tooltiphide.qtipmodal", function(event) {
          if (event.target === tooltip[0]) {
            $("[is-modal-qtip]").filter(":visible").not(tooltip).last().qtip("focus", event);
          }
        });
        if (options.escape) {
          $(document).unbind(namespace).bind("keydown" + namespace, function(cycle) {
            if (27 === cycle.keyCode) {
              if (tooltip.hasClass(klass)) {
                api.hide(cycle);
              }
            }
          });
        }
        if (options.blur) {
          elems.overlay.unbind(namespace).bind("click" + namespace, function(cycle) {
            if (tooltip.hasClass(klass)) {
              api.hide(cycle);
            }
          });
        }
        return self;
      },
      /**
       * @return {?}
       */
      create : function() {
        /**
         * @return {undefined}
         */
        function optgroup() {
          overlay.css({
            height : $(window).height(),
            width : $(window).width()
          });
        }
        var $span = $("#qtip-overlay");
        if ($span.length) {
          return elems.overlay = $span.insertAfter($(selector).last());
        }
        overlay = elems.overlay = $("<div />", {
          id : "qtip-overlay",
          html : "<div></div>",
          /**
           * @return {?}
           */
          mousedown : function() {
            return ready;
          }
        }).hide().insertAfter($(selector).last());
        $(window).unbind(".qtipmodal").bind("resize.qtipmodal", optgroup);
        optgroup();
        return overlay;
      },
      /**
       * @param {string} type
       * @param {Function} name
       * @param {Function} types
       * @return {?}
       */
      toggle : function(type, name, types) {
        if (type && type.isDefaultPrevented()) {
          return self;
        }
        type = options.effect;
        /** @type {string} */
        var backToggleMth = name ? "show" : "hide";
        var relativePath = overlay.is(":visible");
        var modals = $("[is-modal-qtip]").filter(":visible").not(tooltip);
        if (!overlay) {
          overlay = self.create();
        }
        if (overlay.is(":animated") && relativePath === name || !name && modals.length) {
          return self;
        }
        if (name) {
          overlay.css({
            left : 0,
            top : 0
          });
          overlay.toggleClass("blurs", options.blur);
          if (options.stealfocus !== ready) {
            docBody.bind("focusin" + namespace, optgroup);
            hide($("body *"));
          }
        } else {
          docBody.unbind("focusin" + namespace);
        }
        overlay.stop(fix, ready);
        if ($.isFunction(type)) {
          type.call(overlay, name);
        } else {
          if (type === ready) {
            overlay[backToggleMth]();
          } else {
            overlay.fadeTo(parseInt(types, 10) || 90, name ? 1 : 0, function() {
              if (!name) {
                $(this).hide();
              }
            });
          }
        }
        if (!name) {
          overlay.queue(function(n) {
            overlay.css({
              left : "",
              top : ""
            });
            n();
          });
        }
        return self;
      },
      /**
       * @param {string} type
       * @param {Function} name
       * @return {?}
       */
      show : function(type, name) {
        return self.toggle(type, fix, name);
      },
      /**
       * @param {string} type
       * @param {Function} name
       * @return {?}
       */
      hide : function(type, name) {
        return self.toggle(type, ready, name);
      },
      /**
       * @return {?}
       */
      destroy : function() {
        var delBlanket = overlay;
        if (delBlanket) {
          if (delBlanket = 1 > $("[is-modal-qtip]").not(tooltip).length) {
            elems.overlay.remove();
            $(document).unbind(".qtipmodal");
          } else {
            elems.overlay.unbind(".qtipmodal" + api.id);
          }
          docBody.undelegate("*", "focusin" + namespace);
        }
        return tooltip.removeAttr("is-modal-qtip").unbind(".qtipmodal");
      }
    });
    self.init();
  }
  /**
   * @param {Object} api
   * @return {undefined}
   */
  function BGIFrame(api) {
    var self = this;
    var elems = api.elements;
    var cycle = elems.tooltip;
    /** @type {string} */
    var namespace = ".bgiframe-" + api.id;
    $.extend(self, {
      /**
       * @return {undefined}
       */
      init : function() {
        elems.bgiframe = $('<iframe class="ui-tooltip-bgiframe" frameborder="0" tabindex="-1" src="javascript:\'\';"  style="display:block; position:absolute; z-index:-1; filter:alpha(opacity=0); -ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";"></iframe>');
        elems.bgiframe.appendTo(cycle);
        cycle.bind("tooltipmove" + namespace, self.adjust);
      },
      /**
       * @return {undefined}
       */
      adjust : function() {
        var rvar = api.get("dimensions");
        var tip = api.plugins.tip;
        var length = elems.tip;
        var optgroup;
        /** @type {number} */
        optgroup = parseInt(cycle.css("border-left-width"), 10) || 0;
        optgroup = {
          left : -optgroup,
          top : -optgroup
        };
        if (tip) {
          if (length) {
            /** @type {Array} */
            tip = "x" === tip.corner.precedance ? ["width", "left"] : ["height", "top"];
            optgroup[tip[1]] -= length[tip[0]]();
          }
        }
        elems.bgiframe.css(optgroup).css(rvar);
      },
      /**
       * @return {undefined}
       */
      destroy : function() {
        elems.bgiframe.remove();
        cycle.unbind(namespace);
      }
    });
    self.init();
  }
  /** @type {boolean} */
  var fix = true;
  /** @type {boolean} */
  var ready = false;
  /** @type {null} */
  var NULL = null;
  var undef;
  var QTIP;
  var PLUGINS;
  var MOUSE;
  var ids = {};
  /** @type {string} */
  var uitooltip = "ui-tooltip";
  /** @type {string} */
  var widget = "ui-widget";
  /** @type {string} */
  var disabled = "ui-state-disabled";
  /** @type {string} */
  var selector = "div.qtip." + uitooltip;
  /** @type {string} */
  var defaultClass = uitooltip + "-default";
  /** @type {string} */
  var klass = uitooltip + "-focus";
  /** @type {string} */
  var hoverClass = uitooltip + "-hover";
  /** @type {string} */
  var name = uitooltip + "-fluid";
  /** @type {string} */
  var key = "oldtitle";
  var pending;
  /** @type {function (string, string, string): ?} */
  QTIP = $.fn.qtip = function(options, attributes, cycle) {
    /** @type {string} */
    var name = ("" + options).toLowerCase();
    /** @type {null} */
    var returned = NULL;
    var all = $.makeArray(arguments).slice(1);
    var e = all[all.length - 1];
    var opts = this[0] ? $.data(this[0], "qtip") : NULL;
    if (!arguments.length && opts || "api" === name) {
      return opts;
    }
    if ("string" === typeof options) {
      return this.each(function() {
        var api = $.data(this, "qtip");
        if (!api) {
          return fix;
        }
        if (e) {
          if (e.timeStamp) {
            api.cache.event = e;
          }
        }
        if (("option" === name || "options" === name) && attributes) {
          if ($.isPlainObject(attributes) || cycle !== undef) {
            api.set(attributes, cycle);
          } else {
            return returned = api.get(attributes), ready;
          }
        } else {
          if (api[name]) {
            api[name].apply(api[name], all);
          }
        }
      }), returned !== NULL ? returned : this;
    }
    if ("object" === typeof options || !arguments.length) {
      return opts = sanitizeOptions($.extend(fix, {}, options)), QTIP.bind.call(this, opts, e);
    }
  };
  /**
   * @param {string} type
   * @param {Function} name
   * @return {?}
   */
  QTIP.bind = function(type, name) {
    return this.each(function(id) {
      /**
       * @param {boolean} event
       * @return {?}
       */
      function optgroup(event) {
        /**
         * @return {undefined}
         */
        function render() {
          cycle.render("object" === typeof event || options.show.ready);
          targets.show.add(targets.hide).unbind(namespace);
        }
        if (cycle.cache.disabled) {
          return ready;
        }
        cycle.cache.event = $.extend({}, event);
        cycle.cache.target = event ? $(event.target) : [undef];
        if (0 < options.show.delay) {
          clearTimeout(cycle.timers.show);
          /** @type {number} */
          cycle.timers.show = setTimeout(render, options.show.delay);
          if (events.show !== events.hide) {
            targets.hide.bind(events.hide, function() {
              clearTimeout(cycle.timers.show);
            });
          }
        } else {
          render();
        }
      }
      var options;
      var targets;
      var events;
      var namespace;
      var cycle;
      id = $.isArray(type.id) ? type.id[id] : type.id;
      id = !id || (id === ready || (1 > id.length || ids[id])) ? QTIP.nextid++ : ids[id] = id;
      /** @type {string} */
      namespace = ".qtip-" + id + "-create";
      a: {
        var orig;
        var posOptions;
        var data;
        var config;
        var pdataOld;
        var elem = $(this);
        var docBody = $(document.body);
        var newTarget = this === document ? docBody : elem;
        posOptions = elem.metadata ? elem.metadata(type.metadata) : NULL;
        config = "html5" === type.metadata.type && posOptions ? posOptions[type.metadata.name] : NULL;
        var value = elem.data(type.metadata.name || "qtipopts");
        try {
          value = "string" === typeof value ? (new Function("return " + value))() : value;
        } catch (I) {
          log("Unable to parse HTML5 attribute data: " + value);
        }
        config = $.extend(fix, {}, QTIP.defaults, type, "object" === typeof value ? sanitizeOptions(value) : NULL, sanitizeOptions(config || posOptions));
        posOptions = config.position;
        /** @type {string} */
        config.id = id;
        if ("boolean" === typeof config.content.text) {
          if (data = elem.attr(config.content.attr), config.content.attr !== ready && data) {
            config.content.text = data;
          } else {
            log("Unable to locate content for tooltip! Aborting render of tooltip on element: ", elem);
            /** @type {boolean} */
            cycle = ready;
            break a;
          }
        }
        if (!posOptions.container.length) {
          posOptions.container = docBody;
        }
        if (posOptions.target === ready) {
          posOptions.target = newTarget;
        }
        if (config.show.target === ready) {
          config.show.target = newTarget;
        }
        if (config.show.solo === fix) {
          config.show.solo = posOptions.container.closest("body");
        }
        if (config.hide.target === ready) {
          config.hide.target = newTarget;
        }
        if (config.position.viewport === fix) {
          config.position.viewport = posOptions.container;
        }
        posOptions.container = posOptions.container.eq(0);
        posOptions.at = new PLUGINS.Corner(posOptions.at);
        posOptions.my = new PLUGINS.Corner(posOptions.my);
        if ($.data(this, "qtip")) {
          if (config.overwrite) {
            elem.qtip("destroy");
          } else {
            if (config.overwrite === ready) {
              cycle = ready;
              break a;
            }
          }
        }
        if (config.suppress) {
          if (pdataOld = $.attr(this, "title")) {
            $(this).removeAttr("title").attr(key, pdataOld).attr("title", "");
          }
        }
        orig = new QTip(elem, config, id, !!data);
        $.data(this, "qtip", orig);
        elem.bind("remove.qtip-" + id + " removeqtip.qtip-" + id, function() {
          orig.destroy();
        });
        cycle = orig;
      }
      if (cycle === ready) {
        return fix;
      }
      options = cycle.options;
      $.each(PLUGINS, function() {
        if ("initialize" === this.initialize) {
          this(cycle);
        }
      });
      targets = {
        show : options.show.target,
        hide : options.hide.target
      };
      events = {
        show : $.trim("" + options.show.event).replace(/ /g, namespace + " ") + namespace,
        hide : $.trim("" + options.hide.event).replace(/ /g, namespace + " ") + namespace
      };
      if (/mouse(over|enter)/i.test(events.show)) {
        if (!/mouse(out|leave)/i.test(events.hide)) {
          events.hide += " mouseleave" + namespace;
        }
      }
      targets.show.bind("mousemove" + namespace, function(ev) {
        MOUSE = {
          pageX : ev.pageX,
          pageY : ev.pageY,
          type : "mousemove"
        };
        /** @type {boolean} */
        cycle.cache.onTarget = fix;
      });
      targets.show.bind(events.show, optgroup);
      if (options.show.ready || options.prerender) {
        optgroup(name);
      }
    });
  };
  PLUGINS = QTIP.plugins = {
    /**
     * @param {string} corner
     * @return {undefined}
     */
    Corner : function(corner) {
      /** @type {string} */
      corner = ("" + corner).replace(/([A-Z])/, " $1").replace(/middle/gi, "center").toLowerCase();
      this.x = (corner.match(/left|right/i) || (corner.match(/center/) || ["inherit"]))[0].toLowerCase();
      this.y = (corner.match(/top|bottom|center/i) || ["inherit"])[0].toLowerCase();
      /** @type {string} */
      corner = corner.charAt(0);
      /** @type {string} */
      this.precedance = "t" === corner || "b" === corner ? "y" : "x";
      /**
       * @return {?}
       */
      this.string = function() {
        return "y" === this.precedance ? this.y + this.x : this.x + this.y;
      };
      /**
       * @return {?}
       */
      this.abbrev = function() {
        var a = this.x.substr(0, 1);
        var b = this.y.substr(0, 1);
        return a === b ? a : "c" === a || "c" !== a && "c" !== b ? b + a : a + b;
      };
      /**
       * @return {?}
       */
      this.clone = function() {
        return{
          x : this.x,
          y : this.y,
          precedance : this.precedance,
          string : this.string,
          abbrev : this.abbrev,
          clone : this.clone
        };
      };
    },
    /**
     * @param {string} type
     * @param {Function} name
     * @return {?}
     */
    offset : function(type, name) {
      var box = type.offset();
      var target = type.closest("body")[0];
      /** @type {Function} */
      var parent = name;
      var item;
      var otherElementRect;
      var hidden;
      if (parent) {
        do {
          if ("static" !== parent.css("position") && (otherElementRect = parent.position(), box.left -= otherElementRect.left + (parseInt(parent.css("borderLeftWidth"), 10) || 0) + (parseInt(parent.css("marginLeft"), 10) || 0), box.top -= otherElementRect.top + (parseInt(parent.css("borderTopWidth"), 10) || 0) + (parseInt(parent.css("marginTop"), 10) || 0), !item && ("hidden" !== (hidden = parent.css("overflow")) && "visible" !== hidden))) {
            item = parent;
          }
        } while ((parent = $(parent[0].offsetParent)).length);
        if (item) {
          if (item[0] !== target) {
            target = item;
            box.left += 1 * target.scrollLeft();
            box.top += 1 * target.scrollTop();
          }
        }
      }
      return box;
    },
    iOS : parseFloat(("" + (/CPU.*OS ([0-9_]{1,5})|(CPU like).*AppleWebKit.*Mobile/i.exec(navigator.userAgent) || [0, ""])[1]).replace("undefined", "3_2").replace("_", ".").replace("_", "")) || ready,
    fn : {
      /**
       * @param {string} name
       * @param {string} value
       * @return {?}
       */
      attr : function(name, value) {
        if (this.length) {
          var cycle = this[0];
          var api = $.data(cycle, "qtip");
          if ("title" === name && (api && ("object" === typeof api && api.options.suppress))) {
            if (2 > arguments.length) {
              return $.attr(cycle, key);
            }
            if (api) {
              if ("title" === api.options.content.attr && api.cache.attr) {
                api.set("content.text", value);
              }
            }
            return this.attr(key, value);
          }
        }
        return $.fn.attr_replacedByqTip.apply(this, arguments);
      },
      /**
       * @param {boolean} dataAndEvents
       * @return {?}
       */
      clone : function(dataAndEvents) {
        $([]);
        var res = $.fn.clone_replacedByqTip.apply(this, arguments);
        if (!dataAndEvents) {
          res.filter("[" + key + "]").attr("title", function() {
            return $.attr(this, key);
          }).removeAttr(key);
        }
        return res;
      }
    }
  };
  $.each(PLUGINS.fn, function(key, matcherFunction) {
    if (!matcherFunction || $.fn[key + "_replacedByqTip"]) {
      return fix;
    }
    var __method = $.fn[key + "_replacedByqTip"] = $.fn[key];
    /**
     * @return {?}
     */
    $.fn[key] = function() {
      return matcherFunction.apply(this, arguments) || __method.apply(this, arguments);
    };
  });
  if (!$.ui) {
    /** @type {function (Array): undefined} */
    $.cleanData_replacedByqTip = $.cleanData;
    /**
     * @param {Array} elems
     * @return {undefined}
     */
    $.cleanData = function(elems) {
      /** @type {number} */
      var i = 0;
      var elem;
      for (;(elem = elems[i]) !== undef;i++) {
        try {
          $(elem).triggerHandler("removeqtip");
        } catch (f) {
        }
      }
      $.cleanData_replacedByqTip(elems);
    };
  }
  /** @type {string} */
  QTIP.version = "nightly";
  /** @type {number} */
  QTIP.nextid = 0;
  /** @type {Array.<string>} */
  QTIP.inactiveEvents = "click dblclick mousedown mouseup mousemove mouseleave mouseenter".split(" ");
  /** @type {number} */
  QTIP.zindex = 15E3;
  QTIP.defaults = {
    prerender : ready,
    id : ready,
    overwrite : fix,
    suppress : fix,
    content : {
      text : fix,
      attr : "title",
      title : {
        text : ready,
        button : ready
      }
    },
    position : {
      my : "top left",
      at : "bottom right",
      target : ready,
      container : ready,
      viewport : ready,
      adjust : {
        x : 0,
        y : 0,
        mouse : fix,
        resize : fix,
        method : "flip flip"
      },
      /**
       * @param {string} type
       * @param {Function} name
       * @return {undefined}
       */
      effect : function(type, name) {
        $(this).animate(name, {
          duration : 200,
          queue : ready
        });
      }
    },
    show : {
      target : ready,
      event : "mouseenter",
      effect : fix,
      delay : 90,
      solo : ready,
      ready : ready,
      autofocus : ready
    },
    hide : {
      target : ready,
      event : "mouseleave",
      effect : fix,
      delay : 0,
      fixed : ready,
      inactive : ready,
      leave : "window",
      distance : ready
    },
    style : {
      classes : "",
      widget : ready,
      width : ready,
      height : ready,
      def : fix
    },
    events : {
      render : NULL,
      move : NULL,
      show : NULL,
      hide : NULL,
      toggle : NULL,
      visible : NULL,
      hidden : NULL,
      focus : NULL,
      blur : NULL
    }
  };
  /**
   * @param {string} type
   * @return {?}
   */
  PLUGINS.ajax = function(type) {
    var self = type.plugins.ajax;
    return "object" === typeof self ? self : type.plugins.ajax = new Ajax(type);
  };
  /** @type {string} */
  PLUGINS.ajax.initialize = "render";
  /**
   * @param {Object} options
   * @return {undefined}
   */
  PLUGINS.ajax.sanitize = function(options) {
    var opts = options.content;
    if (opts && "ajax" in opts) {
      opts = opts.ajax;
      if (typeof opts !== "object") {
        opts = options.content.ajax = {
          url : opts
        };
      }
      if ("boolean" !== typeof opts.once && opts.once) {
        /** @type {boolean} */
        opts.once = !!opts.once;
      }
    }
  };
  $.extend(fix, QTIP.defaults, {
    content : {
      ajax : {
        loading : fix,
        once : fix
      }
    }
  });
  /**
   * @param {Object} area
   * @param {Node} options
   * @param {string} adjustMethod
   * @return {?}
   */
  PLUGINS.imagemap = function(area, options, adjustMethod) {
    /**
     * @param {Object} result
     * @param {Object} coords
     * @param {Node} options
     * @return {?}
     */
    function polyCoordinates(result, coords, options) {
      /** @type {number} */
      var i = 0;
      /** @type {number} */
      var compareX = 1;
      /** @type {number} */
      var compareY = 1;
      /** @type {number} */
      var realX = 0;
      /** @type {number} */
      var realY = 0;
      var newWidth = result.width;
      var newHeight = result.height;
      for (;newWidth > 0 && (newHeight > 0 && (compareX > 0 && compareY > 0));) {
        /** @type {number} */
        newWidth = Math.floor(newWidth / 2);
        /** @type {number} */
        newHeight = Math.floor(newHeight / 2);
        /** @type {number} */
        compareX = options.x === "left" ? newWidth : options.x === "right" ? result.width - newWidth : compareX + Math.floor(newWidth / 2);
        /** @type {number} */
        compareY = options.y === "top" ? newHeight : options.y === "bottom" ? result.height - newHeight : compareY + Math.floor(newHeight / 2);
        i = coords.length;
        for (;i--;) {
          if (coords.length < 2) {
            break;
          }
          /** @type {number} */
          realX = coords[i][0] - result.offset.left;
          /** @type {number} */
          realY = coords[i][1] - result.offset.top;
          if (options.x === "left" && realX >= compareX || (options.x === "right" && realX <= compareX || (options.x === "center" && (realX < compareX || realX > result.width - compareX) || (options.y === "top" && realY >= compareY || (options.y === "bottom" && realY <= compareY || options.y === "center" && (realY < compareY || realY > result.height - compareY)))))) {
            coords.splice(i, 1);
          }
        }
      }
      return{
        left : coords[0][0],
        top : coords[0][1]
      };
    }
    if (!area.jquery) {
      area = $(area);
    }
    var shape = (area[0].shape || area.attr("shape")).toLowerCase();
    var results = (area[0].coords || area.attr("coords")).split(",");
    /** @type {Array} */
    var coords = [];
    area = $('img[usemap="#' + area.parent("map").attr("name") + '"]');
    var containerBorder = area.offset();
    var result = {
      width : 0,
      height : 0,
      offset : {
        top : 1E10,
        right : 0,
        bottom : 0,
        left : 1E10
      }
    };
    /** @type {number} */
    var resultsLn = 0;
    /** @type {number} */
    var next = 0;
    containerBorder.left = containerBorder.left + Math.ceil((area.outerWidth() - area.width()) / 2);
    containerBorder.top = containerBorder.top + Math.ceil((area.outerHeight() - area.height()) / 2);
    if (shape === "poly") {
      resultsLn = results.length;
      for (;resultsLn--;) {
        /** @type {Array} */
        next = [parseInt(results[--resultsLn], 10), parseInt(results[resultsLn + 1], 10)];
        if (next[0] > result.offset.right) {
          result.offset.right = next[0];
        }
        if (next[0] < result.offset.left) {
          result.offset.left = next[0];
        }
        if (next[1] > result.offset.bottom) {
          result.offset.bottom = next[1];
        }
        if (next[1] < result.offset.top) {
          result.offset.top = next[1];
        }
        coords.push(next);
      }
    } else {
      coords = $.map(results, function(m1) {
        return parseInt(m1, 10);
      });
    }
    switch(shape) {
      case "rect":
        result = {
          width : Math.abs(coords[2] - coords[0]),
          height : Math.abs(coords[3] - coords[1]),
          offset : {
            left : Math.min(coords[0], coords[2]),
            top : Math.min(coords[1], coords[3])
          }
        };
        break;
      case "circle":
        result = {
          width : coords[2] + 2,
          height : coords[2] + 2,
          offset : {
            left : coords[0],
            top : coords[1]
          }
        };
        break;
      case "poly":
        $.extend(result, {
          width : Math.abs(result.offset.right - result.offset.left),
          height : Math.abs(result.offset.bottom - result.offset.top)
        });
        if (options.string() === "centercenter") {
          result.offset = {
            left : result.offset.left + result.width / 2,
            top : result.offset.top + result.height / 2
          };
        } else {
          result.offset = polyCoordinates(result, coords.slice(), options);
          if (adjustMethod && (adjustMethod[0] === "flip" || adjustMethod[1] === "flip")) {
            result.flipoffset = polyCoordinates(result, coords.slice(), {
              x : options.x === "left" ? "right" : options.x === "right" ? "left" : "center",
              y : options.y === "top" ? "bottom" : options.y === "bottom" ? "top" : "center"
            });
            /** @type {number} */
            result.flipoffset.left = result.flipoffset.left - result.offset.left;
            /** @type {number} */
            result.flipoffset.top = result.flipoffset.top - result.offset.top;
          }
        }
        /** @type {number} */
        result.width = result.height = 0;
    }
    result.offset.left = result.offset.left + containerBorder.left;
    result.offset.top = result.offset.top + containerBorder.top;
    return result;
  };
  /**
   * @param {string} type
   * @return {?}
   */
  PLUGINS.tip = function(type) {
    var self = type.plugins.tip;
    return "object" === typeof self ? self : type.plugins.tip = new Tip(type);
  };
  /** @type {string} */
  PLUGINS.tip.initialize = "render";
  /**
   * @param {Node} options
   * @return {undefined}
   */
  PLUGINS.tip.sanitize = function(options) {
    var opts = options.style;
    if (opts && "tip" in opts) {
      opts = options.style.tip;
      if (typeof opts !== "object") {
        options.style.tip = {
          corner : opts
        };
      }
      if (!/string|boolean/i.test(typeof opts.corner)) {
        /** @type {boolean} */
        opts.corner = fix;
      }
      if (typeof opts.width !== "number") {
        delete opts.width;
      }
      if (typeof opts.height !== "number") {
        delete opts.height;
      }
      if (typeof opts.border !== "number") {
        if (opts.border !== fix) {
          delete opts.border;
        }
      }
      if (typeof opts.offset !== "number") {
        delete opts.offset;
      }
    }
  };
  $.extend(fix, QTIP.defaults, {
    style : {
      tip : {
        corner : fix,
        mimic : ready,
        width : 6,
        height : 6,
        border : fix,
        offset : 0
      }
    }
  });
  /**
   * @param {Object} result
   * @return {?}
   */
  PLUGINS.svg = function(result) {
    var d = $(document);
    var el = result[0];
    result = {
      width : 0,
      height : 0,
      offset : {
        top : 1E10,
        left : 1E10
      }
    };
    var options;
    var i;
    var cur;
    for (;!el.getBBox;) {
      el = el.parentNode;
    }
    if (el.getBBox && el.parentNode) {
      options = el.getBBox();
      i = el.getScreenCTM();
      el = el.farthestViewportElement || el;
      if (!el.createSVGPoint) {
        return result;
      }
      el = el.createSVGPoint();
      el.x = options.x;
      el.y = options.y;
      cur = el.matrixTransform(i);
      result.offset.left = cur.x;
      result.offset.top = cur.y;
      el.x = el.x + options.width;
      el.y = el.y + options.height;
      cur = el.matrixTransform(i);
      /** @type {number} */
      result.width = cur.x - result.offset.left;
      /** @type {number} */
      result.height = cur.y - result.offset.top;
      result.offset.left = result.offset.left + d.scrollLeft();
      result.offset.top = result.offset.top + d.scrollTop();
    }
    return result;
  };
  /**
   * @param {string} options
   * @return {?}
   */
  PLUGINS.modal = function(options) {
    var self = options.plugins.modal;
    return "object" === typeof self ? self : options.plugins.modal = new Modal(options);
  };
  /** @type {string} */
  PLUGINS.modal.initialize = "render";
  /**
   * @param {Object} opts
   * @return {undefined}
   */
  PLUGINS.modal.sanitize = function(opts) {
    if (opts.show) {
      if (typeof opts.show.modal !== "object") {
        opts.show.modal = {
          on : !!opts.show.modal
        };
      } else {
        if (typeof opts.show.modal.on === "undefined") {
          /** @type {boolean} */
          opts.show.modal.on = fix;
        }
      }
    }
  };
  /** @type {number} */
  PLUGINS.modal.zindex = QTIP.zindex + 1E3;
  $.extend(fix, QTIP.defaults, {
    show : {
      modal : {
        on : ready,
        effect : fix,
        blur : fix,
        stealfocus : fix,
        escape : fix
      }
    }
  });
  /**
   * @param {string} type
   * @return {?}
   */
  PLUGINS.bgiframe = function(type) {
    var browser = $.browser;
    var self = type.plugins.bgiframe;
    return $("select, object").length < 1 || !(browser.msie && ("" + browser.version).charAt(0) === "6") ? ready : "object" === typeof self ? self : type.plugins.bgiframe = new BGIFrame(type);
  };
  /** @type {string} */
  PLUGINS.bgiframe.initialize = "render";
});
var uitools = {
  /**
   * @param {Object} elm
   * @param {?} id
   * @return {?}
   */
  getOffset : function(elm, id) {
    var point = {
      x : 0,
      y : 0
    };
    /** @type {number} */
    leftOffset = vertOffset = 0;
    for (;null !== elm && !(1 < arguments.length && $(elm).attr("id") === id);) {
      if (0 < $(elm).scrollTop()) {
        point.y -= $(elm).scrollTop();
      }
      point.y += elm.offsetTop;
      point.x += elm.offsetLeft;
      elm = elm.offsetParent;
    }
    return point;
  },
  /**
   * @param {undefined} maxChars
   * @param {Object} inputEl
   * @param {Object} elm
   * @return {undefined}
   */
  limitChars : function(maxChars, inputEl, elm) {
    /** @type {number} */
    var cycle = maxChars - inputEl.val().length;
    if (elm) {
      elm.text(cycle);
    }
    inputEl.keyup(function() {
      /** @type {number} */
      var cycle = maxChars - $(this).val().length;
      if (0 >= cycle) {
        $(this).val($(this).val().substring(0, maxChars));
      }
      /** @type {number} */
      cycle = maxChars - $(this).val().length;
      if (elm) {
        elm.text(cycle);
      }
    });
  },
  /**
   * @param {(Object|string)} item
   * @param {(Object|string)} options
   * @param {(number|string)} value
   * @param {number} numItems
   * @param {number} r
   * @return {?}
   */
  dateRangeWidget : function(item, options, value, numItems, r) {
    if ("undefined" === typeof DateChooser()) {
      uitools.log("DateChooser() is undefined, you are likely missing datechooser.js!");
    } else {
      if ("undefined" === typeof item.$elem || "undefined" === typeof options.$elem) {
        uitools.log("date range $elem is missing!");
      } else {
        if ("undefined" === typeof item.defaultVal) {
          uitools.log("no default from date value defined, setting to empty string");
          /** @type {string} */
          item.defaultVal = "";
        } else {
          if ("" === item.$elem.val()) {
            item.$elem.val(item.defaultVal);
          }
        }
        if ("undefined" === typeof options.defaultVal) {
          uitools.log("no default to date value defined, setting to empty string");
          /** @type {string} */
          options.defaultVal = "";
        } else {
          if ("" === options.$elem.val()) {
            options.$elem.val(options.defaultVal);
          }
        }
        if ("undefined" === typeof item.offsetX) {
          /** @type {number} */
          item.offsetX = 0;
        }
        if ("undefined" === typeof item.offsetY) {
          /** @type {number} */
          item.offsetX = 0;
        }
        if ("undefined" === typeof numItems) {
          /** @type {number} */
          numItems = 545;
        }
        if ("undefined" === typeof value) {
          /** @type {number} */
          value = 0;
        }
        if ("undefined" === typeof r) {
          /** @type {number} */
          r = 55;
        }
        var container = item.$elem.get(0);
        var elem = options.$elem.get(0);
        /** @type {boolean} */
        container.focused = false;
        /** @type {boolean} */
        elem.focused = false;
        if ("undefined" === typeof container || "undefined" === typeof elem) {
          return false;
        }
        container.setAttribute("autocomplete", "off");
        elem.setAttribute("autocomplete", "off");
        container.datechooser = new DateChooser;
        elem.datechooser = new DateChooser;
        var self = container.datechooser;
        var result = elem.datechooser;
        self.setUpdateField(container, "m/d/Y");
        self.setUpdateFunction(function() {
          item.$elem.data("timestamp", self.getSelectedDate().getTime());
          elem.focus();
        });
        self.setOnClearDates(function() {
          self.clearDates(true);
          result.clearDates(true);
          uitools.resetDateRangeFields(item, options);
        });
        result.setOnClearDates(function() {
          result.clearDates(true);
          self.clearDates(true);
          uitools.resetDateRangeFields(item, options);
        });
        result.setUpdateField(elem, "m/d/Y");
        result.setUpdateFunction(function() {
          options.$elem.data("timestamp", result.getSelectedDate().getTime());
        });
        if (options.offsetX) {
          self.setXOffset(item.offsetX);
          result.setXOffset(options.offsetX);
        }
        if (options.offsetY) {
          self.setYOffset(item.offsetY);
          result.setYOffset(options.offsetY);
        }
        uitools.addEvent("focus", container, function(cycle) {
          /** @type {Date} */
          var currentTime = new Date;
          if (typeof value.getDate === "function") {
            currentTime.setFullYear(value.getFullYear(), value.getMonth(), value.getDate());
          } else {
            currentTime.setDate(currentTime.getDate() + value);
          }
          self.setEarliestDate(currentTime);
          /** @type {Date} */
          currentTime = container.value !== "" && container.value !== item.defaultVal ? new Date(container.value) : new Date;
          /** @type {Date} */
          var dt = new Date;
          /** @type {number} */
          var tm = dt.getTime();
          /** @type {number} */
          tm = tm + numItems * 864E5;
          dt.setTime(tm);
          self.setLatestDate(dt);
          self.setStartDate(self.getSelectedDate() || currentTime);
          self.display(cycle);
        }, true);
        uitools.addEvent("keydown", container, function(types) {
          if (e.keyCode === 9) {
            $(".calendar").css("visibility", "hidden");
          } else {
            if (types.preventDefault) {
              types.preventDefault();
            } else {
              return false;
            }
          }
        }, true);
        uitools.addEvent("keydown", elem, function(event) {
          if (event.keyCode === 9) {
            $(".calendar").css("visibility", "hidden");
          } else {
            if (event.preventDefault) {
              event.preventDefault();
            } else {
              return false;
            }
          }
        }, true);
        uitools.addEvent("focus", elem, function(cycle) {
          $("#" + self.datePickerId).css("visibility", "hidden");
          if (container.value !== "" && container.value !== item.defaultVal) {
            result.setSelectedDate(elem.value !== "" && elem.value !== options.defaultVal ? new Date(elem.value) : new Date);
            self.setSelectedDate(new Date(container.value));
            /** @type {Date} */
            var d = new Date(self.getSelectedDate());
            d.setDate(d.getDate() + 1);
            result.setEarliestDate(d);
            /** @type {number} */
            elem.value = d.getTime();
            result.updateFields();
            if (result.getSelectedDate() === null) {
              result.setStartDate(d);
            }
            d.setDate(d.getDate() + r);
            if (result.getSelectedDate().getTime() >= d.getTime()) {
              result.setSelectedDate(d);
              /** @type {number} */
              elem.value = d.getTime();
              result.updateFields();
            }
            result.setLatestDate(d);
            result.display(cycle);
            if ($(".modal-blocker-frame").length) {
              /** @type {number} */
              cycle = $("#" + result.datePickerId).css("top") === "auto" ? 0 : parseInt($("#" + result.datePickerId).css("top"), 10);
              cycle = $(".modal-blocker-frame").offset().top + cycle;
              $("#" + result.datePickerId).css("top", cycle + "px");
            }
          } else {
            container.focus();
          }
        }, true);
      }
    }
  },
  /**
   * @param {(Object|string)} self
   * @param {(Object|string)} base
   * @return {undefined}
   */
  resetDateRangeFields : function(self, base) {
    if ("undefined" !== typeof $.cookie) {
      if (null !== $.cookie("VrboTempSettings")) {
        $.cookie("VrboTempSettings", null);
      }
    }
    self.$elem.removeData();
    self.$elem.val(self.defaultVal);
    if ("undefined" !== typeof base) {
      base.$elem.removeData();
      base.$elem.val(base.defaultVal);
    }
  },
  /**
   * @param {?} self
   * @return {undefined}
   */
  resetDateField : function(self) {
    self.$elem.removeData();
    self.$elem.val(self.defaultVal);
  },
  /**
   * @param {?} item
   * @param {(number|string)} value
   * @param {number} i
   * @return {?}
   */
  dateWidget : function(item, value, i) {
    if ("undefined" === typeof DateChooser()) {
      uitools.log("DateChooser() is undefined, you are likely missing datechooser.js!");
    } else {
      if ("undefined" === typeof item.defaultVal) {
        uitools.log("no default date value defined, setting to empty string");
        /** @type {string} */
        item.defaultVal = "";
      } else {
        if ("" === item.$elem.val()) {
          item.$elem.val(item.defaultVal);
        }
      }
      if ("undefined" === typeof i) {
        /** @type {number} */
        i = 545;
      }
      if ("undefined" === typeof value) {
        /** @type {number} */
        value = 0;
      }
      if ("undefined" === typeof maxDayRange) {
        /** @type {number} */
        maxDayRange = 55;
      }
      dateElem = item.$elem.get(0);
      if ("undefined" === typeof dateElem) {
        return false;
      }
      dateElem.setAttribute("autocomplete", "off");
      dateElem.datechooser = new DateChooser;
      var game = dateElem.datechooser;
      game.setUpdateField(dateElem, "m/d/Y");
      game.setUpdateFunction(function() {
        item.$elem.data("timestamp", game.getSelectedDate().getTime());
      });
      game.setOnClearDates(function() {
        game.clearDates(true);
        uitools.resetDateField(item);
      });
      uitools.addEvent("keydown", dateElem, function(event) {
        if (event.keyCode === 9) {
          $(".calendar").css("visibility", "hidden");
        } else {
          if (event.preventDefault) {
            event.preventDefault();
          } else {
            return false;
          }
        }
      }, true);
      uitools.addEvent("focus", dateElem, function(cycle) {
        $(".calendar").css("visibility", "hidden");
        /** @type {Date} */
        var dt = new Date;
        if (typeof value.getDate === "function") {
          dt.setFullYear(value.getFullYear(), value.getMonth(), value.getDate());
        } else {
          dt.setDate(dt.getDate() + value);
        }
        game.setEarliestDate(dt);
        /** @type {Date} */
        dt = dateElem.value !== "" && dateElem.value !== item.defaultVal ? new Date(dateElem.value) : new Date;
        /** @type {Date} */
        var self = new Date;
        /** @type {number} */
        var time = self.getTime();
        /** @type {number} */
        time = time + i * 864E5;
        self.setTime(time);
        game.setLatestDate(self);
        game.setStartDate(game.getSelectedDate() || dt);
        game.display(cycle);
      }, true);
    }
  },
  /**
   * @param {HTMLElement} submit
   * @return {undefined}
   */
  enableLinkSubmit : function(submit) {
    submit.click(function(types) {
      types.preventDefault();
      $(this).closest("form").submit();
      return false;
    });
  },
  /**
   * @param {string} event
   * @param {HTMLElement} elem
   * @param {Function} cb
   * @param {boolean} dataAndEvents
   * @return {?}
   */
  addEvent : function(event, elem, cb, dataAndEvents) {
    if (elem.addEventListener) {
      elem.addEventListener(event, cb, dataAndEvents || false);
    } else {
      if (elem.attachEvent) {
        return elem.attachEvent("on" + event, cb);
      }
    }
  },
  /**
   * @param {string} type
   * @param {Node} el
   * @param {?} fn
   * @param {boolean} capture
   * @return {?}
   */
  removeEvent : function(type, el, fn, capture) {
    if (el.removeEventListener) {
      el.removeEventListener(type, fn, capture || false);
    } else {
      if (el.detachEvent) {
        return el.detachEvent("on" + type, fn);
      }
    }
  },
  /**
   * @param {(Node|string)} event
   * @return {undefined}
   */
  stopProp : function(event) {
    if (event && event.stopPropogation) {
      event.stopPropogation();
    } else {
      if (window.event) {
        if (window.event.cancelBubble) {
          /** @type {boolean} */
          window.event.cancelBubble = true;
        }
      }
    }
  },
  /**
   * @param {Object} evt
   * @return {undefined}
   */
  stopDef : function(evt) {
    if (evt && evt.preventDefault) {
      evt.preventDefault();
    } else {
      if (window.event) {
        if (window.event.returnValue) {
          /** @type {boolean} */
          window.eventReturnValue = false;
        }
      }
    }
  },
  /**
   * @return {?}
   */
  isIE6 : function() {
    return $.browser.msie && 7 > $.browser.version ? true : false;
  },
  /**
   * @return {?}
   */
  isIE7 : function() {
    return $.browser.msie && (8 > $.browser.version && 6 < $.browser.version) ? true : false;
  },
  /**
   * @return {?}
   */
  isIE8 : function() {
    return $.browser.msie && (9 > $.browser.version && 7 < $.browser.version) ? true : false;
  },
  /**
   * @return {?}
   */
  isIE : function() {
    return $.browser.msie ? true : false;
  },
  /**
   * @return {?}
   */
  isMoz : function() {
    return $.browser.mozilla ? true : false;
  },
  /**
   * @param {string} name
   * @return {?}
   */
  getUrlParam : function(name) {
    /** @type {Array.<string>} */
    var codeSegments = window.location.search.substring(1).split("&");
    /** @type {number} */
    var i = 0;
    for (;i < codeSegments.length;i++) {
      /** @type {Array.<string>} */
      var lvalue = codeSegments[i].split("=");
      if (lvalue[0] === name) {
        return lvalue[1];
      }
    }
    return false;
  },
  /**
   * @return {undefined}
   */
  log : function() {
    try {
      console.log.apply(console, arguments);
    } catch (a) {
      try {
        opera.postError.apply(opera, arguments);
      } catch (b) {
        try {
          if (!$("#uiconsole").length) {
            var tooltip = $('<div id="uiconsole" style="position:fixed;*position:absolute;top:0;right:0;width:300px;border:1px solid #999;font-family:courier,monospace;background:#eee;font-size:10px;padding:10px;"><a href="" style="float:right;padding-left:1em;padding-bottom:.5em;text-align:right;">close</a><a href="" style="float:right;padding-left:1em;padding-bottom:.5em;text-align:right;">clear</a><div></div></div>');
            tooltip.find("a:first").click(function(types) {
              types.preventDefault();
              $("#uiconsole").hide();
            });
            tooltip.find("a:last").click(function(types) {
              types.preventDefault();
              $("#uiconsole > div").html("");
            });
            $("body").append(tooltip);
          }
          if (!$("#uiconsole:visible").length) {
            $("#uiconsole").show();
          }
          $("#uiconsole > div").html($("#uiconsole > div").html() + "<br/>" + Array.prototype.join.call(arguments, " "));
        } catch (d) {
          alert(Array.prototype.join.call(arguments, " "));
        }
      }
    }
  },
  /**
   * @param {Object} options
   * @return {undefined}
   */
  modal : function(options) {
    if ("undefined" !== typeof options.buttons || ("undefined" !== typeof options.stylesheets || "undefined" !== typeof options.buttons)) {
      /** @type {boolean} */
      options.inline = true;
      /** @type {boolean} */
      options.open = true;
      options.content = this.selector;
      options.showClose = options.close;
      if ("undefined" !== typeof options.api.onRender) {
        options.onComplete = options.api.onRender;
      }
    }
    if ("undefined" !== typeof options.closeText) {
      options.close = options.closeText;
    }
    if ("undefined" === typeof this.modal || "undefined" === typeof options.trigger) {
      options.trigger = this.selector;
    }
    $(options.content).modal(options);
  },
  /**
   * @return {undefined}
   */
  toolTipInit : function() {
    $(".tooltip").each(function() {
      $(this).click(function(types) {
        types.preventDefault();
      });
      /** @type {null} */
      var ch = null;
      if (void 0 !== $(this).attr("tooltip-content")) {
        ch = $("#" + $(this).attr("tooltip-content")).clone();
      }
      if ($(this).hasClass("top-center")) {
        $(this).qtip({
          position : {
            my : "top center",
            at : "bottom center"
          },
          content : {
            text : ch
          }
        });
      } else {
        if ($(this).hasClass("left-center")) {
          $(this).qtip({
            position : {
              my : "left center",
              at : "right center"
            },
            content : {
              text : ch
            }
          });
        } else {
          if ($(this).hasClass("bottom-center")) {
            $(this).qtip({
              position : {
                my : "bottom center",
                at : "top center"
              },
              content : {
                text : ch
              }
            });
          } else {
            if ($(this).hasClass("right-center")) {
              $(this).qtip({
                position : {
                  my : "right center",
                  at : "left center"
                },
                content : {
                  text : ch
                }
              });
            }
          }
        }
      }
    });
  }
};
$(function() {
  uitools.toolTipInit();
});
(function($) {
  /**
   * @param {number} opt_attributes
   * @param {Function} callback
   * @return {?}
   */
  $.fn.unveil = function(opt_attributes, callback) {
    /**
     * @return {undefined}
     */
    function cycle() {
      rem = released.filter(function() {
        var $el = $(this);
        if (!$el.is(":hidden")) {
          var a = $window.scrollTop();
          var r = a + $window.height();
          var elemTop = $el.offset().top;
          return elemTop + $el.height() >= a - b && elemTop <= r + b;
        }
      }).trigger("unveil");
      released = released.not(rem);
    }
    var $window = $(window);
    var b = opt_attributes || 0;
    /** @type {string} */
    var attrib = 1 < window.devicePixelRatio ? "data-src-retina" : "data-src";
    var released = this;
    var rem;
    this.one("unveil", function() {
      var source = this.getAttribute(attrib);
      if (source = source || this.getAttribute("data-src")) {
        this.setAttribute("src", source);
        if ("function" === typeof callback) {
          callback.call(this);
        }
      }
    });
    $window.scroll(cycle);
    $window.resize(cycle);
    cycle();
    return this;
  };
})(window.jQuery || window.Zepto);
(function($) {
  $.extend($.fn, {
    /**
     * @param {Object} options
     * @return {?}
     */
    validate : function(options) {
      if (this.length) {
        var ready = $.data(this[0], "validator");
        if (ready) {
          return ready;
        }
        this.attr("novalidate", "novalidate");
        ready = new $.validator(options, this[0]);
        $.data(this[0], "validator", ready);
        if (ready.settings.onsubmit) {
          this.validateDelegate(":submit", "click", function(ev) {
            if (ready.settings.submitHandler) {
              ready.submitButton = ev.target;
            }
            if ($(ev.target).hasClass("cancel")) {
              /** @type {boolean} */
              ready.cancelSubmit = true;
            }
          });
          this.submit(function(exports) {
            /**
             * @return {?}
             */
            function handle() {
              var selfObj;
              return ready.settings.submitHandler ? (ready.submitButton && (selfObj = $("<input type='hidden'/>").attr("name", ready.submitButton.name).val(ready.submitButton.value).appendTo(ready.currentForm)), ready.settings.submitHandler.call(ready, ready.currentForm, exports), ready.submitButton && selfObj.remove(), false) : true;
            }
            if (ready.settings.debug) {
              exports.preventDefault();
            }
            if (ready.cancelSubmit) {
              return ready.cancelSubmit = false, handle();
            }
            if (ready.form()) {
              return ready.pendingRequest ? (ready.formSubmitted = true, false) : handle();
            }
            ready.focusInvalid();
            return false;
          });
        }
        return ready;
      }
      if (options) {
        if (options.debug && window.console) {
          console.warn("nothing selected, can't validate, returning nothing");
        }
      }
    },
    /**
     * @return {?}
     */
    valid : function() {
      if ($(this[0]).is("form")) {
        return this.validate().form();
      }
      /** @type {boolean} */
      var valid = true;
      var validator = $(this[0].form).validate();
      this.each(function() {
        valid &= validator.element(this);
      });
      return valid;
    },
    /**
     * @param {string} attributes
     * @return {?}
     */
    removeAttrs : function(attributes) {
      var result = {};
      var element = this;
      $.each(attributes.split(/\s/), function(dataAndEvents, optgroup) {
        result[optgroup] = element.attr(optgroup);
        element.removeAttr(optgroup);
      });
      return result;
    },
    /**
     * @param {?} command
     * @param {string} argument
     * @return {?}
     */
    rules : function(command, argument) {
      var element = this[0];
      if (command) {
        var settings = $.data(element.form, "validator").settings;
        var staticRules = settings.rules;
        var existingRules = $.validator.staticRules(element);
        switch(command) {
          case "add":
            $.extend(existingRules, $.validator.normalizeRule(argument));
            staticRules[element.name] = existingRules;
            if (argument.messages) {
              settings.messages[element.name] = $.extend(settings.messages[element.name], argument.messages);
            }
            break;
          case "remove":
            if (!argument) {
              return delete staticRules[element.name], existingRules;
            }
            var filtered = {};
            $.each(argument.split(/\s/), function(dataAndEvents, method) {
              filtered[method] = existingRules[method];
              delete existingRules[method];
            });
            return filtered;
        }
      }
      element = $.validator.normalizeRules($.extend({}, $.validator.metadataRules(element), $.validator.classRules(element), $.validator.attributeRules(element), $.validator.staticRules(element)), element);
      if (element.required) {
        settings = element.required;
        delete element.required;
        element = $.extend({
          required : settings
        }, element);
      }
      return element;
    }
  });
  $.extend($.expr[":"], {
    /**
     * @param {Attr} a
     * @return {?}
     */
    blank : function(a) {
      return!$.trim("" + a.value);
    },
    /**
     * @param {Attr} a
     * @return {?}
     */
    filled : function(a) {
      return!!$.trim("" + a.value);
    },
    /**
     * @param {Element} a
     * @return {?}
     */
    unchecked : function(a) {
      return!a.checked;
    }
  });
  /**
   * @param {?} options
   * @param {?} form
   * @return {undefined}
   */
  $.validator = function(options, form) {
    this.settings = $.extend(true, {}, $.validator.defaults, options);
    this.currentForm = form;
    this.init();
  };
  /**
   * @param {string} text
   * @param {?} attributes
   * @return {?}
   */
  $.validator.format = function(text, attributes) {
    if (1 === arguments.length) {
      return function() {
        var args = $.makeArray(arguments);
        args.unshift(text);
        return $.validator.format.apply(this, args);
      };
    }
    if (2 < arguments.length) {
      if (attributes.constructor !== Array) {
        attributes = $.makeArray(arguments).slice(1);
      }
    }
    if (attributes.constructor !== Array) {
      /** @type {Array} */
      attributes = [attributes];
    }
    $.each(attributes, function(dataAndEvents, boundary) {
      text = text.replace(RegExp("\\{" + dataAndEvents + "\\}", "g"), boundary);
    });
    return text;
  };
  $.extend($.validator, {
    defaults : {
      messages : {},
      groups : {},
      rules : {},
      errorClass : "error",
      validClass : "valid",
      errorElement : "label",
      focusInvalid : true,
      errorContainer : $([]),
      errorLabelContainer : $([]),
      onsubmit : true,
      ignore : ":hidden",
      ignoreTitle : false,
      /**
       * @param {(Object|string)} element
       * @return {undefined}
       */
      onfocusin : function(element) {
        /** @type {(Object|string)} */
        this.lastActive = element;
        if (this.settings.focusCleanup) {
          if (!this.blockFocusCleanup) {
            if (this.settings.unhighlight) {
              this.settings.unhighlight.call(this, element, this.settings.errorClass, this.settings.validClass);
            }
            this.addWrapper(this.errorsFor(element)).hide();
          }
        }
      },
      /**
       * @param {string} cycle
       * @return {undefined}
       */
      onfocusout : function(cycle) {
        if (!this.checkable(cycle)) {
          if (cycle.name in this.submitted || !this.optional(cycle)) {
            this.element(cycle);
          }
        }
      },
      /**
       * @param {string} cycle
       * @param {Event} event
       * @return {undefined}
       */
      onkeyup : function(cycle, event) {
        if (!(9 == event.which && "" === this.elementValue(cycle))) {
          if (cycle.name in this.submitted || cycle === this.lastActive) {
            this.element(cycle);
          }
        }
      },
      /**
       * @param {string} cycle
       * @return {undefined}
       */
      onclick : function(cycle) {
        if (cycle.name in this.submitted) {
          this.element(cycle);
        } else {
          if (cycle.parentNode.name in this.submitted) {
            this.element(cycle.parentNode);
          }
        }
      },
      /**
       * @param {Object} elem
       * @param {string} klass
       * @param {string} label
       * @return {undefined}
       */
      highlight : function(elem, klass, label) {
        if ("radio" === elem.type) {
          this.findByName(elem.name).addClass(klass).removeClass(label);
        } else {
          $(elem).addClass(klass).removeClass(label);
        }
      },
      /**
       * @param {Object} element
       * @param {string} klass
       * @param {string} newName
       * @return {undefined}
       */
      unhighlight : function(element, klass, newName) {
        if ("radio" === element.type) {
          this.findByName(element.name).removeClass(klass).addClass(newName);
        } else {
          $(element).removeClass(klass).addClass(newName);
        }
      }
    },
    /**
     * @param {?} options
     * @return {undefined}
     */
    setDefaults : function(options) {
      $.extend($.validator.defaults, options);
    },
    messages : {
      required : "This field is required.",
      remote : "Please fix this field.",
      email : "Please enter a valid email address.",
      url : "Please enter a valid URL.",
      date : "Please enter a valid date.",
      dateISO : "Please enter a valid date (ISO).",
      number : "Please enter a valid number.",
      digits : "Please enter only digits.",
      creditcard : "Please enter a valid credit card number.",
      equalTo : "Please enter the same value again.",
      maxlength : $.validator.format("Please enter no more than {0} characters."),
      minlength : $.validator.format("Please enter at least {0} characters."),
      rangelength : $.validator.format("Please enter a value between {0} and {1} characters long."),
      range : $.validator.format("Please enter a value between {0} and {1}."),
      max : $.validator.format("Please enter a value less than or equal to {0}."),
      min : $.validator.format("Please enter a value greater than or equal to {0}.")
    },
    autoCreateRanges : false,
    prototype : {
      /**
       * @return {undefined}
       */
      init : function() {
        /**
         * @param {Object} event
         * @return {undefined}
         */
        function delegate(event) {
          var self = $.data(this[0].form, "validator");
          var name = "on" + event.type.replace(/^validate/, "");
          if (self.settings[name]) {
            self.settings[name].call(self, this[0], event);
          }
        }
        this.labelContainer = $(this.settings.errorLabelContainer);
        this.errorContext = this.labelContainer.length && this.labelContainer || $(this.currentForm);
        this.containers = $(this.settings.errorContainer).add(this.settings.errorLabelContainer);
        this.submitted = {};
        this.valueCache = {};
        /** @type {number} */
        this.pendingRequest = 0;
        this.pending = {};
        this.invalid = {};
        this.reset();
        var benchmarks = this.groups = {};
        $.each(this.settings.groups, function(ref, pair) {
          $.each(pair.split(/\s/), function(dataAndEvents, name) {
            benchmarks[name] = ref;
          });
        });
        var attributes = this.settings.rules;
        $.each(attributes, function(name, value) {
          attributes[name] = $.validator.normalizeRule(value);
        });
        $(this.currentForm).validateDelegate(":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'] ,[type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], [type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'] ", "focusin focusout keyup", delegate).validateDelegate("[type='radio'], [type='checkbox'], select, option", "click", delegate);
        if (this.settings.invalidHandler) {
          $(this.currentForm).bind("invalid-form.validate", this.settings.invalidHandler);
        }
      },
      /**
       * @return {?}
       */
      form : function() {
        this.checkForm();
        $.extend(this.submitted, this.errorMap);
        this.invalid = $.extend({}, this.errorMap);
        if (!this.valid()) {
          $(this.currentForm).triggerHandler("invalid-form", [this]);
        }
        this.showErrors();
        return this.valid();
      },
      /**
       * @return {?}
       */
      checkForm : function() {
        this.prepareForm();
        /** @type {number} */
        var i = 0;
        var elements = this.currentElements = this.elements();
        for (;elements[i];i++) {
          this.check(elements[i]);
        }
        return this.valid();
      },
      /**
       * @param {string} type
       * @return {?}
       */
      element : function(type) {
        this.lastElement = type = this.validationTargetFor(this.clean(type));
        this.prepareElement(type);
        this.currentElements = $(type);
        /** @type {boolean} */
        var result = false !== this.check(type);
        if (result) {
          delete this.invalid[type.name];
        } else {
          /** @type {boolean} */
          this.invalid[type.name] = true;
        }
        if (!this.numberOfInvalids()) {
          this.toHide = this.toHide.add(this.containers);
        }
        this.showErrors();
        return result;
      },
      /**
       * @param {Object} errors
       * @return {undefined}
       */
      showErrors : function(errors) {
        if (errors) {
          $.extend(this.errorMap, errors);
          /** @type {Array} */
          this.errorList = [];
          var name;
          for (name in errors) {
            this.errorList.push({
              message : errors[name],
              element : this.findByName(name)[0]
            });
          }
          this.successList = $.grep(this.successList, function(element) {
            return!(element.name in errors);
          });
        }
        if (this.settings.showErrors) {
          this.settings.showErrors.call(this, this.errorMap, this.errorList);
        } else {
          this.defaultShowErrors();
        }
      },
      /**
       * @return {undefined}
       */
      resetForm : function() {
        if ($.fn.resetForm) {
          $(this.currentForm).resetForm();
        }
        this.submitted = {};
        /** @type {null} */
        this.lastElement = null;
        this.prepareForm();
        this.hideErrors();
        this.elements().removeClass(this.settings.errorClass).removeData("previousValue");
      },
      /**
       * @return {?}
       */
      numberOfInvalids : function() {
        return this.objectLength(this.invalid);
      },
      /**
       * @param {?} obj
       * @return {?}
       */
      objectLength : function(obj) {
        /** @type {number} */
        var count = 0;
        var prop;
        for (prop in obj) {
          count++;
        }
        return count;
      },
      /**
       * @return {undefined}
       */
      hideErrors : function() {
        this.addWrapper(this.toHide).hide();
      },
      /**
       * @return {?}
       */
      valid : function() {
        return 0 === this.size();
      },
      /**
       * @return {?}
       */
      size : function() {
        return this.errorList.length;
      },
      /**
       * @return {undefined}
       */
      focusInvalid : function() {
        if (this.settings.focusInvalid) {
          try {
            $(this.findLastActive() || (this.errorList.length && this.errorList[0].element || [])).filter(":visible").focus().trigger("focusin");
          } catch (b) {
          }
        }
      },
      /**
       * @return {?}
       */
      findLastActive : function() {
        var lastActive = this.lastActive;
        return lastActive && (1 === $.grep(this.errorList, function(n) {
          return n.element.name === lastActive.name;
        }).length && lastActive);
      },
      /**
       * @return {?}
       */
      elements : function() {
        var validator = this;
        var rulesCache = {};
        return $(this.currentForm).find("input, select, textarea").not(":submit, :reset, :image, [disabled]").not(this.settings.ignore).filter(function() {
          if (!this.name) {
            if (validator.settings.debug && window.console) {
              console.error("%o has no name assigned", this);
            }
          }
          return this.name in rulesCache || !validator.objectLength($(this).rules()) ? false : rulesCache[this.name] = true;
        });
      },
      /**
       * @param {Object} array
       * @return {?}
       */
      clean : function(array) {
        return $(array)[0];
      },
      /**
       * @return {?}
       */
      errors : function() {
        var errorClass = this.settings.errorClass.replace(" ", ".");
        return $(this.settings.errorElement + "." + errorClass, this.errorContext);
      },
      /**
       * @return {undefined}
       */
      reset : function() {
        /** @type {Array} */
        this.successList = [];
        /** @type {Array} */
        this.errorList = [];
        this.errorMap = {};
        this.toShow = $([]);
        this.toHide = $([]);
        this.currentElements = $([]);
      },
      /**
       * @return {undefined}
       */
      prepareForm : function() {
        this.reset();
        this.toHide = this.errors().add(this.containers);
      },
      /**
       * @param {Object} element
       * @return {undefined}
       */
      prepareElement : function(element) {
        this.reset();
        this.toHide = this.errorsFor(element);
      },
      /**
       * @param {Function} element
       * @return {?}
       */
      elementValue : function(element) {
        var model = $(element).attr("type");
        var value = $(element).val();
        return "radio" === model || "checkbox" === model ? $('input[name="' + $(element).attr("name") + '"]:checked').val() : "string" === typeof value ? value.replace(/\r/g, "") : value;
      },
      /**
       * @param {Object} element
       * @return {?}
       */
      check : function(element) {
        element = this.validationTargetFor(this.clean(element));
        var rules = $(element).rules();
        /** @type {boolean} */
        var d = false;
        var val = this.elementValue(element);
        var result;
        var method;
        for (method in rules) {
          var rule = {
            method : method,
            parameters : rules[method]
          };
          try {
            if (result = $.validator.methods[method].call(this, val, element, rule.parameters), "dependency-mismatch" === result) {
              /** @type {boolean} */
              d = true;
            } else {
              /** @type {boolean} */
              d = false;
              if ("pending" === result) {
                this.toHide = this.toHide.not(this.errorsFor(element));
                return;
              }
              if (!result) {
                return this.formatAndAdd(element, rule), false;
              }
            }
          } catch (matches) {
            throw this.settings.debug && (window.console && console.log("exception occured when checking element " + element.id + ", check the '" + rule.method + "' method", matches)), matches;
          }
        }
        if (!d) {
          return this.objectLength(rules) && this.successList.push(element), true;
        }
      },
      /**
       * @param {Object} element
       * @param {string} method
       * @return {?}
       */
      customMetaMessage : function(element, method) {
        if ($.metadata) {
          var meta = this.settings.meta ? $(element).metadata()[this.settings.meta] : $(element).metadata();
          return meta && (meta.messages && meta.messages[method]);
        }
      },
      /**
       * @param {Object} element
       * @param {string} method
       * @return {?}
       */
      customDataMessage : function(element, method) {
        return $(element).data("msg-" + method.toLowerCase()) || element.attributes && $(element).attr("data-msg-" + method.toLowerCase());
      },
      /**
       * @param {?} name
       * @param {string} method
       * @return {?}
       */
      customMessage : function(name, method) {
        var m = this.settings.messages[name];
        return m && (m.constructor === String ? m : m[method]);
      },
      /**
       * @return {?}
       */
      findDefined : function() {
        /** @type {number} */
        var i = 0;
        for (;i < arguments.length;i++) {
          if (void 0 !== arguments[i]) {
            return arguments[i];
          }
        }
      },
      /**
       * @param {Object} element
       * @param {string} method
       * @return {?}
       */
      defaultMessage : function(element, method) {
        return this.findDefined(this.customMessage(element.name, method), this.customDataMessage(element, method), this.customMetaMessage(element, method), !this.settings.ignoreTitle && element.title || void 0, $.validator.messages[method], "<strong>Warning: No message defined for " + element.name + "</strong>");
      },
      /**
       * @param {Object} element
       * @param {Object} rule
       * @return {undefined}
       */
      formatAndAdd : function(element, rule) {
        var message = this.defaultMessage(element, rule.method);
        /** @type {RegExp} */
        var theregex = /\$?\{(\d+)\}/g;
        if ("function" === typeof message) {
          message = message.call(this, rule.parameters, element);
        } else {
          if (theregex.test(message)) {
            message = $.validator.format(message.replace(theregex, "{$1}"), rule.parameters);
          }
        }
        this.errorList.push({
          message : message,
          element : element
        });
        this.errorMap[element.name] = message;
        this.submitted[element.name] = message;
      },
      /**
       * @param {Object} toToggle
       * @return {?}
       */
      addWrapper : function(toToggle) {
        if (this.settings.wrapper) {
          toToggle = toToggle.add(toToggle.parent(this.settings.wrapper));
        }
        return toToggle;
      },
      /**
       * @return {undefined}
       */
      defaultShowErrors : function() {
        var i;
        var error;
        /** @type {number} */
        i = 0;
        for (;this.errorList[i];i++) {
          error = this.errorList[i];
          if (this.settings.highlight) {
            this.settings.highlight.call(this, error.element, this.settings.errorClass, this.settings.validClass);
          }
          this.showLabel(error.element, error.message);
        }
        if (this.errorList.length) {
          this.toShow = this.toShow.add(this.containers);
        }
        if (this.settings.success) {
          /** @type {number} */
          i = 0;
          for (;this.successList[i];i++) {
            this.showLabel(this.successList[i]);
          }
        }
        if (this.settings.unhighlight) {
          /** @type {number} */
          i = 0;
          error = this.validElements();
          for (;error[i];i++) {
            this.settings.unhighlight.call(this, error[i], this.settings.errorClass, this.settings.validClass);
          }
        }
        this.toHide = this.toHide.not(this.toShow);
        this.hideErrors();
        this.addWrapper(this.toShow).show();
      },
      /**
       * @return {?}
       */
      validElements : function() {
        return this.currentElements.not(this.invalidElements());
      },
      /**
       * @return {?}
       */
      invalidElements : function() {
        return $(this.errorList).map(function() {
          return this.element;
        });
      },
      /**
       * @param {Function} optgroup
       * @param {string} tmpl
       * @return {undefined}
       */
      showLabel : function(optgroup, tmpl) {
        var cycle = this.errorsFor(optgroup);
        if (cycle.length) {
          cycle.removeClass(this.settings.validClass).addClass(this.settings.errorClass);
          if (cycle.attr("generated")) {
            cycle.html(tmpl);
          }
        } else {
          cycle = $("<" + this.settings.errorElement + "/>").attr({
            "for" : this.idOrName(optgroup),
            generated : true
          }).addClass(this.settings.errorClass).html(tmpl || "");
          if (this.settings.wrapper) {
            cycle = cycle.hide().show().wrap("<" + this.settings.wrapper + "/>").parent();
          }
          if (!this.labelContainer.append(cycle).length) {
            if (this.settings.errorPlacement) {
              this.settings.errorPlacement(cycle, $(optgroup));
            } else {
              cycle.insertAfter(optgroup);
            }
          }
        }
        if (!tmpl) {
          if (this.settings.success) {
            cycle.text("");
            if ("string" === typeof this.settings.success) {
              cycle.addClass(this.settings.success);
            } else {
              this.settings.success(cycle, optgroup);
            }
          }
        }
        this.toShow = this.toShow.add(cycle);
      },
      /**
       * @param {Object} element
       * @return {?}
       */
      errorsFor : function(element) {
        var name = this.idOrName(element);
        return this.errors().filter(function() {
          return $(this).attr("for") === name;
        });
      },
      /**
       * @param {Object} element
       * @return {?}
       */
      idOrName : function(element) {
        return this.groups[element.name] || (this.checkable(element) ? element.name : element.id || element.name);
      },
      /**
       * @param {Object} element
       * @return {?}
       */
      validationTargetFor : function(element) {
        if (this.checkable(element)) {
          element = this.findByName(element.name).not(this.settings.ignore)[0];
        }
        return element;
      },
      /**
       * @param {Object} element
       * @return {?}
       */
      checkable : function(element) {
        return/radio|checkbox/i.test(element.type);
      },
      /**
       * @param {string} name
       * @return {?}
       */
      findByName : function(name) {
        return $(this.currentForm).find('[name="' + name + '"]');
      },
      /**
       * @param {string} value
       * @param {Object} element
       * @return {?}
       */
      getLength : function(value, element) {
        switch(element.nodeName.toLowerCase()) {
          case "select":
            return $("option:selected", element).length;
          case "input":
            if (this.checkable(element)) {
              return this.findByName(element.name).filter(":checked").length;
            }
          ;
        }
        return value.length;
      },
      /**
       * @param {?} param
       * @param {Object} element
       * @return {?}
       */
      depend : function(param, element) {
        return this.dependTypes[typeof param] ? this.dependTypes[typeof param](param, element) : true;
      },
      dependTypes : {
        /**
         * @param {?} param
         * @return {?}
         */
        "boolean" : function(param) {
          return param;
        },
        /**
         * @param {?} param
         * @param {Object} element
         * @return {?}
         */
        string : function(param, element) {
          return!!$(param, element.form).length;
        },
        /**
         * @param {?} param
         * @param {?} element
         * @return {?}
         */
        "function" : function(param, element) {
          return param(element);
        }
      },
      /**
       * @param {Function} element
       * @return {?}
       */
      optional : function(element) {
        var val = this.elementValue(element);
        return!$.validator.methods.required.call(this, val, element) && "dependency-mismatch";
      },
      /**
       * @param {Function} element
       * @return {undefined}
       */
      startRequest : function(element) {
        if (!this.pending[element.name]) {
          this.pendingRequest++;
          /** @type {boolean} */
          this.pending[element.name] = true;
        }
      },
      /**
       * @param {Function} element
       * @param {boolean} valid
       * @return {undefined}
       */
      stopRequest : function(element, valid) {
        this.pendingRequest--;
        if (0 > this.pendingRequest) {
          /** @type {number} */
          this.pendingRequest = 0;
        }
        delete this.pending[element.name];
        if (valid && (0 === this.pendingRequest && (this.formSubmitted && this.form()))) {
          $(this.currentForm).submit();
          /** @type {boolean} */
          this.formSubmitted = false;
        } else {
          if (!valid) {
            if (0 === this.pendingRequest && this.formSubmitted) {
              $(this.currentForm).triggerHandler("invalid-form", [this]);
              /** @type {boolean} */
              this.formSubmitted = false;
            }
          }
        }
      },
      /**
       * @param {string} cycle
       * @return {?}
       */
      previousValue : function(cycle) {
        return $.data(cycle, "previousValue") || $.data(cycle, "previousValue", {
          old : null,
          valid : true,
          message : this.defaultMessage(cycle, "remote")
        });
      }
    },
    classRuleSettings : {
      required : {
        required : true
      },
      email : {
        email : true
      },
      url : {
        url : true
      },
      date : {
        date : true
      },
      dateISO : {
        dateISO : true
      },
      number : {
        number : true
      },
      digits : {
        digits : true
      },
      creditcard : {
        creditcard : true
      }
    },
    /**
     * @param {?} className
     * @param {?} rules
     * @return {undefined}
     */
    addClassRules : function(className, rules) {
      if (className.constructor === String) {
        this.classRuleSettings[className] = rules;
      } else {
        $.extend(this.classRuleSettings, className);
      }
    },
    /**
     * @param {string} element
     * @return {?}
     */
    classRules : function(element) {
      var deep = {};
      if (element = $(element).attr("class")) {
        $.each(element.split(" "), function() {
          if (this in $.validator.classRuleSettings) {
            $.extend(deep, $.validator.classRuleSettings[this]);
          }
        });
      }
      return deep;
    },
    /**
     * @param {HTMLElement} element
     * @return {?}
     */
    attributeRules : function(element) {
      var rules = {};
      element = $(element);
      var name;
      for (name in $.validator.methods) {
        var value;
        if ("required" === name) {
          value = element.get(0).getAttribute(name);
          if ("" === value) {
            /** @type {boolean} */
            value = true;
          }
          /** @type {boolean} */
          value = !!value;
        } else {
          value = element.attr(name);
        }
        if (value) {
          rules[name] = value;
        } else {
          if (element[0].getAttribute("type") === name) {
            /** @type {boolean} */
            rules[name] = true;
          }
        }
      }
      if (rules.maxlength) {
        if (/-1|2147483647|524288/.test(rules.maxlength)) {
          delete rules.maxlength;
        }
      }
      return rules;
    },
    /**
     * @param {Object} element
     * @return {?}
     */
    metadataRules : function(element) {
      if (!$.metadata) {
        return{};
      }
      var meta = $.data(element.form, "validator").settings.meta;
      return meta ? $(element).metadata()[meta] : $(element).metadata();
    },
    /**
     * @param {Object} element
     * @return {?}
     */
    staticRules : function(element) {
      var rules = {};
      var validator = $.data(element.form, "validator");
      if (validator.settings.rules) {
        rules = $.validator.normalizeRule(validator.settings.rules[element.name]) || {};
      }
      return rules;
    },
    /**
     * @param {Object} rules
     * @param {Object} element
     * @return {?}
     */
    normalizeRules : function(rules, element) {
      $.each(rules, function(prop, val) {
        if (false === val) {
          delete rules[prop];
        } else {
          if (val.param || val.depends) {
            /** @type {boolean} */
            var keepRule = true;
            switch(typeof val.depends) {
              case "string":
                /** @type {boolean} */
                keepRule = !!$(val.depends, element.form).length;
                break;
              case "function":
                keepRule = val.depends.call(element, element);
            }
            if (keepRule) {
              rules[prop] = void 0 !== val.param ? val.param : true;
            } else {
              delete rules[prop];
            }
          }
        }
      });
      $.each(rules, function(rule, parameter) {
        rules[rule] = $.isFunction(parameter) ? parameter(element) : parameter;
      });
      $.each(["minlength", "maxlength", "min", "max"], function() {
        if (rules[this]) {
          /** @type {number} */
          rules[this] = Number(rules[this]);
        }
      });
      $.each(["rangelength", "range"], function() {
        if (rules[this]) {
          /** @type {Array} */
          rules[this] = [Number(rules[this][0]), Number(rules[this][1])];
        }
      });
      if ($.validator.autoCreateRanges && (rules.min && (rules.max && (rules.range = [rules.min, rules.max], delete rules.min, delete rules.max)), rules.minlength && rules.maxlength)) {
        /** @type {Array} */
        rules.rangelength = [rules.minlength, rules.maxlength];
        delete rules.minlength;
        delete rules.maxlength;
      }
      if (rules.messages) {
        delete rules.messages;
      }
      return rules;
    },
    /**
     * @param {string} data
     * @return {?}
     */
    normalizeRule : function(data) {
      if ("string" === typeof data) {
        var tmp = {};
        $.each(data.split(/\s/), function() {
          /** @type {boolean} */
          tmp[this] = true;
        });
        data = tmp;
      }
      return data;
    },
    /**
     * @param {string} name
     * @param {Function} method
     * @param {string} message
     * @return {undefined}
     */
    addMethod : function(name, method, message) {
      /** @type {Function} */
      $.validator.methods[name] = method;
      $.validator.messages[name] = void 0 !== message ? message : $.validator.messages[name];
      if (3 > method.length) {
        $.validator.addClassRules(name, $.validator.normalizeRule(name));
      }
    },
    methods : {
      /**
       * @param {string} value
       * @param {Object} element
       * @param {?} param
       * @return {?}
       */
      required : function(value, element, param) {
        return!this.depend(param, element) ? "dependency-mismatch" : "select" === element.nodeName.toLowerCase() ? (value = $(element).val()) && 0 < value.length : this.checkable(element) ? 0 < this.getLength(value, element) : 0 < $.trim(value).length;
      },
      /**
       * @param {string} type
       * @param {Function} object
       * @param {Function} types
       * @return {?}
       */
      remote : function(type, object, types) {
        if (this.optional(object)) {
          return "dependency-mismatch";
        }
        var previous = this.previousValue(object);
        if (!this.settings.messages[object.name]) {
          this.settings.messages[object.name] = {};
        }
        previous.originalMessage = this.settings.messages[object.name].remote;
        this.settings.messages[object.name].remote = previous.message;
        types = "string" === typeof types && {
          /** @type {Function} */
          url : types
        } || types;
        if (this.pending[object.name]) {
          return "pending";
        }
        if (previous.old === type) {
          return previous.valid;
        }
        /** @type {string} */
        previous.old = type;
        var validator = this;
        this.startRequest(object);
        var params = {};
        /** @type {string} */
        params[object.name] = type;
        $.ajax($.extend(true, {
          /** @type {Function} */
          url : types,
          mode : "abort",
          port : "validate" + object.name,
          dataType : "json",
          data : params,
          /**
           * @param {string} name
           * @return {undefined}
           */
          success : function(name) {
            validator.settings.messages[object.name].remote = previous.originalMessage;
            /** @type {boolean} */
            var valid = name === true || name === "true";
            if (valid) {
              var errors = validator.formSubmitted;
              validator.prepareElement(object);
              validator.formSubmitted = errors;
              validator.successList.push(object);
              delete validator.invalid[object.name];
              validator.showErrors();
            } else {
              errors = {};
              name = name || validator.defaultMessage(object, "remote");
              errors[object.name] = previous.message = $.isFunction(name) ? name(type) : name;
              /** @type {boolean} */
              validator.invalid[object.name] = true;
              validator.showErrors(errors);
            }
            /** @type {boolean} */
            previous.valid = valid;
            validator.stopRequest(object, valid);
          }
        }, types));
        return "pending";
      },
      /**
       * @param {(Object|string)} value
       * @param {Object} element
       * @param {(Object|string)} param
       * @return {?}
       */
      minlength : function(value, element, param) {
        value = $.isArray(value) ? value.length : this.getLength($.trim(value), element);
        return this.optional(element) || value >= param;
      },
      /**
       * @param {(Object|string)} value
       * @param {Object} element
       * @param {(Object|string)} param
       * @return {?}
       */
      maxlength : function(value, element, param) {
        value = $.isArray(value) ? value.length : this.getLength($.trim(value), element);
        return this.optional(element) || value <= param;
      },
      /**
       * @param {(Object|string)} value
       * @param {Object} element
       * @param {Array} param
       * @return {?}
       */
      rangelength : function(value, element, param) {
        value = $.isArray(value) ? value.length : this.getLength($.trim(value), element);
        return this.optional(element) || value >= param[0] && value <= param[1];
      },
      /**
       * @param {number} recurring
       * @param {number} value
       * @param {number} param
       * @return {?}
       */
      min : function(recurring, value, param) {
        return this.optional(value) || recurring >= param;
      },
      /**
       * @param {number} recurring
       * @param {number} value
       * @param {number} param
       * @return {?}
       */
      max : function(recurring, value, param) {
        return this.optional(value) || recurring <= param;
      },
      /**
       * @param {?} value
       * @param {Function} element
       * @param {Array} param
       * @return {?}
       */
      range : function(value, element, param) {
        return this.optional(element) || value >= param[0] && value <= param[1];
      },
      /**
       * @param {string} type
       * @param {Function} name
       * @return {?}
       */
      email : function(type, name) {
        return this.optional(name) || /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i.test(type);
      },
      /**
       * @param {string} type
       * @param {Function} name
       * @return {?}
       */
      url : function(type, name) {
        return this.optional(name) || /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(type);
      },
      /**
       * @param {string} type
       * @param {Function} name
       * @return {?}
       */
      date : function(type, name) {
        return this.optional(name) || !/Invalid|NaN/.test(new Date(type));
      },
      /**
       * @param {?} value
       * @param {Function} element
       * @return {?}
       */
      dateISO : function(value, element) {
        return this.optional(element) || /^\d{4}[\/\-]\d{1,2}[\/\-]\d{1,2}$/.test(value);
      },
      /**
       * @param {?} value
       * @param {Function} element
       * @return {?}
       */
      number : function(value, element) {
        return this.optional(element) || /^-?(?:\d+|\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(value);
      },
      /**
       * @param {?} value
       * @param {Function} element
       * @return {?}
       */
      digits : function(value, element) {
        return this.optional(element) || /^\d+$/.test(value);
      },
      /**
       * @param {string} value
       * @param {Function} element
       * @return {?}
       */
      creditcard : function(value, element) {
        if (this.optional(element)) {
          return "dependency-mismatch";
        }
        if (/[^0-9 \-]+/.test(value)) {
          return false;
        }
        /** @type {number} */
        var s = 0;
        /** @type {number} */
        var chr = 0;
        /** @type {boolean} */
        var perm = false;
        value = value.replace(/\D/g, "");
        /** @type {number} */
        var i = value.length - 1;
        for (;0 <= i;i--) {
          chr = value.charAt(i);
          /** @type {number} */
          chr = parseInt(chr, 10);
          if (perm && 9 < (chr *= 2)) {
            chr -= 9;
          }
          s += chr;
          /** @type {boolean} */
          perm = !perm;
        }
        return 0 === s % 10;
      },
      /**
       * @param {?} value
       * @param {?} param
       * @param {Element} element
       * @return {?}
       */
      equalTo : function(value, param, element) {
        element = $(element);
        if (this.settings.onfocusout) {
          element.unbind(".validate-equalTo").bind("blur.validate-equalTo", function() {
            $(param).valid();
          });
        }
        return value === element.val();
      }
    }
  });
  /** @type {function (string, ?): ?} */
  $.format = $.validator.format;
})(jQuery);
(function($) {
  var pendingRequests = {};
  if ($.ajaxPrefilter) {
    $.ajaxPrefilter(function(settings, id, promise) {
      id = settings.port;
      if ("abort" === settings.mode) {
        if (pendingRequests[id]) {
          pendingRequests[id].abort();
        }
        pendingRequests[id] = promise;
      }
    });
  } else {
    var ajax = $.ajax;
    /**
     * @param {string} type
     * @return {?}
     */
    $.ajax = function(type) {
      var port = ("port" in type ? type : $.ajaxSettings).port;
      return "abort" === ("mode" in type ? type : $.ajaxSettings).mode ? (pendingRequests[port] && pendingRequests[port].abort(), pendingRequests[port] = ajax.apply(this, arguments)) : ajax.apply(this, arguments);
    };
  }
})(jQuery);
(function($) {
  if (!jQuery.event.special.focusin) {
    if (!jQuery.event.special.focusout && document.addEventListener) {
      $.each({
        focus : "focusin",
        blur : "focusout"
      }, function(original, fix) {
        /**
         * @param {Object} e
         * @return {?}
         */
        function handler(e) {
          e = $.event.fix(e);
          e.type = fix;
          return $.event.handle.call(this, e);
        }
        $.event.special[fix] = {
          /**
           * @return {undefined}
           */
          setup : function() {
            this.addEventListener(original, handler, true);
          },
          /**
           * @return {undefined}
           */
          teardown : function() {
            this.removeEventListener(original, handler, true);
          },
          /**
           * @param {string} type
           * @return {?}
           */
          handler : function(type) {
            /** @type {Arguments} */
            var args = arguments;
            args[0] = $.event.fix(type);
            args[0].type = fix;
            return $.event.handle.apply(this, args);
          }
        };
      });
    }
  }
  $.extend($.fn, {
    /**
     * @param {string} cycle
     * @param {string} fix
     * @param {Function} handler
     * @return {?}
     */
    validateDelegate : function(cycle, fix, handler) {
      return this.bind(fix, function(ev) {
        var that = $(ev.target);
        if (that.is(cycle)) {
          return handler.apply(that, arguments);
        }
      });
    }
  });
})(jQuery);
var JSON;
if (!JSON) {
  JSON = {};
}
(function() {
  /**
   * @param {number} n
   * @return {?}
   */
  function f(n) {
    return 10 > n ? "0" + n : n;
  }
  /**
   * @param {string} string
   * @return {?}
   */
  function quote(string) {
    /** @type {number} */
    escapable.lastIndex = 0;
    return escapable.test(string) ? '"' + string.replace(escapable, function(key) {
      var value = $cookies[key];
      return "string" === typeof value ? value : "\\u" + ("0000" + key.charCodeAt(0).toString(16)).slice(-4);
    }) + '"' : '"' + string + '"';
  }
  /**
   * @param {string} cycle
   * @param {Object} holder
   * @return {?}
   */
  function str(cycle, holder) {
    var i;
    var k;
    var v;
    var length;
    var mind = gap;
    var partial;
    var value = holder[cycle];
    if (value) {
      if ("object" === typeof value && "function" === typeof value.toJSON) {
        value = value.toJSON(cycle);
      }
    }
    if ("function" === typeof rep) {
      value = rep.call(holder, cycle, value);
    }
    switch(typeof value) {
      case "string":
        return quote(value);
      case "number":
        return isFinite(value) ? String(value) : "null";
      case "boolean":
      ;
      case "null":
        return String(value);
      case "object":
        if (!value) {
          return "null";
        }
        gap += indent;
        /** @type {Array} */
        partial = [];
        if ("[object Array]" === Object.prototype.toString.apply(value)) {
          length = value.length;
          /** @type {number} */
          i = 0;
          for (;i < length;i += 1) {
            partial[i] = str(i, value) || "null";
          }
          /** @type {string} */
          v = 0 === partial.length ? "[]" : gap ? "[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]" : "[" + partial.join(",") + "]";
          gap = mind;
          return v;
        }
        if (rep && "object" === typeof rep) {
          length = rep.length;
          /** @type {number} */
          i = 0;
          for (;i < length;i += 1) {
            if ("string" === typeof rep[i]) {
              k = rep[i];
              if (v = str(k, value)) {
                partial.push(quote(k) + (gap ? ": " : ":") + v);
              }
            }
          }
        } else {
          for (k in value) {
            if (Object.prototype.hasOwnProperty.call(value, k)) {
              if (v = str(k, value)) {
                partial.push(quote(k) + (gap ? ": " : ":") + v);
              }
            }
          }
        }
        /** @type {string} */
        v = 0 === partial.length ? "{}" : gap ? "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}" : "{" + partial.join(",") + "}";
        gap = mind;
        return v;
    }
  }
  if ("function" !== typeof Date.prototype.toJSON) {
    /**
     * @return {string}
     */
    Date.prototype.toJSON = function() {
      return isFinite(this.valueOf()) ? this.getUTCFullYear() + "-" + f(this.getUTCMonth() + 1) + "-" + f(this.getUTCDate()) + "T" + f(this.getUTCHours()) + ":" + f(this.getUTCMinutes()) + ":" + f(this.getUTCSeconds()) + "Z" : null;
    };
    /** @type {function (this:Boolean, string=): *} */
    String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function() {
      return this.valueOf();
    };
  }
  /** @type {RegExp} */
  var pat = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
  /** @type {RegExp} */
  var escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
  var gap;
  var indent;
  var $cookies = {
    "\b" : "\\b",
    "\t" : "\\t",
    "\n" : "\\n",
    "\f" : "\\f",
    "\r" : "\\r",
    '"' : '\\"',
    "\\" : "\\\\"
  };
  var rep;
  if ("function" !== typeof JSON.stringify) {
    /**
     * @param {*} value
     * @param {(Array.<string>|function (string, *): *|null)=} replacer
     * @param {(number|string)=} space
     * @return {string}
     */
    JSON.stringify = function(value, replacer, space) {
      var i;
      /** @type {string} */
      indent = gap = "";
      if (typeof space === "number") {
        /** @type {number} */
        i = 0;
        for (;i < space;i = i + 1) {
          /** @type {string} */
          indent = indent + " ";
        }
      } else {
        if (typeof space === "string") {
          /** @type {string} */
          indent = space;
        }
      }
      if ((rep = replacer) && (typeof replacer !== "function" && (typeof replacer !== "object" || typeof replacer.length !== "number"))) {
        throw Error("JSON.stringify");
      }
      return str("", {
        "" : value
      });
    };
  }
  if ("function" !== typeof JSON.parse) {
    /**
     * @param {string} str
     * @param {function (string, *): *=} prop
     * @return {*}
     */
    JSON.parse = function(str, prop) {
      /**
       * @param {Object} holder
       * @param {string} name
       * @return {?}
       */
      function walk(holder, name) {
        var k;
        var v;
        var value = holder[name];
        if (value && typeof value === "object") {
          for (k in value) {
            if (Object.prototype.hasOwnProperty.call(value, k)) {
              v = walk(value, k);
              if (v !== void 0) {
                value[k] = v;
              } else {
                delete value[k];
              }
            }
          }
        }
        return prop.call(holder, name, value);
      }
      var j;
      /** @type {string} */
      str = String(str);
      /** @type {number} */
      pat.lastIndex = 0;
      if (pat.test(str)) {
        /** @type {string} */
        str = str.replace(pat, function(a) {
          return "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
        });
      }
      if (/^[\],:{}\s]*$/.test(str.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) {
        /** @type {*} */
        j = eval("(" + str + ")");
        return typeof prop === "function" ? walk({
          "" : j
        }, "") : j;
      }
      throw new SyntaxError("JSON.parse");
    };
  }
})();
(function(optgroup, obj) {
  /**
   * @param {?} value
   * @return {?}
   */
  function lodash(value) {
    if (value && ("object" == typeof value && value.__wrapped__)) {
      return value;
    }
    if (!(this instanceof lodash)) {
      return new lodash(value);
    }
    this.__wrapped__ = value;
  }
  /**
   * @param {Object} array
   * @param {number} fromIndex
   * @param {number} index
   * @return {?}
   */
  function cachedContains(array, fromIndex, index) {
    if (!fromIndex) {
      /** @type {number} */
      fromIndex = 0;
    }
    var length = array.length;
    /** @type {boolean} */
    var f = length - fromIndex >= (index || largeArraySize);
    if (f) {
      var cache = {};
      /** @type {number} */
      index = fromIndex - 1;
      for (;++index < length;) {
        var key = array[index] + "";
        (hasOwnProperty.call(cache, key) ? cache[key] : cache[key] = []).push(array[index]);
      }
    }
    return function(value) {
      if (f) {
        /** @type {string} */
        var key = value + "";
        return hasOwnProperty.call(cache, key) && -1 < indexOf(cache[key], value);
      }
      return-1 < indexOf(array, value, fromIndex);
    };
  }
  /**
   * @param {string} value
   * @return {?}
   */
  function charAtCallback(value) {
    return value.charCodeAt(0);
  }
  /**
   * @param {Object} a
   * @param {Object} b
   * @return {?}
   */
  function compareAscending(a, b) {
    var ai = a.index;
    var bi = b.index;
    a = a.criteria;
    b = b.criteria;
    if (a !== b) {
      if (a > b || "undefined" == typeof a) {
        return 1;
      }
      if (a < b || "undefined" == typeof b) {
        return-1;
      }
    }
    return ai < bi ? -1 : 1;
  }
  /**
   * @param {(Function|string)} func
   * @param {(Function|string)} obj
   * @param {(Function|string)} data
   * @param {?} callback
   * @return {?}
   */
  function log(func, obj, data, callback) {
    /**
     * @return {?}
     */
    function bound() {
      /** @type {Arguments} */
      var args = arguments;
      var thisBinding = chain ? this : obj;
      if (!isFunc) {
        func = obj[key];
      }
      if (data.length) {
        args = args.length ? (args = slice(args), callback ? args.concat(data) : data.concat(args)) : data;
      }
      return this instanceof bound ? (noop.prototype = func.prototype, thisBinding = new noop, noop.prototype = null, args = func.apply(thisBinding, args), isObject(args) ? args : thisBinding) : func.apply(thisBinding, args);
    }
    var isFunc = isFunction(func);
    /** @type {boolean} */
    var chain = !data;
    /** @type {(Function|string)} */
    var key = obj;
    if (chain) {
      /** @type {(Function|string)} */
      data = obj;
    }
    if (!isFunc) {
      obj = func;
    }
    return bound;
  }
  /**
   * @param {string} cycle
   * @param {string} thisArg
   * @param {number} expectedNumberOfNonCommentArgs
   * @return {?}
   */
  function createCallback(cycle, thisArg, expectedNumberOfNonCommentArgs) {
    if (null == cycle) {
      return identity;
    }
    /** @type {string} */
    var object = typeof cycle;
    if ("function" != object) {
      if ("object" != object) {
        return function(dataAndEvents) {
          return dataAndEvents[cycle];
        };
      }
      var tokenized = Event(cycle);
      return function(object) {
        var index = tokenized.length;
        /** @type {boolean} */
        var result = false;
        for (;index-- && (result = baseIsEqual(object[tokenized[index]], cycle[tokenized[index]], restoreScript));) {
        }
        return result;
      };
    }
    return "undefined" != typeof thisArg ? 1 === expectedNumberOfNonCommentArgs ? function(fake) {
      return cycle.call(thisArg, fake);
    } : 2 === expectedNumberOfNonCommentArgs ? function(fake, graphics) {
      return cycle.call(thisArg, fake, graphics);
    } : 4 === expectedNumberOfNonCommentArgs ? function(fake, graphics, capture, opt_coordHeight) {
      return cycle.call(thisArg, fake, graphics, capture, opt_coordHeight);
    } : function(fake, graphics, capture) {
      return cycle.call(thisArg, fake, graphics, capture);
    } : cycle;
  }
  /**
   * @return {?}
   */
  function createIterator() {
    var obj = {
      isKeysFast : isKeysFast,
      arrays : "isArray(iterable)",
      bottom : "",
      loop : "",
      top : "",
      useHas : true
    };
    var target;
    /** @type {number} */
    var i = 0;
    for (;target = arguments[i];i++) {
      var key;
      for (key in target) {
        obj[key] = target[key];
      }
    }
    target = obj.args;
    /** @type {string} */
    obj.firstArg = /^[^,]+/.exec(target)[0];
    /** @type {function (new:Function, ...[*]): ?} */
    i = Function;
    /** @type {string} */
    key = "var index, iterable = " + obj.firstArg + ", result = iterable;\nif (!iterable) return result;\n" + obj.top + ";\n";
    if (obj.arrays) {
      key += "var length = iterable.length; index = -1;\nif (" + obj.arrays + ") {\n  while (++index < length) {\n    " + obj.loop + "\n  }\n}\nelse {  ";
    }
    if (obj.isKeysFast && obj.useHas) {
      key += "\n  var ownIndex = -1,\n      ownProps = objectTypes[typeof iterable] ? nativeKeys(iterable) : [],\n      length = ownProps.length;\n\n  while (++ownIndex < length) {\n    index = ownProps[ownIndex];\n    " + obj.loop + "\n  }  ";
    } else {
      key += "\n  for (index in iterable) {";
      if (obj.useHas) {
        key += "\n    if (";
        if (obj.useHas) {
          key += "hasOwnProperty.call(iterable, index)";
        }
        key += ") {    ";
      }
      key += obj.loop + ";    ";
      if (obj.useHas) {
        key += "\n    }";
      }
      key += "\n  }  ";
    }
    if (obj.arrays) {
      key += "\n}";
    }
    key += obj.bottom + ";\nreturn result";
    return i("createCallback, hasOwnProperty, isArguments, isArray, isString, objectTypes, nativeKeys", "return function(" + target + ") {\n" + key + "\n}")(createCallback, hasOwnProperty, isArguments, isArray, isString, objectTypes, nativeKeys);
  }
  /**
   * @param {?} match
   * @return {?}
   */
  function escapeStringChar(match) {
    return "\\" + escapes[match];
  }
  /**
   * @param {?} match
   * @return {?}
   */
  function tokenizeInterpolate(match) {
    return htmlEscapes[match];
  }
  /**
   * @return {undefined}
   */
  function noop() {
  }
  /**
   * @param {Object} array
   * @param {number} expectedNumberOfNonCommentArgs
   * @param {number} length
   * @return {?}
   */
  function slice(array, expectedNumberOfNonCommentArgs, length) {
    if (!expectedNumberOfNonCommentArgs) {
      /** @type {number} */
      expectedNumberOfNonCommentArgs = 0;
    }
    if ("undefined" == typeof length) {
      length = array ? array.length : 0;
    }
    /** @type {number} */
    var index = -1;
    /** @type {number} */
    length = length - expectedNumberOfNonCommentArgs || 0;
    /** @type {Array} */
    var result = Array(0 > length ? 0 : length);
    for (;++index < length;) {
      result[index] = array[expectedNumberOfNonCommentArgs + index];
    }
    return result;
  }
  /**
   * @param {?} match
   * @return {?}
   */
  function tokenizeEvaluate(match) {
    return htmlUnescapes[match];
  }
  /**
   * @param {boolean} value
   * @return {?}
   */
  function isArguments(value) {
    return toString.call(value) == argsClass;
  }
  /**
   * @param {string} type
   * @return {?}
   */
  function shimKeys(type) {
    /** @type {Array} */
    var result = [];
    forOwn(type, function(dataAndEvents, player) {
      result.push(player);
    });
    return result;
  }
  /**
   * @param {Object} dataAndEvents
   * @param {boolean} deepDataAndEvents
   * @param {boolean} fn
   * @param {boolean} callback
   * @param {Object} stackB
   * @param {Object} index
   * @return {?}
   */
  function clone(dataAndEvents, deepDataAndEvents, fn, callback, stackB, index) {
    /** @type {Object} */
    var value = dataAndEvents;
    if ("function" == typeof deepDataAndEvents) {
      /** @type {boolean} */
      callback = fn;
      /** @type {boolean} */
      fn = deepDataAndEvents;
      /** @type {boolean} */
      deepDataAndEvents = false;
    }
    if ("function" == typeof fn) {
      fn = "undefined" == typeof callback ? fn : createCallback(fn, callback, 1);
      value = fn(value);
      /** @type {boolean} */
      var raw = "undefined" != typeof value;
      if (!raw) {
        /** @type {Object} */
        value = dataAndEvents;
      }
    }
    if (callback = isObject(value)) {
      /** @type {string} */
      var className = toString.call(value);
      if (!cloneableClasses[className]) {
        return value;
      }
      var isArr = isArray(value);
    }
    if (!callback || !deepDataAndEvents) {
      return callback && !raw ? isArr ? slice(value) : assign({}, value) : value;
    }
    callback = ctorByClass[className];
    switch(className) {
      case boolClass:
      ;
      case dateClass:
        return raw ? value : new callback(+value);
      case numberClass:
      ;
      case stringClass:
        return raw ? value : new callback(value);
      case regexpClass:
        return raw ? value : callback(value.source, rtagName.exec(value));
    }
    if (!stackB) {
      /** @type {Array} */
      stackB = [];
    }
    if (!index) {
      /** @type {Array} */
      index = [];
    }
    className = stackB.length;
    for (;className--;) {
      if (stackB[className] == dataAndEvents) {
        return index[className];
      }
    }
    if (!raw && (value = isArr ? callback(value.length) : {}, isArr && (hasOwnProperty.call(dataAndEvents, "index") && (value.index = dataAndEvents.index), hasOwnProperty.call(dataAndEvents, "input")))) {
      value.input = dataAndEvents.input;
    }
    stackB.push(dataAndEvents);
    index.push(value);
    (isArr ? forEach : forOwn)(raw ? value : dataAndEvents, function(node, key) {
      value[key] = clone(node, deepDataAndEvents, fn, obj, stackB, index);
    });
    return value;
  }
  /**
   * @param {Function} object
   * @return {?}
   */
  function functions(object) {
    /** @type {Array} */
    var bProperties = [];
    forIn(object, function(cycle, i) {
      if (isFunction(cycle)) {
        bProperties.push(i);
      }
    });
    return bProperties.sort();
  }
  /**
   * @param {string} cycle
   * @return {?}
   */
  function invert(cycle) {
    /** @type {number} */
    var index = -1;
    var funcs = Event(cycle);
    var length = funcs.length;
    var result = {};
    for (;++index < length;) {
      var key = funcs[index];
      result[cycle[key]] = key;
    }
    return result;
  }
  /**
   * @param {?} a
   * @param {?} b
   * @param {(Array|string)} callback
   * @param {string} stackB
   * @param {Object} stackA
   * @param {Object} bStack
   * @return {?}
   */
  function baseIsEqual(a, b, callback, stackB, stackA, bStack) {
    /** @type {boolean} */
    var suppressDebug = callback === restoreScript;
    if (callback && !suppressDebug) {
      callback = "undefined" == typeof stackB ? callback : createCallback(callback, stackB, 2);
      var result = callback(a, b);
      if ("undefined" != typeof result) {
        return!!result;
      }
    }
    if (a === b) {
      return 0 !== a || 1 / a == 1 / b;
    }
    /** @type {string} */
    var c = typeof a;
    /** @type {string} */
    var className = typeof b;
    if (a === a && ((!a || "function" != c && "object" != c) && (!b || "function" != className && "object" != className))) {
      return false;
    }
    if (null == a || null == b) {
      return a === b;
    }
    /** @type {string} */
    className = toString.call(a);
    /** @type {string} */
    c = toString.call(b);
    if (className == argsClass) {
      /** @type {string} */
      className = objectClass;
    }
    if (c == argsClass) {
      /** @type {string} */
      c = objectClass;
    }
    if (className != c) {
      return false;
    }
    switch(className) {
      case boolClass:
      ;
      case dateClass:
        return+a == +b;
      case numberClass:
        return a != +a ? b != +b : 0 == a ? 1 / a == 1 / b : a == +b;
      case regexpClass:
      ;
      case stringClass:
        return a == b + "";
    }
    /** @type {boolean} */
    c = className == arrayClass;
    if (!c) {
      if (a.__wrapped__ || b.__wrapped__) {
        return baseIsEqual(a.__wrapped__ || a, b.__wrapped__ || b, callback, stackB, stackA, bStack);
      }
      if (className != objectClass) {
        return false;
      }
      className = a.constructor;
      var ctorB = b.constructor;
      if (className != ctorB && (!isFunction(className) || !(className instanceof className && (isFunction(ctorB) && ctorB instanceof ctorB)))) {
        return false;
      }
    }
    if (!stackA) {
      /** @type {Array} */
      stackA = [];
    }
    if (!bStack) {
      /** @type {Array} */
      bStack = [];
    }
    className = stackA.length;
    for (;className--;) {
      if (stackA[className] == a) {
        return bStack[className] == b;
      }
    }
    /** @type {number} */
    var size = 0;
    /** @type {boolean} */
    result = true;
    stackA.push(a);
    bStack.push(b);
    if (c) {
      className = a.length;
      size = b.length;
      /** @type {boolean} */
      result = size == a.length;
      if (!result && !suppressDebug) {
        return result;
      }
      for (;size--;) {
        if (c = className, ctorB = b[size], suppressDebug) {
          for (;c-- && !(result = baseIsEqual(a[c], ctorB, callback, stackB, stackA, bStack));) {
          }
        } else {
          if (!(result = baseIsEqual(a[size], ctorB, callback, stackB, stackA, bStack))) {
            break;
          }
        }
      }
      return result;
    }
    forIn(b, function(value, key, obj) {
      if (hasOwnProperty.call(obj, key)) {
        return size++, result = hasOwnProperty.call(a, key) && baseIsEqual(a[key], value, callback, stackB, stackA, bStack);
      }
    });
    if (result) {
      if (!suppressDebug) {
        forIn(a, function(dataAndEvents, key, a) {
          if (hasOwnProperty.call(a, key)) {
            return result = -1 < --size;
          }
        });
      }
    }
    return result;
  }
  /**
   * @param {string} type
   * @return {?}
   */
  function isFunction(type) {
    return "function" == typeof type;
  }
  /**
   * @param {Object} value
   * @return {?}
   */
  function isObject(value) {
    return value ? objectTypes[typeof value] : false;
  }
  /**
   * @param {number} value
   * @return {?}
   */
  function isNumber(value) {
    return "number" == typeof value || toString.call(value) == numberClass;
  }
  /**
   * @param {Object} value
   * @return {?}
   */
  function isString(value) {
    return "string" == typeof value || toString.call(value) == stringClass;
  }
  /**
   * @param {Object} first
   * @param {?} second
   * @param {?} callback
   * @return {?}
   */
  function merge(first, second, callback) {
    /** @type {Arguments} */
    var args = arguments;
    /** @type {number} */
    var i = 0;
    /** @type {number} */
    var len = 2;
    if (!isObject(first)) {
      return first;
    }
    if (callback === restoreScript) {
      var test = args[3];
      var array = args[4];
      var seen = args[5];
    } else {
      /** @type {Array} */
      array = [];
      /** @type {Array} */
      seen = [];
      if ("number" != typeof callback) {
        /** @type {number} */
        len = args.length;
      }
      if (3 < len && "function" == typeof args[len - 2]) {
        test = createCallback(args[--len - 1], args[len--], 2);
      } else {
        if (2 < len) {
          if ("function" == typeof args[len - 1]) {
            test = args[--len];
          }
        }
      }
    }
    for (;++i < len;) {
      (isArray(args[i]) ? forEach : forOwn)(args[i], function(val, property) {
        var d;
        var isArr;
        /** @type {Object} */
        var index = val;
        var value = first[property];
        if (val && ((isArr = isArray(val)) || isPlainObject(val))) {
          index = array.length;
          for (;index--;) {
            if (d = array[index] == val) {
              value = seen[index];
              break;
            }
          }
          if (!d) {
            value = isArr ? isArray(value) ? value : [] : isPlainObject(value) ? value : {};
            if (test) {
              index = test(value, val);
              if ("undefined" != typeof index) {
                value = index;
              }
            }
            array.push(val);
            seen.push(value);
            if (!test) {
              value = merge(value, val, restoreScript, test, array, seen);
            }
          }
        } else {
          if (test) {
            index = test(value, val);
            if ("undefined" == typeof index) {
              /** @type {Object} */
              index = val;
            }
          }
          if ("undefined" != typeof index) {
            value = index;
          }
        }
        first[property] = value;
      });
    }
    return first;
  }
  /**
   * @param {string} cycle
   * @return {?}
   */
  function values(cycle) {
    /** @type {number} */
    var index = -1;
    var resolveValues = Event(cycle);
    var length = resolveValues.length;
    /** @type {Array} */
    var result = Array(length);
    for (;++index < length;) {
      result[index] = cycle[resolveValues[index]];
    }
    return result;
  }
  /**
   * @param {Object} collection
   * @param {?} target
   * @param {number} fromIndex
   * @return {?}
   */
  function contains(collection, target, fromIndex) {
    /** @type {number} */
    var index = -1;
    var length = collection ? collection.length : 0;
    /** @type {boolean} */
    var found = false;
    fromIndex = (0 > fromIndex ? nativeMax(0, length + fromIndex) : fromIndex) || 0;
    if ("number" == typeof length) {
      /** @type {boolean} */
      found = -1 < (isString(collection) ? collection.indexOf(target, fromIndex) : indexOf(collection, target, fromIndex));
    } else {
      baseEach(collection, function(value) {
        if (++index >= fromIndex) {
          return!(found = value === target);
        }
      });
    }
    return found;
  }
  /**
   * @param {string} collection
   * @param {Text} callback
   * @param {Object} thisArg
   * @return {?}
   */
  function every(collection, callback, thisArg) {
    /** @type {boolean} */
    var f = true;
    callback = createCallback(callback, thisArg);
    if (isArray(collection)) {
      /** @type {number} */
      thisArg = -1;
      var l = collection.length;
      for (;++thisArg < l && (f = !!callback(collection[thisArg], thisArg, collection));) {
      }
    } else {
      baseEach(collection, function(basis, mongoObject, arg) {
        return f = !!callback(basis, mongoObject, arg);
      });
    }
    return f;
  }
  /**
   * @param {string} type
   * @param {Function} name
   * @param {Function} types
   * @return {?}
   */
  function filter(type, name, types) {
    /** @type {Array} */
    var me = [];
    name = createCallback(name, types);
    if (isArray(type)) {
      /** @type {number} */
      types = -1;
      var typeLength = type.length;
      for (;++types < typeLength;) {
        var cycle = type[types];
        if (name(cycle, types, type)) {
          me.push(cycle);
        }
      }
    } else {
      baseEach(type, function(cycle, t, deepDataAndEvents) {
        if (name(cycle, t, deepDataAndEvents)) {
          me.push(cycle);
        }
      });
    }
    return me;
  }
  /**
   * @param {string} type
   * @param {Object} callback
   * @param {(Array|string)} isXML
   * @return {?}
   */
  function find(type, callback, isXML) {
    var result;
    callback = createCallback(callback, isXML);
    forEach(type, function(error, mongoObject, arg) {
      if (callback(error, mongoObject, arg)) {
        return result = error, false;
      }
    });
    return result;
  }
  /**
   * @param {Function} opt_attributes
   * @param {Function} callback
   * @param {Object} index
   * @return {?}
   */
  function forEach(opt_attributes, callback, index) {
    if (callback && ("undefined" == typeof index && isArray(opt_attributes))) {
      /** @type {number} */
      index = -1;
      var length = opt_attributes.length;
      for (;++index < length && false !== callback(opt_attributes[index], index, opt_attributes);) {
      }
    } else {
      baseEach(opt_attributes, callback, index);
    }
    return opt_attributes;
  }
  /**
   * @param {Object} collection
   * @param {Function} callback
   * @param {string} thisArg
   * @return {?}
   */
  function map(collection, callback, thisArg) {
    /** @type {number} */
    var index = -1;
    var length = collection ? collection.length : 0;
    /** @type {Array} */
    var result = Array("number" == typeof length ? length : 0);
    callback = createCallback(callback, thisArg);
    if (isArray(collection)) {
      for (;++index < length;) {
        result[index] = callback(collection[index], index, collection);
      }
    } else {
      baseEach(collection, function(value, key, collection) {
        result[++index] = callback(value, key, collection);
      });
    }
    return result;
  }
  /**
   * @param {number} recurring
   * @param {Function} callback
   * @param {number} thisArg
   * @return {?}
   */
  function max(recurring, callback, thisArg) {
    /** @type {number} */
    var computed = -Infinity;
    var result = computed;
    if (!callback && isArray(recurring)) {
      /** @type {number} */
      thisArg = -1;
      var cnl = recurring.length;
      for (;++thisArg < cnl;) {
        var range = recurring[thisArg];
        if (range > result) {
          result = range;
        }
      }
    } else {
      callback = !callback && isString(recurring) ? charAtCallback : createCallback(callback, thisArg);
      baseEach(recurring, function(value, current, array) {
        current = callback(value, current, array);
        if (current > computed) {
          /** @type {number} */
          computed = current;
          /** @type {number} */
          result = value;
        }
      });
    }
    return result;
  }
  /**
   * @param {Object} collection
   * @param {(Array|string)} callback
   * @param {number} accumulator
   * @param {string} thisArg
   * @return {?}
   */
  function reduce(collection, callback, accumulator, thisArg) {
    /** @type {boolean} */
    var noaccum = 3 > arguments.length;
    callback = createCallback(callback, thisArg, 4);
    if (isArray(collection)) {
      /** @type {number} */
      var index = -1;
      var length = collection.length;
      if (noaccum) {
        accumulator = collection[++index];
      }
      for (;++index < length;) {
        accumulator = callback(accumulator, collection[index], index, collection);
      }
    } else {
      baseEach(collection, function(value, index, collection) {
        accumulator = noaccum ? (noaccum = false, value) : callback(accumulator, value, index, collection);
      });
    }
    return accumulator;
  }
  /**
   * @param {string} cycle
   * @param {Text} callback
   * @param {Text} accumulator
   * @param {string} thisArg
   * @return {?}
   */
  function reduceRight(cycle, callback, accumulator, thisArg) {
    var length = cycle ? cycle.length : 0;
    /** @type {boolean} */
    var noaccum = 3 > arguments.length;
    if ("number" != typeof length) {
      var keys = Event(cycle);
      length = keys.length;
    }
    callback = createCallback(callback, thisArg, 4);
    forEach(cycle, function(dataAndEvents, index, collection) {
      index = keys ? keys[--length] : --length;
      accumulator = noaccum ? (noaccum = false, cycle[index]) : callback(accumulator, cycle[index], index, collection);
    });
    return accumulator;
  }
  /**
   * @param {string} collection
   * @param {(Array|string)} callback
   * @param {Object} index
   * @return {?}
   */
  function some(collection, callback, index) {
    var result;
    callback = createCallback(callback, index);
    if (isArray(collection)) {
      /** @type {number} */
      index = -1;
      var length = collection.length;
      for (;++index < length && !(result = callback(collection[index], index, collection));) {
      }
    } else {
      baseEach(collection, function(exception, index, collection) {
        return!(result = callback(exception, index, collection));
      });
    }
    return!!result;
  }
  /**
   * @param {string} type
   * @param {Function} name
   * @param {Function} types
   * @return {?}
   */
  function first(type, name, types) {
    if (type) {
      /** @type {number} */
      var objId = 0;
      var length = type.length;
      if ("number" != typeof name && null != name) {
        /** @type {number} */
        var index = -1;
        name = createCallback(name, types);
        for (;++index < length && name(type[index], index, type);) {
          objId++;
        }
      } else {
        if (objId = name, null == objId || types) {
          return type[0];
        }
      }
      return slice(type, 0, nativeMin(nativeMax(0, objId), length));
    }
  }
  /**
   * @param {Object} array
   * @param {boolean} shallow
   * @return {?}
   */
  function flatten(array, shallow) {
    /** @type {number} */
    var index = -1;
    var length = array ? array.length : 0;
    /** @type {Array} */
    var result = [];
    for (;++index < length;) {
      var value = array[index];
      if (isArray(value)) {
        push.apply(result, shallow ? value : flatten(value));
      } else {
        result.push(value);
      }
    }
    return result;
  }
  /**
   * @param {string} name
   * @param {string} value
   * @param {number} fromIndex
   * @return {?}
   */
  function indexOf(name, value, fromIndex) {
    /** @type {number} */
    var index = -1;
    var length = name ? name.length : 0;
    if ("number" == typeof fromIndex) {
      /** @type {number} */
      index = (0 > fromIndex ? nativeMax(0, length + fromIndex) : fromIndex || 0) - 1;
    } else {
      if (fromIndex) {
        return index = sortedIndex(name, value), name[index] === value ? index : -1;
      }
    }
    for (;++index < length;) {
      if (name[index] === value) {
        return index;
      }
    }
    return-1;
  }
  /**
   * @param {Object} array
   * @param {?} callback
   * @param {Object} thisArg
   * @return {?}
   */
  function rest(array, callback, thisArg) {
    if ("number" != typeof callback && null != callback) {
      /** @type {number} */
      var r20 = 0;
      /** @type {number} */
      var index = -1;
      var length = array ? array.length : 0;
      callback = createCallback(callback, thisArg);
      for (;++index < length && callback(array[index], index, array);) {
        r20++;
      }
    } else {
      /** @type {number} */
      r20 = null == callback || thisArg ? 1 : nativeMax(0, callback);
    }
    return slice(array, r20);
  }
  /**
   * @param {Object} array
   * @param {(Node|string)} value
   * @param {(Object|string)} callback
   * @param {Object} mid
   * @return {?}
   */
  function sortedIndex(array, value, callback, mid) {
    /** @type {number} */
    var low = 0;
    var high = array ? array.length : low;
    callback = callback ? createCallback(callback, mid, 1) : identity;
    value = callback(value);
    for (;low < high;) {
      /** @type {number} */
      mid = low + high >>> 1;
      if (callback(array[mid]) < value) {
        /** @type {number} */
        low = mid + 1;
      } else {
        /** @type {Object} */
        high = mid;
      }
    }
    return low;
  }
  /**
   * @param {Object} array
   * @param {boolean} length
   * @param {boolean} callback
   * @param {boolean} value
   * @return {?}
   */
  function uniq(array, length, callback, value) {
    /** @type {number} */
    var index = -1;
    var n = array ? array.length : 0;
    /** @type {Array} */
    var result = [];
    /** @type {Array} */
    var seen = result;
    if ("function" == typeof length) {
      /** @type {boolean} */
      value = callback;
      /** @type {boolean} */
      callback = length;
      /** @type {boolean} */
      length = false;
    }
    /** @type {boolean} */
    var defaultCompare = !length && 75 <= n;
    if (defaultCompare) {
      var cache = {}
    }
    if (callback) {
      /** @type {Array} */
      seen = [];
      callback = createCallback(callback, value);
    }
    for (;++index < n;) {
      value = array[index];
      var computed = callback ? callback(value, index, array) : value;
      if (defaultCompare) {
        /** @type {string} */
        var key = computed + "";
        /** @type {(Array|boolean)} */
        key = hasOwnProperty.call(cache, key) ? !(seen = cache[key]) : seen = cache[key] = [];
      }
      if (length ? !index || seen[seen.length - 1] !== computed : key || 0 > indexOf(seen, computed)) {
        if (callback || defaultCompare) {
          seen.push(computed);
        }
        result.push(value);
      }
    }
    return result;
  }
  /**
   * @param {string} type
   * @param {Function} name
   * @return {?}
   */
  function bind(type, name) {
    return isBindFast || nativeBind && 2 < arguments.length ? nativeBind.call.apply(nativeBind, arguments) : log(type, name, slice(arguments, 2));
  }
  /**
   * @param {Function} fn
   * @return {?}
   */
  function defer(fn) {
    var args = slice(arguments, 1);
    return setTimeout(function() {
      fn.apply(obj, args);
    }, 1);
  }
  /**
   * @param {(RegExp|string)} value
   * @return {?}
   */
  function identity(value) {
    return value;
  }
  /**
   * @param {Object} object
   * @return {undefined}
   */
  function mixin(object) {
    forEach(functions(object), function(methodName) {
      var func = lodash[methodName] = object[methodName];
      /**
       * @return {?}
       */
      lodash.prototype[methodName] = function() {
        /** @type {Array} */
        var args = [this.__wrapped__];
        push.apply(args, arguments);
        return new lodash(func.apply(lodash, args));
      };
    });
  }
  /**
   * @return {?}
   */
  function wrapperValueOf() {
    return this.__wrapped__;
  }
  var freeExports = "object" == typeof exports && exports;
  var freeModule = "object" == typeof module && (module && (module.exports == freeExports && module));
  var freeGlobal = "object" == typeof global && global;
  if (freeGlobal.global === freeGlobal) {
    optgroup = freeGlobal;
  }
  /** @type {Array} */
  var ArrayProto = [];
  var ObjectProto = {};
  /** @type {number} */
  var rightId = 0;
  var restoreScript = ObjectProto;
  /** @type {number} */
  var largeArraySize = 30;
  var previousUnderscore = optgroup._;
  /** @type {RegExp} */
  var rclass = /&(?:amp|lt|gt|quot|#39);/g;
  /** @type {RegExp} */
  var rreturn = /\b__p \+= '';/g;
  /** @type {RegExp} */
  var rSlash = /\b(__p \+=) '' \+/g;
  /** @type {RegExp} */
  var badChars = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
  /** @type {RegExp} */
  var rtagName = /\w*$/;
  /** @type {RegExp} */
  var reNative = RegExp("^" + (ObjectProto.valueOf + "").replace(/[.*+?^${}()|[\]\\]/g, "\\$&").replace(/valueOf|for [^\]]+/g, ".+?") + "$");
  /** @type {RegExp} */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
  /** @type {RegExp} */
  var reInterpolate = /<%=([\s\S]+?)%>/g;
  /** @type {RegExp} */
  var reNoMatch = /($^)/;
  /** @type {RegExp} */
  var r20 = /[&<>"']/g;
  /** @type {RegExp} */
  var escaper = /['\n\r\t\u2028\u2029\\]/g;
  /** @type {number} */
  var db = 0;
  /** @type {function (*): number} */
  var ceil = Math.ceil;
  /** @type {function (this:*, ...[*]): Array} */
  var concat = ArrayProto.concat;
  /** @type {function (*): number} */
  var floor = Math.floor;
  /** @type {(boolean|function (Object): (Object|null))} */
  var getPrototypeOf = reNative.test(getPrototypeOf = Object.getPrototypeOf) && getPrototypeOf;
  /** @type {function (this:Object, *): boolean} */
  var hasOwnProperty = ObjectProto.hasOwnProperty;
  /** @type {function (this:(Array.<T>|{length: number}), ...[T]): number} */
  var push = ArrayProto.push;
  /** @type {function (this:*): string} */
  var toString = ObjectProto.toString;
  /** @type {(boolean|function (?, ?=, ?=, ?=): function (...[?]): ?)} */
  var nativeBind = reNative.test(nativeBind = slice.bind) && nativeBind;
  /** @type {(boolean|function (*): boolean)} */
  var nativeIsArray = reNative.test(nativeIsArray = Array.isArray) && nativeIsArray;
  var nativeIsFinite = optgroup.isFinite;
  var nativeIsNaN = optgroup.isNaN;
  /** @type {(boolean|function (Object): Array.<string>)} */
  var nativeKeys = reNative.test(nativeKeys = Object.keys) && nativeKeys;
  /** @type {function (...[*]): number} */
  var nativeMax = Math.max;
  /** @type {function (...[*]): number} */
  var nativeMin = Math.min;
  /** @type {function (): number} */
  var nativeRandom = Math.random;
  /** @type {string} */
  var argsClass = "[object Arguments]";
  /** @type {string} */
  var arrayClass = "[object Array]";
  /** @type {string} */
  var boolClass = "[object Boolean]";
  /** @type {string} */
  var dateClass = "[object Date]";
  /** @type {string} */
  var numberClass = "[object Number]";
  /** @type {string} */
  var objectClass = "[object Object]";
  /** @type {string} */
  var regexpClass = "[object RegExp]";
  /** @type {string} */
  var stringClass = "[object String]";
  /** @type {boolean} */
  var isIeOpera = !!optgroup.attachEvent;
  /** @type {boolean} */
  var isV8 = nativeBind && !/\n|true/.test(nativeBind + isIeOpera);
  /** @type {boolean} */
  var isBindFast = nativeBind && !isV8;
  /** @type {boolean} */
  var isKeysFast = nativeKeys && (isIeOpera || isV8);
  var cloneableClasses = {
    "[object Function]" : false
  };
  /** @type {boolean} */
  cloneableClasses[argsClass] = cloneableClasses[arrayClass] = cloneableClasses[boolClass] = cloneableClasses[dateClass] = cloneableClasses[numberClass] = cloneableClasses[objectClass] = cloneableClasses[regexpClass] = cloneableClasses[stringClass] = true;
  var ctorByClass = {};
  /** @type {function (new:Array, ...[*]): Array} */
  ctorByClass[arrayClass] = Array;
  /** @type {function (new:Boolean, *=): boolean} */
  ctorByClass[boolClass] = Boolean;
  /** @type {function (new:Date, ?=, ?=, ?=, ?=, ?=, ?=, ?=): string} */
  ctorByClass[dateClass] = Date;
  /** @type {function (new:Object, *=): ?} */
  ctorByClass[objectClass] = Object;
  /** @type {function (new:Number, *=): number} */
  ctorByClass[numberClass] = Number;
  /** @type {function (new:RegExp, *=, *=): RegExp} */
  ctorByClass[regexpClass] = RegExp;
  /** @type {function (new:String, *=): string} */
  ctorByClass[stringClass] = String;
  var objectTypes = {
    "boolean" : false,
    "function" : true,
    object : true,
    number : false,
    string : false,
    undefined : false
  };
  var escapes = {
    "\\" : "\\",
    "'" : "'",
    "\n" : "n",
    "\r" : "r",
    "\t" : "t",
    "\u2028" : "u2028",
    "\u2029" : "u2029"
  };
  lodash.templateSettings = {
    escape : /<%-([\s\S]+?)%>/g,
    evaluate : /<%([\s\S]+?)%>/g,
    interpolate : reInterpolate,
    variable : "",
    imports : {
      /** @type {function (?): ?} */
      _ : lodash
    }
  };
  var defaultsIteratorOptions = {
    args : "object, source, guard",
    top : "var args = arguments,\n    argsIndex = 0,\n    argsLength = typeof guard == 'number' ? 2 : args.length;\nwhile (++argsIndex < argsLength) {\n  iterable = args[argsIndex];\n  if (iterable && objectTypes[typeof iterable]) {",
    loop : "if (typeof result[index] == 'undefined') result[index] = iterable[index]",
    bottom : "  }\n}"
  };
  var eachIteratorOptions = {
    args : "collection, callback, thisArg",
    top : "callback = callback && typeof thisArg == 'undefined' ? callback : createCallback(callback, thisArg)",
    arrays : "typeof length == 'number'",
    loop : "if (callback(iterable[index], index, collection) === false) return result"
  };
  var forOwnIteratorOptions = {
    top : "if (!objectTypes[typeof iterable]) return result;\n" + eachIteratorOptions.top,
    arrays : false
  };
  var baseEach = createIterator(eachIteratorOptions);
  var forIn = createIterator(eachIteratorOptions, forOwnIteratorOptions, {
    useHas : false
  });
  var forOwn = createIterator(eachIteratorOptions, forOwnIteratorOptions);
  /** @type {(boolean|function (*): boolean)} */
  var isArray = nativeIsArray || function(type) {
    return type instanceof Array || toString.call(type) == arrayClass;
  };
  /** @type {function (string): ?} */
  var Event = !nativeKeys ? shimKeys : function(type) {
    return!isObject(type) ? [] : nativeKeys(type);
  };
  var htmlEscapes = {
    "&" : "&amp;",
    "<" : "&lt;",
    ">" : "&gt;",
    '"' : "&quot;",
    "'" : "&#39;"
  };
  var htmlUnescapes = invert(htmlEscapes);
  var assign = createIterator(defaultsIteratorOptions, {
    top : defaultsIteratorOptions.top.replace(";", ";\nif (argsLength > 3 && typeof args[argsLength - 2] == 'function') {\n  var callback = createCallback(args[--argsLength - 1], args[argsLength--], 2);\n} else if (argsLength > 2 && typeof args[argsLength - 1] == 'function') {\n  callback = args[--argsLength];\n}"),
    loop : "result[index] = callback ? callback(result[index], iterable[index]) : iterable[index]"
  });
  var extend = createIterator(defaultsIteratorOptions);
  if (isFunction(/x/)) {
    /**
     * @param {string} type
     * @return {?}
     */
    isFunction = function(type) {
      return type instanceof Function || "[object Function]" == toString.call(type);
    };
  }
  /**
   * @param {boolean} value
   * @return {?}
   */
  var isPlainObject = function(value) {
    if (!(value && "object" == typeof value)) {
      return false;
    }
    var ctor = value.valueOf;
    var objProto = "function" == typeof ctor && ((objProto = getPrototypeOf(ctor)) && getPrototypeOf(objProto));
    if (objProto) {
      /** @type {boolean} */
      value = value == objProto || getPrototypeOf(value) == objProto && !isArguments(value);
    } else {
      /** @type {boolean} */
      var key = false;
      if (!(value && "object" == typeof value) || isArguments(value)) {
        value = key;
      } else {
        ctor = value.constructor;
        if (!isFunction(ctor) || ctor instanceof ctor) {
          forIn(value, function(dataAndEvents, pair) {
            /** @type {boolean} */
            key = pair;
          });
          /** @type {boolean} */
          value = false === key || hasOwnProperty.call(value, key);
        } else {
          value = key;
        }
      }
    }
    return value;
  };
  if (isV8) {
    if (freeModule && "function" == typeof setImmediate) {
      defer = bind(setImmediate, optgroup);
    }
  }
  /**
   * @param {string} fn
   * @param {Function} next
   * @return {?}
   */
  lodash.after = function(fn, next) {
    return 1 > fn ? next() : function() {
      if (1 > --fn) {
        return next.apply(this, arguments);
      }
    };
  };
  lodash.assign = assign;
  /**
   * @param {string} type
   * @return {?}
   */
  lodash.at = function(type) {
    /** @type {number} */
    var i = -1;
    /** @type {Array} */
    var keys = concat.apply(ArrayProto, slice(arguments, 1));
    /** @type {number} */
    var length = keys.length;
    /** @type {Array} */
    var result = Array(length);
    for (;++i < length;) {
      result[i] = type[keys[i]];
    }
    return result;
  };
  /** @type {function (string, Function): ?} */
  lodash.bind = bind;
  /**
   * @param {Function} optgroup
   * @return {?}
   */
  lodash.bindAll = function(optgroup) {
    /** @type {Array} */
    var keys = concat.apply(ArrayProto, arguments);
    /** @type {number} */
    var a = 1 < keys.length ? 0 : (keys = functions(optgroup), -1);
    /** @type {number} */
    var len = keys.length;
    for (;++a < len;) {
      var i = keys[a];
      optgroup[i] = bind(optgroup[i], optgroup);
    }
    return optgroup;
  };
  /**
   * @param {(Function|string)} name
   * @param {(Function|string)} key
   * @return {?}
   */
  lodash.bindKey = function(name, key) {
    return log(name, key, slice(arguments, 2));
  };
  /**
   * @param {Object} array
   * @return {?}
   */
  lodash.compact = function(array) {
    /** @type {number} */
    var index = -1;
    var length = array ? array.length : 0;
    /** @type {Array} */
    var _results = [];
    for (;++index < length;) {
      var item = array[index];
      if (item) {
        _results.push(item);
      }
    }
    return _results;
  };
  /**
   * @return {?}
   */
  lodash.compose = function() {
    /** @type {Arguments} */
    var funcs = arguments;
    return function() {
      /** @type {Arguments} */
      var args = arguments;
      /** @type {number} */
      var length = funcs.length;
      for (;length--;) {
        /** @type {Array} */
        args = [funcs[length].apply(this, args)];
      }
      return args[0];
    };
  };
  /**
   * @param {Function} attributes
   * @param {Text} callback
   * @param {string} thisArg
   * @return {?}
   */
  lodash.countBy = function(attributes, callback, thisArg) {
    var result = {};
    callback = createCallback(callback, thisArg);
    forEach(attributes, function(error, key, arg) {
      key = callback(error, key, arg) + "";
      if (hasOwnProperty.call(result, key)) {
        result[key]++;
      } else {
        /** @type {number} */
        result[key] = 1;
      }
    });
    return result;
  };
  /**
   * @param {Function} func
   * @param {?} wait
   * @param {boolean} immediate
   * @return {?}
   */
  lodash.debounce = function(func, wait, immediate) {
    /**
     * @return {undefined}
     */
    function delayed() {
      /** @type {null} */
      timeoutId = null;
      if (!immediate) {
        result = func.apply(context, args);
      }
    }
    var args;
    var result;
    var context;
    var timeoutId;
    return function() {
      var callNow = immediate && !timeoutId;
      /** @type {Arguments} */
      args = arguments;
      context = this;
      clearTimeout(timeoutId);
      /** @type {number} */
      timeoutId = setTimeout(delayed, wait);
      if (callNow) {
        result = func.apply(context, args);
      }
      return result;
    };
  };
  lodash.defaults = extend;
  lodash.defer = defer;
  /**
   * @param {string} type
   * @param {Function} name
   * @return {?}
   */
  lodash.delay = function(type, name) {
    var args = slice(arguments, 2);
    return setTimeout(function() {
      type.apply(obj, args);
    }, name);
  };
  /**
   * @param {Object} array
   * @return {?}
   */
  lodash.difference = function(array) {
    /** @type {number} */
    var index = -1;
    var length = array ? array.length : 0;
    /** @type {Array} */
    var ret = concat.apply(ArrayProto, arguments);
    ret = cachedContains(ret, length);
    /** @type {Array} */
    var result = [];
    for (;++index < length;) {
      var value = array[index];
      if (!ret(value)) {
        result.push(value);
      }
    }
    return result;
  };
  /** @type {function (string, Function, Function): ?} */
  lodash.filter = filter;
  /** @type {function (Object, boolean): ?} */
  lodash.flatten = flatten;
  /** @type {function (Function, Function, Object): ?} */
  lodash.forEach = forEach;
  lodash.forIn = forIn;
  lodash.forOwn = forOwn;
  /** @type {function (Function): ?} */
  lodash.functions = functions;
  /**
   * @param {Function} attributes
   * @param {Text} callback
   * @param {string} thisArg
   * @return {?}
   */
  lodash.groupBy = function(attributes, callback, thisArg) {
    var result = {};
    callback = createCallback(callback, thisArg);
    forEach(attributes, function(error, key, arg) {
      key = callback(error, key, arg) + "";
      (hasOwnProperty.call(result, key) ? result[key] : result[key] = []).push(error);
    });
    return result;
  };
  /**
   * @param {Object} array
   * @param {string} callback
   * @param {Object} thisArg
   * @return {?}
   */
  lodash.initial = function(array, callback, thisArg) {
    if (!array) {
      return[];
    }
    /** @type {number} */
    var n = 0;
    var length = array.length;
    if ("number" != typeof callback && null != callback) {
      var index = length;
      callback = createCallback(callback, thisArg);
      for (;index-- && callback(array[index], index, array);) {
        n++;
      }
    } else {
      n = null == callback || thisArg ? 1 : callback || n;
    }
    return slice(array, 0, nativeMin(nativeMax(0, length - n), length));
  };
  /**
   * @param {Object} array
   * @return {?}
   */
  lodash.intersection = function(array) {
    /** @type {Arguments} */
    var fns = arguments;
    /** @type {number} */
    var len = fns.length;
    var nodes = {
      0 : {}
    };
    /** @type {number} */
    var index = -1;
    var length = array ? array.length : 0;
    /** @type {boolean} */
    var j = 100 <= length;
    /** @type {Array} */
    var result = [];
    /** @type {Array} */
    var seen = result;
    a: for (;++index < length;) {
      var value = array[index];
      if (j) {
        /** @type {string} */
        var key = value + "";
        /** @type {(Array|boolean)} */
        key = hasOwnProperty.call(nodes[0], key) ? !(seen = nodes[0][key]) : seen = nodes[0][key] = [];
      }
      if (key || 0 > indexOf(seen, value)) {
        if (j) {
          seen.push(value);
        }
        /** @type {number} */
        var i = len;
        for (;--i;) {
          if (!(nodes[i] || (nodes[i] = cachedContains(fns[i], 0, 100)))(value)) {
            continue a;
          }
        }
        result.push(value);
      }
    }
    return result;
  };
  /** @type {function (string): ?} */
  lodash.invert = invert;
  /**
   * @param {Object} collection
   * @param {string} method
   * @return {?}
   */
  lodash.invoke = function(collection, method) {
    var args = slice(arguments, 2);
    /** @type {number} */
    var ri = -1;
    /** @type {boolean} */
    var isFunc = "function" == typeof method;
    var length = collection ? collection.length : 0;
    /** @type {Array} */
    var result = Array("number" == typeof length ? length : 0);
    forEach(collection, function(value) {
      result[++ri] = (isFunc ? method : value[method]).apply(value, args);
    });
    return result;
  };
  /** @type {function (string): ?} */
  lodash.keys = Event;
  /** @type {function (Object, Function, string): ?} */
  lodash.map = map;
  /** @type {function (number, Function, number): ?} */
  lodash.max = max;
  /**
   * @param {Function} matcherFunction
   * @param {Function} resolver
   * @return {?}
   */
  lodash.memoize = function(matcherFunction, resolver) {
    var cache = {};
    return function() {
      var key = (resolver ? resolver.apply(this, arguments) : arguments[0]) + "";
      return hasOwnProperty.call(cache, key) ? cache[key] : cache[key] = matcherFunction.apply(this, arguments);
    };
  };
  /** @type {function (Object, ?, ?): ?} */
  lodash.merge = merge;
  /**
   * @param {number} recurring
   * @param {Function} callback
   * @param {number} thisArg
   * @return {?}
   */
  lodash.min = function(recurring, callback, thisArg) {
    /** @type {number} */
    var computed = Infinity;
    var result = computed;
    if (!callback && isArray(recurring)) {
      /** @type {number} */
      thisArg = -1;
      var cnl = recurring.length;
      for (;++thisArg < cnl;) {
        var subKey = recurring[thisArg];
        if (subKey < result) {
          result = subKey;
        }
      }
    } else {
      callback = !callback && isString(recurring) ? charAtCallback : createCallback(callback, thisArg);
      baseEach(recurring, function(value, current, array) {
        current = callback(value, current, array);
        if (current < computed) {
          /** @type {number} */
          computed = current;
          /** @type {(Object|string)} */
          result = value;
        }
      });
    }
    return result;
  };
  /**
   * @param {Object} keys
   * @param {Array} values
   * @return {?}
   */
  lodash.object = function(keys, values) {
    /** @type {number} */
    var index = -1;
    var length = keys ? keys.length : 0;
    var result = {};
    for (;++index < length;) {
      var key = keys[index];
      if (values) {
        result[key] = values[index];
      } else {
        result[key[0]] = key[1];
      }
    }
    return result;
  };
  /**
   * @param {?} obj
   * @param {Text} callback
   * @param {string} thisArg
   * @return {?}
   */
  lodash.omit = function(obj, callback, thisArg) {
    /** @type {boolean} */
    var fn = "function" == typeof callback;
    var result = {};
    if (fn) {
      callback = createCallback(callback, thisArg);
    } else {
      /** @type {Array} */
      var props = concat.apply(ArrayProto, arguments)
    }
    forIn(obj, function(value, key, arg) {
      if (fn ? !callback(value, key, arg) : 0 > indexOf(props, key, 1)) {
        result[key] = value;
      }
    });
    return result;
  };
  /**
   * @param {string} type
   * @return {?}
   */
  lodash.once = function(type) {
    var b;
    var memo;
    return function() {
      if (b) {
        return memo;
      }
      /** @type {boolean} */
      b = true;
      memo = type.apply(this, arguments);
      /** @type {null} */
      type = null;
      return memo;
    };
  };
  /**
   * @param {string} cycle
   * @return {?}
   */
  lodash.pairs = function(cycle) {
    /** @type {number} */
    var index = -1;
    var funcs = Event(cycle);
    var length = funcs.length;
    /** @type {Array} */
    var result = Array(length);
    for (;++index < length;) {
      var key = funcs[index];
      /** @type {Array} */
      result[index] = [key, cycle[key]];
    }
    return result;
  };
  /**
   * @param {(Function|string)} path
   * @return {?}
   */
  lodash.partial = function(path) {
    return log(path, slice(arguments, 1));
  };
  /**
   * @param {(Function|string)} s
   * @return {?}
   */
  lodash.partialRight = function(s) {
    return log(s, slice(arguments, 1), null, restoreScript);
  };
  /**
   * @param {Object} object
   * @param {(Array|string)} callback
   * @param {string} thisArg
   * @return {?}
   */
  lodash.pick = function(object, callback, thisArg) {
    var result = {};
    if ("function" != typeof callback) {
      /** @type {number} */
      var index = 0;
      /** @type {Array} */
      var props = concat.apply(ArrayProto, arguments);
      /** @type {number} */
      var length = isObject(object) ? props.length : 0;
      for (;++index < length;) {
        var prop = props[index];
        if (prop in object) {
          result[prop] = object[prop];
        }
      }
    } else {
      callback = createCallback(callback, thisArg);
      forIn(object, function(value, key, arg) {
        if (callback(value, key, arg)) {
          result[key] = value;
        }
      });
    }
    return result;
  };
  /** @type {function (Object, Function, string): ?} */
  lodash.pluck = map;
  /**
   * @param {number} start
   * @param {number} length
   * @param {number} step
   * @return {?}
   */
  lodash.range = function(start, length, step) {
    /** @type {number} */
    start = +start || 0;
    /** @type {number} */
    step = +step || 1;
    if (null == length) {
      /** @type {number} */
      length = start;
      /** @type {number} */
      start = 0;
    }
    /** @type {number} */
    var index = -1;
    /** @type {number} */
    length = nativeMax(0, ceil((length - start) / step));
    /** @type {Array} */
    var result = Array(length);
    for (;++index < length;) {
      /** @type {number} */
      result[index] = start;
      start += step;
    }
    return result;
  };
  /**
   * @param {string} cycle
   * @param {Text} callback
   * @param {string} thisArg
   * @return {?}
   */
  lodash.reject = function(cycle, callback, thisArg) {
    callback = createCallback(callback, thisArg);
    return filter(cycle, function(basis, mongoObject, arg) {
      return!callback(basis, mongoObject, arg);
    });
  };
  /** @type {function (Object, ?, Object): ?} */
  lodash.rest = rest;
  /**
   * @param {Object} attributes
   * @return {?}
   */
  lodash.shuffle = function(attributes) {
    /** @type {number} */
    var index = -1;
    var options = attributes ? attributes.length : 0;
    /** @type {Array} */
    var result = Array("number" == typeof options ? options : 0);
    forEach(attributes, function(value) {
      /** @type {number} */
      var rand = floor(nativeRandom() * (++index + 1));
      result[index] = result[rand];
      result[rand] = value;
    });
    return result;
  };
  /**
   * @param {Object} attributes
   * @param {Function} callback
   * @param {string} thisArg
   * @return {?}
   */
  lodash.sortBy = function(attributes, callback, thisArg) {
    /** @type {number} */
    var index = -1;
    var length = attributes ? attributes.length : 0;
    /** @type {Array} */
    var result = Array("number" == typeof length ? length : 0);
    callback = createCallback(callback, thisArg);
    forEach(attributes, function(value, key, collection) {
      result[++index] = {
        criteria : callback(value, key, collection),
        index : index,
        value : value
      };
    });
    /** @type {number} */
    length = result.length;
    result.sort(compareAscending);
    for (;length--;) {
      result[length] = result[length].value;
    }
    return result;
  };
  /**
   * @param {?} obj
   * @param {?} interceptor
   * @return {?}
   */
  lodash.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };
  /**
   * @param {Function} func
   * @param {string} wait
   * @return {?}
   */
  lodash.throttle = function(func, wait) {
    /**
     * @return {undefined}
     */
    function later() {
      /** @type {Date} */
      previous = new Date;
      /** @type {null} */
      timeout = null;
      result = func.apply(context, args);
    }
    var args;
    var result;
    var context;
    var timeout;
    /** @type {number} */
    var previous = 0;
    return function() {
      /** @type {Date} */
      var now = new Date;
      /** @type {number} */
      var remaining = wait - (now - previous);
      /** @type {Arguments} */
      args = arguments;
      context = this;
      if (0 >= remaining) {
        clearTimeout(timeout);
        /** @type {null} */
        timeout = null;
        /** @type {Date} */
        previous = now;
        result = func.apply(context, args);
      } else {
        if (!timeout) {
          /** @type {number} */
          timeout = setTimeout(later, remaining);
        }
      }
      return result;
    };
  };
  /**
   * @param {number} n
   * @param {Function} callback
   * @param {Object} thisArg
   * @return {?}
   */
  lodash.times = function(n, callback, thisArg) {
    /** @type {number} */
    n = +n || 0;
    /** @type {number} */
    var index = -1;
    /** @type {Array} */
    var result = Array(n);
    for (;++index < n;) {
      result[index] = callback.call(thisArg, index);
    }
    return result;
  };
  /**
   * @param {string} obj
   * @return {?}
   */
  lodash.toArray = function(obj) {
    return obj && "number" == typeof obj.length ? slice(obj) : values(obj);
  };
  /**
   * @return {?}
   */
  lodash.union = function() {
    return uniq(concat.apply(ArrayProto, arguments));
  };
  /** @type {function (Object, boolean, boolean, boolean): ?} */
  lodash.uniq = uniq;
  /** @type {function (string): ?} */
  lodash.values = values;
  /** @type {function (string, Function, Function): ?} */
  lodash.where = filter;
  /**
   * @param {Object} array
   * @return {?}
   */
  lodash.without = function(array) {
    /** @type {number} */
    var index = -1;
    var length = array ? array.length : 0;
    var contains = cachedContains(arguments, 1);
    /** @type {Array} */
    var result = [];
    for (;++index < length;) {
      var value = array[index];
      if (!contains(value)) {
        result.push(value);
      }
    }
    return result;
  };
  /**
   * @param {string} value
   * @param {Function} wrapper
   * @return {?}
   */
  lodash.wrap = function(value, wrapper) {
    return function() {
      /** @type {Array} */
      var args = [value];
      push.apply(args, arguments);
      return wrapper.apply(this, args);
    };
  };
  /**
   * @param {(Object|string)} array
   * @return {?}
   */
  lodash.zip = function(array) {
    /** @type {number} */
    var index = -1;
    var length = array ? max(map(arguments, "length")) : 0;
    /** @type {Array} */
    var result = Array(length);
    for (;++index < length;) {
      result[index] = map(arguments, index);
    }
    return result;
  };
  /** @type {function (Object, Function, string): ?} */
  lodash.collect = map;
  /** @type {function (Object, ?, Object): ?} */
  lodash.drop = rest;
  /** @type {function (Function, Function, Object): ?} */
  lodash.each = forEach;
  lodash.extend = assign;
  /** @type {function (Function): ?} */
  lodash.methods = functions;
  /** @type {function (string, Function, Function): ?} */
  lodash.select = filter;
  /** @type {function (Object, ?, Object): ?} */
  lodash.tail = rest;
  /** @type {function (Object, boolean, boolean, boolean): ?} */
  lodash.unique = uniq;
  mixin(lodash);
  /** @type {function (Object, boolean, boolean, boolean, Object, Object): ?} */
  lodash.clone = clone;
  /**
   * @param {Object} dataAndEvents
   * @param {boolean} node
   * @param {boolean} next_callback
   * @return {?}
   */
  lodash.cloneDeep = function(dataAndEvents, node, next_callback) {
    return clone(dataAndEvents, true, node, next_callback);
  };
  /** @type {function (Object, ?, number): ?} */
  lodash.contains = contains;
  /**
   * @param {string} type
   * @return {?}
   */
  lodash.escape = function(type) {
    return null == type ? "" : (type + "").replace(r20, tokenizeInterpolate);
  };
  /** @type {function (string, Text, Object): ?} */
  lodash.every = every;
  /** @type {function (string, Object, (Array|string)): ?} */
  lodash.find = find;
  /**
   * @param {Object} object
   * @param {?} property
   * @return {?}
   */
  lodash.has = function(object, property) {
    return object ? hasOwnProperty.call(object, property) : false;
  };
  /** @type {function ((RegExp|string)): ?} */
  lodash.identity = identity;
  /** @type {function (string, string, number): ?} */
  lodash.indexOf = indexOf;
  /** @type {function (boolean): ?} */
  lodash.isArguments = isArguments;
  /** @type {(boolean|function (*): boolean)} */
  lodash.isArray = isArray;
  /**
   * @param {boolean} value
   * @return {?}
   */
  lodash.isBoolean = function(value) {
    return true === value || (false === value || toString.call(value) == boolClass);
  };
  /**
   * @param {?} value
   * @return {?}
   */
  lodash.isDate = function(value) {
    return value instanceof Date || toString.call(value) == dateClass;
  };
  /**
   * @param {Object} obj
   * @return {?}
   */
  lodash.isElement = function(obj) {
    return obj ? 1 === obj.nodeType : false;
  };
  /**
   * @param {?} attributes
   * @return {?}
   */
  lodash.isEmpty = function(attributes) {
    /** @type {boolean} */
    var result = true;
    if (!attributes) {
      return result;
    }
    /** @type {string} */
    var className = toString.call(attributes);
    var len = attributes.length;
    if (className == arrayClass || (className == stringClass || className == argsClass || className == objectClass && ("number" == typeof len && isFunction(attributes.splice)))) {
      return!len;
    }
    forOwn(attributes, function() {
      return result = false;
    });
    return result;
  };
  /** @type {function (?, ?, (Array|string), string, Object, Object): ?} */
  lodash.isEqual = baseIsEqual;
  /**
   * @param {?} value
   * @return {?}
   */
  lodash.isFinite = function(value) {
    return nativeIsFinite(value) && !nativeIsNaN(parseFloat(value));
  };
  /** @type {function (string): ?} */
  lodash.isFunction = isFunction;
  /**
   * @param {number} obj
   * @return {?}
   */
  lodash.isNaN = function(obj) {
    return isNumber(obj) && obj != +obj;
  };
  /**
   * @param {number} obj
   * @return {?}
   */
  lodash.isNull = function(obj) {
    return null === obj;
  };
  /** @type {function (number): ?} */
  lodash.isNumber = isNumber;
  /** @type {function (Object): ?} */
  lodash.isObject = isObject;
  /** @type {function (boolean): ?} */
  lodash.isPlainObject = isPlainObject;
  /**
   * @param {?} value
   * @return {?}
   */
  lodash.isRegExp = function(value) {
    return value instanceof RegExp || toString.call(value) == regexpClass;
  };
  /** @type {function (Object): ?} */
  lodash.isString = isString;
  /**
   * @param {?} obj
   * @return {?}
   */
  lodash.isUndefined = function(obj) {
    return "undefined" == typeof obj;
  };
  /**
   * @param {Object} array
   * @param {number} value
   * @param {number} recurring
   * @return {?}
   */
  lodash.lastIndexOf = function(array, value, recurring) {
    var index = array ? array.length : 0;
    if ("number" == typeof recurring) {
      /** @type {number} */
      index = (0 > recurring ? nativeMax(0, index + recurring) : nativeMin(recurring, index - 1)) + 1;
    }
    for (;index--;) {
      if (array[index] === value) {
        return index;
      }
    }
    return-1;
  };
  /** @type {function (Object): undefined} */
  lodash.mixin = mixin;
  /**
   * @return {?}
   */
  lodash.noConflict = function() {
    optgroup._ = previousUnderscore;
    return this;
  };
  /**
   * @param {number} min
   * @param {number} max
   * @return {?}
   */
  lodash.random = function(min, max) {
    if (null == min) {
      if (null == max) {
        /** @type {number} */
        max = 1;
      }
    }
    /** @type {number} */
    min = +min || 0;
    if (null == max) {
      /** @type {number} */
      max = min;
      /** @type {number} */
      min = 0;
    }
    return min + floor(nativeRandom() * ((+max || 0) - min + 1));
  };
  /** @type {function (Object, (Array|string), number, string): ?} */
  lodash.reduce = reduce;
  /** @type {function (string, Text, Text, string): ?} */
  lodash.reduceRight = reduceRight;
  /**
   * @param {string} type
   * @param {Function} name
   * @return {?}
   */
  lodash.result = function(type, name) {
    var t = type ? type[name] : obj;
    return isFunction(t) ? type[name]() : t;
  };
  /**
   * @param {string} type
   * @return {?}
   */
  lodash.size = function(type) {
    var options = type ? type.length : 0;
    return "number" == typeof options ? options : Event(type).length;
  };
  /** @type {function (string, (Array|string), Object): ?} */
  lodash.some = some;
  /** @type {function (Object, (Node|string), (Object|string), Object): ?} */
  lodash.sortedIndex = sortedIndex;
  /**
   * @param {string} text
   * @param {?} opt_attributes
   * @param {Object} options
   * @return {?}
   */
  lodash.template = function(text, opt_attributes, options) {
    var defaults = lodash.templateSettings;
    if (!text) {
      /** @type {string} */
      text = "";
    }
    options = extend({}, options, defaults);
    var cycle = extend({}, options.imports, defaults.imports);
    defaults = Event(cycle);
    cycle = values(cycle);
    var isEvaluating;
    /** @type {number} */
    var index = 0;
    var interpolate = options.interpolate || reNoMatch;
    /** @type {string} */
    var source = "__p += '";
    text.replace(RegExp((options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$", "g"), function(match, dataAndEvents, $timeout, _$timeout_, deepDataAndEvents, offset) {
      if (!$timeout) {
        /** @type {string} */
        $timeout = _$timeout_;
      }
      source += text.slice(index, offset).replace(escaper, escapeStringChar);
      if (dataAndEvents) {
        source += "' +\n__e(" + dataAndEvents + ") +\n'";
      }
      if (deepDataAndEvents) {
        /** @type {boolean} */
        isEvaluating = true;
        source += "';\n" + deepDataAndEvents + ";\n__p += '";
      }
      if ($timeout) {
        source += "' +\n((__t = (" + $timeout + ")) == null ? '' : __t) +\n'";
      }
      index = offset + match.length;
      return match;
    });
    source = source + "';\n";
    var isSym = interpolate = options.variable;
    if (!isSym) {
      /** @type {string} */
      interpolate = "obj";
      /** @type {string} */
      source = "with (" + interpolate + ") {\n" + source + "\n}\n";
    }
    source = (isEvaluating ? source.replace(rreturn, "") : source).replace(rSlash, "$1").replace(badChars, "$1;");
    /** @type {string} */
    source = "function(" + interpolate + ") {\n" + (isSym ? "" : interpolate + " || (" + interpolate + " = {});\n") + "var __t, __p = '', __e = _.escape" + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
    /** @type {string} */
    options = "\n/*\n//@ sourceURL=" + (options.sourceURL || "/lodash/template/source[" + db++ + "]") + "\n*/";
    try {
      var e = Function(defaults, "return " + source + options).apply(obj, cycle);
    } catch (details) {
      throw details.source = source, details;
    }
    if (opt_attributes) {
      return e(opt_attributes);
    }
    e.source = source;
    return e;
  };
  /**
   * @param {(number|string)} s
   * @return {?}
   */
  lodash.unescape = function(s) {
    return null == s ? "" : (s + "").replace(rclass, tokenizeEvaluate);
  };
  /**
   * @param {(number|string)} n
   * @return {?}
   */
  lodash.uniqueId = function(n) {
    /** @type {number} */
    var id = ++rightId;
    return(null == n ? "" : n + "") + id;
  };
  /** @type {function (string, Text, Object): ?} */
  lodash.all = every;
  /** @type {function (string, (Array|string), Object): ?} */
  lodash.any = some;
  /** @type {function (string, Object, (Array|string)): ?} */
  lodash.detect = find;
  /** @type {function (Object, (Array|string), number, string): ?} */
  lodash.foldl = reduce;
  /** @type {function (string, Text, Text, string): ?} */
  lodash.foldr = reduceRight;
  /** @type {function (Object, ?, number): ?} */
  lodash.include = contains;
  /** @type {function (Object, (Array|string), number, string): ?} */
  lodash.inject = reduce;
  forOwn(lodash, function(func, methodName) {
    if (!lodash.prototype[methodName]) {
      /**
       * @return {?}
       */
      lodash.prototype[methodName] = function() {
        /** @type {Array} */
        var args = [this.__wrapped__];
        push.apply(args, arguments);
        return func.apply(lodash, args);
      };
    }
  });
  /** @type {function (string, Function, Function): ?} */
  lodash.first = first;
  /**
   * @param {string} type
   * @param {Function} name
   * @param {Function} types
   * @return {?}
   */
  lodash.last = function(type, name, types) {
    if (type) {
      /** @type {number} */
      var n = 0;
      var length = type.length;
      if ("number" != typeof name && null != name) {
        var len = length;
        name = createCallback(name, types);
        for (;len-- && name(type[len], len, type);) {
          n++;
        }
      } else {
        if (n = name, null == n || types) {
          return type[length - 1];
        }
      }
      return slice(type, nativeMax(0, length - n));
    }
  };
  /** @type {function (string, Function, Function): ?} */
  lodash.take = first;
  /** @type {function (string, Function, Function): ?} */
  lodash.head = first;
  forOwn(lodash, function(func, methodName) {
    if (!lodash.prototype[methodName]) {
      /**
       * @param {number} callback
       * @param {boolean} data
       * @return {?}
       */
      lodash.prototype[methodName] = function(callback, data) {
        var result = func(this.__wrapped__, callback, data);
        return null == callback || data && "function" != typeof callback ? result : new lodash(result);
      };
    }
  });
  /** @type {string} */
  lodash.VERSION = "1.0.1";
  /**
   * @return {?}
   */
  lodash.prototype.toString = function() {
    return this.__wrapped__ + "";
  };
  /** @type {function (): ?} */
  lodash.prototype.value = wrapperValueOf;
  /** @type {function (): ?} */
  lodash.prototype.valueOf = wrapperValueOf;
  baseEach(["join", "pop", "shift"], function(methodName) {
    var func = ArrayProto[methodName];
    /**
     * @return {?}
     */
    lodash.prototype[methodName] = function() {
      return func.apply(this.__wrapped__, arguments);
    };
  });
  baseEach(["push", "reverse", "sort", "unshift"], function(methodName) {
    var func = ArrayProto[methodName];
    /**
     * @return {?}
     */
    lodash.prototype[methodName] = function() {
      func.apply(this.__wrapped__, arguments);
      return this;
    };
  });
  baseEach(["concat", "slice", "splice"], function(methodName) {
    var func = ArrayProto[methodName];
    /**
     * @return {?}
     */
    lodash.prototype[methodName] = function() {
      return new lodash(func.apply(this.__wrapped__, arguments));
    };
  });
  if ("function" == typeof define && ("object" == typeof define.amd && define.amd)) {
    /** @type {function (?): ?} */
    optgroup._ = lodash;
    define(function() {
      return lodash;
    });
  } else {
    if (freeExports) {
      if (freeModule) {
        /** @type {function (?): ?} */
        (freeModule.exports = lodash)._ = lodash;
      } else {
        /** @type {function (?): ?} */
        freeExports._ = lodash;
      }
    } else {
      /** @type {function (?): ?} */
      optgroup._ = lodash;
    }
  }
})(this);
(function() {
  var root = this;
  var previousBackbone = root.Backbone;
  /** @type {Array} */
  var self = [];
  /** @type {function (this:(Array.<T>|{length: number}), ...[T]): number} */
  var wrapper = self.push;
  /** @type {function (this:(Array.<T>|string|{length: number}), *=, *=): Array.<T>} */
  var __slice = self.slice;
  /** @type {function (this:(Array.<T>|{length: number}), *=, *=, ...[T]): Array.<T>} */
  var fn = self.splice;
  var Backbone;
  Backbone = "undefined" !== typeof exports ? exports : root.Backbone = {};
  /** @type {string} */
  Backbone.VERSION = "1.0.0";
  var _ = root._;
  if (!_) {
    if ("undefined" !== typeof require) {
      _ = require("underscore");
    }
  }
  Backbone.$ = root.jQuery || (root.Zepto || (root.ender || root.$));
  /**
   * @return {?}
   */
  Backbone.noConflict = function() {
    root.Backbone = previousBackbone;
    return this;
  };
  /** @type {boolean} */
  Backbone.emulateHTTP = false;
  /** @type {boolean} */
  Backbone.emulateJSON = false;
  var Events = Backbone.Events = {
    /**
     * @param {string} type
     * @param {Function} name
     * @param {Function} types
     * @return {?}
     */
    on : function(type, name, types) {
      if (!eventsApi(this, "on", type, [name, types]) || !name) {
        return this;
      }
      if (!this._events) {
        this._events = {};
      }
      (this._events[type] || (this._events[type] = [])).push({
        /** @type {Function} */
        callback : name,
        /** @type {Function} */
        context : types,
        ctx : types || this
      });
      return this;
    },
    /**
     * @param {string} type
     * @param {Function} name
     * @param {Function} types
     * @return {?}
     */
    once : function(type, name, types) {
      if (!eventsApi(this, "once", type, [name, types]) || !name) {
        return this;
      }
      var Events = this;
      var optgroup = _.once(function() {
        Events.off(type, optgroup);
        name.apply(this, arguments);
      });
      /** @type {Function} */
      optgroup._callback = name;
      return this.on(type, optgroup, types);
    },
    /**
     * @param {string} type
     * @param {Object} callback
     * @param {string} context
     * @return {?}
     */
    off : function(type, callback, context) {
      var retain;
      var ev;
      var list;
      var events;
      var j;
      var k;
      var _i;
      var _len;
      if (!this._events || !eventsApi(this, "off", type, [callback, context])) {
        return this;
      }
      if (!type && (!callback && !context)) {
        return this._events = {}, this;
      }
      events = type ? [type] : _.keys(this._events);
      /** @type {number} */
      j = 0;
      k = events.length;
      for (;j < k;j++) {
        if (type = events[j], list = this._events[type]) {
          /** @type {Array} */
          this._events[type] = retain = [];
          if (callback || context) {
            /** @type {number} */
            _i = 0;
            _len = list.length;
            for (;_i < _len;_i++) {
              ev = list[_i];
              if (callback && (callback !== ev.callback && callback !== ev.callback._callback) || context && context !== ev.context) {
                retain.push(ev);
              }
            }
          }
          if (!retain.length) {
            delete this._events[type];
          }
        }
      }
      return this;
    },
    /**
     * @param {string} type
     * @return {?}
     */
    trigger : function(type) {
      if (!this._events) {
        return this;
      }
      /** @type {Array.<?>} */
      var args = __slice.call(arguments, 1);
      if (!eventsApi(this, "trigger", type, args)) {
        return this;
      }
      var events = this._events[type];
      var allEvents = this._events.all;
      if (events) {
        triggerEvents(events, args);
      }
      if (allEvents) {
        triggerEvents(allEvents, arguments);
      }
      return this;
    },
    /**
     * @param {?} obj
     * @param {string} name
     * @param {(Object|string)} callback
     * @return {?}
     */
    stopListening : function(obj, name, callback) {
      var listeners = this._listeners;
      if (!listeners) {
        return this;
      }
      /** @type {boolean} */
      var f = !name && !callback;
      if ("object" === typeof name) {
        callback = this;
      }
      if (obj) {
        (listeners = {})[obj._listenerId] = obj;
      }
      var id;
      for (id in listeners) {
        listeners[id].off(name, callback, this);
        if (f) {
          delete this._listeners[id];
        }
      }
      return this;
    }
  };
  /** @type {RegExp} */
  var cx = /\s+/;
  /**
   * @param {Object} obj
   * @param {string} action
   * @param {string} text
   * @param {Array} rest
   * @return {?}
   */
  var eventsApi = function(obj, action, text, rest) {
    if (!text) {
      return true;
    }
    if ("object" === typeof text) {
      var i;
      for (i in text) {
        obj[action].apply(obj, [i, text[i]].concat(rest));
      }
      return false;
    }
    if (cx.test(text)) {
      text = text.split(cx);
      /** @type {number} */
      i = 0;
      var l = text.length;
      for (;i < l;i++) {
        obj[action].apply(obj, [text[i]].concat(rest));
      }
      return false;
    }
    return true;
  };
  /**
   * @param {Array} events
   * @param {Array} args
   * @return {undefined}
   */
  var triggerEvents = function(events, args) {
    var ev;
    /** @type {number} */
    var i = -1;
    var l = events.length;
    var a1 = args[0];
    var pageX = args[1];
    var next = args[2];
    switch(args.length) {
      case 0:
        for (;++i < l;) {
          (ev = events[i]).callback.call(ev.ctx);
        }
        break;
      case 1:
        for (;++i < l;) {
          (ev = events[i]).callback.call(ev.ctx, a1);
        }
        break;
      case 2:
        for (;++i < l;) {
          (ev = events[i]).callback.call(ev.ctx, a1, pageX);
        }
        break;
      case 3:
        for (;++i < l;) {
          (ev = events[i]).callback.call(ev.ctx, a1, pageX, next);
        }
        break;
      default:
        for (;++i < l;) {
          (ev = events[i]).callback.apply(ev.ctx, args);
        }
      ;
    }
  };
  _.each({
    listenTo : "on",
    listenToOnce : "once"
  }, function(implementation, method) {
    /**
     * @param {Array} obj
     * @param {?} name
     * @param {(Function|string)} callback
     * @return {?}
     */
    Events[method] = function(obj, name, callback) {
      var listeners = this._listeners || (this._listeners = {});
      var id = obj._listenerId || (obj._listenerId = _.uniqueId("l"));
      /** @type {Array} */
      listeners[id] = obj;
      if ("object" === typeof name) {
        callback = this;
      }
      obj[implementation](name, callback, this);
      return this;
    };
  });
  /** @type {function (string, Function, Function): ?} */
  Events.bind = Events.on;
  /** @type {function (string, Object, string): ?} */
  Events.unbind = Events.off;
  _.extend(Backbone, Events);
  /** @type {function (string, Function): undefined} */
  var m = Backbone.Model = function(type, name) {
    var defaults;
    var attributes = type || {};
    if (!name) {
      name = {};
    }
    this.cid = _.uniqueId("c");
    this.attributes = {};
    _.extend(this, _.pick(name, modelOptions));
    if (name.parse) {
      attributes = this.parse(attributes, name) || {};
    }
    if (defaults = _.result(this, "defaults")) {
      attributes = _.defaults({}, attributes, defaults);
    }
    this.set(attributes, name);
    this.changed = {};
    this.initialize.apply(this, arguments);
  };
  /** @type {Array} */
  var modelOptions = ["url", "urlRoot", "collection"];
  _.extend(m.prototype, Events, {
    changed : null,
    validationError : null,
    idAttribute : "id",
    /**
     * @return {undefined}
     */
    initialize : function() {
    },
    /**
     * @return {?}
     */
    toJSON : function() {
      return _.clone(this.attributes);
    },
    /**
     * @return {?}
     */
    sync : function() {
      return Backbone.sync.apply(this, arguments);
    },
    /**
     * @param {string} name
     * @return {?}
     */
    get : function(name) {
      return this.attributes[name];
    },
    /**
     * @param {string} type
     * @return {?}
     */
    escape : function(type) {
      return _.escape(this.get(type));
    },
    /**
     * @param {string} optgroup
     * @return {?}
     */
    has : function(optgroup) {
      return null != this.get(optgroup);
    },
    /**
     * @param {string} opt_attributes
     * @param {?} type
     * @param {?} key
     * @return {?}
     */
    set : function(opt_attributes, type, key) {
      var attr;
      var attrs;
      var unset;
      var silent;
      var changing;
      var prev;
      var current;
      if (null == opt_attributes) {
        return this;
      }
      if ("object" === typeof opt_attributes) {
        /** @type {string} */
        attrs = opt_attributes;
        key = type;
      } else {
        (attrs = {})[opt_attributes] = type;
      }
      if (!key) {
        key = {};
      }
      if (!this._validate(attrs, key)) {
        return false;
      }
      unset = key.unset;
      silent = key.silent;
      /** @type {Array} */
      opt_attributes = [];
      changing = this._changing;
      /** @type {boolean} */
      this._changing = true;
      if (!changing) {
        this._previousAttributes = _.clone(this.attributes);
        this.changed = {};
      }
      current = this.attributes;
      prev = this._previousAttributes;
      if (this.idAttribute in attrs) {
        this.id = attrs[this.idAttribute];
      }
      for (attr in attrs) {
        type = attrs[attr];
        if (!_.isEqual(current[attr], type)) {
          opt_attributes.push(attr);
        }
        if (_.isEqual(prev[attr], type)) {
          delete this.changed[attr];
        } else {
          this.changed[attr] = type;
        }
        if (unset) {
          delete current[attr];
        } else {
          current[attr] = type;
        }
      }
      if (!silent) {
        if (opt_attributes.length) {
          /** @type {boolean} */
          this._pending = true;
        }
        /** @type {number} */
        type = 0;
        /** @type {number} */
        attr = opt_attributes.length;
        for (;type < attr;type++) {
          this.trigger("change:" + opt_attributes[type], this, current[opt_attributes[type]], key);
        }
      }
      if (changing) {
        return this;
      }
      if (!silent) {
        for (;this._pending;) {
          /** @type {boolean} */
          this._pending = false;
          this.trigger("change", this, key);
        }
      }
      /** @type {boolean} */
      this._changing = this._pending = false;
      return this;
    },
    /**
     * @param {string} attributes
     * @param {?} options
     * @return {?}
     */
    unset : function(attributes, options) {
      return this.set(attributes, void 0, _.extend({}, options, {
        unset : true
      }));
    },
    /**
     * @param {?} options
     * @return {?}
     */
    clear : function(options) {
      var attributes = {};
      var key;
      for (key in this.attributes) {
        attributes[key] = void 0;
      }
      return this.set(attributes, _.extend({}, options, {
        unset : true
      }));
    },
    /**
     * @param {Object} attr
     * @return {?}
     */
    hasChanged : function(attr) {
      return null == attr ? !_.isEmpty(this.changed) : _.has(this.changed, attr);
    },
    /**
     * @param {Object} diff
     * @return {?}
     */
    changedAttributes : function(diff) {
      if (!diff) {
        return this.hasChanged() ? _.clone(this.changed) : false;
      }
      var val;
      /** @type {boolean} */
      var changed = false;
      var old = this._changing ? this._previousAttributes : this.attributes;
      var attr;
      for (attr in diff) {
        if (!_.isEqual(old[attr], val = diff[attr])) {
          (changed || (changed = {}))[attr] = val;
        }
      }
      return changed;
    },
    /**
     * @param {number} attr
     * @return {?}
     */
    previous : function(attr) {
      return null == attr || !this._previousAttributes ? null : this._previousAttributes[attr];
    },
    /**
     * @return {?}
     */
    previousAttributes : function() {
      return _.clone(this._previousAttributes);
    },
    /**
     * @param {Object} name
     * @return {?}
     */
    fetch : function(name) {
      name = name ? _.clone(name) : {};
      if (void 0 === name.parse) {
        /** @type {boolean} */
        name.parse = true;
      }
      var cycle = this;
      /** @type {function (string): ?} */
      var fn = name.success;
      /**
       * @param {string} type
       * @return {?}
       */
      name.success = function(type) {
        if (!cycle.set(cycle.parse(type, name), name)) {
          return false;
        }
        if (fn) {
          fn(cycle, type, name);
        }
        cycle.trigger("sync", cycle, type, name);
      };
      callback(this, name);
      return this.sync("read", this, name);
    },
    /**
     * @param {string} key
     * @param {Object} val
     * @param {Object} name
     * @return {?}
     */
    save : function(key, val, name) {
      var attributes;
      var serverAttrs = this.attributes;
      if (null == key || "object" === typeof key) {
        /** @type {string} */
        attributes = key;
        /** @type {Object} */
        name = val;
      } else {
        /** @type {Object} */
        (attributes = {})[key] = val;
      }
      if (attributes && ((!name || !name.wait) && !this.set(attributes, name))) {
        return false;
      }
      name = _.extend({
        validate : true
      }, name);
      if (!this._validate(attributes, name)) {
        return false;
      }
      if (attributes) {
        if (name.wait) {
          this.attributes = _.extend({}, serverAttrs, attributes);
        }
      }
      if (void 0 === name.parse) {
        /** @type {boolean} */
        name.parse = true;
      }
      var cycle = this;
      /** @type {function (string): ?} */
      var fn = name.success;
      /**
       * @param {string} type
       * @return {?}
       */
      name.success = function(type) {
        cycle.attributes = serverAttrs;
        var opt_attributes = cycle.parse(type, name);
        if (name.wait) {
          opt_attributes = _.extend(attributes || {}, opt_attributes);
        }
        if (_.isObject(opt_attributes) && !cycle.set(opt_attributes, name)) {
          return false;
        }
        if (fn) {
          fn(cycle, type, name);
        }
        cycle.trigger("sync", cycle, type, name);
      };
      callback(this, name);
      /** @type {string} */
      key = this.isNew() ? "create" : name.patch ? "patch" : "update";
      if ("patch" === key) {
        name.attrs = attributes;
      }
      key = this.sync(key, this, name);
      if (attributes) {
        if (name.wait) {
          this.attributes = serverAttrs;
        }
      }
      return key;
    },
    /**
     * @param {Object} key
     * @return {?}
     */
    destroy : function(key) {
      key = key ? _.clone(key) : {};
      var cycle = this;
      /** @type {function (string): undefined} */
      var successCallback = key.success;
      /**
       * @return {undefined}
       */
      var destroy = function() {
        cycle.trigger("destroy", cycle, cycle.collection, key);
      };
      /**
       * @param {string} type
       * @return {undefined}
       */
      key.success = function(type) {
        if (key.wait || cycle.isNew()) {
          destroy();
        }
        if (successCallback) {
          successCallback(cycle, type, key);
        }
        if (!cycle.isNew()) {
          cycle.trigger("sync", cycle, type, key);
        }
      };
      if (this.isNew()) {
        return key.success(), false;
      }
      callback(this, key);
      var xhr = this.sync("delete", this, key);
      if (!key.wait) {
        destroy();
      }
      return xhr;
    },
    /**
     * @return {?}
     */
    url : function() {
      var base = _.result(this, "urlRoot") || (_.result(this.collection, "url") || urlError());
      return this.isNew() ? base : base + ("/" === base.charAt(base.length - 1) ? "" : "/") + encodeURIComponent(this.id);
    },
    /**
     * @param {string} object
     * @return {?}
     */
    parse : function(object) {
      return object;
    },
    /**
     * @return {?}
     */
    clone : function() {
      return new this.constructor(this.attributes);
    },
    /**
     * @return {?}
     */
    isNew : function() {
      return null == this.id;
    },
    /**
     * @param {Object} options
     * @return {?}
     */
    isValid : function(options) {
      return this._validate({}, _.extend(options || {}, {
        validate : true
      }));
    },
    /**
     * @param {Object} attrs
     * @param {Object} options
     * @return {?}
     */
    _validate : function(attrs, options) {
      if (!options.validate || !this.validate) {
        return true;
      }
      attrs = _.extend({}, this.attributes, attrs);
      var ready = this.validationError = this.validate(attrs, options) || null;
      if (!ready) {
        return true;
      }
      this.trigger("invalid", this, ready, _.extend(options || {}, {
        validationError : ready
      }));
      return false;
    }
  });
  _.each("keys values pairs invert pick omit".split(" "), function(name) {
    /**
     * @return {?}
     */
    m.prototype[name] = function() {
      /** @type {Array.<?>} */
      var args = __slice.call(arguments);
      args.unshift(this.attributes);
      return _[name].apply(_, args);
    };
  });
  /** @type {function (string, Object): undefined} */
  var Collection = Backbone.Collection = function(models, options) {
    if (!options) {
      options = {};
    }
    if (options.url) {
      this.url = options.url;
    }
    if (options.model) {
      this.model = options.model;
    }
    if (void 0 !== options.comparator) {
      this.comparator = options.comparator;
    }
    this._reset();
    this.initialize.apply(this, arguments);
    if (models) {
      this.reset(models, _.extend({
        silent : true
      }, options));
    }
  };
  var setOptions = {
    add : true,
    remove : true,
    merge : true
  };
  var addOptions = {
    add : true,
    merge : false,
    remove : false
  };
  _.extend(Collection.prototype, Events, {
    /** @type {function (string, Function): undefined} */
    model : m,
    /**
     * @return {undefined}
     */
    initialize : function() {
    },
    /**
     * @param {string} type
     * @return {?}
     */
    toJSON : function(type) {
      return this.map(function(model) {
        return model.toJSON(type);
      });
    },
    /**
     * @return {?}
     */
    sync : function() {
      return Backbone.sync.apply(this, arguments);
    },
    /**
     * @param {string} type
     * @param {Function} name
     * @return {?}
     */
    add : function(type, name) {
      return this.set(type, _.defaults(name || {}, addOptions));
    },
    /**
     * @param {string} type
     * @param {Function} name
     * @return {?}
     */
    remove : function(type, name) {
      type = _.isArray(type) ? type.slice() : [type];
      if (!name) {
        name = {};
      }
      var i;
      var len;
      var index;
      var optgroup;
      /** @type {number} */
      i = 0;
      len = type.length;
      for (;i < len;i++) {
        if (optgroup = this.get(type[i])) {
          delete this._byId[optgroup.id];
          delete this._byId[optgroup.cid];
          index = this.indexOf(optgroup);
          this.models.splice(index, 1);
          this.length--;
          if (!name.silent) {
            name.index = index;
            optgroup.trigger("remove", optgroup, this, name);
          }
          this._removeReference(optgroup);
        }
      }
      return this;
    },
    /**
     * @param {string} opt_attributes
     * @param {Object} name
     * @return {?}
     */
    set : function(opt_attributes, name) {
      name = _.defaults(name || {}, setOptions);
      if (name.parse) {
        opt_attributes = this.parse(opt_attributes, name);
      }
      if (!_.isArray(opt_attributes)) {
        /** @type {Array} */
        opt_attributes = opt_attributes ? [opt_attributes] : [];
      }
      var i;
      var l;
      var optgroup;
      var existing;
      var sort;
      var at = name.at;
      var sortable = this.comparator && (null == at && false !== name.sort);
      var sortAttr = _.isString(this.comparator) ? this.comparator : null;
      /** @type {Array} */
      var args = [];
      /** @type {Array} */
      var cycle = [];
      var modelMap = {};
      /** @type {number} */
      i = 0;
      l = opt_attributes.length;
      for (;i < l;i++) {
        if (optgroup = this._prepareModel(opt_attributes[i], name)) {
          if (existing = this.get(optgroup)) {
            if (name.remove) {
              /** @type {boolean} */
              modelMap[existing.cid] = true;
            }
            if (name.merge) {
              existing.set(optgroup.attributes, name);
              if (sortable) {
                if (!sort && existing.hasChanged(sortAttr)) {
                  /** @type {boolean} */
                  sort = true;
                }
              }
            }
          } else {
            if (name.add) {
              args.push(optgroup);
              optgroup.on("all", this._onModelEvent, this);
              this._byId[optgroup.cid] = optgroup;
              if (null != optgroup.id) {
                this._byId[optgroup.id] = optgroup;
              }
            }
          }
        }
      }
      if (name.remove) {
        /** @type {number} */
        i = 0;
        l = this.length;
        for (;i < l;++i) {
          if (!modelMap[(optgroup = this.models[i]).cid]) {
            cycle.push(optgroup);
          }
        }
        if (cycle.length) {
          this.remove(cycle, name);
        }
      }
      if (args.length) {
        if (sortable) {
          /** @type {boolean} */
          sort = true;
        }
        this.length += args.length;
        if (null != at) {
          fn.apply(this.models, [at, 0].concat(args));
        } else {
          wrapper.apply(this.models, args);
        }
      }
      if (sort) {
        this.sort({
          silent : true
        });
      }
      if (name.silent) {
        return this;
      }
      /** @type {number} */
      i = 0;
      /** @type {number} */
      l = args.length;
      for (;i < l;i++) {
        (optgroup = args[i]).trigger("add", optgroup, this, name);
      }
      if (sort) {
        this.trigger("sort", this, name);
      }
      return this;
    },
    /**
     * @param {string} cycle
     * @param {Function} ready
     * @return {?}
     */
    reset : function(cycle, ready) {
      if (!ready) {
        ready = {};
      }
      /** @type {number} */
      var i = 0;
      var l = this.models.length;
      for (;i < l;i++) {
        this._removeReference(this.models[i]);
      }
      ready.previousModels = this.models;
      this._reset();
      this.add(cycle, _.extend({
        silent : true
      }, ready));
      if (!ready.silent) {
        this.trigger("reset", this, ready);
      }
      return this;
    },
    /**
     * @param {string} cycle
     * @param {?} options
     * @return {?}
     */
    push : function(cycle, options) {
      cycle = this._prepareModel(cycle, options);
      this.add(cycle, _.extend({
        at : this.length
      }, options));
      return cycle;
    },
    /**
     * @param {Function} optgroup
     * @return {?}
     */
    pop : function(optgroup) {
      var cycle = this.at(this.length - 1);
      this.remove(cycle, optgroup);
      return cycle;
    },
    /**
     * @param {string} cycle
     * @param {Object} options
     * @return {?}
     */
    unshift : function(cycle, options) {
      cycle = this._prepareModel(cycle, options);
      this.add(cycle, _.extend({
        at : 0
      }, options));
      return cycle;
    },
    /**
     * @param {Function} optgroup
     * @return {?}
     */
    shift : function(optgroup) {
      var cycle = this.at(0);
      this.remove(cycle, optgroup);
      return cycle;
    },
    /**
     * @param {number} recurring
     * @param {number} start
     * @return {?}
     */
    slice : function(recurring, start) {
      return this.models.slice(recurring, start);
    },
    /**
     * @param {string} name
     * @return {?}
     */
    get : function(name) {
      return null == name ? void 0 : this._byId[null != name.id ? name.id : name.cid || name];
    },
    /**
     * @param {string} type
     * @return {?}
     */
    at : function(type) {
      return this.models[type];
    },
    /**
     * @param {string} type
     * @param {Function} name
     * @return {?}
     */
    where : function(type, name) {
      return _.isEmpty(type) ? name ? void 0 : [] : this[name ? "find" : "filter"](function(doc) {
        var optgroup;
        for (optgroup in type) {
          if (type[optgroup] !== doc.get(optgroup)) {
            return false;
          }
        }
        return true;
      });
    },
    /**
     * @param {string} cycle
     * @return {?}
     */
    findWhere : function(cycle) {
      return this.where(cycle, true);
    },
    /**
     * @param {Function} ready
     * @return {?}
     */
    sort : function(ready) {
      if (!this.comparator) {
        throw Error("Cannot sort a set without a comparator");
      }
      if (!ready) {
        ready = {};
      }
      if (_.isString(this.comparator) || 1 === this.comparator.length) {
        this.models = this.sortBy(this.comparator, this);
      } else {
        this.models.sort(_.bind(this.comparator, this));
      }
      if (!ready.silent) {
        this.trigger("sort", this, ready);
      }
      return this;
    },
    /**
     * @param {string} model
     * @param {string} optgroup
     * @param {Object} context
     * @return {?}
     */
    sortedIndex : function(model, optgroup, context) {
      if (!optgroup) {
        optgroup = this.comparator;
      }
      var iterator = _.isFunction(optgroup) ? optgroup : function(doc) {
        return doc.get(optgroup);
      };
      return _.sortedIndex(this.models, model, iterator, context);
    },
    /**
     * @param {Function} callback
     * @return {?}
     */
    pluck : function(callback) {
      return _.invoke(this.models, "get", callback);
    },
    /**
     * @param {Object} key
     * @return {?}
     */
    fetch : function(key) {
      key = key ? _.clone(key) : {};
      if (void 0 === key.parse) {
        /** @type {boolean} */
        key.parse = true;
      }
      /** @type {function (string): undefined} */
      var successCallback = key.success;
      var cycle = this;
      /**
       * @param {string} type
       * @return {undefined}
       */
      key.success = function(type) {
        cycle[key.reset ? "reset" : "set"](type, key);
        if (successCallback) {
          successCallback(cycle, type, key);
        }
        cycle.trigger("sync", cycle, type, key);
      };
      callback(this, key);
      return this.sync("read", this, key);
    },
    /**
     * @param {string} type
     * @param {Function} key
     * @return {?}
     */
    create : function(type, key) {
      key = key ? _.clone(key) : {};
      if (!(type = this._prepareModel(type, key))) {
        return false;
      }
      if (!key.wait) {
        this.add(type, key);
      }
      var api = this;
      /** @type {function (string): undefined} */
      var done = key.success;
      /**
       * @param {string} name
       * @return {undefined}
       */
      key.success = function(name) {
        if (key.wait) {
          api.add(type, key);
        }
        if (done) {
          done(type, name, key);
        }
      };
      type.save(null, key);
      return type;
    },
    /**
     * @param {string} object
     * @return {?}
     */
    parse : function(object) {
      return object;
    },
    /**
     * @return {?}
     */
    clone : function() {
      return new this.constructor(this.models);
    },
    /**
     * @return {undefined}
     */
    _reset : function() {
      /** @type {number} */
      this.length = 0;
      /** @type {Array} */
      this.models = [];
      this._byId = {};
    },
    /**
     * @param {Function} ready
     * @param {Object} name
     * @return {?}
     */
    _prepareModel : function(ready, name) {
      if (ready instanceof m) {
        return ready.collection || (ready.collection = this), ready;
      }
      if (!name) {
        name = {};
      }
      name.collection = this;
      var model = new this.model(ready, name);
      return!model._validate(ready, name) ? (this.trigger("invalid", this, ready, name), false) : model;
    },
    /**
     * @param {Object} model
     * @return {undefined}
     */
    _removeReference : function(model) {
      if (this === model.collection) {
        delete model.collection;
      }
      model.off("all", this._onModelEvent, this);
    },
    /**
     * @param {string} mode
     * @param {string} cycle
     * @param {string} collection
     * @param {Function} optgroup
     * @return {undefined}
     */
    _onModelEvent : function(mode, cycle, collection, optgroup) {
      if (!(("add" === mode || "remove" === mode) && collection !== this)) {
        if ("destroy" === mode) {
          this.remove(cycle, optgroup);
        }
        if (cycle) {
          if (mode === "change:" + cycle.idAttribute) {
            delete this._byId[cycle.previous(cycle.idAttribute)];
            if (null != cycle.id) {
              /** @type {string} */
              this._byId[cycle.id] = cycle;
            }
          }
        }
        this.trigger.apply(this, arguments);
      }
    }
  });
  _.each("forEach each map collect reduce foldl inject reduceRight foldr find detect filter select reject every all some any include contains invoke max min toArray size first head take initial rest tail drop last without indexOf shuffle lastIndexOf isEmpty chain".split(" "), function(method) {
    /**
     * @return {?}
     */
    Collection.prototype[method] = function() {
      /** @type {Array.<?>} */
      var args = __slice.call(arguments);
      args.unshift(this.models);
      return _[method].apply(_, args);
    };
  });
  _.each(["groupBy", "countBy", "sortBy"], function(method) {
    /**
     * @param {string} optgroup
     * @param {?} context
     * @return {?}
     */
    Collection.prototype[method] = function(optgroup, context) {
      var iterator = _.isFunction(optgroup) ? optgroup : function(doc) {
        return doc.get(optgroup);
      };
      return _[method](this.models, iterator, context);
    };
  });
  /** @type {function (Object): undefined} */
  self = Backbone.View = function(options) {
    this.cid = _.uniqueId("view");
    this._configure(options || {});
    this._ensureElement();
    this.initialize.apply(this, arguments);
    this.delegateEvents();
  };
  /** @type {RegExp} */
  var delegateEventSplitter = /^(\S+)\s*(.*)$/;
  /** @type {Array.<string>} */
  var editParams = "model collection el id attributes className tagName events".split(" ");
  _.extend(self.prototype, Events, {
    tagName : "div",
    /**
     * @param {string} type
     * @return {?}
     */
    $ : function(type) {
      return this.$el.find(type);
    },
    /**
     * @return {undefined}
     */
    initialize : function() {
    },
    /**
     * @return {?}
     */
    render : function() {
      return this;
    },
    /**
     * @return {?}
     */
    remove : function() {
      this.$el.remove();
      this.stopListening();
      return this;
    },
    /**
     * @param {string} cycle
     * @param {boolean} delegate
     * @return {?}
     */
    setElement : function(cycle, delegate) {
      if (this.$el) {
        this.undelegateEvents();
      }
      this.$el = cycle instanceof Backbone.$ ? cycle : Backbone.$(cycle);
      this.el = this.$el[0];
      if (false !== delegate) {
        this.delegateEvents();
      }
      return this;
    },
    /**
     * @param {Object} events
     * @return {?}
     */
    delegateEvents : function(events) {
      if (!events && !(events = _.result(this, "events"))) {
        return this;
      }
      this.undelegateEvents();
      var key;
      for (key in events) {
        var ready = events[key];
        if (!_.isFunction(ready)) {
          ready = this[events[key]];
        }
        if (ready) {
          /** @type {(Array.<string>|null)} */
          var optgroup = key.match(delegateEventSplitter);
          /** @type {string} */
          var cycle = optgroup[1];
          /** @type {string} */
          optgroup = optgroup[2];
          ready = _.bind(ready, this);
          /** @type {string} */
          cycle = cycle + (".delegateEvents" + this.cid);
          if ("" === optgroup) {
            this.$el.on(cycle, ready);
          } else {
            this.$el.on(cycle, optgroup, ready);
          }
        }
      }
      return this;
    },
    /**
     * @return {?}
     */
    undelegateEvents : function() {
      this.$el.off(".delegateEvents" + this.cid);
      return this;
    },
    /**
     * @param {Object} options
     * @return {undefined}
     */
    _configure : function(options) {
      if (this.options) {
        options = _.extend({}, _.result(this, "options"), options);
      }
      _.extend(this, _.pick(options, editParams));
      /** @type {Object} */
      this.options = options;
    },
    /**
     * @return {undefined}
     */
    _ensureElement : function() {
      if (this.el) {
        this.setElement(_.result(this, "el"), false);
      } else {
        var optgroup = _.extend({}, _.result(this, "attributes"));
        if (this.id) {
          optgroup.id = _.result(this, "id");
        }
        if (this.className) {
          optgroup["class"] = _.result(this, "className");
        }
        optgroup = Backbone.$("<" + _.result(this, "tagName") + ">").attr(optgroup);
        this.setElement(optgroup, false);
      }
    }
  });
  /**
   * @param {?} ready
   * @param {string} cycle
   * @param {string} fix
   * @return {?}
   */
  Backbone.sync = function(ready, cycle, fix) {
    var method = methodMap[ready];
    _.defaults(fix || (fix = {}), {
      emulateHTTP : Backbone.emulateHTTP,
      emulateJSON : Backbone.emulateJSON
    });
    var params = {
      type : method,
      dataType : "json"
    };
    if (!fix.url) {
      params.url = _.result(cycle, "url") || urlError();
    }
    if (null == fix.data && (cycle && ("create" === ready || ("update" === ready || "patch" === ready)))) {
      /** @type {string} */
      params.contentType = "application/json";
      /** @type {string} */
      params.data = JSON.stringify(fix.attrs || cycle.toJSON(fix));
    }
    if (fix.emulateJSON) {
      /** @type {string} */
      params.contentType = "application/x-www-form-urlencoded";
      /** @type {({model: ??}|{})} */
      params.data = params.data ? {
        model : params.data
      } : {};
    }
    if (fix.emulateHTTP && ("PUT" === method || ("DELETE" === method || "PATCH" === method))) {
      /** @type {string} */
      params.type = "POST";
      if (fix.emulateJSON) {
        params.data._method = method;
      }
      var matcherFunction = fix.beforeSend;
      /**
       * @param {Object} xhr
       * @return {?}
       */
      fix.beforeSend = function(xhr) {
        xhr.setRequestHeader("X-HTTP-Method-Override", method);
        if (matcherFunction) {
          return matcherFunction.apply(this, arguments);
        }
      };
    }
    if ("GET" !== params.type) {
      if (!fix.emulateJSON) {
        /** @type {boolean} */
        params.processData = false;
      }
    }
    if ("PATCH" === params.type && (window.ActiveXObject && (!window.external || !window.external.msActiveXFilteringEnabled))) {
      /**
       * @return {?}
       */
      params.xhr = function() {
        return new ActiveXObject("Microsoft.XMLHTTP");
      };
    }
    ready = fix.xhr = Backbone.ajax(_.extend(params, fix));
    cycle.trigger("request", cycle, ready, fix);
    return ready;
  };
  var methodMap = {
    create : "POST",
    update : "PUT",
    patch : "PATCH",
    "delete" : "DELETE",
    read : "GET"
  };
  /**
   * @return {?}
   */
  Backbone.ajax = function() {
    return Backbone.$.ajax.apply(Backbone.$, arguments);
  };
  /** @type {function (Object): undefined} */
  var EA = Backbone.Router = function(options) {
    if (!options) {
      options = {};
    }
    if (options.routes) {
      this.routes = options.routes;
    }
    this._bindRoutes();
    this.initialize.apply(this, arguments);
  };
  /** @type {RegExp} */
  var rSlash = /\((.*?)\)/g;
  /** @type {RegExp} */
  var rLt = /(\(\?)?:\w+/g;
  /** @type {RegExp} */
  var splatParam = /\*\w+/g;
  /** @type {RegExp} */
  var rclass = /[\-{}\[\]+?.,\\\^$|#\s]/g;
  _.extend(EA.prototype, Events, {
    /**
     * @return {undefined}
     */
    initialize : function() {
    },
    /**
     * @param {string} route
     * @param {Function} name
     * @param {Function} callback
     * @return {?}
     */
    route : function(route, name, callback) {
      if (!_.isRegExp(route)) {
        route = this._routeToRegExp(route);
      }
      if (_.isFunction(name)) {
        /** @type {Function} */
        callback = name;
        /** @type {string} */
        name = "";
      }
      if (!callback) {
        callback = this[name];
      }
      var optgroup = this;
      Backbone.history.route(route, function(type) {
        type = optgroup._extractParameters(route, type);
        if (callback) {
          callback.apply(optgroup, type);
        }
        optgroup.trigger.apply(optgroup, ["route:" + name].concat(type));
        optgroup.trigger("route", name, type);
        Backbone.history.trigger("route", optgroup, name, type);
      });
      return this;
    },
    /**
     * @param {Object} url
     * @param {Object} options
     * @return {?}
     */
    navigate : function(url, options) {
      Backbone.history.navigate(url, options);
      return this;
    },
    /**
     * @return {undefined}
     */
    _bindRoutes : function() {
      if (this.routes) {
        this.routes = _.result(this, "routes");
        var route;
        var routes = _.keys(this.routes);
        for (;null != (route = routes.pop());) {
          this.route(route, this.routes[route]);
        }
      }
    },
    /**
     * @param {string} route
     * @return {?}
     */
    _routeToRegExp : function(route) {
      route = route.replace(rclass, "\\$&").replace(rSlash, "(?:$1)?").replace(rLt, function(match, optional) {
        return optional ? match : "([^/]+)";
      }).replace(splatParam, "(.*?)");
      return RegExp("^" + route + "$");
    },
    /**
     * @param {string} route
     * @param {Function} fragment
     * @return {?}
     */
    _extractParameters : function(route, fragment) {
      var results = route.exec(fragment).slice(1);
      return _.map(results, function(current) {
        return current ? decodeURIComponent(current) : null;
      });
    }
  });
  /** @type {function (): undefined} */
  var History = Backbone.History = function() {
    /** @type {Array} */
    this.handlers = [];
    _.bindAll(this, "checkUrl");
    if ("undefined" !== typeof window) {
      /** @type {Location} */
      this.location = window.location;
      /** @type {History} */
      this.history = window.history;
    }
  };
  /** @type {RegExp} */
  var r20 = /^[#\/]|\s+$/g;
  /** @type {RegExp} */
  var rreturn = /^\/+|\/+$/g;
  /** @type {RegExp} */
  var rquickExpr = /msie [\w.]+/;
  /** @type {RegExp} */
  var trailingSlash = /\/$/;
  /** @type {boolean} */
  History.started = false;
  _.extend(History.prototype, Events, {
    interval : 50,
    /**
     * @param {Node} sUrl
     * @return {?}
     */
    getHash : function(sUrl) {
      return(sUrl = (sUrl || this).location.href.match(/#(.*)$/)) ? sUrl[1] : "";
    },
    /**
     * @param {string} fragment
     * @param {boolean} forcePushState
     * @return {?}
     */
    getFragment : function(fragment, forcePushState) {
      if (null == fragment) {
        if (this._hasPushState || (!this._wantsHashChange || forcePushState)) {
          fragment = this.location.pathname;
          var root = this.root.replace(trailingSlash, "");
          if (!fragment.indexOf(root)) {
            fragment = fragment.substr(root.length);
          }
        } else {
          fragment = this.getHash();
        }
      }
      return fragment.replace(r20, "");
    },
    /**
     * @param {Object} options
     * @return {?}
     */
    start : function(options) {
      if (History.started) {
        throw Error("Backbone.history has already been started");
      }
      /** @type {boolean} */
      History.started = true;
      this.options = _.extend({}, {
        root : "/"
      }, this.options, options);
      this.root = this.options.root;
      /** @type {boolean} */
      this._wantsHashChange = false !== this.options.hashChange;
      /** @type {boolean} */
      this._wantsPushState = !!this.options.pushState;
      /** @type {boolean} */
      this._hasPushState = !(!this.options.pushState || (!this.history || !this.history.pushState));
      options = this.getFragment();
      var atRoot = document.documentMode;
      /** @type {(boolean|null)} */
      atRoot = rquickExpr.exec(navigator.userAgent.toLowerCase()) && (!atRoot || 7 >= atRoot);
      /** @type {string} */
      this.root = ("/" + this.root + "/").replace(rreturn, "/");
      if (atRoot) {
        if (this._wantsHashChange) {
          this.iframe = Backbone.$('<iframe src="javascript:0" tabindex="-1" />').hide().appendTo("body")[0].contentWindow;
          this.navigate(options);
        }
      }
      if (this._hasPushState) {
        Backbone.$(window).on("popstate", this.checkUrl);
      } else {
        if (this._wantsHashChange && ("onhashchange" in window && !atRoot)) {
          Backbone.$(window).on("hashchange", this.checkUrl);
        } else {
          if (this._wantsHashChange) {
            /** @type {number} */
            this._checkUrlInterval = setInterval(this.checkUrl, this.interval);
          }
        }
      }
      /** @type {Object} */
      this.fragment = options;
      options = this.location;
      /** @type {boolean} */
      atRoot = options.pathname.replace(/[^\/]$/, "$&/") === this.root;
      if (this._wantsHashChange && (this._wantsPushState && (!this._hasPushState && !atRoot))) {
        return this.fragment = this.getFragment(null, true), this.location.replace(this.root + this.location.search + "#" + this.fragment), true;
      }
      if (this._wantsPushState) {
        if (this._hasPushState && (atRoot && options.hash)) {
          this.fragment = this.getHash().replace(r20, "");
          this.history.replaceState({}, document.title, this.root + this.fragment + options.search);
        }
      }
      if (!this.options.silent) {
        return this.loadUrl();
      }
    },
    /**
     * @return {undefined}
     */
    stop : function() {
      Backbone.$(window).off("popstate", this.checkUrl).off("hashchange", this.checkUrl);
      clearInterval(this._checkUrlInterval);
      /** @type {boolean} */
      History.started = false;
    },
    /**
     * @param {(Object|string)} route
     * @param {Function} callback
     * @return {undefined}
     */
    route : function(route, callback) {
      this.handlers.unshift({
        route : route,
        /** @type {Function} */
        callback : callback
      });
    },
    /**
     * @return {?}
     */
    checkUrl : function() {
      var current = this.getFragment();
      if (current === this.fragment) {
        if (this.iframe) {
          current = this.getFragment(this.getHash(this.iframe));
        }
      }
      if (current === this.fragment) {
        return false;
      }
      if (this.iframe) {
        this.navigate(current);
      }
      if (!this.loadUrl()) {
        this.loadUrl(this.getHash());
      }
    },
    /**
     * @param {string} fragmentOverride
     * @return {?}
     */
    loadUrl : function(fragmentOverride) {
      var fragment = this.fragment = this.getFragment(fragmentOverride);
      return _.any(this.handlers, function(handler) {
        if (handler.route.test(fragment)) {
          return handler.callback(fragment), true;
        }
      });
    },
    /**
     * @param {string} fragment
     * @param {Object} options
     * @return {?}
     */
    navigate : function(fragment, options) {
      if (!History.started) {
        return false;
      }
      if (!options || true === options) {
        options = {
          trigger : options
        };
      }
      fragment = this.getFragment(fragment || "");
      if (this.fragment !== fragment) {
        /** @type {string} */
        this.fragment = fragment;
        var url = this.root + fragment;
        if (this._hasPushState) {
          this.history[options.replace ? "replaceState" : "pushState"]({}, document.title, url);
        } else {
          if (this._wantsHashChange) {
            this._updateHash(this.location, fragment, options.replace);
            if (this.iframe) {
              if (fragment !== this.getFragment(this.getHash(this.iframe))) {
                if (!options.replace) {
                  this.iframe.document.open().close();
                }
                this._updateHash(this.iframe.location, fragment, options.replace);
              }
            }
          } else {
            return this.location.assign(url);
          }
        }
        if (options.trigger) {
          this.loadUrl(fragment);
        }
      }
    },
    /**
     * @param {string} location
     * @param {string} fragment
     * @param {(number|string)} href
     * @return {undefined}
     */
    _updateHash : function(location, fragment, href) {
      if (href) {
        href = location.href.replace(/(javascript:|#).*$/, "");
        location.replace(href + "#" + fragment);
      } else {
        /** @type {string} */
        location.hash = "#" + fragment;
      }
    }
  });
  Backbone.history = new History;
  /** @type {function (?, ?): ?} */
  m.extend = Collection.extend = EA.extend = self.extend = History.extend = function(expectedNumberOfNonCommentArgs, replacementHash) {
    var parent = this;
    var child;
    child = expectedNumberOfNonCommentArgs && _.has(expectedNumberOfNonCommentArgs, "constructor") ? expectedNumberOfNonCommentArgs.constructor : function() {
      return parent.apply(this, arguments);
    };
    _.extend(child, parent, replacementHash);
    /**
     * @return {undefined}
     */
    var Surrogate = function() {
      this.constructor = child;
    };
    Surrogate.prototype = parent.prototype;
    child.prototype = new Surrogate;
    if (expectedNumberOfNonCommentArgs) {
      _.extend(child.prototype, expectedNumberOfNonCommentArgs);
    }
    child.__super__ = parent.prototype;
    return child;
  };
  /**
   * @return {?}
   */
  var urlError = function() {
    throw Error('A "url" property or function must be specified');
  };
  /**
   * @param {string} cycle
   * @param {Function} key
   * @return {undefined}
   */
  var callback = function(cycle, key) {
    /** @type {function (string): undefined} */
    var errorCallback = key.error;
    /**
     * @param {string} type
     * @return {undefined}
     */
    key.error = function(type) {
      if (errorCallback) {
        errorCallback(cycle, type, key);
      }
      cycle.trigger("error", cycle, type, key);
    };
  };
}).call(this);
!function($) {
  /**
   * @param {string} type
   * @param {Function} name
   * @return {undefined}
   */
  var Tooltip = function(type, name) {
    this.init("tooltip", type, name);
  };
  Tooltip.prototype = {
    /** @type {function (string, Function): undefined} */
    constructor : Tooltip,
    /**
     * @param {string} type
     * @param {Object} element
     * @param {(Function|string)} options
     * @return {undefined}
     */
    init : function(type, element, options) {
      var eventOut;
      /** @type {string} */
      this.type = type;
      this.$element = $(element);
      this.options = this.getOptions(options);
      /** @type {boolean} */
      this.enabled = true;
      element = this.options.trigger.split(" ");
      options = element.length;
      for (;options--;) {
        if (eventOut = element[options], "click" == eventOut) {
          this.$element.on("click." + this.type, this.options.selector, $.proxy(this.toggle, this));
        } else {
          if ("manual" != eventOut) {
            /** @type {string} */
            type = "hover" == eventOut ? "mouseenter" : "focus";
            /** @type {string} */
            eventOut = "hover" == eventOut ? "mouseleave" : "blur";
            this.$element.on(type + "." + this.type, this.options.selector, $.proxy(this.enter, this));
            this.$element.on(eventOut + "." + this.type, this.options.selector, $.proxy(this.leave, this));
          }
        }
      }
      if (this.options.selector) {
        this._options = $.extend({}, this.options, {
          trigger : "manual",
          selector : ""
        });
      } else {
        this.fixTitle();
      }
    },
    /**
     * @param {Function} options
     * @return {?}
     */
    getOptions : function(options) {
      options = $.extend({}, $.fn[this.type].defaults, this.$element.data(), options);
      if (options.delay) {
        if ("number" == typeof options.delay) {
          options.delay = {
            show : options.delay,
            hide : options.delay
          };
        }
      }
      return options;
    },
    /**
     * @param {Event} e
     * @return {?}
     */
    enter : function(e) {
      var self = $(e.currentTarget)[this.type](this._options).data(this.type);
      if (!self.options.delay || !self.options.delay.show) {
        return self.show();
      }
      clearTimeout(this.timeout);
      /** @type {string} */
      self.hoverState = "in";
      /** @type {number} */
      this.timeout = setTimeout(function() {
        if ("in" == self.hoverState) {
          self.show();
        }
      }, self.options.delay.show);
    },
    /**
     * @param {Event} e
     * @return {?}
     */
    leave : function(e) {
      var self = $(e.currentTarget)[this.type](this._options).data(this.type);
      if (this.timeout) {
        clearTimeout(this.timeout);
      }
      if (!self.options.delay || !self.options.delay.hide) {
        return self.hide();
      }
      /** @type {string} */
      self.hoverState = "out";
      /** @type {number} */
      this.timeout = setTimeout(function() {
        if ("out" == self.hoverState) {
          self.hide();
        }
      }, self.options.delay.hide);
    },
    /**
     * @return {undefined}
     */
    show : function() {
      var $tip;
      var cycle;
      var actualWidth;
      var placement;
      var tp;
      cycle = $.Event("show");
      if (this.hasContent() && (this.enabled && (this.$element.trigger(cycle), !cycle.isDefaultPrevented()))) {
        $tip = this.tip();
        this.setContent();
        if (this.options.animation) {
          $tip.addClass("fade");
        }
        placement = "function" == typeof this.options.placement ? this.options.placement.call(this, $tip[0], this.$element[0]) : this.options.placement;
        $tip.detach().css({
          top : 0,
          left : 0,
          display : "block"
        });
        if (this.options.container) {
          $tip.appendTo(this.options.container);
        } else {
          $tip.insertAfter(this.$element);
        }
        cycle = this.getPosition();
        actualWidth = $tip[0].offsetWidth;
        $tip = $tip[0].offsetHeight;
        switch(placement) {
          case "bottom":
            tp = {
              top : cycle.top + cycle.height,
              left : cycle.left + cycle.width / 2 - actualWidth / 2
            };
            break;
          case "top":
            tp = {
              top : cycle.top - $tip,
              left : cycle.left + cycle.width / 2 - actualWidth / 2
            };
            break;
          case "left":
            tp = {
              top : cycle.top + cycle.height / 2 - $tip / 2,
              left : cycle.left - actualWidth
            };
            break;
          case "right":
            tp = {
              top : cycle.top + cycle.height / 2 - $tip / 2,
              left : cycle.left + cycle.width
            };
        }
        this.applyPlacement(tp, placement);
        this.$element.trigger("shown");
      }
    },
    /**
     * @param {string} cycle
     * @param {string} key
     * @return {undefined}
     */
    applyPlacement : function(cycle, key) {
      var $tip = this.tip();
      var width = $tip[0].offsetWidth;
      var height = $tip[0].offsetHeight;
      var actualWidth;
      var actualHeight;
      var q;
      $tip.offset(cycle).addClass(key).addClass("in");
      actualWidth = $tip[0].offsetWidth;
      actualHeight = $tip[0].offsetHeight;
      if ("top" == key) {
        if (actualHeight != height) {
          /** @type {number} */
          cycle.top = cycle.top + height - actualHeight;
          /** @type {boolean} */
          q = true;
        }
      }
      if ("bottom" == key || "top" == key) {
        /** @type {number} */
        height = 0;
        if (0 > cycle.left) {
          /** @type {number} */
          height = -2 * cycle.left;
          /** @type {number} */
          cycle.left = 0;
          $tip.offset(cycle);
          actualWidth = $tip[0].offsetWidth;
        }
        this.replaceArrow(height - width + actualWidth, actualWidth, "left");
      } else {
        this.replaceArrow(actualHeight - height, actualHeight, "top");
      }
      if (q) {
        $tip.offset(cycle);
      }
    },
    /**
     * @param {boolean} delta
     * @param {boolean} dimension
     * @param {string} optgroup
     * @return {undefined}
     */
    replaceArrow : function(delta, dimension, optgroup) {
      this.arrow().css(optgroup, delta ? 50 * (1 - delta / dimension) + "%" : "");
    },
    /**
     * @return {undefined}
     */
    setContent : function() {
      var $tip = this.tip();
      var title = this.getTitle();
      $tip.find(".tooltip-inner")[this.options.html ? "html" : "text"](title);
      $tip.removeClass("fade in top bottom left right");
    },
    /**
     * @return {?}
     */
    hide : function() {
      var $tip = this.tip();
      var cycle = $.Event("hide");
      this.$element.trigger(cycle);
      if (!cycle.isDefaultPrevented()) {
        $tip.removeClass("in");
        if ($.support.transition && this.$tip.hasClass("fade")) {
          /** @type {number} */
          var to = setTimeout(function() {
            $tip.off($.support.transition.end).detach();
          }, 500);
          $tip.one($.support.transition.end, function() {
            clearTimeout(to);
            $tip.detach();
          });
        } else {
          $tip.detach();
        }
        this.$element.trigger("hidden");
        return this;
      }
    },
    /**
     * @return {undefined}
     */
    fixTitle : function() {
      var $e = this.$element;
      if ($e.attr("title") || "string" != typeof $e.attr("data-original-title")) {
        $e.attr("data-original-title", $e.attr("title") || "").attr("title", "");
      }
    },
    /**
     * @return {?}
     */
    hasContent : function() {
      return this.getTitle();
    },
    /**
     * @return {?}
     */
    getPosition : function() {
      var el = this.$element[0];
      return $.extend({}, "function" == typeof el.getBoundingClientRect ? el.getBoundingClientRect() : {
        width : el.offsetWidth,
        height : el.offsetHeight
      }, this.$element.offset());
    },
    /**
     * @return {?}
     */
    getTitle : function() {
      var $e = this.$element;
      var o = this.options;
      return $e.attr("data-original-title") || ("function" == typeof o.title ? o.title.call($e[0]) : o.title);
    },
    /**
     * @return {?}
     */
    tip : function() {
      return this.$tip = this.$tip || $(this.options.template);
    },
    /**
     * @return {?}
     */
    arrow : function() {
      return this.$arrow = this.$arrow || this.tip().find(".tooltip-arrow");
    },
    /**
     * @return {undefined}
     */
    validate : function() {
      if (!this.$element[0].parentNode) {
        this.hide();
        /** @type {null} */
        this.options = this.$element = null;
      }
    },
    /**
     * @return {undefined}
     */
    enable : function() {
      /** @type {boolean} */
      this.enabled = true;
    },
    /**
     * @return {undefined}
     */
    disable : function() {
      /** @type {boolean} */
      this.enabled = false;
    },
    /**
     * @return {undefined}
     */
    toggleEnabled : function() {
      /** @type {boolean} */
      this.enabled = !this.enabled;
    },
    /**
     * @param {string} type
     * @return {undefined}
     */
    toggle : function(type) {
      type = type ? $(type.currentTarget)[this.type](this._options).data(this.type) : this;
      if (type.tip().hasClass("in")) {
        type.hide();
      } else {
        type.show();
      }
    },
    /**
     * @return {undefined}
     */
    destroy : function() {
      this.hide().$element.off("." + this.type).removeData(this.type);
    }
  };
  var old = $.fn.tooltip;
  /**
   * @param {string} type
   * @return {?}
   */
  $.fn.tooltip = function(type) {
    return this.each(function() {
      var $this = $(this);
      var data = $this.data("tooltip");
      var options = "object" == typeof type && type;
      if (!data) {
        $this.data("tooltip", data = new Tooltip(this, options));
      }
      if ("string" == typeof type) {
        data[type]();
      }
    });
  };
  /** @type {function (string, Function): undefined} */
  $.fn.tooltip.Constructor = Tooltip;
  $.fn.tooltip.defaults = {
    animation : true,
    placement : "top",
    selector : false,
    template : '<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
    trigger : "hover focus",
    title : "",
    delay : 0,
    html : false,
    container : false
  };
  /**
   * @return {?}
   */
  $.fn.tooltip.noConflict = function() {
    $.fn.tooltip = old;
    return this;
  };
}(window.jQuery);
!function($) {
  /**
   * @param {string} type
   * @param {Function} name
   * @return {undefined}
   */
  var Popover = function(type, name) {
    this.init("popover", type, name);
  };
  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype, {
    /** @type {function (string, Function): undefined} */
    constructor : Popover,
    /**
     * @return {undefined}
     */
    setContent : function() {
      var $tip = this.tip();
      var title = this.getTitle();
      var content = this.getContent();
      $tip.find(".popover-title")[this.options.html ? "html" : "text"](title);
      $tip.find(".popover-content")[this.options.html ? "html" : "text"](content);
      $tip.removeClass("fade top bottom left right in");
    },
    /**
     * @return {?}
     */
    hasContent : function() {
      return this.getTitle() || this.getContent();
    },
    /**
     * @return {?}
     */
    getContent : function() {
      var $e = this.$element;
      var o = this.options;
      return("function" == typeof o.content ? o.content.call($e[0]) : o.content) || $e.attr("data-content");
    },
    /**
     * @return {?}
     */
    tip : function() {
      if (!this.$tip) {
        this.$tip = $(this.options.template);
      }
      return this.$tip;
    },
    /**
     * @return {undefined}
     */
    destroy : function() {
      this.hide().$element.off("." + this.type).removeData(this.type);
    }
  });
  var old = $.fn.popover;
  /**
   * @param {?} option
   * @return {?}
   */
  $.fn.popover = function(option) {
    return this.each(function() {
      var $this = $(this);
      var data = $this.data("popover");
      var options = "object" == typeof option && option;
      if (!data) {
        $this.data("popover", data = new Popover(this, options));
      }
      if ("string" == typeof option) {
        data[option]();
      }
    });
  };
  /** @type {function (string, Function): undefined} */
  $.fn.popover.Constructor = Popover;
  $.fn.popover.defaults = $.extend({}, $.fn.tooltip.defaults, {
    placement : "right",
    trigger : "click",
    content : "",
    template : '<div class="popover"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
  });
  /**
   * @return {?}
   */
  $.fn.popover.noConflict = function() {
    $.fn.popover = old;
    return this;
  };
}(window.jQuery);
!function($) {
  /**
   * @return {undefined}
   */
  function rvar() {
    $(".dropdown-backdrop").remove();
    $(optgroup).each(function() {
      getParent($(this)).removeClass("open");
    });
  }
  /**
   * @param {Element} $this
   * @return {?}
   */
  function getParent($this) {
    var selector = $this.attr("data-target");
    if (!selector) {
      selector = (selector = $this.attr("href")) && (/#/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, ""));
    }
    selector = selector && $(selector);
    if (!selector || !selector.length) {
      selector = $this.parent();
    }
    return selector;
  }
  /** @type {string} */
  var optgroup = "[data-toggle=dropdown]";
  /**
   * @param {string} type
   * @return {undefined}
   */
  var Dropdown = function(type) {
    var $el = $(type).on("click.dropdown.data-api", this.toggle);
    $("html").on("click.dropdown.data-api", function() {
      $el.parent().removeClass("open");
    });
  };
  Dropdown.prototype = {
    /** @type {function (string): undefined} */
    constructor : Dropdown,
    /**
     * @return {?}
     */
    toggle : function() {
      var $this = $(this);
      var $parent;
      var event;
      if (!$this.is(".disabled, :disabled")) {
        $parent = getParent($this);
        event = $parent.hasClass("open");
        rvar();
        if (!event) {
          if ("ontouchstart" in document.documentElement && !$this.hasClass("no-dropdown-backdrop")) {
            $('<div class="dropdown-backdrop"/>').insertBefore($(this)).on("click", rvar);
          }
          $parent.toggleClass("open");
        }
        $this.focus();
        return false;
      }
    },
    /**
     * @param {Object} e
     * @return {?}
     */
    keydown : function(e) {
      var $this;
      var $parent;
      var event;
      if (/(38|40|27)/.test(e.keyCode) && ($this = $(this), e.preventDefault(), e.stopPropagation(), !$this.is(".disabled, :disabled"))) {
        $parent = getParent($this);
        event = $parent.hasClass("open");
        if (!event || event && 27 == e.keyCode) {
          return 27 == e.which && $parent.find(optgroup).focus(), $this.click();
        }
        $this = $("[role=menu] li:not(.divider):visible a", $parent);
        if ($this.length) {
          $parent = $this.index($this.filter(":focus"));
          if (38 == e.keyCode) {
            if (0 < $parent) {
              $parent--;
            }
          }
          if (40 == e.keyCode) {
            if ($parent < $this.length - 1) {
              $parent++;
            }
          }
          if (!~$parent) {
            /** @type {number} */
            $parent = 0;
          }
          $this.eq($parent).focus();
        }
      }
    }
  };
  var old = $.fn.dropdown;
  /**
   * @param {?} option
   * @return {?}
   */
  $.fn.dropdown = function(option) {
    return this.each(function() {
      var $this = $(this);
      var data = $this.data("dropdown");
      if (!data) {
        $this.data("dropdown", data = new Dropdown(this));
      }
      if ("string" == typeof option) {
        data[option].call($this);
      }
    });
  };
  /** @type {function (string): undefined} */
  $.fn.dropdown.Constructor = Dropdown;
  /**
   * @return {?}
   */
  $.fn.dropdown.noConflict = function() {
    $.fn.dropdown = old;
    return this;
  };
  $(document).on("click.dropdown.data-api", rvar).on("click.dropdown.data-api", ".dropdown form", function(event) {
    event.stopPropagation();
  }).on("click.dropdown.data-api", optgroup, Dropdown.prototype.toggle).on("keydown.dropdown.data-api", optgroup + ", [role=menu]", Dropdown.prototype.keydown);
}(window.jQuery);
!function($) {
  /**
   * @param {string} type
   * @param {Function} name
   * @return {undefined}
   */
  var Typeahead = function(type, name) {
    this.$element = $(type);
    this.options = $.extend({}, $.fn.typeahead.defaults, name);
    this.matcher = this.options.matcher || this.matcher;
    this.sorter = this.options.sorter || this.sorter;
    this.highlighter = this.options.highlighter || this.highlighter;
    this.updater = this.options.updater || this.updater;
    this.source = this.options.source;
    this.$menu = $(this.options.menu);
    /** @type {boolean} */
    this.shown = false;
    this.listen();
  };
  Typeahead.prototype = {
    /** @type {function (string, Function): undefined} */
    constructor : Typeahead,
    /**
     * @return {?}
     */
    select : function() {
      var val = this.$menu.find(".active").attr("data-value");
      this.$element.val(this.updater(val)).change();
      return this.hide();
    },
    /**
     * @param {?} item
     * @return {?}
     */
    updater : function(item) {
      return item;
    },
    /**
     * @return {?}
     */
    show : function() {
      var pos = $.extend({}, this.$element.position(), {
        height : this.$element[0].offsetHeight
      });
      this.$menu.insertAfter(this.$element).css({
        top : pos.top + pos.height,
        left : pos.left
      }).show();
      /** @type {boolean} */
      this.shown = true;
      return this;
    },
    /**
     * @return {?}
     */
    hide : function() {
      this.$menu.hide();
      /** @type {boolean} */
      this.shown = false;
      return this;
    },
    /**
     * @return {?}
     */
    lookup : function() {
      var nodes;
      this.query = this.$element.val();
      return!this.query || this.query.length < this.options.minLength ? this.shown ? this.hide() : this : (nodes = $.isFunction(this.source) ? this.source(this.query, $.proxy(this.process, this)) : this.source) ? this.process(nodes) : this;
    },
    /**
     * @param {string} items
     * @return {?}
     */
    process : function(items) {
      var that = this;
      items = $.grep(items, function(item) {
        return that.matcher(item);
      });
      items = this.sorter(items);
      return!items.length ? this.shown ? this.hide() : this : this.render(items.slice(0, this.options.items)).show();
    },
    /**
     * @param {Object} item
     * @return {?}
     */
    matcher : function(item) {
      return~item.toLowerCase().indexOf(this.query.toLowerCase());
    },
    /**
     * @param {Array} items
     * @return {?}
     */
    sorter : function(items) {
      /** @type {Array} */
      var beginswith = [];
      /** @type {Array} */
      var caseSensitive = [];
      /** @type {Array} */
      var caseInsensitive = [];
      var item;
      for (;item = items.shift();) {
        if (item.toLowerCase().indexOf(this.query.toLowerCase())) {
          if (~item.indexOf(this.query)) {
            caseSensitive.push(item);
          } else {
            caseInsensitive.push(item);
          }
        } else {
          beginswith.push(item);
        }
      }
      return beginswith.concat(caseSensitive, caseInsensitive);
    },
    /**
     * @param {string} value
     * @return {?}
     */
    highlighter : function(value) {
      var b = this.query.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
      return value.replace(RegExp("(" + b + ")", "ig"), function(deepDataAndEvents, dataAndEvents) {
        return "<strong>" + dataAndEvents + "</strong>";
      });
    },
    /**
     * @param {string} type
     * @return {?}
     */
    render : function(type) {
      var that = this;
      type = $(type).map(function(i, isXML) {
        i = $(that.options.item).attr("data-value", isXML);
        i.find("a").html(that.highlighter(isXML));
        return i[0];
      });
      type.first().addClass("active");
      this.$menu.html(type);
      return this;
    },
    /**
     * @return {undefined}
     */
    next : function() {
      var $next = this.$menu.find(".active").removeClass("active").next();
      if (!$next.length) {
        $next = $(this.$menu.find("li")[0]);
      }
      $next.addClass("active");
    },
    /**
     * @return {undefined}
     */
    prev : function() {
      var next = this.$menu.find(".active").removeClass("active").prev();
      if (!next.length) {
        next = this.$menu.find("li").last();
      }
      next.addClass("active");
    },
    /**
     * @return {undefined}
     */
    listen : function() {
      this.$element.on("focus", $.proxy(this.focus, this)).on("blur", $.proxy(this.blur, this)).on("keypress", $.proxy(this.keypress, this)).on("keyup", $.proxy(this.keyup, this));
      if (this.eventSupported("keydown")) {
        this.$element.on("keydown", $.proxy(this.keydown, this));
      }
      this.$menu.on("click", $.proxy(this.click, this)).on("mouseenter", "li", $.proxy(this.mouseenter, this)).on("mouseleave", "li", $.proxy(this.mouseleave, this));
    },
    /**
     * @param {string} eventName
     * @return {?}
     */
    eventSupported : function(eventName) {
      /** @type {boolean} */
      var isSupported = eventName in this.$element;
      if (!isSupported) {
        this.$element.setAttribute(eventName, "return;");
        /** @type {boolean} */
        isSupported = "function" === typeof this.$element[eventName];
      }
      return isSupported;
    },
    /**
     * @param {string} type
     * @return {undefined}
     */
    move : function(type) {
      if (this.shown) {
        switch(type.keyCode) {
          case 9:
          ;
          case 13:
          ;
          case 27:
            type.preventDefault();
            break;
          case 38:
            type.preventDefault();
            this.prev();
            break;
          case 40:
            type.preventDefault();
            this.next();
        }
        type.stopPropagation();
      }
    },
    /**
     * @param {string} cycle
     * @return {undefined}
     */
    keydown : function(cycle) {
      /** @type {number} */
      this.suppressKeyPressRepeat = ~$.inArray(cycle.keyCode, [40, 38, 9, 13, 27]);
      this.move(cycle);
    },
    /**
     * @param {string} cycle
     * @return {undefined}
     */
    keypress : function(cycle) {
      if (!this.suppressKeyPressRepeat) {
        this.move(cycle);
      }
    },
    /**
     * @param {Function} e
     * @return {undefined}
     */
    keyup : function(e) {
      switch(e.keyCode) {
        case 40:
        ;
        case 38:
        ;
        case 16:
        ;
        case 17:
        ;
        case 18:
          break;
        case 9:
        ;
        case 13:
          if (!this.shown) {
            return;
          }
          this.select();
          break;
        case 27:
          if (!this.shown) {
            return;
          }
          this.hide();
          break;
        default:
          this.lookup();
      }
      e.stopPropagation();
      e.preventDefault();
    },
    /**
     * @return {undefined}
     */
    focus : function() {
      /** @type {boolean} */
      this.focused = true;
    },
    /**
     * @return {undefined}
     */
    blur : function() {
      /** @type {boolean} */
      this.focused = false;
      if (!this.mousedover) {
        if (this.shown) {
          this.hide();
        }
      }
    },
    /**
     * @param {Function} e
     * @return {undefined}
     */
    click : function(e) {
      e.stopPropagation();
      e.preventDefault();
      this.select();
      this.$element.focus();
    },
    /**
     * @param {Object} e
     * @return {undefined}
     */
    mouseenter : function(e) {
      /** @type {boolean} */
      this.mousedover = true;
      this.$menu.find(".active").removeClass("active");
      $(e.currentTarget).addClass("active");
    },
    /**
     * @return {undefined}
     */
    mouseleave : function() {
      /** @type {boolean} */
      this.mousedover = false;
      if (!this.focused) {
        if (this.shown) {
          this.hide();
        }
      }
    }
  };
  var old = $.fn.typeahead;
  /**
   * @param {number} option
   * @return {?}
   */
  $.fn.typeahead = function(option) {
    return this.each(function() {
      var $this = $(this);
      var data = $this.data("typeahead");
      var options = "object" == typeof option && option;
      if (!data) {
        $this.data("typeahead", data = new Typeahead(this, options));
      }
      if ("string" == typeof option) {
        data[option]();
      }
    });
  };
  $.fn.typeahead.defaults = {
    source : [],
    items : 8,
    menu : '<ul class="typeahead dropdown-menu"></ul>',
    item : '<li><a href="#"></a></li>',
    minLength : 1
  };
  /** @type {function (string, Function): undefined} */
  $.fn.typeahead.Constructor = Typeahead;
  /**
   * @return {?}
   */
  $.fn.typeahead.noConflict = function() {
    $.fn.typeahead = old;
    return this;
  };
  $(document).on("focus.typeahead.data-api", '[data-provide="typeahead"]', function() {
    var $this = $(this);
    if (!$this.data("typeahead")) {
      $this.typeahead($this.data());
    }
  });
}(window.jQuery);
!function($) {
  $(function() {
    var support = $.support;
    var s;
    a: {
      /** @type {Element} */
      s = document.createElement("bootstrap");
      var transEndEventNames = {
        WebkitTransition : "webkitTransitionEnd",
        MozTransition : "transitionend",
        OTransition : "oTransitionEnd otransitionend",
        transition : "transitionend"
      };
      var name;
      for (name in transEndEventNames) {
        if (void 0 !== s.style[name]) {
          s = transEndEventNames[name];
          break a;
        }
      }
      s = void 0;
    }
    support.transition = s && {
      end : s
    };
  });
}(window.jQuery);
!function($) {
  /**
   * @param {string} type
   * @param {Function} name
   * @return {undefined}
   */
  var Collapse = function(type, name) {
    this.$element = $(type);
    this.options = $.extend({}, $.fn.collapse.defaults, name);
    if (this.options.parent) {
      this.$parent = $(this.options.parent);
    }
    if (this.options.toggle) {
      this.toggle();
    }
  };
  Collapse.prototype = {
    /** @type {function (string, Function): undefined} */
    constructor : Collapse,
    /**
     * @return {?}
     */
    dimension : function() {
      return this.$element.hasClass("width") ? "width" : "height";
    },
    /**
     * @return {undefined}
     */
    show : function() {
      var dimension;
      var scroll;
      var actives;
      var hasData;
      if (!this.transitioning && !this.$element.hasClass("in")) {
        dimension = this.dimension();
        scroll = $.camelCase(["scroll", dimension].join("-"));
        if ((actives = this.$parent && this.$parent.find("> .accordion-group > .in")) && actives.length) {
          if ((hasData = actives.data("collapse")) && hasData.transitioning) {
            return;
          }
          actives.collapse("hide");
          if (!hasData) {
            actives.data("collapse", null);
          }
        }
        this.$element[dimension](0);
        this.transition("addClass", $.Event("show"), "shown");
        if ($.support.transition) {
          this.$element[dimension](this.$element[0][scroll]);
        }
      }
    },
    /**
     * @return {undefined}
     */
    hide : function() {
      var dimension;
      if (!this.transitioning) {
        if (this.$element.hasClass("in")) {
          dimension = this.dimension();
          this.reset(this.$element[dimension]());
          this.transition("removeClass", $.Event("hide"), "hidden");
          this.$element[dimension](0);
        }
      }
    },
    /**
     * @param {string} models
     * @return {?}
     */
    reset : function(models) {
      var dimension = this.dimension();
      this.$element.removeClass("collapse")[dimension](models || "auto")[0].offsetWidth;
      this.$element[null !== models ? "addClass" : "removeClass"]("collapse");
      return this;
    },
    /**
     * @param {string} type
     * @param {string} name
     * @param {string} ready
     * @return {undefined}
     */
    transition : function(type, name, ready) {
      var that = this;
      /**
       * @return {undefined}
       */
      var complete = function() {
        if ("show" == name.type) {
          that.reset();
          that.$element.addClass("in");
        }
        /** @type {number} */
        that.transitioning = 0;
        that.$element.removeClass("collapsing").trigger(ready);
      };
      this.$element.trigger(name);
      if (!name.isDefaultPrevented()) {
        /** @type {number} */
        this.transitioning = 1;
        this.$element.removeClass("in")[type]("collapsing");
        if ($.support.transition && this.$element.hasClass("collapse")) {
          this.$element.one($.support.transition.end, complete);
        } else {
          complete();
        }
      }
    },
    /**
     * @return {undefined}
     */
    toggle : function() {
      this[this.$element.hasClass("in") ? "hide" : "show"]();
    }
  };
  var old = $.fn.collapse;
  /**
   * @param {?} options
   * @return {?}
   */
  $.fn.collapse = function(options) {
    return this.each(function() {
      var $this = $(this);
      var data = $this.data("collapse");
      var encoding = $.extend({}, $.fn.collapse.defaults, $this.data(), "object" == typeof options && options);
      if (!data) {
        $this.data("collapse", data = new Collapse(this, encoding));
      }
      if ("string" == typeof options) {
        data[options]();
      }
    });
  };
  $.fn.collapse.defaults = {
    toggle : true
  };
  /** @type {function (string, Function): undefined} */
  $.fn.collapse.Constructor = Collapse;
  /**
   * @return {?}
   */
  $.fn.collapse.noConflict = function() {
    $.fn.collapse = old;
    return this;
  };
  $(document).on("click.collapse.data-api", "[data-toggle=collapse]", function(i) {
    var $this = $(this);
    var href;
    i = $this.attr("data-target") || (i.preventDefault() || (href = $this.attr("href")) && href.replace(/.*(?=#[^\s]+$)/, ""));
    href = $(i).data("collapse") ? "toggle" : $this.data();
    $this[$(i).hasClass("in") ? "addClass" : "removeClass"]("collapsed");
    $(i).collapse(href);
  });
}(window.jQuery);
(function(dataAndEvents, factory) {
  if ("function" === typeof define && define.amd) {
    define("bootstrap-calendar", ["jquery", "backbone", "underscore"], factory);
  } else {
    factory(window.$, window.Backbone, window._);
  }
})(this, function($, Backbone, _) {
  /**
   * @param {string} type
   * @return {undefined}
   */
  var init = function(type) {
    this.Model = Backbone.Model.extend({
      /**
       * @return {undefined}
       */
      initialize : function() {
        var value = this.get("defaultDate");
        var ready = this.getCalendar();
        var cycle = this.getDefaultAvailability();
        _.bindAll(this, "addReservations", "removeReservations", "getPropertyDruid", "setPropertyDruid", "resolveDateConflicts", "formatDate", "getDefaultDates", "copyDate", "makeDate", "resolveDates", "getCalendar", "setDataBounds", "throwError", "reverseFormatDate", "getReservationsById", "hasAvailability", "getAvailabilityBeginDate", "getAvailabilityEndDate");
        ready = $.merge(ready, this.getDefaultDates());
        this.set("calendar", ready);
        this.set("availability", cycle);
        if (this.hasAvailability()) {
          this.set("availabilityBeginDate", new Date(cycle.dateRange.beginDate));
          this.set("availabilityEndDate", new Date(cycle.dateRange.endDate));
        }
        if (value) {
          if (value instanceof Date) {
            this.setDataBounds(value);
            this.set("defaultDate", this.formatDate(value));
          } else {
            this.setDataBounds(this.reverseFormatDate(value));
          }
        } else {
          this.setDataBounds(new Date);
        }
      },
      /**
       * @param {?} m
       * @return {undefined}
       */
      addReservations : function(m) {
        if (!m.calendar || !m.reservations) {
          this.throwError("addReservations() requires calendar and reservations data");
        }
        var nodes = this.getCalendar();
        var ret = this.resolveDates($.extend(true, {}, m.calendar), $.extend(true, {}, m.reservations));
        this.set("calendar", $.merge(nodes, ret));
        this.set("availability", m.availability);
      },
      /**
       * @param {string} err
       * @return {?}
       */
      throwError : function(err) {
        throw "HomeAway Calendar Widget: " + err ? err : "There was an error.";
      },
      /**
       * @param {Array} type
       * @return {undefined}
       */
      removeReservations : function(type) {
        var cycle = this.getCalendar();
        var n1;
        var w;
        if (!type) {
          this.throwError("removeReservations requires an array of reservation ids or a single reservation id as a string");
        }
        if ("string" === typeof type) {
          /** @type {Array} */
          type = [type];
        }
        /** @type {number} */
        n1 = type.length - 1;
        for (;0 <= n1;n1--) {
          type[n1] = type[n1].toLowerCase();
          /** @type {number} */
          w = cycle.length - 1;
          for (;0 <= w;w--) {
            if (cycle[w].reservationId === type[n1]) {
              cycle.splice(w, 1);
            }
          }
        }
        this.set("calendar", cycle);
      },
      /**
       * @return {?}
       */
      getPropertyDruid : function() {
        return this.get("propertyDruid") || null;
      },
      /**
       * @param {string} cycle
       * @return {undefined}
       */
      setPropertyDruid : function(cycle) {
        if (!cycle || "string" !== typeof cycle) {
          this.throwError("setPropertyDruid requires a druid string to set the property druid to.");
        }
        this.set("propertyDruid", cycle);
      },
      /**
       * @param {Date} date
       * @return {?}
       */
      copyDate : function(date) {
        return new Date(date.getTime());
      },
      /**
       * @param {Date} date
       * @param {?} d
       * @return {?}
       */
      makeDate : function(date, d) {
        date = date ? this.copyDate(date) : new Date;
        if (d) {
          if (d.months) {
            date.setMonth(date.getMonth() + d.months);
          }
        }
        if (d) {
          if (d.days) {
            date.setDate(date.getDate() + d.days);
          }
        }
        return date;
      },
      /**
       * @param {Date} value
       * @return {?}
       */
      setDataBounds : function(value) {
        this.set({
          endDate : this.formatDate(this.makeDate(value, {
            months : 12
          })),
          startDate : this.formatDate(this.makeDate(value, {
            months : -12
          })),
          defaultDate : this.formatDate(value)
        });
        return false;
      },
      defaults : {
        calendar : [],
        availability : {},
        startCalendarDate : void 0,
        endCalendarDate : void 0
      },
      /**
       * @param {string} data
       * @return {?}
       */
      parse : function(data) {
        data.calendar = this.resolveDates(data.calendar, data.reservations);
        data.calendar = $.merge(this.getDefaultDates(), data.calendar);
        return data;
      },
      /**
       * @param {Object} obj
       * @param {Object} css
       * @return {?}
       */
      resolveDates : function(obj, css) {
        /**
         * @param {Object} o
         * @param {Object} v
         * @return {?}
         */
        function toString(o, v) {
          return{
            startDate : v ? v.checkinDate : o.startDate ? o.startDate : void 0,
            endDate : v ? v.checkoutDate : o.endDate ? o.endDate : void 0,
            date : o.date,
            reservationId : o.reservationId,
            duration : (o.duration ? o.duration : void 0) || ((v.checkinDate === o.date ? "pm" : void 0) || (v.checkoutDate === o.date ? "am" : "full")),
            status : (v ? v.status ? v.status.toLowerCase() : void 0 : void 0) || (o ? o.status ? o.status.toLowerCase() : "" : ""),
            guestFirstName : v ? v.guestFirstName : void 0,
            guestLastName : v ? v.guestLastName : void 0,
            checkinTime : v ? v.checkinTime : void 0,
            checkoutTime : v ? v.checkoutTime : void 0
          };
        }
        /**
         * @param {string} value
         * @param {Object} obj
         * @param {Object} key
         * @param {?} text
         * @return {undefined}
         */
        function debug(value, obj, key, text) {
          key = key.getTime();
          var v = obj[key];
          if (v) {
            if (!(v instanceof Array)) {
              value = value.resolveDateConflicts(v, text);
              obj[key] = 1 === value.length ? value[0] : value;
            }
          } else {
            obj[key] = text;
          }
        }
        var commands = {};
        var i;
        var value;
        var v;
        var j;
        for (i in css) {
          if ("inquiry" !== i) {
            if ("RESERVE" === css[i].status) {
              v = this.makeDate(this.reverseFormatDate(css[i].checkoutDate));
              value = this.makeDate(this.reverseFormatDate(css[i].checkinDate));
              /** @type {number} */
              v = Math.round(Math.abs((v - value) / 864E5));
              /** @type {number} */
              j = v - 1;
              for (;1 <= j;j--) {
                value.setDate(value.getDate() + 1);
                debug(this, commands, value, toString({
                  date : this.formatDate(value),
                  duration : "full",
                  reservationId : i,
                  checkinDate : css[i].checkinDate,
                  checkoutDate : css[i].checkoutDate,
                  status : css[i].checkoutDate.status
                }, css[i]));
              }
            }
            debug(this, commands, this.makeDate(this.reverseFormatDate(css[i].checkoutDate)), toString({
              date : css[i].checkoutDate,
              reservationId : i
            }, css[i]));
          }
        }
        for (i in obj) {
          if (value = css ? css[obj[i].reservationId] : void 0, obj[i].startDate && obj[i].endDate) {
            v = obj[i].endDate;
            var startDate = obj[i].startDate;
            var statusCode = obj[i].status;
            var length = this.makeDate(this.reverseFormatDate(v));
            j = this.makeDate(this.reverseFormatDate(startDate));
            var reservationId = obj[i].reservationId;
            var start = j;
            var itemsLength;
            debug(this, commands, j, toString({
              date : startDate,
              duration : "pm",
              reservationId : reservationId,
              startDate : startDate,
              endDate : v,
              status : statusCode
            }, value));
            /** @type {number} */
            itemsLength = Math.round(Math.abs((length - j) / 864E5));
            start = j;
            /** @type {number} */
            j = itemsLength - 1;
            for (;1 <= j;j--) {
              start.setDate(start.getDate() + 1);
              debug(this, commands, start, toString({
                date : this.formatDate(start),
                duration : "full",
                reservationId : reservationId,
                startDate : startDate,
                endDate : v,
                status : statusCode
              }, value));
            }
            debug(this, commands, length, toString({
              date : v,
              duration : "am",
              reservationId : reservationId,
              startDate : startDate,
              endDate : v,
              status : statusCode
            }, value));
            delete css[obj[i].reservationId];
          } else {
            debug(this, commands, this.makeDate(this.reverseFormatDate(i)), toString($.extend(true, {
              date : i
            }, obj[i]), value));
          }
        }
        return _.flatten(_.values(commands), true);
      },
      /**
       * @param {Object} $scope
       * @param {Object} args
       * @return {?}
       */
      resolveDateConflicts : function($scope, args) {
        var a;
        var b;
        if ($scope.startDate && $scope.endDate) {
          if ("full" === $scope.duration && "full" === args.duration) {
            a = this.reverseFormatDate($scope.startDate);
            b = this.reverseFormatDate(args.startDate);
            if (a > b) {
              return[$scope];
            }
            if (a < b) {
              return[args];
            }
            a = this.reverseFormatDate($scope.endDate);
            b = this.reverseFormatDate(args.endDate);
            return a > b ? [args] : a < b ? [$scope] : "reserve" === $scope.status ? [$scope] : [args];
          }
          if ("pm" === $scope.duration && "full" === args.duration) {
            return args.duration = "am", [args, $scope];
          }
          if ("am" === $scope.duration && "full" === args.duration) {
            if ("reserve" === args.status) {
              return[args];
            }
            /** @type {string} */
            args.duration = "pm";
          } else {
            if ("full" === $scope.duration && "pm" === args.duration) {
              /** @type {string} */
              $scope.duration = "am";
            } else {
              if ("full" === $scope.duration && "am" === args.duration) {
                if ("reserve" === $scope.status) {
                  return[$scope];
                }
                /** @type {string} */
                $scope.duration = "pm";
                return[args, $scope];
              }
              if ("am" === $scope.duration && "am" === args.duration) {
                return a = this.reverseFormatDate($scope.endDate), b = this.reverseFormatDate(args.endDate), a > b ? [args] : a < b ? [$scope] : "reserve" === $scope.status ? [$scope] : [args];
              }
              if ("pm" === $scope.duration && "pm" === args.duration) {
                return a = this.reverseFormatDate($scope.startDate), b = this.reverseFormatDate(args.startDate), a > b ? [$scope] : a < b ? [args] : "reserve" === $scope.status ? [$scope] : [args];
              }
            }
          }
        }
        return[$scope, args];
      },
      /**
       * @return {?}
       */
      getDefaultDates : function() {
        return this.resolveDates($.extend(true, {}, this.get("defaultCalendar")), $.extend(true, {}, this.get("defaultCalendarEvents")));
      },
      /**
       * @return {?}
       */
      getDefaultAvailability : function() {
        return $.extend(true, {}, this.get("defaultAvailability"));
      },
      /**
       * @param {?} keepData
       * @return {?}
       */
      getReservationsById : function(keepData) {
        return _.where(this.getCalendar(), {
          reservationId : keepData
        });
      },
      /**
       * @param {Object} value
       * @return {?}
       */
      formatDate : function(value) {
        var dd = value.getDate().toString();
        var mm = (value.getMonth() + 1).toString();
        return value.getFullYear().toString() + "-" + (mm[1] ? mm : "0" + mm[0]) + "-" + (dd[1] ? dd : "0" + dd[0]);
      },
      /**
       * @param {string} name
       * @return {?}
       */
      reverseFormatDate : function(name) {
        name = name.split("-");
        return new Date(parseInt(name[0], 10), parseInt(name[1], 10) - 1, parseInt(name[2], 10));
      },
      /**
       * @return {?}
       */
      url : function() {
        return this.get("url") + "?druidId=" + this.get("propertyDruid") + "&startDate=" + this.get("startDate") + "&endDate=" + this.get("endDate") + "&_restfully=true&_=" + (new Date).getTime();
      },
      /**
       * @return {?}
       */
      getCalendar : function() {
        return $.extend(true, [], this.get("calendar"));
      },
      /**
       * @return {?}
       */
      getAvailability : function() {
        return $.extend(true, {}, this.get("availability"));
      },
      /**
       * @param {Object} def
       * @return {?}
       */
      getAvailabilityBeginDate : function(def) {
        return "undefined" !== typeof def ? def.dateRange.beginDate : this.hasAvailability() ? this.get("availabilityBeginDate") : "";
      },
      /**
       * @return {?}
       */
      getAvailabilityEndDate : function() {
        return this.hasAvailability() ? this.get("availabilityEndDate") : "";
      },
      /**
       * @return {?}
       */
      hasAvailability : function() {
        return!$.isEmptyObject(this.getAvailability());
      },
      /**
       * @param {number} nodeName
       * @return {?}
       */
      getChangeoverValue : function(nodeName) {
        var getAvailability;
        if (!this.hasAvailability()) {
          return null;
        }
        getAvailability = this.getAvailability();
        nodeName = this.getAvailabilityIndexForDate(nodeName);
        return 0 <= nodeName ? getAvailability.unitAvailabilityConfiguration.changeOver[nodeName] : getAvailability.changeOverDefault;
      },
      /**
       * @param {Date} name
       * @param {Date} key
       * @return {?}
       */
      isCheckInDay : function(name, key) {
        var message;
        if (key && (name < key && this.isDateBeforeMinStay(name, key))) {
          return false;
        }
        message = this.getChangeoverValue(name);
        return null === message || ("C" === message || "I" === message);
      },
      /**
       * @param {Date} type
       * @param {number} name
       * @return {?}
       */
      isCheckOutDay : function(type, name) {
        var message;
        if (type && this.isDateBeforeMinStay(type, name)) {
          return false;
        }
        message = this.getChangeoverValue(name);
        return null === message || ("C" === message || "O" === message);
      },
      /**
       * @param {number} arg
       * @return {?}
       */
      getAvailabilityIndexForDate : function(arg) {
        var r20;
        var rreturn;
        if (!this.hasAvailability()) {
          return-1;
        }
        if (!(arg instanceof Date)) {
          this.throwError("getAvailabilityIndexForDate requires a Date object.  You passed in " + arg);
        }
        r20 = this.reverseFormatDate(this.get("availability").dateRange.beginDate);
        rreturn = this.reverseFormatDate(this.get("availability").dateRange.endDate);
        return 0 < this.getNumberOfNightsBetweenDates(rreturn, arg) ? -1 : this.getNumberOfNightsBetweenDates(r20, arg);
      },
      /**
       * @param {Object} regex
       * @param {Object} expected
       * @return {?}
       */
      getNumberOfNightsBetweenDates : function(regex, expected) {
        return Math.round((expected.getTime() - regex.getTime()) / 864E5);
      },
      /**
       * @param {Date} until
       * @param {number} val
       * @param {string} hash
       * @return {?}
       */
      getEarliestMinStayDate : function(until, val, hash) {
        /** @type {Date} */
        var date = new Date(until.getFullYear(), until.getMonth(), until.getDate());
        if ("undefined" === typeof val || "undefined" === typeof hash) {
          if (!this.hasAvailability()) {
            return date;
          }
          hash = this.getAvailabilityIndexForDate(until);
          if (0 > hash) {
            val = this.getAvailability().minStayDefault;
            hash = this.getAvailability().stayIncrementDefault;
          } else {
            val = this.getAvailability().unitAvailabilityConfiguration.minStay.split(",")[hash];
            hash = this.getAvailability().unitAvailabilityConfiguration.stayIncrement[hash];
          }
        }
        val *= 1;
        if ("D" === hash) {
          date.setDate(until.getDate() + val);
        } else {
          if ("W" === hash) {
            date.setDate(until.getDate() + 7 * val);
          } else {
            if ("M" === hash && (date.setMonth(until.getMonth() + val), date.getDate() !== until.getDate())) {
              /** @type {number} */
              until = date.getMonth() - 1;
              for (;until !== date.getMonth();) {
                date.setDate(date.getDate() - 1);
              }
            }
          }
        }
        return date;
      },
      /**
       * @param {Date} obj
       * @param {number} keepData
       * @return {?}
       */
      isDateBeforeMinStay : function(obj, keepData) {
        var keys = this.getEarliestMinStayDate(obj);
        return keepData < keys;
      }
    });
    if (!$.datepicker._updateDatepicker.modified) {
      /** @type {function (Object): undefined} */
      $.datepicker._updateDatepicker_original = $.datepicker._updateDatepicker;
      /**
       * @param {Object} inst
       * @return {undefined}
       */
      $.datepicker._updateDatepicker = function(inst) {
        var buttonImage = this.dpDiv.find(".popover");
        $.datepicker._updateDatepicker_original(inst);
        if (0 < buttonImage.length) {
          var output = this.dpDiv.find(".ui-state-active");
          output.parent().css("overflow", "visible");
          output.parent().append(buttonImage[0]);
        }
        if (buttonImage = this._get(inst, "afterShow")) {
          buttonImage.apply(inst.input ? inst.input[0] : null);
        }
      };
      /** @type {boolean} */
      $.datepicker._updateDatepicker.modified = true;
    }
    if (!$.datepicker._generateHTML.modified) {
      /** @type {function (?): ?} */
      $.datepicker._generateHTML_original = $.datepicker._generateHTML;
      /**
       * @param {?} inst
       * @return {?}
       */
      $.datepicker._generateHTML = function(inst) {
        var c = type.language && type.language.clearText ? type.language.clearText : "Clear Date";
        var g = type.language && type.language.checkinDates ? type.language.checkinDates : "Available <b>check-in</b> dates";
        var o = type.language && type.language.checkoutDates ? type.language.checkoutDates : "Available <b>check-out</b> dates";
        var page = $($.datepicker._generateHTML_original.call($.datepicker, inst));
        page = $("<div />").append(page);
        $(".ui-datepicker-buttonpane", page).append('<div class="datepicker-legend"><span class="datepicker-key"></span><span class="datepicker-key-label checkin-dates">' + g + '</span><span class="datepicker-key-label checkout-dates">' + o + "</span></div>").append($('<button class="ui-datepicker-clear ui-state-default ui-priority-primary ui-corner-all">' + c + "</button>").click(function() {
          $(inst.input).triggerHandler("clearDates");
        }));
        return page = page.children();
      };
      /** @type {boolean} */
      $.datepicker._generateHTML.modified = true;
    }
    this.View = Backbone.View.extend({
      /**
       * @param {Object} options
       * @return {undefined}
       */
      initialize : function(options) {
        var self = this;
        _.bindAll(this, "fetchData", "extendOptionsFunction");
        var cycle;
        for (cycle in options.clicked) {
          this.extendOptionsFunction(cycle, options.clicked);
        }
        $.extend(true, this, {
          clicked : options.clicked,
          hovered : options.hovered,
          error : options.error,
          endCalendar : options.endCalendar,
          hoverClass : options.hoverClass,
          hoverClassStart : options.hoverClassStart,
          hoverClassEnd : options.hoverClassEnd,
          dateFormat : options.dateFormat,
          fetching : options.fetch,
          currentElement : void 0
        });
        if (!Backbone.Layout) {
          _.bindAll(this, "afterRender");
          this.on("render", this.afterRender, this);
        }
        this.model.on("error", function(dataAndEvents, cycle) {
          self.$el.trigger("error", cycle);
          self.error(cycle);
        });
        this.model.on("change:calendar", this.afterRender, this);
        this.model.on("change:startDate", function() {
          self.fetchData(options.fetch);
        });
        this.model.on("change:propertyDruid", function() {
          self.fetchData(options.fetch);
        });
        this.fetchData(options.fetch);
      },
      /**
       * @param {string} cycle
       * @param {Object} next
       * @return {undefined}
       */
      extendOptionsFunction : function(cycle, next) {
        var self = this;
        var fn = next[cycle];
        /**
         * @param {?} name
         * @param {string} index
         * @return {undefined}
         */
        next[cycle] = function(name, index) {
          self.$el.trigger(cycle, [name, index]);
          fn.call(this, name, index);
        };
      },
      /**
       * @param {string} inputVal
       * @return {?}
       */
      fetchData : function(inputVal) {
        var self = this;
        /** @type {string} */
        this.fetching = inputVal;
        this.afterRender();
        if (this.model.get("propertyDruid")) {
          if (this.fetching) {
            this.model.fetch({
              /**
               * @return {undefined}
               */
              complete : function() {
                self.$el.trigger("updated");
                /** @type {boolean} */
                self.fetching = false;
                self.afterRender();
              }
            });
          }
        }
        return false;
      },
      /**
       * @param {Date} options
       * @return {undefined}
       */
      createCalendar : function(options) {
        var element = options.el;
        var error = options.isEndCalendar;
        var el = options.endCalendar;
        var target = options.startCalendar;
        var data = $.extend(true, [], this.model.get("calendar"));
        $.extend(true, {}, this.model.get("availability"));
        var self = this;
        options = this.model.reverseFormatDate(this.model.get("defaultDate"));
        this.model.get("locale");
        if (!$.isEmptyObject(element.data("datepicker"))) {
          element.datepicker("destroy");
        }
        element.datepicker({
          minDate : this.model.get("minDate"),
          maxDate : this.model.get("maxDate"),
          defaultDate : options,
          dateFormat : this.dateFormat,
          firstDay : this.model.get("startOfWeek"),
          showButtonPanel : this.model.get("showButtonPanel"),
          numberOfMonths : this.model.get("numberOfMonths"),
          /**
           * @param {?} element
           * @param {?} inst
           * @return {undefined}
           */
          beforeShow : function(element, inst) {
            var $delegate = $(inst.dpDiv);
            if (self.model.hasAvailability()) {
              $delegate.addClass("has-availability");
              if ($(element).hasClass("start-calendar")) {
                $delegate.removeClass("show-checkout-dates-label").addClass("show-checkin-dates-label");
              } else {
                $delegate.removeClass("show-checkin-dates-label").addClass("show-checkout-dates-label");
              }
            } else {
              $delegate.removeClass("has-availability show-checkin-dates-label show-checkout-dates-label");
            }
          },
          /**
           * @param {?} i
           * @return {?}
           */
          beforeShowDay : function(i) {
            var min = self.model.get("startCalendarDate");
            var max = self.model.get("endCalendarDate");
            var f = self.model.hoveredEndDate;
            var current = self.model.hoveredStartDate;
            /** @type {Array} */
            var keys = [];
            self.model.getAvailability();
            var q = error && typeof f !== "undefined" || el && typeof current !== "undefined";
            var key;
            i = self.model.formatDate(i);
            /** @type {number} */
            key = data.length - 1;
            for (;key > -1;key--) {
              if (data[key].date === i) {
                keys.push(" " + data[key].duration + "-" + data[key].status.toLowerCase() + " X" + data[key].reservationId + "X");
              }
            }
            if (keys.length === 2 && (keys[0].indexOf("pm-") !== -1 && keys[1].indexOf("am-"))) {
              key = keys[0];
              keys[0] = keys[1];
              keys[1] = key;
            }
            i = self.model.reverseFormatDate(i);
            if (el) {
              if (q && (i < max && i > current)) {
                keys.push(" " + self.hoverClass);
              } else {
                if (!q && (i < max && i > min || (i < min && i > current || (min && (max && (min.toString() === i.toString() && max.toString() === min.toString())) || min && (current && (current < min && min.toString() === i.toString())))))) {
                  keys.push(" " + self.hoverClass);
                } else {
                  if (!q && (min && min.toString() === i.toString()) || current && current.toString() === i.toString()) {
                    keys.push(" " + self.hoverClassStart);
                  } else {
                    if (max) {
                      if (max.toString() === i.toString()) {
                        keys.push(" " + self.hoverClassEnd);
                      }
                    }
                  }
                }
              }
              if (self.model.hasAvailability()) {
                if (self.model.isCheckInDay(i, max)) {
                  keys.push(" " + self.getChangeoverClass(keys[0]));
                }
              }
            } else {
              if (error) {
                if (q && (min < f && (min < i && i < f))) {
                  keys.push(" " + self.hoverClass);
                } else {
                  if (!q && (min < f && (min < i && i < f) || (max && (i > min && i < max) || min && (max && (min.toString() === i.toString() && max.toString() === min.toString()))))) {
                    keys.push(" " + self.hoverClass);
                  } else {
                    if (min && min.toString() === i.toString()) {
                      keys.push(" " + self.hoverClassStart);
                    } else {
                      if (!q && (max && i.toString() === max.toString()) || f && i.toString() === f.toString()) {
                        keys.push(" " + self.hoverClassEnd);
                      }
                    }
                  }
                }
                if (self.model.hasAvailability()) {
                  if (self.model.isCheckOutDay(min, i)) {
                    keys.push(" " + self.getChangeoverClass(keys[0]));
                  }
                }
              } else {
                if (self.model.hasAvailability()) {
                  if (self.model.isCheckInDay(i)) {
                    keys.push(" " + self.getChangeoverClass(keys[0]));
                  }
                }
              }
            }
            return[true, keys.join(""), ""];
          },
          /**
           * @param {Node} year
           * @param {number} month
           * @return {?}
           */
          onChangeMonthYear : function(year, month) {
            if (!self.fetching && self.options.fetch) {
              var aDate = self.model.reverseFormatDate(self.model.get("startDate"));
              var tempDate = self.model.reverseFormatDate(self.model.get("endDate"));
              var text = self.model.get("numberOfMonths");
              var result = text;
              /** @type {number} */
              var l = 0;
              /** @type {number} */
              var d = 0;
              /** @type {Date} */
              d = new Date(year, month - 1, 1);
              if (Object.prototype.toString.call(text) === "[object Array]") {
                /** @type {number} */
                result = 0;
                /** @type {number} */
                l = text.length - 1;
                for (;l >= 0;l--) {
                  result = result + text[l];
                }
              }
              /** @type {number} */
              l = (d.getFullYear() - aDate.getFullYear()) * 12;
              /** @type {number} */
              l = l - (aDate.getMonth() + 1);
              /** @type {number} */
              l = l + d.getMonth();
              /** @type {Date} */
              aDate = new Date(d.setMonth(d.getMonth() + result - 2));
              /** @type {number} */
              d = (tempDate.getFullYear() - aDate.getFullYear()) * 12;
              /** @type {number} */
              d = d - (aDate.getMonth() + 1);
              d = d + tempDate.getMonth();
              if (d < 1 || l < 1) {
                self.model.setDataBounds(new Date(year, month - 1, 1));
              }
            }
            return false;
          },
          /**
           * @return {undefined}
           */
          afterShow : function() {
            /**
             * @param {string} self
             * @return {?}
             */
            function normalize(self) {
              return self.indexOf("reserve") !== -1 ? "reserve" : self.indexOf("hold") !== -1 ? "hold" : self.indexOf("delete") !== -1 ? "delete" : self.indexOf("cancel") !== -1 ? "cancel" : self.indexOf("unavailable") !== -1 ? "unavailable" : self.indexOf("inquiry") !== -1 ? "inquiry" : "";
            }
            /**
             * @param {string} cls
             * @param {boolean} recurring
             * @param {string} url
             * @return {undefined}
             */
            function process(cls, recurring, url) {
              if (url !== "inquiry") {
                var codeSegments;
                var results;
                var i;
                codeSegments = self.$(".X" + cls + "X");
                if (recurring) {
                  /** @type {number} */
                  i = codeSegments.length - 1;
                  for (;i >= 0;i--) {
                    recurring = $(codeSegments[i]);
                    results = recurring.attr("class").split("X");
                    if (results[1] === cls) {
                      results[0] = results[0].replace("full-" + url, "full-" + url + "-hover");
                      results[0] = results[0].replace("am-" + url, "am-" + url + "-hover");
                      results[0] = results[0].replace("pm-" + url, "pm-" + url + "-hover");
                    } else {
                      results[2] = results[2].replace("full-" + url, "full-" + url + "-hover");
                      results[2] = results[2].replace("am-" + url, "am-" + url + "-hover");
                      results[2] = results[2].replace("pm-" + url, "pm-" + url + "-hover");
                    }
                    recurring.attr("class", results.join("X"));
                  }
                } else {
                  /** @type {number} */
                  i = codeSegments.length - 1;
                  for (;i >= 0;i--) {
                    recurring = $(codeSegments[i]).unbind("mousemove");
                    cls = recurring.attr("class");
                    cls = cls.replace(/-hover/g, "");
                    recurring.attr("class", cls);
                  }
                }
              }
            }
            if ("ontouchstart" in document.documentElement) {
              $(".ui-state-default").on("touchstart", function() {
                self.currentElement = $(this);
                var classes = $(this).parent().attr("class");
                var _users = classes.split("X");
                if (classes.indexOf("X") !== -1) {
                  self.currentId = _users[1];
                }
              });
            } else {
              $(".ui-state-default").hover(function() {
                var header = $(this).parent();
                var style = header.attr("class");
                var match = style.split("X");
                var dstUri = self.model.hoveredEndDate;
                var stringBuffer = self.model.hoveredStartDate;
                var href = header.attr("onclick");
                var oid = $(this).html();
                var name;
                var ret;
                var x;
                var y;
                self.currentElement = $(this);
                if (style.indexOf("X") !== -1) {
                  name = match[1];
                  if (match.length - 1 > 3 || (match[0].indexOf("am-reserve") !== -1 || match[0].indexOf("am-hold") !== -1)) {
                    $(this).unbind("mousemove").mousemove(function(e) {
                      var o = $(this).parent().offset();
                      /** @type {number} */
                      var j = e.pageX - o.left;
                      /** @type {number} */
                      e = e.pageY - o.top;
                      /** @type {number} */
                      o = $(this).parent().width() / 2;
                      process(name, false, ret);
                      process(match[3], false, ret);
                      if (j < o && e < o) {
                        ret = normalize(match[0]);
                        name = match[1];
                        if (ret === "inquiry") {
                          ret = match[2];
                          name = match[3];
                        }
                      } else {
                        ret = normalize(match[2]);
                        name = match[3];
                        if (ret === "inquiry") {
                          ret = match[0];
                          name = match[1];
                        }
                      }
                      if (self.currentId !== name) {
                        self.currentElement = $(this);
                        self.hovered.on($(this), self.model.getReservationsById(name));
                      }
                      self.currentId = name;
                      ret = normalize(ret);
                      process(name, true, ret);
                    });
                  } else {
                    self.currentId = name;
                    ret = normalize(style);
                    process(name, true, ret);
                  }
                  self.currentElement = $(this);
                  self.hovered.on($(this), self.model.getReservationsById(name));
                }
                if (header.data("handler") === "selectDay") {
                  /** @type {number} */
                  x = parseInt(header.data("year"), 10);
                  /** @type {number} */
                  y = parseInt(header.data("month"), 10) + 1;
                } else {
                  if (href) {
                    header = href.split(",");
                    /** @type {number} */
                    x = parseInt(header[2], 10);
                    /** @type {number} */
                    y = parseInt(header[1], 10) + 1;
                  }
                }
                if (x && y) {
                  oid = self.model.reverseFormatDate(x + "-" + y + "-" + oid);
                  if (self.el.tagName.toUpperCase() === "INPUT") {
                    if (error && (!dstUri || dstUri.toString() !== oid.toString())) {
                      self.model.hoveredEndDate = oid;
                      element.datepicker("refresh");
                    } else {
                      if (el && (!stringBuffer || stringBuffer.toString() !== oid.toString())) {
                        self.model.hoveredStartDate = oid;
                        element.datepicker("refresh");
                      }
                    }
                  }
                }
              }, function() {
                var children = $(this).parent().attr("class").split("X");
                var name = children[1];
                if (children.length - 1 > 3) {
                  process(children[3], false, "");
                  self.currentElement = $(this);
                  self.hovered.off($(this), self.model.getReservationsById(name));
                }
                if (name) {
                  process(name, false, "");
                  self.currentElement = $(this);
                  self.hovered.off($(this), self.model.getReservationsById(name));
                }
              });
            }
          },
          /**
           * @param {string} value
           * @param {Object} options
           * @return {undefined}
           */
          onSelect : function(value, options) {
            /**
             * @param {Object} player
             * @param {string} cycle
             * @return {undefined}
             */
            function init(player, cycle) {
              element.trigger(cycle, $(self.currentElement).parent());
              /** @type {string} */
              player.value = "";
              /** @type {boolean} */
              $.datepicker._getInst(player).inline = true;
            }
            var cycle = self.model.get("startCalendarDate");
            var camelKey = self.model.get("endCalendarDate");
            var rvar = self.model.get("startIsEndMinimum");
            /** @type {string} */
            var optgroup = "";
            var i;
            var B;
            self.model.getAvailability();
            if (value) {
              optgroup = $.datepicker.formatDate("yy-mm-dd", $.datepicker.parseDate(self.dateFormat, value));
            }
            /** @type {boolean} */
            options.inline = false;
            /** @type {number} */
            i = data.length - 1;
            for (;i >= 0;i--) {
              if (data[i].date === optgroup && data[i].reservationId === self.currentId) {
                /** @type {boolean} */
                B = true;
                if (self.clicked[data[i].status.toLowerCase()]) {
                  self.clicked[data[i].status.toLowerCase()](self.currentElement, data[i]);
                } else {
                  if (error) {
                    target.trigger(data[i].status.toLowerCase(), self.currentElement, data[i]);
                  } else {
                    element.trigger(data[i].status.toLowerCase(), self.currentElement, data[i]);
                  }
                }
              }
            }
            if (!B) {
              self.clicked.available(self.currentElement, optgroup);
            }
            if (error) {
              rvar = optgroup ? self.model.reverseFormatDate(optgroup) : optgroup;
              if (cycle && (rvar && !self.model.isCheckOutDay(cycle, rvar))) {
                init(this, "noCheckout");
              } else {
                if (!camelKey || rvar.toString() !== camelKey.toString()) {
                  element.trigger("changed", rvar);
                }
                self.model.set("endCalendarDate", rvar);
              }
            } else {
              if ((optgroup = optgroup ? self.model.reverseFormatDate(optgroup) : optgroup) && !self.model.isCheckInDay(optgroup, camelKey)) {
                init(this, "noCheckin");
              } else {
                if (!cycle || optgroup.toString() !== cycle.toString()) {
                  element.trigger("changed", optgroup);
                }
                cycle = optgroup;
                if (rvar) {
                  el.datepicker("option", "minDate", cycle);
                }
                if (el) {
                  self.model.set("startCalendarDate", cycle);
                }
              }
            }
          },
          /**
           * @param {?} desc
           * @param {Object} inst
           * @return {undefined}
           */
          onClose : function(desc, inst) {
            var optgroup = self.model.get("startCalendarDate");
            var end = self.model.get("endCalendarDate");
            var dateInputMaxRange;
            self.model.hoveredStartDate = void 0;
            self.model.hoveredEndDate = void 0;
            if (el) {
              element.datepicker("refresh").trigger("blur");
              if (optgroup && (end < optgroup || !end)) {
                if (typeof selectEndDate !== "undefined") {
                  $.datepicker._clearDate(el);
                }
                /** @type {Date} */
                dateInputMaxRange = new Date(optgroup.getTime());
                el.datepicker("option", "minDate", dateInputMaxRange);
                setTimeout(function() {
                  el.datepicker("show");
                }, 1);
              }
            }
            if (error) {
              element.datepicker("refresh").trigger("blur");
              if (end && (!optgroup || optgroup > end)) {
                /** @type {Date} */
                optgroup = new Date(end.getTime() - 1);
                self.model.set("startCalendarDate", optgroup);
                target.datepicker("setDate", optgroup);
                target.trigger("changed", optgroup);
              } else {
                if (!end) {
                  if (optgroup) {
                    $.datepicker._clearDate(target);
                  }
                }
              }
            }
            /** @type {boolean} */
            inst.inline = false;
            element.trigger("close");
          }
        });
        element.on("clearDates", function() {
          $.datepicker._clearDate(this);
          if (error) {
            $.datepicker._clearDate(target);
          } else {
            if (el) {
              $.datepicker._clearDate(el);
            }
          }
          element.datepicker("hide");
        });
      },
      /**
       * @param {string} chars
       * @return {?}
       */
      getChangeoverClass : function(chars) {
        chars = chars || "";
        return(chars.indexOf("am-") !== -1 ? "pm" : chars.indexOf("pm-") !== -1 ? "am" : "full") + "-changeover";
      },
      /**
       * @return {?}
       */
      afterRender : function() {
        var value = this.model.get("startCalendarDate");
        var inputDateA = this.model.get("endCalendarDate");
        var that = this;
        this.createCalendar({
          el : this.$el,
          isEndCalendar : false,
          endCalendar : this.endCalendar ? $(this.endCalendar) : void 0,
          startCalendar : void 0
        });
        if (value) {
          this.$el.datepicker("setDate", value);
        }
        if (this.endCalendar) {
          $(this.endCalendar).on("click", function() {
            if (!that.model.get("startCalendarDate")) {
              $(this).trigger("blur");
              that.$el.trigger("focus");
            }
          });
          this.createCalendar({
            el : $(this.endCalendar),
            isEndCalendar : true,
            endCalendar : void 0,
            startCalendar : this.$el
          });
          if (inputDateA) {
            $(this.endCalendar).datepicker("setDate", inputDateA);
          }
        }
        if (this.el.tagName !== "INPUT") {
          this.$el.append('<div class="calendar-loading" style="width: ' + this.$el.width() + "px; height: " + this.$el.height() + "px; display:" + (this.fetching ? "block" : "none") + ';"></div>');
        }
        return this;
      }
    });
    if (type.language) {
      $.datepicker.regional.custom = {
        closeText : type.language.closeText,
        prevText : type.language.prevText,
        nextText : type.language.nextText,
        currentText : type.language.currentText,
        monthNames : type.language.monthNames,
        monthNamesShort : type.language.monthNamesShort,
        dayNames : type.language.dayNames,
        dayNamesShort : type.language.dayNamesShort,
        dayNamesMin : type.language.dayNamesMin,
        weekHeader : type.language.weekHeader,
        firstDay : type.startOfWeek,
        isRTL : false,
        showMonthAfterYear : false,
        yearSuffix : ""
      };
      $.datepicker.setDefaults($.datepicker.regional.custom);
    }
    type = $.extend(true, {}, $.fn.calendar.defaults, type);
    this.model = this.model || new this.Model({
      defaultDate : type.defaultDate,
      numberOfMonths : type.numberOfMonths,
      propertyDruid : type.propertyDruid,
      defaultCalendar : type.calendar,
      defaultCalendarEvents : type.reservations,
      defaultAvailability : type.availability,
      url : type.url,
      startOfWeek : type.startOfWeek,
      minDate : type.minDate,
      maxDate : type.maxDate,
      startCalendarDate : type.startCalendarDate,
      endCalendarDate : type.endCalendarDate,
      startIsEndMinimum : type.startIsEndMinimum,
      showButtonPanel : type.showButtonPanel
    });
    this.view = this.view || new this.View({
      el : type.el,
      model : this.model,
      clicked : type.clicked,
      error : type.error,
      fetch : type.fetch,
      hovered : type.hovered,
      endCalendar : type.endCalendar,
      hoverClass : type.hoverClass,
      hoverClassStart : type.hoverClassStart,
      hoverClassEnd : type.hoverClassEnd,
      dateFormat : type.dateFormat
    });
    /**
     * @param {?} mom
     * @return {undefined}
     */
    this.addReservations = function(mom) {
      this.model.addReservations(mom);
    };
    /**
     * @param {Object} type
     * @return {undefined}
     */
    this.removeReservations = function(type) {
      this.model.removeReservations(type);
    };
    /**
     * @return {?}
     */
    this.getPropertyDruid = function() {
      return this.model.getPropertyDruid();
    };
    /**
     * @param {string} deepDataAndEvents
     * @return {undefined}
     */
    this.setPropertyDruid = function(deepDataAndEvents) {
      this.model.setPropertyDruid(deepDataAndEvents);
    };
    /**
     * @return {?}
     */
    this.getStartCalendarDate = function() {
      var result = this.model.get("startCalendarDate");
      return _.isDate(result) ? result : null;
    };
    /**
     * @param {string} cycle
     * @return {undefined}
     */
    this.setStartCalendarDate = function(cycle) {
      if (this.model.get("startCalendarDate") !== cycle) {
        this.model.set("startCalendarDate", cycle);
        this.view.$el.val($.datepicker.formatDate(this.view.dateFormat, cycle));
      }
    };
    /**
     * @return {?}
     */
    this.getEndCalendarDate = function() {
      var result = this.model.get("endCalendarDate");
      return _.isDate(result) ? result : null;
    };
    /**
     * @param {string} cycle
     * @return {undefined}
     */
    this.setEndCalendarDate = function(cycle) {
      if (this.view.endCalendar && this.model.get("endCalendarDate") !== cycle) {
        this.model.set("endCalendarDate", cycle);
        $(this.view.endCalendar).val($.datepicker.formatDate(this.view.dateFormat, cycle));
      }
    };
  };
  var calendar = $.fn.calendar;
  /**
   * @param {string} arg
   * @param {?} mom
   * @return {?}
   */
  $.fn.calendar = function(arg, mom) {
    if ("string" === typeof arg && 0 === arg.indexOf("get")) {
      var instance = this.data("calendar");
      return instance ? instance[arg]() : null;
    }
    return this.each(function() {
      var el = $(this);
      var data = el.data("calendar");
      var self = "object" == typeof arg && arg;
      if (!self) {
        self = {};
      }
      self.el = el;
      if (!data) {
        el.data("calendar", data = new init(self));
      }
      if ("string" == typeof arg) {
        data[arg](mom);
      }
    });
  };
  /** @type {function (string): undefined} */
  $.fn.calendar.Constructor = init;
  /**
   * @return {?}
   */
  $.fn.calendar.noConflict = function() {
    $.fn.calendar = calendar;
    return this;
  };
  $.fn.calendar.defaults = {
    endCalendar : void 0,
    hoverClass : "",
    hoverClassStart : "",
    hoverClassEnd : "",
    startOfWeek : 0,
    dateFormat : "mm/dd/yy",
    defaultDate : void 0,
    endDate : void 0,
    startDate : void 0,
    propertyDruid : void 0,
    numberOfMonths : 1,
    fetch : true,
    minDate : void 0,
    maxDate : void 0,
    startCalendarDate : void 0,
    endCalendarDate : void 0,
    startIsEndMinimum : false,
    showButtonPanel : false,
    calendar : {},
    availability : {},
    availabilityStartDate : void 0,
    availabilityEndDate : void 0,
    reservations : {},
    clicked : {
      /**
       * @return {undefined}
       */
      inquiry : function() {
      },
      /**
       * @return {undefined}
       */
      available : function() {
      },
      /**
       * @return {undefined}
       */
      unavailable : function() {
      },
      /**
       * @return {undefined}
       */
      hold : function() {
      },
      /**
       * @return {undefined}
       */
      reserve : function() {
      },
      /**
       * @return {undefined}
       */
      "delete" : function() {
      }
    },
    hovered : {
      /**
       * @return {undefined}
       */
      on : function() {
      },
      /**
       * @return {undefined}
       */
      off : function() {
      }
    },
    /**
     * @return {undefined}
     */
    error : function() {
    },
    url : "/gd/availabilityCalendar/",
    language : void 0
  };
});
!function($) {
  /**
   * @param {string} type
   * @return {undefined}
   */
  var Tab = function(type) {
    this.element = $(type);
  };
  Tab.prototype = {
    /** @type {function (string): undefined} */
    constructor : Tab,
    /**
     * @return {undefined}
     */
    show : function() {
      var $this = this.element;
      var next = $this.closest("ul:not(.dropdown-menu)");
      var target = $this.attr("data-target");
      var previous;
      var cycle;
      if (!target) {
        target = (target = $this.attr("href")) && target.replace(/.*(?=#[^\s]*$)/, "");
      }
      if (!$this.parent("li").hasClass("active")) {
        previous = next.find(".active:last a")[0];
        cycle = $.Event("show", {
          relatedTarget : previous
        });
        $this.trigger(cycle);
        if (!cycle.isDefaultPrevented()) {
          target = $(target);
          this.activate($this.parent("li"), next);
          this.activate(target, target.parent(), function() {
            $this.trigger({
              type : "shown",
              relatedTarget : previous
            });
          });
        }
      }
    },
    /**
     * @param {Object} element
     * @param {Object} item
     * @param {?} value
     * @return {undefined}
     */
    activate : function(element, item, value) {
      /**
       * @return {undefined}
       */
      function next() {
        $active.removeClass("active").find("> .dropdown-menu > .active").removeClass("active");
        element.addClass("active");
        if (attrNames) {
          element[0].offsetWidth;
          element.addClass("in");
        } else {
          element.removeClass("fade");
        }
        if (element.parent(".dropdown-menu")) {
          element.closest("li.dropdown").addClass("active");
        }
        if (value) {
          value();
        }
      }
      var $active = item.find("> .active");
      var attrNames = value && ($.support.transition && $active.hasClass("fade"));
      if (attrNames) {
        $active.one($.support.transition.end, next);
      } else {
        next();
      }
      $active.removeClass("in");
    }
  };
  var old = $.fn.tab;
  /**
   * @param {string} option
   * @return {?}
   */
  $.fn.tab = function(option) {
    return this.each(function() {
      var $this = $(this);
      var data = $this.data("tab");
      if (!data) {
        $this.data("tab", data = new Tab(this));
      }
      if ("string" == typeof option) {
        data[option]();
      }
    });
  };
  /** @type {function (string): undefined} */
  $.fn.tab.Constructor = Tab;
  /**
   * @return {?}
   */
  $.fn.tab.noConflict = function() {
    $.fn.tab = old;
    return this;
  };
  $(document).on("click.tab.data-api", '[data-toggle="tab"], [data-toggle="pill"]', function(types) {
    types.preventDefault();
    $(this).tab("show");
  });
}(window.jQuery);
!function($) {
  /**
   * @param {string} type
   * @param {Object} name
   * @return {undefined}
   */
  var Carousel = function(type, name) {
    this.$element = $(type);
    this.$indicators = this.$element.find(".carousel-indicators");
    /** @type {Object} */
    this.options = name;
    if ("hover" == this.options.pause) {
      this.$element.on("mouseenter", $.proxy(this.pause, this)).on("mouseleave", $.proxy(this.cycle, this));
    }
  };
  Carousel.prototype = {
    /**
     * @param {string} optionsString
     * @return {?}
     */
    cycle : function(optionsString) {
      if (!optionsString) {
        /** @type {boolean} */
        this.paused = false;
      }
      if (this.interval) {
        clearInterval(this.interval);
      }
      if (this.options.interval) {
        if (!this.paused) {
          /** @type {number} */
          this.interval = setInterval($.proxy(this.next, this), this.options.interval);
        }
      }
      return this;
    },
    /**
     * @return {?}
     */
    getActiveIndex : function() {
      this.$active = this.$element.find(".item.active");
      this.$items = this.$active.parent().children();
      return this.$items.index(this.$active);
    },
    /**
     * @param {number} pos
     * @return {?}
     */
    to : function(pos) {
      var activeIndex = this.getActiveIndex();
      var that = this;
      if (!(pos > this.$items.length - 1 || 0 > pos)) {
        return this.sliding ? this.$element.one("slid", function() {
          that.to(pos);
        }) : activeIndex == pos ? this.pause().cycle() : this.slide(pos > activeIndex ? "next" : "prev", $(this.$items[pos]));
      }
    },
    /**
     * @param {?} $vid
     * @return {?}
     */
    pause : function($vid) {
      if (!$vid) {
        /** @type {boolean} */
        this.paused = true;
      }
      if (this.$element.find(".next, .prev").length) {
        if ($.support.transition.end) {
          this.$element.trigger($.support.transition.end);
          this.cycle();
        }
      }
      clearInterval(this.interval);
      /** @type {null} */
      this.interval = null;
      return this;
    },
    /**
     * @return {?}
     */
    next : function() {
      if (!this.sliding) {
        return this.slide("next");
      }
    },
    /**
     * @return {?}
     */
    prev : function() {
      if (!this.sliding) {
        return this.slide("prev");
      }
    },
    /**
     * @param {string} b
     * @param {string} next
     * @return {?}
     */
    slide : function(b, next) {
      var self = this.$element.find(".item.active");
      var $next = next || self[b]();
      var isCycling = this.interval;
      /** @type {string} */
      var direction = "next" == b ? "left" : "right";
      /** @type {string} */
      var cycle = "next" == b ? "first" : "last";
      var that = this;
      /** @type {boolean} */
      this.sliding = true;
      if (isCycling) {
        this.pause();
      }
      $next = $next.length ? $next : this.$element.find(".item")[cycle]();
      cycle = $.Event("slide", {
        relatedTarget : $next[0],
        direction : direction
      });
      if (!$next.hasClass("active")) {
        if (this.$indicators.length) {
          this.$indicators.find(".active").removeClass("active");
          this.$element.one("slid", function() {
            var $listing = $(that.$indicators.children()[that.getActiveIndex()]);
            if ($listing) {
              $listing.addClass("active");
            }
          });
        }
        if ($.support.transition && this.$element.hasClass("slide")) {
          this.$element.trigger(cycle);
          if (cycle.isDefaultPrevented()) {
            return;
          }
          $next.addClass(b);
          $next[0].offsetWidth;
          self.addClass(direction);
          $next.addClass(direction);
          this.$element.one($.support.transition.end, function() {
            $next.removeClass([b, direction].join(" ")).addClass("active");
            self.removeClass(["active", direction].join(" "));
            /** @type {boolean} */
            that.sliding = false;
            setTimeout(function() {
              that.$element.trigger("slid");
            }, 0);
          });
        } else {
          this.$element.trigger(cycle);
          if (cycle.isDefaultPrevented()) {
            return;
          }
          self.removeClass("active");
          $next.addClass("active");
          /** @type {boolean} */
          this.sliding = false;
          this.$element.trigger("slid");
        }
        if (isCycling) {
          this.cycle();
        }
        return this;
      }
    }
  };
  var old = $.fn.carousel;
  /**
   * @param {number} option
   * @return {?}
   */
  $.fn.carousel = function(option) {
    return this.each(function() {
      var $this = $(this);
      var data = $this.data("carousel");
      var options = $.extend({}, $.fn.carousel.defaults, "object" == typeof option && option);
      var action = "string" == typeof option ? option : options.slide;
      if (!data) {
        $this.data("carousel", data = new Carousel(this, options));
      }
      if ("number" == typeof option) {
        data.to(option);
      } else {
        if (action) {
          data[action]();
        } else {
          if (options.interval) {
            data.pause().cycle();
          }
        }
      }
    });
  };
  $.fn.carousel.defaults = {
    interval : 5E3,
    pause : "hover"
  };
  /** @type {function (string, Object): undefined} */
  $.fn.carousel.Constructor = Carousel;
  /**
   * @return {?}
   */
  $.fn.carousel.noConflict = function() {
    $.fn.carousel = old;
    return this;
  };
  $(document).on("click.carousel.data-api", "[data-slide], [data-slide-to]", function(types) {
    var $this = $(this);
    var options;
    var $target = $($this.attr("data-target") || (options = $this.attr("href")) && options.replace(/.*(?=#[^\s]+$)/, ""));
    options = $.extend({}, $target.data(), $this.data());
    var slideIndex;
    $target.carousel(options);
    if (slideIndex = $this.attr("data-slide-to")) {
      $target.data("carousel").pause().to(slideIndex).cycle();
    }
    types.preventDefault();
  });
}(window.jQuery);
!function($) {
  /**
   * @param {string} type
   * @param {Object} name
   * @return {undefined}
   */
  var Modal = function(type, name) {
    /** @type {Object} */
    this.options = name;
    this.$element = $(type).delegate('[data-dismiss="modal"]', "click.dismiss.modal", $.proxy(this.hide, this));
    if (this.options.remote) {
      this.$element.find(".modal-body").load(this.options.remote);
    }
  };
  Modal.prototype = {
    /** @type {function (string, Object): undefined} */
    constructor : Modal,
    /**
     * @return {?}
     */
    toggle : function() {
      return this[!this.isShown ? "show" : "hide"]();
    },
    /**
     * @return {undefined}
     */
    show : function() {
      var that = this;
      var cycle = $.Event("show");
      this.$element.trigger(cycle);
      if (!this.isShown) {
        if (!cycle.isDefaultPrevented()) {
          /** @type {boolean} */
          this.isShown = true;
          this.escape();
          this.backdrop(function() {
            var c = $.support.transition && that.$element.hasClass("fade");
            if (!that.$element.parent().length) {
              that.$element.appendTo(document.body);
            }
            that.$element.show();
            if (c) {
              that.$element[0].offsetWidth;
            }
            that.$element.addClass("in").attr("aria-hidden", false);
            that.enforceFocus();
            if (c) {
              that.$element.one($.support.transition.end, function() {
                that.$element.focus().trigger("shown");
              });
            } else {
              that.$element.focus().trigger("shown");
            }
          });
        }
      }
    },
    /**
     * @param {string} type
     * @return {undefined}
     */
    hide : function(type) {
      if (type) {
        type.preventDefault();
      }
      type = $.Event("hide");
      this.$element.trigger(type);
      if (this.isShown) {
        if (!type.isDefaultPrevented()) {
          /** @type {boolean} */
          this.isShown = false;
          this.escape();
          $(document).off("focusin.modal");
          this.$element.removeClass("in").attr("aria-hidden", true);
          if ($.support.transition && this.$element.hasClass("fade")) {
            this.hideWithTransition();
          } else {
            this.hideModal();
          }
        }
      }
    },
    /**
     * @return {undefined}
     */
    enforceFocus : function() {
      var that = this;
      $(document).on("focusin.modal", function(e) {
        if (that.$element[0] !== e.target) {
          if (!that.$element.has(e.target).length) {
            that.$element.focus();
          }
        }
      });
    },
    /**
     * @return {undefined}
     */
    escape : function() {
      var poster = this;
      if (this.isShown && this.options.keyboard) {
        this.$element.on("keyup.dismiss.modal", function(event) {
          if (27 == event.which) {
            poster.hide();
          }
        });
      } else {
        if (!this.isShown) {
          this.$element.off("keyup.dismiss.modal");
        }
      }
    },
    /**
     * @return {undefined}
     */
    hideWithTransition : function() {
      var that = this;
      /** @type {number} */
      var to = setTimeout(function() {
        that.$element.off($.support.transition.end);
        that.hideModal();
      }, 500);
      this.$element.one($.support.transition.end, function() {
        clearTimeout(to);
        that.hideModal();
      });
    },
    /**
     * @return {undefined}
     */
    hideModal : function() {
      var that = this;
      this.$element.hide();
      this.backdrop(function() {
        that.removeBackdrop();
        that.$element.trigger("hidden");
      });
    },
    /**
     * @return {undefined}
     */
    removeBackdrop : function() {
      if (this.$backdrop) {
        this.$backdrop.remove();
      }
      /** @type {null} */
      this.$backdrop = null;
    },
    /**
     * @param {Function} callback
     * @return {undefined}
     */
    backdrop : function(callback) {
      /** @type {string} */
      var animate = this.$element.hasClass("fade") ? "fade" : "";
      if (this.isShown && this.options.backdrop) {
        var doAnimate = $.support.transition && animate;
        this.$backdrop = $('<div class="modal-backdrop ' + animate + '" />').appendTo(document.body);
        this.$backdrop.click("static" == this.options.backdrop ? $.proxy(this.$element[0].focus, this.$element[0]) : $.proxy(this.hide, this));
        if (doAnimate) {
          this.$backdrop[0].offsetWidth;
        }
        this.$backdrop.addClass("in");
        if (callback) {
          if (doAnimate) {
            this.$backdrop.one($.support.transition.end, callback);
          } else {
            callback();
          }
        }
      } else {
        if (!this.isShown && this.$backdrop) {
          this.$backdrop.removeClass("in");
          if ($.support.transition && this.$element.hasClass("fade")) {
            this.$backdrop.one($.support.transition.end, callback);
          } else {
            callback();
          }
        } else {
          if (callback) {
            callback();
          }
        }
      }
    }
  };
  var old = $.fn.modal;
  /**
   * @param {?} options
   * @return {?}
   */
  $.fn.modal = function(options) {
    return this.each(function() {
      var $this = $(this);
      var data = $this.data("modal");
      var about = $.extend({}, $.fn.modal.defaults, $this.data(), "object" == typeof options && options);
      if (!data) {
        $this.data("modal", data = new Modal(this, about));
      }
      if ("string" == typeof options) {
        data[options]();
      } else {
        if (about.show) {
          data.show();
        }
      }
    });
  };
  $.fn.modal.defaults = {
    backdrop : true,
    keyboard : true,
    show : true
  };
  /** @type {function (string, Object): undefined} */
  $.fn.modal.Constructor = Modal;
  /**
   * @return {?}
   */
  $.fn.modal.noConflict = function() {
    $.fn.modal = old;
    return this;
  };
  $(document).on("click.modal.data-api", '[data-toggle="modal"]', function(types) {
    var $this = $(this);
    var href = $this.attr("href");
    var $target = $($this.attr("data-target") || href && href.replace(/.*(?=#[^\s]+$)/, ""));
    href = $target.data("modal") ? "toggle" : $.extend({
      remote : !/#/.test(href) && href
    }, $target.data(), $this.data());
    types.preventDefault();
    $target.modal(href).one("hide", function() {
      $this.focus();
    });
  });
}(window.jQuery);
!function($) {
  /**
   * @param {string} type
   * @return {undefined}
   */
  var Alert = function(type) {
    $(type).on("click", '[data-dismiss="alert"]', this.close);
  };
  /**
   * @param {Object} e
   * @return {undefined}
   */
  Alert.prototype.close = function(e) {
    /**
     * @return {undefined}
     */
    function optgroup() {
      $parent.trigger("closed").remove();
    }
    var $this = $(this);
    var selector = $this.attr("data-target");
    var $parent;
    if (!selector) {
      selector = (selector = $this.attr("href")) && selector.replace(/.*(?=#[^\s]*$)/, "");
    }
    $parent = $(selector);
    if (e) {
      e.preventDefault();
    }
    if (!$parent.length) {
      $parent = $this.hasClass("alert") ? $this : $this.parent();
    }
    $parent.trigger(e = $.Event("close"));
    if (!e.isDefaultPrevented()) {
      $parent.removeClass("in");
      if ($.support.transition && $parent.hasClass("fade")) {
        $parent.on($.support.transition.end, optgroup);
      } else {
        optgroup();
      }
    }
  };
  var old = $.fn.alert;
  /**
   * @param {?} type
   * @return {?}
   */
  $.fn.alert = function(type) {
    return this.each(function() {
      var $this = $(this);
      var data = $this.data("alert");
      if (!data) {
        $this.data("alert", data = new Alert(this));
      }
      if ("string" == typeof type) {
        data[type].call($this);
      }
    });
  };
  /** @type {function (string): undefined} */
  $.fn.alert.Constructor = Alert;
  /**
   * @return {?}
   */
  $.fn.alert.noConflict = function() {
    $.fn.alert = old;
    return this;
  };
  $(document).on("click.alert.data-api", '[data-dismiss="alert"]', Alert.prototype.close);
}(window.jQuery);
/**
 * @param {(Array|string)} stdout
 * @return {undefined}
 */
var Logger = function(stdout) {
  /** @type {(Array|string)} */
  this.postUrl = stdout;
  if ("undefined" === typeof this.postUrl) {
    /** @type {string} */
    this.postUrl = "/errors";
  }
  var rawActivity = this;
  /**
   * @param {string} er
   * @param {string} ev
   * @param {string} url
   * @return {?}
   */
  window.onerror = function(er, ev, url) {
    rawActivity.postError("url=" + ev + "&dateTime=" + new Date + "&userAgent=" + navigator.userAgent + "&message=" + er + "&lineNumber=" + url + "&browser=" + navigator.appVersion);
    return false;
  };
  /**
   * @return {?}
   */
  this.postError = function() {
    return false;
  };
};
!function($) {
  /**
   * @param {string} type
   * @param {Function} name
   * @return {undefined}
   */
  var Button = function(type, name) {
    this.$element = $(type);
    this.options = $.extend({}, $.fn.button.defaults, name);
  };
  /**
   * @param {string} state
   * @return {undefined}
   */
  Button.prototype.setState = function(state) {
    var $el = this.$element;
    var data = $el.data();
    /** @type {string} */
    var val = $el.is("input") ? "val" : "html";
    /** @type {string} */
    state = state + "Text";
    if (!data.resetText) {
      $el.data("resetText", $el[val]());
    }
    $el[val](data[state] || this.options[state]);
    setTimeout(function() {
      if ("loadingText" == state) {
        $el.addClass("disabled").attr("disabled", "disabled");
      } else {
        $el.removeClass("disabled").removeAttr("disabled");
      }
    }, 0);
  };
  /**
   * @return {undefined}
   */
  Button.prototype.toggle = function() {
    var rule = this.$element.closest('[data-toggle="buttons-radio"]');
    if (rule) {
      rule.find(".active").removeClass("active");
    }
    this.$element.toggleClass("active");
  };
  var old = $.fn.button;
  /**
   * @param {string} type
   * @return {?}
   */
  $.fn.button = function(type) {
    return this.each(function() {
      var $this = $(this);
      var data = $this.data("button");
      var options = "object" == typeof type && type;
      if (!data) {
        $this.data("button", data = new Button(this, options));
      }
      if ("toggle" == type) {
        data.toggle();
      } else {
        if (type) {
          data.setState(type);
        }
      }
    });
  };
  $.fn.button.defaults = {
    loadingText : "loading..."
  };
  /** @type {function (string, Function): undefined} */
  $.fn.button.Constructor = Button;
  /**
   * @return {?}
   */
  $.fn.button.noConflict = function() {
    $.fn.button = old;
    return this;
  };
  $(document).on("click.button.data-api", "[data-toggle^=button]", function(e) {
    e = $(e.target);
    if (!e.hasClass("btn")) {
      e = e.closest(".btn");
    }
    e.button("toggle");
  });
}(window.jQuery);
!function($) {
  /**
   * @param {string} type
   * @param {Function} name
   * @return {undefined}
   */
  var Affix = function(type, name) {
    this.options = $.extend({}, $.fn.affix.defaults, name);
    this.$window = $(window).on("scroll.affix.data-api", $.proxy(this.checkPosition, this)).on("click.affix.data-api", $.proxy(function() {
      setTimeout($.proxy(this.checkPosition, this), 1);
    }, this));
    this.$element = $(type);
    this.checkPosition();
  };
  /**
   * @return {undefined}
   */
  Affix.prototype.checkPosition = function() {
    if (this.$element.is(":visible")) {
      var affix = $(document).height();
      var scrollTop = this.$window.scrollTop();
      var position = this.$element.offset();
      var n = this.options.offset;
      var c = n.bottom;
      var i = n.top;
      if ("object" != typeof n) {
        c = i = n;
      }
      if ("function" == typeof i) {
        i = n.top();
      }
      if ("function" == typeof c) {
        c = n.bottom();
      }
      /** @type {(boolean|string)} */
      affix = null != this.unpin && scrollTop + this.unpin <= position.top ? false : null != c && position.top + this.$element.height() >= affix - c ? "bottom" : null != i && scrollTop <= i ? "top" : false;
      if (this.affixed !== affix) {
        /** @type {(boolean|string)} */
        this.affixed = affix;
        /** @type {(null|number)} */
        this.unpin = "bottom" == affix ? position.top - scrollTop : null;
        this.$element.removeClass("affix affix-top affix-bottom").addClass("affix" + (affix ? "-" + affix : ""));
      }
    }
  };
  var old = $.fn.affix;
  /**
   * @param {number} option
   * @return {?}
   */
  $.fn.affix = function(option) {
    return this.each(function() {
      var $this = $(this);
      var data = $this.data("affix");
      var options = "object" == typeof option && option;
      if (!data) {
        $this.data("affix", data = new Affix(this, options));
      }
      if ("string" == typeof option) {
        data[option]();
      }
    });
  };
  /** @type {function (string, Function): undefined} */
  $.fn.affix.Constructor = Affix;
  $.fn.affix.defaults = {
    offset : 0
  };
  /**
   * @return {?}
   */
  $.fn.affix.noConflict = function() {
    $.fn.affix = old;
    return this;
  };
  $(window).on("load", function() {
    $('[data-spy="affix"]').each(function() {
      var $spy = $(this);
      var data = $spy.data();
      data.offset = data.offset || {};
      if (data.offsetBottom) {
        data.offset.bottom = data.offsetBottom;
      }
      if (data.offsetTop) {
        data.offset.top = data.offsetTop;
      }
      $spy.affix(data);
    });
  });
}(window.jQuery);
/** @type {null} */
var queryTimeout = null;
/** @type {number} */
var queryTime = 580;
var haStrings = ha.strings || {};
var ha = $.extend({}, ha, {
  form : {},
  geocode : {},
  reviews : {},
  page : {},
  settings : {},
  site : {},
  strings : haStrings,
  ui : {},
  user : {},
  ajax : {},
  state : {},
  backbone : {},
  map : {
    /**
     * @param {string} scriptSrc
     * @return {undefined}
     */
    loadGoogleMaps : function(scriptSrc) {
      document.body.appendChild(document.createComment("Inserted by loadGoogleMaps() in base.js"));
      /** @type {string} */
      scriptSrc = "http://maps.google.com/maps/api/js?client=gme-homeaway&sensor=false&callback=" + scriptSrc;
      /** @type {Element} */
      var script = document.createElement("script");
      /** @type {string} */
      script.type = "text/javascript";
      /** @type {string} */
      script.src = scriptSrc;
      document.body.appendChild(script);
    }
  },
  json : {
    /**
     * @return {?}
     */
    qpJsonCookie : function() {
      return "ha-qp-sess";
    },
    /**
     * @return {?}
     */
    pdpJsonCookie : function() {
      return "ha-pp-sess";
    },
    /**
     * @return {?}
     */
    advJsonCookie : function() {
      return "ha-ap-sess";
    },
    /**
     * @return {?}
     */
    reviewCookie : function() {
      return "ha-rev-sess";
    },
    /**
     * @return {?}
     */
    eCommerceJsonCookie : function() {
      return "ha-ecomm-sess";
    },
    /**
     * @return {?}
     */
    qpJsonPCookie : function() {
      return "ha-qp-prst";
    },
    /**
     * @return {?}
     */
    pdpJsonPCookie : function() {
      return "ha-pp-prst";
    },
    /**
     * @return {?}
     */
    advJsonPCookie : function() {
      return "ha-ap-prst";
    },
    /**
     * @return {?}
     */
    tncJsonCookie : function() {
      return "ha-tnc-hist";
    },
    /**
     * @return {?}
     */
    stateCookie : function() {
      return "ha-state-prst";
    },
    /**
     * @param {string} keys
     * @param {?} k
     * @param {string} tag
     * @return {?}
     */
    paramsToJson : function(keys, k, tag) {
      /** @type {string} */
      var optsData = "";
      /** @type {string} */
      var urlConfigHtml = "";
      keys = keys.split(k);
      /** @type {number} */
      k = 0;
      for (;k < keys.length;k++) {
        var elements = keys[k].split(tag);
        if (2 == elements.length) {
          optsData += urlConfigHtml + '"' + elements[0] + '":"' + elements[1] + '"';
          /** @type {string} */
          urlConfigHtml = ",";
        }
      }
      return JSON.parse("{" + optsData + "}");
    }
  },
  seo : {
    /**
     * @return {undefined}
     */
    showSeoText : function() {
      if ($("#searchText").length && $("#staticSearchTextPosition")) {
        $("#staticSearchTextPosition").html($("#searchText").html());
      } else {
        $(".seoContainer").css("display", "none");
      }
    }
  },
  util : {
    /**
     * @return {?}
     */
    getUrlParameters : function() {
      /** @type {Array} */
      var vars = [];
      var hash;
      /** @type {Array.<string>} */
      var codeSegments = window.location.href.slice(window.location.href.indexOf("?") + 1).split("&");
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        /** @type {Array.<string>} */
        hash = codeSegments[i].split("=");
        vars.push(hash[0]);
        /** @type {string} */
        vars[hash[0]] = hash[1];
      }
      return vars;
    },
    /**
     * @return {?}
     */
    isTouchDevice : function() {
      return "ontouchstart" in document.documentElement;
    },
    /**
     * @param {string} num
     * @return {?}
     */
    isInt : function(num) {
      return "0" <= num && "9" >= num;
    },
    /**
     * @return {undefined}
     */
    initToggles : function() {
      $(".expand .content").addClass("hidden");
      $(".expand .show").removeClass("hidden");
      $(".expand .action").bind("click", function() {
        var $modal = $(this).parent("div.container").children("div.content");
        if ($modal.hasClass("hidden")) {
          $modal.removeClass("hidden");
          $(this).addClass("open");
        } else {
          $modal.addClass("hidden");
          $(this).removeClass("open");
        }
      });
      $(".expander").wrap($("<div></div>").css({
        position : "relative",
        zIndex : 1,
        zoom : 1
      }));
      $(".expander>h2.action").bind("click", function() {
        $(this).parent().toggleClass("closed");
      });
    },
    /**
     * @return {undefined}
     */
    initPopupUrls : function() {
      $(".popup-url").bind("click", function() {
        window.open(this.href);
        return false;
      });
    },
    /**
     * @return {undefined}
     */
    initPlaceHolder : function() {
      $("input, textarea").placeholder();
    },
    /**
     * @return {undefined}
     */
    initDropMenu : function() {
      $(".droplink").click(function() {
        var $span = $(this);
        var me = $(this).find(".drop-menu");
        $span.toggleClass("droplink-on");
        $(this).find(".menu-tab a").blur();
        var tref;
        me.mouseout(function() {
          /** @type {number} */
          tref = setTimeout(function() {
            $span.removeClass("droplink-on");
          }, 1E3);
          me.mouseover(function() {
            clearTimeout(tref);
          });
        });
      });
    },
    /**
     * @return {?}
     */
    calDateFmt : function() {
      var arr = brandDateFormat.javaDateInputPattern.split("/");
      return(arr[0].charAt(0) + "-" + arr[1].charAt(1) + "-" + arr[2].charAt(0)).toLowerCase();
    },
    /**
     * @param {Object} event
     * @param {Object} elem
     * @param {string} x
     * @return {?}
     */
    limiter : function(event, elem, x) {
      elem = "undefined" != typeof elem ? elem : this;
      x = "undefined" != typeof x ? x : "remainder";
      var max = $(elem).attr("maxlength");
      var min = $(elem).val().length;
      /** @type {number} */
      var i = $(elem).val().split(/\r\n|\n|\r\|\f/).length - 1;
      min = 0 < min ? min + i : 0;
      /** @type {number} */
      var cycle = -1 < max - min ? max - min : 0;
      /** @type {Array} */
      var selection = [8, 9, 27, 46, 33, 34, 35, 36, 37, 38, 39, 40, 45];
      if (event) {
        if (event.metaKey || (event.ctrlKey || event.altKey)) {
          return true;
        }
        if (-1 != jQuery.inArray(event.keyCode, selection)) {
          return $("#" + x).text(cycle), true;
        }
      }
      if (min >= max) {
        return $(elem).val($(elem).val().substr(0, max - i)), $("#" + x).text(cycle), false;
      }
      $("#" + x).text(cycle);
    },
    /**
     * @param {Object} cycle
     * @return {undefined}
     */
    partialBox : function(cycle) {
      /**
       * @return {undefined}
       */
      function hide() {
        $(".gradient-mask").fadeOut();
        $(".partial-box .toggles .show").css("display", "none");
        $(".partial-box .content").animate({
          height : imageHeight + 20
        }, cycle);
        $(".partial-box .toggles .hide").css("display", "block");
        $.cookie("boxState", "open", {
          path : "/"
        });
      }
      /**
       * @return {undefined}
       */
      function init() {
        $(".gradient-mask").fadeIn();
        $(".partial-box .toggles .hide").css("display", "none");
        $(".partial-box .content").animate({
          height : "4em"
        }, cycle);
        $(".partial-box .toggles .show").css("display", "block");
        $.cookie("boxState", "closed", {
          path : "/"
        });
      }
      var imageHeight = $(".partial-box .content").children("div").height();
      if (0 < $(".partial-box .toggles").length) {
        if ("open" != $.cookie("boxState")) {
          init();
        } else {
          $(".partial-box .toggles .show").css("display", "none");
          $(".partial-box .toggles .hide").css("display", "block");
        }
        init();
        $(".partial-box .toggles").click(function() {
          if ($(".partial-box .toggles .show").css("display") == "block") {
            hide();
          } else {
            init();
          }
        });
        $(".partial-box .gradient-mask").click(function() {
          if ($(".partial-box .toggles .show").css("display") == "block") {
            hide();
          } else {
            init();
          }
        });
      }
    },
    /**
     * @return {undefined}
     */
    stop : function() {
      if ($.browser.msie) {
        document.execCommand("Stop");
      } else {
        window.stop();
      }
    },
    browserVersionInt : void 0,
    /**
     * @param {string} date
     * @return {?}
     */
    formatCount : function(date) {
      return $.browser.msie && 9 >= ha.util.browserVersionInt ? date : date.toLocaleString(brand.languageCode || "en");
    },
    /**
     * @return {?}
     */
    guid : function() {
      return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
        /** @type {number} */
        var a = 16 * Math.random() | 0;
        return("x" == c ? a : a & 3 | 8).toString(16);
      });
    }
  }
});
/** @type {number} */
ha.util.browserVersionInt = parseInt($.browser.version, 10);
ha.json.cookie = {
  /**
   * @param {?} type
   * @param {string} value
   * @param {?} data
   * @param {number} date
   * @return {undefined}
   */
  update : function(type, value, data, date) {
    try {
      var a = $.cookie(type);
      var state = {};
      if (a) {
        /** @type {*} */
        state = JSON.parse(a);
      }
      state[value] = data;
      $.cookie(type, null, {
        path : "/"
      });
      if (state) {
        if (-1 < type.indexOf("sess")) {
          $.cookie(type, JSON.stringify(state), {
            path : "/"
          });
        } else {
          if (void 0 !== date) {
            $.cookie(type, JSON.stringify(state), {
              expires : date,
              path : "/"
            });
          } else {
            $.cookie(type, JSON.stringify(state), {
              expires : 30,
              path : "/"
            });
          }
        }
      }
    } catch (fmt) {
      if (window.console) {
        if (window.console.log) {
          console.log(fmt);
        }
      }
    }
  },
  /**
   * @param {string} key
   * @param {string} type
   * @return {?}
   */
  parse : function(key, type) {
    var str = $.cookie(key);
    /** @type {string} */
    var result = "";
    try {
      if (null != str) {
        if ("undefined" != typeof type) {
          JSON.parse(str, function(wanted, subKey) {
            if (type == wanted) {
              /** @type {*} */
              result = subKey;
            }
          });
        } else {
          return JSON.parse(str);
        }
      }
    } catch (g) {
    }
    return result;
  }
};
/**
 * @return {undefined}
 */
function Observer() {
  /** @type {Array} */
  this.fns = [];
}
Observer.prototype = {
  /**
   * @param {string} fn
   * @return {undefined}
   */
  subscribe : function(fn) {
    this.fns.push(fn);
  },
  /**
   * @param {?} fn
   * @return {undefined}
   */
  unsubscribe : function(fn) {
    this.fns = this.fns.ha_filter(function(el) {
      if (el !== fn) {
        return el;
      }
    });
  },
  /**
   * @param {?} name
   * @param {Object} scope
   * @return {undefined}
   */
  fire : function(name, scope) {
    var o = scope || window;
    this.fns.ha_forEach(function(block) {
      block.call(o, name);
    });
  }
};
/**
 * @param {Function} fn
 * @param {Object} thisObj
 * @return {undefined}
 */
Array.prototype.ha_forEach = function(fn, thisObj) {
  var scope = thisObj || window;
  /** @type {number} */
  var i = 0;
  /** @type {number} */
  var l = this.length;
  for (;i < l;++i) {
    fn.call(scope, this[i], i, this);
  }
};
/**
 * @param {Function} fn
 * @param {Object} thisObj
 * @return {?}
 */
Array.prototype.ha_filter = function(fn, thisObj) {
  var scope = thisObj || window;
  /** @type {Array} */
  var arrayOfArgs = [];
  /** @type {number} */
  var i = 0;
  /** @type {number} */
  var l = this.length;
  for (;i < l;++i) {
    if (fn.call(scope, this[i], i, this)) {
      arrayOfArgs.push(this[i]);
    }
  }
  return arrayOfArgs;
};
/**
 * @param {string} type
 * @return {?}
 */
Array.prototype.position = function(type) {
  /** @type {number} */
  var i = 0;
  for (;i < this.length && this[i] != type;) {
    i++;
  }
  return i < this.length ? i : void 0;
};
/**
 * @param {?} inS
 * @return {undefined}
 */
var jsEnabled = function(inS) {
  this.s = inS;
};
var homepageSearchSubmitted = new Observer;
var simpleSearchSubmitted = new Observer;
var searchFormSubmitted = new Observer;
var searchErrorObserver = new Observer;
ha.site.searchform = {
  /**
   * @return {undefined}
   */
  init : function() {
    $(".input-keyword").keyup(function(e) {
      e = e || window.event;
      if (13 == (e.keyCode ? e.keyCode : e.which ? e.which : e.charCode)) {
        ha.site.searchform.submit(e);
      }
    });
    $("#sideBarSearchFormButton").click(function(fn) {
      ha.site.searchform.submit(fn);
    });
    $("form[name=searchForm],form[name=refineSearchForm]").each(function() {
      $(this).submit(function() {
        return false;
      });
      $(".search-submit-button", $(this)).click(function(evt) {
        evt.preventDefault();
        ha.site.searchform.submit(evt);
      });
      $(".search-with-map", $(this)).click(function(evt) {
        evt.preventDefault();
        ha.site.searchform.submit(evt);
      });
    });
    ha.util.initPlaceHolder();
  },
  /**
   * @param {Function} e
   * @return {?}
   */
  submit : function(e) {
    /** @type {string} */
    var username = "";
    var f;
    f = $("form[name=searchForm],form[name=refineSearchForm]");
    if (e) {
      f = $(e.target).parents("form");
    }
    if ($("#searchKeywords").val() == $("#searchKeywords").attr("rel")) {
      $("#searchKeywords").val("");
    }
    var type = f.attr("id");
    if ("simple-search" == type) {
      /** @type {string} */
      type = "simple";
      homepageSearchSubmitted.fire();
    } else {
      if ("keywordSearchForm" == type) {
        /** @type {string} */
        type = "keyword";
        simpleSearchSubmitted.fire();
      } else {
        if ("sideBarSearchForm" == type) {
          /** @type {string} */
          type = "sidebar";
          searchFormSubmitted.fire();
        } else {
          /** @type {string} */
          type = "refineSearchform" == type ? "availability" : "keywordSearchForm-responsive" == type ? "responsive" : "notknown";
        }
      }
    }
    var text = -1 < $("input[name=keywords]", f).length ? $("input[name=keywords]", f).val() : "";
    var c = $("input[rel]", f).attr("rel");
    /** @type {string} */
    text = "" != $.trim(text) && text != c ? "availability" == type ? "/keywords:" + text : "/keywords:" + encodeURIComponent(text).replace("%20", "+") : "";
    c = null != $("input[name=region]", f) && "undefined" != typeof $("input[name=region]", f) ? $("input[name=region]", f).val() : "";
    if ("" != c) {
      if ("undefined" != c && ("undefined" !== typeof c && "" == text)) {
        /** @type {string} */
        text = "/" + c;
      }
    }
    /** @type {string} */
    var params = "";
    if (null != $("#refinements", f).val() && "" != $.trim($("#refinements", f).val())) {
      params += $("#refinements", f).val().replace("+", "*").replace(/\|/g, "/");
    } else {
      /** @type {string} */
      params = "";
      $("input, select", f).each(function(dataAndEvents, element) {
        var type = $(this).attr("id");
        var name = $(element).attr("data-value");
        if (type !== "priceFrom" && (type !== "priceTo" && (type !== "region" && name) && (element.type == "select-one" && name !== "" || element.type == "checkbox" && element.checked))) {
          params = params + ("/" + name);
        }
      });
    }
    f = $("select[name=sleepsInput], input[name=sleepsInput]").val();
    if ("undefined" !== typeof f && (null !== f.match(/^.*:(\d+|\.)*$/) && "undefined" !== typeof ha.backbone.Models.baseSearchModel)) {
      f = f.match(/^.*:(\d+|\.)*$/);
      ha.backbone.Models.baseSearchModel.set("sleeps", f[1]);
    } else {
      if (f) {
        params += "/" + f;
      }
    }
    /** @type {string} */
    f = "";
    if (-1 < $("#priceTo").length && -1 < $("#priceTo").length) {
      c = $("#priceFrom").val();
      var val = $("#priceTo").val();
      if (0 < c) {
        f += "/minPrice/" + c;
      }
      if (0 < val) {
        if (parseInt(c, 10) <= parseInt(val, 10)) {
          f += "/maxPrice/" + val;
        }
      }
      if ("" != f) {
        f += "/currency/" + brand.baseCurrency;
      }
    }
    /** @type {string} */
    val = c = "";
    if ("keyword" != type) {
      /** @type {string} */
      var value = "responsive" == type ? "#mastHeadstartDateInput" : "#startDateInput";
      /** @type {string} */
      var i = "responsive" == type ? "#mastHeadendDateInput" : "#endDateInput";
      c = $(value).val();
      val = $(i).val();
      if (val == brandDateFormat.dateInputHelpText) {
        /** @type {string} */
        val = "";
      }
      if (c == brandDateFormat.dateInputHelpText) {
        /** @type {string} */
        c = "";
      }
      if ("" == c) {
        if ("" != val) {
          $(value).val($(i).val());
        }
      }
      c = ha.site.searchform.dateParamFormat($(value));
      val = ha.site.searchform.dateParamFormat($(i));
      if ("" == c && "" != val || ("" != c && "" == val || "availability" == type && ("" == c && "" == val))) {
        username += ha.strings.bothDatesRequiredMessage;
      }
      if ("undefined" !== typeof ha.backbone.Models.baseSearchModel) {
        ha.backbone.Models.baseSearchModel.set("arrival", ha.site.searchform.noParamDateFormat($(value).val()));
        ha.backbone.Models.baseSearchModel.set("departure", ha.site.searchform.noParamDateFormat($(i).val()));
      }
    }
    /** @type {string} */
    i = value = "";
    if ("search-with-map" == e.target.className) {
      if (i = "?view=m&icid=IL_mapview_BR_T_link_mapview_LOTH_homepage", "" != username) {
        alert(username);
      } else {
        value += brand.baseUrl;
        value += "/search";
        if ("" != params) {
          value += "/refined";
        }
        if ("" == text) {
          if ("/undefined" == params && ("" == c && "" == val)) {
            /** @type {string} */
            text = "/keywords:Europe";
          }
        }
        /** @type {string} */
        value = value + text + params + c + val + "" + i;
        if ("advanced" == type) {
          return value;
        }
        /** @type {string} */
        window.location = value;
      }
    } else {
      if ("undefined" !== typeof ha.backbone.Views.SearchResultsPage.searchFiltersView) {
        value = ha.backbone.Views.SearchResultsPage.searchFiltersView.getApplyUrl();
        if ("m" == search.view) {
          /** @type {string} */
          i = "?view=m";
        }
        /** @type {string} */
        window.location = value + c + val + "" + i;
      } else {
        if ("undefined" !== typeof ha.backbone.Models.baseSearchModel) {
          window.location = ha.backbone.Models.baseSearchModel.getBaseSearchFragment(params);
        } else {
          if ("" != username) {
            alert(username);
          } else {
            value += brand.baseUrl;
            value += "/search";
            if ("" != params) {
              value += "/refined";
            }
            /** @type {string} */
            value = value + text + params + f + c + val + "";
            if ("advanced" == type) {
              return value;
            }
            /** @type {string} */
            window.location = value;
          }
        }
      }
    }
  },
  /**
   * @param {string} val
   * @return {?}
   */
  dateParamFormat : function(val) {
    var name = $(val).attr("id");
    var path = $(val).val();
    /** @type {string} */
    val = "";
    if ("undefined" != typeof name) {
      if (-1 < name.indexOf("start")) {
        /** @type {string} */
        val = "arrival";
      } else {
        if (-1 < name.indexOf("end")) {
          /** @type {string} */
          val = "departure";
        }
      }
      if ("" == val || ("undefined" == typeof path || ("" == ha.site.searchform.delim(path) || -1 == path.indexOf("/")))) {
        return "";
      }
      if (path != brandDateFormat.dateInputHelpText) {
        return "mm/dd/yyyy" == brandDateFormat.dateInputHelpText ? (name = path.split("/"), "/" + val + ":" + name[2] + "-" + name[0] + "-" + name[1]) : "/" + val + ":" + path.split("/").reverse().join("-");
      }
    }
    return "";
  },
  /**
   * @param {string} path
   * @return {?}
   */
  noParamDateFormat : function(path) {
    if ("undefined" == typeof path || ("" == ha.site.searchform.delim(path) || -1 == path.indexOf("/"))) {
      return "";
    }
    if (path != brandDateFormat.dateInputHelpText) {
      return "mm/dd/yyyy" == brandDateFormat.dateInputHelpText ? (path = path.split("/"), path[2] + "-" + path[0] + "-" + path[1]) : path.split("/").reverse().join("-");
    }
  },
  /**
   * @param {string} path
   * @return {?}
   */
  delim : function(path) {
    if (-1 == path.indexOf("/")) {
      path = -1 < path.indexOf("-") ? path.replace(/-/g, "/") : -1 < path.indexOf(".") ? path.replace(/\./g, "/") : "";
    }
    return path;
  },
  /**
   * @param {number} k
   * @return {?}
   */
  isDigit : function(k) {
    k = k.which ? k.which : window.event ? window.event.keyCode : 0;
    return 31 < k && (48 > k || 57 < k) ? false : true;
  }
};
ha.ui.modal = {
  /**
   * @param {string} isXML
   * @param {number} value
   * @param {number} opt_attributes
   * @param {?} callback
   * @return {undefined}
   */
  launch : function(isXML, value, opt_attributes, callback) {
    $.modal('<iframe id="simpleModalIframe" width="' + value + '" height="' + opt_attributes + '" frameborder="0"  scolling="no"  onLoad="$(&quot;#mb-load&quot;).hide();" allowtransparency="true"></iframe>', {
      /**
       * @param {Object} item
       * @return {undefined}
       */
      onShow : function(item) {
        item.overlay.append('<div id="mb-load" class="simpleModalLoader"><img src="//csvcus.homeaway.com/rsrcs/23/628D00947F44E8C66CEA043B8D507F-loading-lg.gif" /></div>');
        $("#mb-load").show();
        $("#simpleModalIframe").attr("src", isXML);
      },
      onClose : callback,
      closeHTML : '<div class="simpleModalClose"></div>',
      containerCss : {
        zIndex : 5E3
      }
    });
  }
};
ha.page.ads = {
  /**
   * @param {string} results
   * @return {undefined}
   */
  initOrd : function(results) {
    /** @type {number} */
    var b = 1 + Math.floor(1E7 * Math.random());
    $(results).each(function() {
      var pdataOld = $(this).attr("rel");
      /** @type {string} */
      pdataOld = pdataOld + "ord=" + b + "?";
      $(this).attr("rel", pdataOld);
    });
  }
};
ha.page.track = {
  /**
   * @param {Object} self
   * @return {undefined}
   */
  updateECommerceCookie : function(self) {
    ha.json.cookie.update(ha.json.eCommerceJsonCookie(), "tactic");
    ha.json.cookie.update(ha.json.eCommerceJsonCookie(), "hitsPerPage");
    ha.json.cookie.update(ha.json.eCommerceJsonCookie(), "sortType");
    ha.json.cookie.update(ha.json.eCommerceJsonCookie(), "hitTotal");
    ha.json.cookie.update(ha.json.eCommerceJsonCookie(), "position");
    ha.json.cookie.update(ha.json.eCommerceJsonCookie(), "searchUrl");
    if (self.tactic) {
      ha.json.cookie.update(ha.json.eCommerceJsonCookie(), "tactic", self.tactic);
    }
    if (self.hitsPerPage) {
      ha.json.cookie.update(ha.json.eCommerceJsonCookie(), "hitsPerPage", self.hitsPerPage);
    }
    if (self.sortType) {
      ha.json.cookie.update(ha.json.eCommerceJsonCookie(), "sortType", self.sortType);
    }
    if (self.hitTotal) {
      ha.json.cookie.update(ha.json.eCommerceJsonCookie(), "hitTotal", self.hitTotal);
    }
    if (self.position) {
      ha.json.cookie.update(ha.json.eCommerceJsonCookie(), "position", self.position);
    }
    if (self.searchUrl) {
      ha.json.cookie.update(ha.json.eCommerceJsonCookie(), "searchUrl", self.searchUrl);
    }
  }
};
ha.ui.lingua = {
  /**
   * @return {undefined}
   */
  init : function() {
    var str = $.cookie("lingua-enabled");
    if ("true" == str) {
      $("#enable-lingua").html("Disable Lingua");
    } else {
      $("#enable-lingua").html("Enable Lingua");
    }
    $("#enable-lingua").bind("click", function(types) {
      types.preventDefault();
      if ("true" == str) {
        $.cookie("lingua-enabled", "false", {
          expires : 7,
          path : "/"
        });
      } else {
        $.cookie("lingua-enabled", "true", {
          expires : 7,
          path : "/"
        });
      }
      window.location.reload();
    });
  }
};
$(window).load(function() {
  ha.site.searchform.init();
  ha.util.analytics.init();
  ha.util.initPopupUrls();
  ha.util.initDropMenu();
  var obj = $("body");
  if (obj.hasClass("homePage") && !obj.hasClass("home-responsive")) {
    ha.page.home.init();
  } else {
    if (obj.hasClass("favorites")) {
      ha.page.favorites.init();
    } else {
      if (obj.hasClass("search-page") && !obj.hasClass("map")) {
        ha.page.search.init();
      } else {
        if (obj.hasClass("landing")) {
          ha.page.landing.init();
        } else {
          if (obj.hasClass("property")) {
            ha.page.property.init();
          } else {
            if (obj.hasClass("reviews-write") || (obj.hasClass("review-response-write") || obj.hasClass("report-abuse"))) {
              ha.page.writeReview.init();
            } else {
              if (obj.hasClass("inquiry-success")) {
                ha.page.inquiry.init();
              }
            }
          }
        }
      }
    }
  }
  ha.page.ads.initOrd(".ad-frame");
  ha.ui.lingua.init();
});
$(window).load(function() {
  if (!(ha.abtests.responsivePdp || "lt" === ha.template)) {
    var udataCur = $("input.datepicker-start").attr("rel");
    var pdataOld = $("input.datepicker-end").attr("rel");
    if (!udataCur || !pdataOld) {
      /** @type {string} */
      pdataOld = udataCur = "";
    }
    var fn = $.datepicker._generateHTML;
    /**
     * @param {?} inst
     * @return {?}
     */
    $.datepicker._generateHTML = function(inst) {
      var page = $(fn.call($.datepicker, inst));
      page = $("<div />").append(page);
      /** @type {string} */
      var EVT_CLEAR = "clear";
      var unlock;
      for (unlock in $.datepicker.regional) {
        if ($.datepicker.regional[unlock].clearText) {
          EVT_CLEAR = $.datepicker.regional[unlock].clearText;
        }
      }
      $(".ui-datepicker-buttonpane", page).append($('<button class="ui-datepicker-clear ui-state-default ui-priority-primary ui-corner-all">' + EVT_CLEAR + "</button>").click(function() {
        $("input.datepicker-start").attr("value", udataCur);
        $("input.datepicker-end").attr("value", pdataOld);
        inst.input.datepicker("hide");
        $("input.datepicker-end").change();
        /** @type {string} */
        ha.util.datepicker.startDate = "";
        /** @type {string} */
        ha.util.datepicker.startDateDaysOfYear = "";
        /** @type {string} */
        ha.util.datepicker.endDate = "";
        /** @type {string} */
        ha.util.datepicker.endDateDaysOfYear = "";
        $(".datepicker-error").text("");
        $(".date-section").removeClass("active");
        if (0 < $("body.search-page").length) {
          ha.page.search.update(search.baseUrl);
        }
      }));
      return page = page.children();
    };
    ha.state.storeUrl();
  }
});
/** @type {string} */
var OS = navigator.userAgent;
if ($.browser.mozilla && -1 != OS.indexOf("Win")) {
  /** @type {number} */
  var queDelayTotal = 0;
  $(document).ready(function() {
    $("iframe[rel]").each(function() {
      if ($(this).hasClass("queLoad")) {
        queDelayTotal += 50;
        var self = $(this);
        setTimeout(function() {
          self.attr("src", self.attr("rel"));
        }, queDelayTotal);
      } else {
        if (!$(this).hasClass("ad-frame-new")) {
          $(this).attr("src", $(this).attr("rel"));
        }
      }
    });
    if ($.cookie("HA_SESSION")) {
      $("#sso").attr("src", "/sso");
    }
  });
} else {
  /** @type {number} */
  queDelayTotal = 0;
  $(window).load(function() {
    $("iframe[rel]").each(function() {
      if ($(this).hasClass("queLoad")) {
        queDelayTotal += 50;
        var self = $(this);
        setTimeout(function() {
          self.attr("src", self.attr("rel"));
        }, queDelayTotal);
      } else {
        if (!$(this).hasClass("ad-frame-new")) {
          $(this).attr("src", $(this).attr("rel"));
        }
      }
    });
    if ($.cookie("HA_SESSION")) {
      $("#sso").attr("src", "/sso");
    }
  });
}
$(document).ready(function() {
  ha.page.ads.initOrd(".ad-frame-new");
  $("iframe.ad-frame-new").each(function() {
    $(this).attr("src", $(this).attr("rel"));
  });
});
ha.state = {
  /**
   * @return {?}
   */
  saveSearchState : function() {
    /** @type {Array.<string>} */
    var lines = window.location.pathname.split("/");
    /** @type {Array} */
    var msgs = [];
    var match = regionLabel || "region";
    $.cookie(ha.json.stateCookie(), null, {
      path : "/"
    });
    ha.json.cookie.update(ha.json.stateCookie(), "lastSearchUrl", window.location.pathname);
    ha.state.storeUrl();
    /** @type {number} */
    var i = 0;
    for (;i < lines.length;i++) {
      /** @type {string} */
      var line = lines[i];
      if (-1 != line.indexOf(":")) {
        if (-1 == line.indexOf(match) && -1 == line.indexOf("page")) {
          msgs.push(line);
          if (-1 != line.indexOf("arrival")) {
            ha.json.cookie.update(ha.json.stateCookie(), "previousArrivalDate", line.split(":")[1]);
          }
          if (-1 != line.indexOf("departure")) {
            ha.json.cookie.update(ha.json.stateCookie(), "previousDepartureDate", line.split(":")[1]);
          }
        }
      }
      if (-1 != line.indexOf(":")) {
        if (-1 != line.indexOf("page")) {
          ha.json.cookie.update(ha.json.stateCookie(), "lastSearchUrlPage", line.split(":")[1]);
        }
      }
      if ("minPrice" == line) {
        msgs.push("minPrice:" + lines[i + 1]);
        if ("currency" == lines[i + 2]) {
          msgs.push("currency:" + lines[i + 3]);
        }
      }
      if ("maxPrice" == line) {
        msgs.push("maxPrice:" + lines[i + 1]);
        if ("currency" == lines[i + 2]) {
          msgs.push("currency:" + lines[i + 3]);
        }
      }
      if ("minBedrooms" == line) {
        msgs.push("minBedrooms:" + lines[i + 1]);
      }
      if ("maxBedrooms" == line) {
        msgs.push("maxBedrooms:" + lines[i + 1]);
      }
      if ("minSleeps" == line) {
        msgs.push("minSleeps:" + lines[i + 1]);
      }
      if ("maxSleeps" == line) {
        msgs.push("maxSleeps:" + lines[i + 1]);
      }
      if ("minBathrooms" == line) {
        msgs.push("minBathrooms:" + lines[i + 1]);
      }
      if ("maxBathrooms" == line) {
        msgs.push("maxBathrooms:" + lines[i + 1]);
      }
    }
    if ("undefined" !== typeof search) {
      ha.json.cookie.update(ha.json.stateCookie(), "lastSearchRegionNode", search.region);
    }
    ha.json.cookie.update(ha.json.stateCookie(), "lastSearchRefinements", msgs);
    /** @type {Array} */
    var memory = [];
    $(".hit-url").each(function() {
      var name = $(this).attr("href").split("/");
      name = name[name.length - 1];
      if ("i" === name.substring(name.length - 1, name.length)) {
        name = name.substring(0, name.length - 1);
      }
      memory.push(name);
    });
    ha.json.cookie.update(ha.json.stateCookie(), "lastSearchHitUrls", memory);
    ha.json.cookie.update(ha.json.stateCookie(), "lastSearchHitTotal", $("#hit-count").html());
    if ("" == ha.json.cookie.parse(ha.json.stateCookie(), "lastSearchUrlPage")) {
      ha.json.cookie.update(ha.json.stateCookie(), "lastSearchUrlPage", 1);
    }
    return msgs;
  },
  initialSaveSearchState : [],
  currentSaveSearchState : [],
  hitCount : "",
  searchFilterJson : {},
  initialSearchFilterJson : {},
  lastSearchUrl : ha.json.cookie.parse(ha.json.stateCookie(), "lastSearchUrl"),
  /**
   * @return {undefined}
   */
  storeUrl : function() {
    ha.json.cookie.update(ha.json.stateCookie(), "lastPage", window.location.pathname);
  }
};
/**
 * @return {?}
 */
$.fn.redraw = function() {
  return $(this).each(function() {
    left = $(this).position().left;
  });
};
(function(obj) {
  /** @type {function (): ?} */
  obj.fn.naturalWidth = "naturalWidth" in new Image ? function() {
    return this[0].naturalWidth;
  } : function() {
    var el = this[0];
    var img;
    if ("img" === el.tagName.toLowerCase()) {
      /** @type {Image} */
      img = new Image;
      img.src = el.src;
      /** @type {number} */
      img = img.width;
    }
    return img;
  };
  /** @type {function (): ?} */
  obj.fn.naturalHeight = "naturalHeight" in new Image ? function() {
    return this[0].naturalHeight;
  } : function() {
    var el = this[0];
    var img;
    if ("img" === el.tagName.toLowerCase()) {
      /** @type {Image} */
      img = new Image;
      img.src = el.src;
      /** @type {number} */
      img = img.height;
    }
    return img;
  };
})(jQuery);
/** @type {function (this:Window, string): (MediaQueryList|null)} */
window.matchMedia = window.matchMedia || function() {
  return{
    matches : false,
    /**
     * @return {undefined}
     */
    addListener : function() {
    },
    /**
     * @return {undefined}
     */
    removeListener : function() {
    }
  };
};
$(document).ready(function() {
  if ("undefined" !== typeof analyticsdatalayer) {
    var files = window.hadvertising || (window.hadvertising = []);
    $(".ha-dfp-ads").each(function() {
      if ($(this).is(":visible")) {
        var field = $(this).attr("id");
        switch(field) {
          case "top-ad-square":
            files.push([field, 300, 250, true]);
            break;
          case "mid-ad-square":
            files.push([field, 300, 250, false]);
            break;
          case "mid-ad-tower":
            files.push([field, 160, 600, false]);
            break;
          case "mid-ad-doubletower":
            files.push([field, [[160, 600], [300, 600]], false]);
            break;
          case "top-ad-banner":
            files.push([field, 728, 90, true]);
            break;
          case "btm-ad-banner":
            files.push([field, 728, 90, false]);
            break;
          case "top-ad-short-tower":
            files.push([field, 300, 354, false]);
            break;
          case "top-ad-mini":
            files.push([field, 300, 100, true]);
            break;
          case "mid-ad-banner-tablet":
            files.push([field, 728, 90, false]);
            break;
          case "mid-ad-banner-mobile":
            files.push([field, 300, 50, false]);
        }
      }
    });
  }
});
ha = ha || {
  backbone : {}
};
_.templateSettings = {
  interpolate : /\<\@\=(.+?)\@\>/gim,
  evaluate : /\<\@(.+?)\@\>/gim,
  escape : /\<\@\-(.+?)\@\>/gim
};
/**
 * @return {?}
 */
var backboneNamespace = function() {
  return{
    Templates : {},
    Mixins : {},
    Views : {
      MastHead : {
        mastheadView : void 0,
        globalSearchView : void 0
      },
      HomePage : {
        homePageView : void 0
      },
      InquirySuccessPage : {
        inquirySuccessPageView : void 0
      },
      PropertyPage : {
        propertyPageView : void 0,
        defaultPDPAvailabilityView : void 0
      },
      PropertyComparePage : {
        propertyComparePageView : void 0
      },
      ReadReviewsPage : {},
      SearchResultsPage : {
        searchFiltersView : void 0,
        searchResultsPageView : void 0
      },
      FavoritesPage : {}
    },
    Models : {
      traveler : void 0,
      pdpAvailability : void 0,
      searchFilterAjaxResultsModel : void 0,
      selectedSearchFiltersModel : void 0,
      OLBData : void 0,
      baseSearchModel : void 0,
      unit : void 0,
      Property : {},
      Rates : {}
    },
    Collections : {
      favoriteLabels : void 0
    }
  };
};
ha.backbone = _.extend({}, {
  gt : _.extend({}, backboneNamespace()),
  lx : _.extend({}, backboneNamespace()),
  lt : _.extend({}, backboneNamespace()),
  Events : _.extend({}, Backbone.Events)
}, backboneNamespace());
ha.config = ha.config || {};
ha.config.bootstrapBreakpoints = {
  lg : 1200,
  md : 980,
  sm : 768,
  phone : 480
};
ha.config.mediaQueries = {
  lgOnly : "(min-width: " + ha.config.bootstrapBreakpoints.lg + "px)",
  mdOnly : "(min-width: " + ha.config.bootstrapBreakpoints.md + "px) and (max-width: " + (ha.config.bootstrapBreakpoints.lg - 1) + "px)",
  smOnly : "(min-width: " + ha.config.bootstrapBreakpoints.sm + "px) and (max-width: " + (ha.config.bootstrapBreakpoints.md - 1) + "px)",
  phoneOnly : "(max-width: " + (ha.config.bootstrapBreakpoints.phone - 1) + "px)",
  smallerThanLg : "(max-width: " + (ha.config.bootstrapBreakpoints.lg - 1) + "px)",
  smallerThanMd : "(max-width: " + (ha.config.bootstrapBreakpoints.md - 1) + "px)",
  smallerThanSm : "(max-width: " + (ha.config.bootstrapBreakpoints.sm - 1) + "px)",
  largerThanMd : "(min-width: " + ha.config.bootstrapBreakpoints.md + "px)",
  largerThanLg : "(min-width: " + ha.config.bootstrapBreakpoints.lg + "px)"
};
ha.config.social = {
  facebook : {
    locale : "fr_FR",
    appId : "210126639025536"
  }
};
ha.config.maps = {
  zoomLevels : {
    pdpSidebar : 10
  },
  circleOptions : {
    fillColor : "#444444",
    fillOpacity : 0.5,
    radius : 500,
    strokeWeight : 0
  }
};
ha.config.calendar = {
  fullSelectedClass : "full-selected"
};
ha = ha || {
  backbone : {}
};
var Router = Backbone.Router.extend({
  /**
   * @return {undefined}
   */
  initialize : function() {
    var obj = $("body");
    if (obj.hasClass("property")) {
      this.masthead(".search-bar");
      this.property();
    } else {
      if (obj.hasClass("favorites")) {
        this.masthead(".search-bar");
        this.favorites();
      } else {
        if (obj.hasClass("search-page") && !obj.hasClass("map")) {
          this.masthead(".search-bar");
          this.search();
        } else {
          if (obj.hasClass("reviews-read")) {
            this.masthead(".search-bar");
            this.readReviews();
          } else {
            if (obj.hasClass("homePage")) {
              this.home();
            } else {
              if (obj.hasClass("inquiry-success")) {
                this.masthead(".search-bar");
                this.inquirySuccess();
              } else {
                this.masthead(".search-bar");
              }
            }
          }
        }
      }
    }
  },
  /**
   * @param {Object} el
   * @return {undefined}
   */
  masthead : function(el) {
    ha.backbone.Views.MastHead.mastheadView = new ha.backbone.Views.MastHead.MastHeadView;
    var associatedModel = ha.backbone.Models.baseSearchModel = this.initializeBaseSearchModel();
    ha.backbone.Views.MastHead.globalSearchView = new ha.backbone.Views.MastHead.GlobalSearchView({
      el : el,
      model : associatedModel
    });
  },
  /**
   * @return {undefined}
   */
  home : function() {
    ha.backbone.Models.baseSearchModel = this.initializeBaseSearchModel();
    var failuresLink;
    /** @type {string} */
    failuresLink = $(".search-bar").length ? ".search-bar" : $(".search-form").length ? ".search-form" : "#keyword";
    this.masthead(failuresLink);
    ha.backbone.Views.HomePage.homePageview = new ha.backbone.Views.HomePage.HomePageView({
      el : $("body"),
      welcomeRedirectModal : "script.js-welcomeRedirectModalTemplate"
    });
  },
  /**
   * @return {undefined}
   */
  property : function() {
    var associatedModel = ha.backbone.Models.unit = new ha.backbone.Models.Property.Unit(unitJSON);
    /** @type {boolean} */
    var isPreviewMode = 0 < $(".js-previewOverlay").length;
    var reviewSummaryArray = "undefined" !== typeof HA_ratingStarFilterCounts ? HA_ratingStarFilterCounts : [0, 0, 0, 0, 0, 0];
    if ("gt" === ha.template || "lx" === ha.template) {
      ha.backbone.Views.PropertyPage.propertyPageView = ha.abtests.responsivePdp ? new ha.backbone.gt.Views.PropertyPage.PropertyPageView_Responsive({
        el : $("body"),
        model : associatedModel,
        reviewSummaryArray : reviewSummaryArray,
        inquiryModalSelector : ".js-inquiryFormModalContent",
        ratesReplacedContentSelector : "js-ratesReplacedContent",
        isPreviewMode : isPreviewMode
      }) : new ha.backbone.gt.Views.PropertyPage.PropertyPageView({
        el : $("body"),
        model : associatedModel,
        reviewSummaryArray : reviewSummaryArray,
        inquiryModalSelector : ".js-inquiryFormModalContent",
        ratesReplacedContentSelector : "js-ratesReplacedContent",
        isPreviewMode : isPreviewMode
      });
    } else {
      if ("lt" === ha.template) {
        ha.backbone.Views.PropertyPage.propertyPageView = new ha.backbone.lt.Views.PropertyPage.PropertyPageView({
          el : $("body"),
          model : associatedModel,
          reviewSummaryArray : reviewSummaryArray,
          inquiryModalSelector : ".js-inquiryFormModal",
          ratesReplacedContentSelector : "js-ratesReplacedContent",
          isPreviewMode : isPreviewMode
        });
      }
    }
    this.route(/^(.*?)\#reviewsPage(\d+)/, ha.backbone.Views.PropertyPage.propertyPageView.reviewView.loadPage);
  },
  /**
   * @return {undefined}
   */
  search : function() {
    ha.backbone.Views.SearchResultsPage.searchResultsPageView = "lt" === ha.template ? new ha.backbone.Views.SearchResultsPage.SearchResultsPageView({
      collection : new ha.backbone.Collections.SearchHits(hitsJson, {
        comparator : false
      }),
      makeEntireSearchHitClickable : true,
      bceFooter : true
    }) : new ha.backbone.Views.SearchResultsPage.SearchResultsPageView({
      makeEntireSearchHitClickable : true,
      welcomeRedirectModal : "script.js-welcomeRedirectModalTemplate",
      bceFooter : false
    });
  },
  /**
   * @return {undefined}
   */
  favorites : function() {
    ha.backbone.Models.traveler = ha.backbone.Models.traveler || new ha.backbone.Models.Traveler;
    if ("lt" === ha.template) {
      new ha.backbone.Views.FavoritesPage.FavoritesPageView({
        collection : new ha.backbone.Collections.SearchHits(hitsJson, {
          comparator : false
        }),
        model : ha.backbone.Models.traveler,
        bceFooter : true
      });
    } else {
      new ha.backbone.Views.FavoritesPage.FavoritesPageView({
        model : ha.backbone.Models.traveler,
        bceFooter : false
      });
    }
  },
  /**
   * @return {undefined}
   */
  readReviews : function() {
    var associatedModel = ha.backbone.Models.unit = new ha.backbone.Models.Property.Unit(unitJSON);
    new ha.backbone.Views.ReadReviewsPage.ReadReviewsPageView({
      el : $("body"),
      model : associatedModel
    });
  },
  /**
   * @return {undefined}
   */
  comparePage : function() {
  },
  /**
   * @return {undefined}
   */
  writeReview : function() {
  },
  /**
   * @return {undefined}
   */
  inquirySuccess : function() {
    var associatedModel = ha.backbone.Models.unit = new ha.backbone.Models.Property.Unit(unitJSON);
    ha.backbone.Views.InquirySuccessPage.inquirySuccessView = new ha.backbone.Views.InquirySuccessPage.InquirySuccessView({
      model : associatedModel
    });
  },
  /**
   * @return {?}
   */
  initializeBaseSearchModel : function() {
    var pkg = {};
    if ("undefined" !== typeof regionLabel) {
      if (regionLabel) {
        pkg.regionLabelValue = regionLabel;
      }
    }
    if ("undefined" !== typeof search && ("undefined" !== typeof search.arrivalDate && ("undefined" !== typeof search.departureDate && (pkg.arrival = search.arrivalDate, pkg.departure = search.departureDate)), "undefined" !== typeof search.keywords && (pkg.keywords = search.keywords), "undefined" !== typeof search.region)) {
      pkg.regionId = search.region;
    }
    return new ha.backbone.Models.BaseSearchModel(pkg);
  }
});
$(window).load(function() {
  new Router;
  if (!Backbone.History.started) {
    if (window.history && window.history.pushState) {
      Backbone.history.start({
        pushState : true,
        silent : true
      });
      ha.backbone.Events.trigger("historyStart");
    }
  }
});
ha = ha || {
  backbone : {
    Mixins : {}
  }
};
ha.backbone.Mixins.ChangeSize = {
  /**
   * @return {undefined}
   */
  triggerChangeSizeEvent : function() {
    this.trigger("heightChanged");
  }
};
ha = ha || {
  backbone : {
    Models : {}
  }
};
ha.backbone.Models.BaseSearchModel = Backbone.Model.extend({
  defaults : {
    arrival : "",
    departure : "",
    keywords : "",
    regionId : "",
    regionLabelValue : "region",
    sleeps : ""
  },
  /**
   * @param {string} exp
   * @return {?}
   */
  getBaseSearchFragment : function(exp) {
    /** @type {string} */
    var reg = "/search";
    if (exp) {
      reg += "/refined";
    }
    reg += this.getRegionAndKeywordsSearchFragment();
    if (exp) {
      reg += exp;
    }
    reg += this.getArrivalAndDepartureDateSearchFragment();
    return reg += this.getSleepsSearchFragment();
  },
  /**
   * @return {?}
   */
  getRegionAndKeywordsSearchFragment : function() {
    var elem;
    elem = "" + this.getRegionNodeSearchFragment();
    return elem += this.getKeywordsSearchFragment();
  },
  /**
   * @return {?}
   */
  getRegionNodeSearchFragment : function() {
    return this.get("regionId") && "1" !== this.get("regionId") ? "/" + this.get("regionLabelValue") + ":" + this.get("regionId") : "";
  },
  /**
   * @return {?}
   */
  getArrivalAndDepartureDateSearchFragment : function() {
    /** @type {string} */
    var optsData = "";
    if (this.get("arrival")) {
      if (this.get("departure")) {
        optsData = optsData + "/arrival:" + this.get("arrival") + "/departure:" + this.get("departure");
      }
    }
    return optsData;
  },
  /**
   * @return {?}
   */
  getSleepsSearchFragment : function() {
    return this.get("sleeps") ? "/minSleeps/" + this.get("sleeps") : "";
  },
  /**
   * @return {?}
   */
  getKeywordsSearchFragment : function() {
    return this.get("keywords") ? "/keywords:" + this.get("keywords") : "";
  }
});
ha = ha || {
  backbone : {
    Models : {}
  }
};
ha.backbone.Models.Inquiry = Backbone.Model.extend({
  url : "/ajax/inquiry",
  idAttribute : "inquiryId",
  defaults : {
    termsAgree : false
  },
  /**
   * @param {Object} opt_attributes
   * @return {?}
   */
  fetch : function(opt_attributes) {
    if (opt_attributes) {
      /** @type {boolean} */
      opt_attributes.cache = false;
    } else {
      opt_attributes = {
        cache : false
      };
    }
    return this.constructor.__super__.fetch.apply(this, arguments);
  },
  /**
   * @param {string} attributes
   * @return {?}
   */
  parse : function(attributes) {
    var options = {};
    if ("" !== this.get("checkInDateString")) {
      if (this.get("checkOutDateString")) {
        options = _.pick(this.attributes, "checkInDateString", "checkOutDateString");
      }
    }
    if ("" !== this.get("numberOfAdults")) {
      options.numberOfAdults = this.get("numberOfAdults");
    }
    if ("" !== this.get("numberOfChildren")) {
      options.numberOfChildren = this.get("numberOfChildren");
    }
    if ("" === attributes.inquirerFirstName) {
      options.inquirerFirstName = this.get("inquirerFirstName");
    }
    if ("" === attributes.inquirerLastName) {
      options.inquirerLastName = this.get("inquirerLastName");
    }
    if ("" === attributes.inquirerEmailAddress) {
      options.inquirerEmailAddress = this.get("inquirerEmailAddress");
    }
    attributes = _.pick(attributes, "inquirerFirstName", "inquirerLastName", "inquirerEmailAddress", "numberOfAdults", "inquirerPhoneNumber", "inquirerPhoneCountryCode", "checkInDateString", "checkOutDateString", "numberOfChildren", "numberOfGuests", "comments", "userSubscribe", "flexibleInquiryDates");
    return attributes = _.defaults(options, attributes);
  },
  /**
   * @param {Object} model
   * @return {?}
   */
  addTravelerData : function(model) {
    var attributes = {};
    /** @type {boolean} */
    var addTravelerData = false;
    if (!this.get("inquirerFirstName")) {
      attributes.inquirerFirstName = model.get("first_name");
      /** @type {boolean} */
      addTravelerData = true;
    }
    if (!this.get("inquirerLastName")) {
      attributes.inquirerLastName = model.get("last_name");
      /** @type {boolean} */
      addTravelerData = true;
    }
    if (!this.get("inquirerEmailAddress")) {
      attributes.inquirerEmailAddress = model.get("email");
      /** @type {boolean} */
      addTravelerData = true;
    }
    if (addTravelerData) {
      this.set(attributes);
    }
    return addTravelerData;
  },
  /**
   * @param {boolean} attributes
   * @param {Object} value
   * @return {?}
   */
  validate : function(attributes, value) {
    var data = {
      status : false,
      messages : [],
      errorElements : []
    };
    /** @type {boolean} */
    var past_date = true;
    /** @type {boolean} */
    var unavailable = false;
    if (!this.get("termsAgree")) {
      /** @type {boolean} */
      data.status = true;
      data.errorElements.push("termsAndConditionsChecked");
      data.messages.push(ha.strings.inquiryForm.validation.termsAndConditions);
    }
    attributes = attributes || this.attributes;
    var val = ha.util.datepicker.localDateStringtoISO8601;
    val = (new ha.backbone.Models.PDPAvailability({
      startDate : val(attributes.checkInDateString),
      endDate : val(attributes.checkOutDateString)
    })).validate();
    if ("undefined" !== typeof value) {
      past_date = "undefined" === typeof value.blockInquiriesBookedDates || value.blockInquiriesBookedDates;
      unavailable = "undefined" !== typeof value.flexibleInquiryDates && value.flexibleInquiryDates;
    }
    if (val && (past_date && (!unavailable && "unavailable" === val.state) || "past-date" == val.state)) {
      /** @type {boolean} */
      data.status = true;
      data.messages.push(val.message);
      data.errorElements.push("pdpAvailability");
    }
    if (true !== attributes.totalCost) {
      if (false !== attributes.totalCost) {
        /** @type {boolean} */
        data.status = true;
        data.messages.push("Total cost must be a boolean");
        data.errorElements.push("totalCost");
      }
    }
    if (attributes.numberOfAdults) {
      if (0 > attributes.numberOfAdults) {
        /** @type {boolean} */
        data.status = true;
        data.errorElements.push("adults");
        data.messages.push(ha.strings.inquiryForm.validation.positiveAdults);
      }
    }
    if (attributes.numberOfChildren) {
      if (0 > attributes.numberOfChildren) {
        /** @type {boolean} */
        data.status = true;
        data.errorElements.push("children");
        data.messages.push(ha.strings.inquiryForm.validation.positiveChildren);
      }
    }
    if (data.status) {
      return data;
    }
  }
});
ha = ha || {
  backbone : {
    Models : {}
  }
};
ha.backbone.Models.PDPAvailability = Backbone.Model.extend({
  /**
   * @param {?} contentHTML
   * @param {number} settings
   * @return {undefined}
   */
  initialize : function(contentHTML, settings) {
    if (void 0 === settings || (void 0 === settings.resetOnChange || true === settings.resetOnChange)) {
      this.on("change:startDate", this.resetStates);
    }
  },
  defaults : {
    minimumStay : {},
    availability : {},
    startDate : "",
    endDate : "",
    hoverDate : "",
    status : "",
    hoverStatus : "",
    hasPopulatedDatepicker : true,
    hasBlockedDatepicker : false,
    hasBlockedInquiriesForBookedDatesOnly : false,
    isHoveringDatepickerActive : true,
    globalChangeoverDay : 0
  },
  /**
   * @param {Date} date1
   * @return {?}
   */
  calculateMinimumStay : function(date1) {
    return!this.get("hasPopulatedDatepicker") ? 0 : this.calculateMinStayJSONByAttribute(date1, "minStay");
  },
  /**
   * @param {number} date1
   * @return {?}
   */
  calculateChangeoverDay : function(date1) {
    return!this.get("hasPopulatedDatepicker") ? 0 : (date1 = this.calculateMinStayJSONByAttribute(date1, "changeoverDay")) ? date1 : this.defaults.globalChangeoverDay;
  },
  /**
   * @param {Date} date
   * @param {string} prop
   * @return {?}
   */
  calculateMinStayJSONByAttribute : function(date, prop) {
    var anim = this.get("minimumStay");
    var time = $.datepicker.formatDate("yy-mm-dd", date);
    if (void 0 != anim[time]) {
      return anim[time][prop];
    }
    time = $.datepicker.iso8601Week(date);
    time = $.datepicker.formatDate("yy", date) + "-WK-" + time;
    if (void 0 != anim[time]) {
      return anim[time][prop];
    }
    time = $.datepicker.formatDate("2000-mm-dd", date);
    if (void 0 != anim[time]) {
      return anim[time][prop];
    }
    /** @type {Date} */
    time = new Date(2E3, date.getMonth(), date.getDate());
    time = $.datepicker.iso8601Week(time);
    /** @type {string} */
    time = "2000-WK-" + time;
    return void 0 != anim[time] ? anim[time][prop] : void 0 != anim.BASERATE ? anim.BASERATE[prop] : 0;
  },
  /**
   * @param {number} value
   * @return {?}
   */
  calculateAvailability : function(value) {
    if (!this.get("hasPopulatedDatepicker")) {
      return true;
    }
    value = ha.util.datepicker.calendarAvailabilityJSON[value];
    return void 0 == value || "u" != value.status;
  },
  /**
   * @return {undefined}
   */
  resetStates : function() {
    this.set({
      endDate : "",
      hoverDate : "",
      status : "",
      hoverStatus : ""
    });
  },
  /**
   * @param {Object} data
   * @return {?}
   */
  validate : function(data) {
    data = data || this.attributes;
    var elem = data.endDate;
    if (!data.startDate || !elem) {
      return{
        state : "incomplete"
      };
    }
    elem = ha.util.datepicker.newStandardDate(data.startDate);
    data = ha.util.datepicker.newStandardDate(data.endDate);
    data = this.validateHoverRange(elem, data, 1);
    if (data.state) {
      return data;
    }
  },
  /**
   * @param {Date} value
   * @return {?}
   */
  validateDate : function(value) {
    /** @type {number} */
    var breakpoint = Math.ceil((value - new Date) / 864E5);
    var scope = {};
    scope.minimumStay = this.calculateMinimumStay(value);
    scope.isAvailable = this.calculateAvailability($.datepicker.formatDate("yy-mm-dd", value));
    scope.dayOfYear = $.datepicker.formatDate("o", value);
    scope.dateString = $.datepicker.formatDate("yy-mm-dd", value);
    scope.changeoverDay = this.calculateChangeoverDay(value);
    /** @type {boolean} */
    scope.isPastDay = -1 >= breakpoint;
    return scope;
  },
  /**
   * @param {Date} value
   * @param {Object} obj
   * @param {number} self
   * @return {?}
   */
  validateHoverRange : function(value, obj, self) {
    self = self || 0;
    /** @type {string} */
    var val = "";
    /** @type {Array} */
    var assigns = [];
    /** @type {Date} */
    var date = new Date(value.getFullYear(), value.getMonth(), value.getDate());
    /** @type {number} */
    var type = 0;
    /** @type {string} */
    var msg = "";
    /** @type {number} */
    var length = Math.round((obj.getTime() - value.getTime()) / 864E5);
    /** @type {number} */
    var padLength = length - self;
    var store = this.get("bootstrapCalendarModel");
    var record = store && store.hasAvailability();
    /** @type {number} */
    var vvar = 0;
    for (;vvar <= padLength;vvar++) {
      var result = this.validateDate(date);
      /** @type {number} */
      type = parseInt(result.minimumStay, 10) > type ? parseInt(result.minimumStay, 10) : type;
      /** @type {string} */
      val = result.isAvailable ? val : "unavailable";
      if (!result.isAvailable) {
        msg = this.get("hasBlockedInquiriesForBookedDatesOnly") || $("body").hasClass("hasBlockedInquiries") ? ha.strings.datepicker.sidebarUnavailableNightBlocked : ha.strings.datepicker.sidebarUnavailableNight;
      }
      assigns.push(result.dayOfYear);
      date.setDate(date.getDate() + 1);
    }
    /** @type {number} */
    padLength = 0;
    for (;padLength < self;padLength += 1) {
      vvar = $.datepicker.formatDate("o", date);
      assigns.push(vvar);
      date.setDate(date.getDate() + 1);
    }
    if (!record) {
      if ("" === val && (0 < type && length < type)) {
        /** @type {string} */
        val = "minimum-stay-not-met";
        msg = jQuery.validator.format(ha.strings.datepicker.minimumStay, type) || ha.strings.datepicker.minimumStay;
      }
    }
    if (0 > length) {
      /** @type {string} */
      val = "past-date";
    }
    if (record && (!store.isCheckInDay(value) || !store.isCheckOutDay(value, obj))) {
      /** @type {string} */
      val = "invalid-changeover";
      msg = ha.strings.pricebar.invalidChangeoverDates;
    }
    self = {};
    /** @type {Date} */
    self.startDate = value;
    /** @type {Object} */
    self.endDate = obj;
    /** @type {string} */
    self.state = val;
    self.message = msg;
    /** @type {Array} */
    self.range = assigns;
    /** @type {number} */
    self.minstay = type;
    /** @type {number} */
    self.staycount = length;
    return self;
  },
  /**
   * @return {?}
   */
  getNumberOfNights : function() {
    var a = ha.util.datepicker.newStandardDate(this.get("startDate"));
    var b = ha.util.datepicker.newStandardDate(this.get("endDate"));
    return a && b ? Math.round((b.getTime() - a.getTime()) / 864E5) : 0;
  }
});
ha = ha || {
  backbone : {
    Models : {}
  }
};
ha.backbone.Models.OLBData = Backbone.Model.extend({
  defaults : {
    startDate : "",
    endDate : "",
    adultsCount : 1,
    childrenCount : 0,
    petIncluded : false,
    isOLB : false,
    transactionId : "",
    listingManagerId : "",
    propertyId : "",
    exactQuote : false
  }
});
ha = ha || {
  backbone : {
    Models : {}
  }
};
ha.backbone.Models.Traveler = Backbone.Model.extend({
  idAttribute : "uuid",
  /**
   * @return {undefined}
   */
  initialize : function() {
  },
  defaults : {
    uuid : void 0,
    email : "",
    first_name : "",
    last_name : "",
    schema : 1,
    created_at : "",
    updated_at : "",
    favorites : [],
    labels : [],
    visitedProperties : [],
    inquiredProperties : []
  },
  /**
   * @return {?}
   */
  url : function() {
    return "/api/traveler";
  },
  /**
   * @param {Object} options
   * @return {undefined}
   */
  fetch : function(options) {
    if (!options || !options.force) {
      if (options) {
        /** @type {boolean} */
        options.cache = false;
      } else {
        options = {
          cache : false
        };
      }
    }
    if (options && options.force || null != $.cookie("ha-usr-prst")) {
      this.constructor.__super__.fetch.apply(this, arguments);
    }
  },
  /**
   * @param {string} attributes
   * @return {?}
   */
  parse : function(attributes) {
    attributes.favorites = new ha.backbone.Collections.Favorites(attributes.favorites);
    attributes.labels = new ha.backbone.Collections.FavoritesLabels(attributes.labels);
    return attributes;
  },
  /**
   * @param {string} optgroup
   * @return {undefined}
   */
  removeFavoritesByLabel : function(optgroup) {
    var favorites = this.get("favorites");
    if (favorites) {
      favorites.forEach(function(options) {
        options.removeLabel(optgroup);
      });
    }
  },
  /**
   * @param {string} rvar
   * @param {string} optgroup
   * @return {undefined}
   */
  addLabelToFavorite : function(rvar, optgroup) {
    var cycle = this.get("favorites").get(rvar);
    if (cycle) {
      cycle.addLabel(optgroup);
      ha.api.traveler.favorites.labels.addLabel(rvar, optgroup);
    } else {
      cycle = new ha.backbone.Models.Favorite({
        id : rvar,
        labels : [optgroup]
      });
      this.get("favorites").add(cycle);
    }
    if (cycle = this.get("labels").get(optgroup)) {
      cycle.set("count", cycle.get("count") + 1);
    }
  },
  /**
   * @param {string} optgroup
   * @param {string} rvar
   * @return {undefined}
   */
  removeLabelFromFavorite : function(optgroup, rvar) {
    this.get("favorites").get(optgroup).removeLabel(rvar);
    ha.api.traveler.favorites.labels.removeLabel(optgroup, rvar);
    var namespace = this.get("labels").get(rvar);
    namespace.set("count", namespace.get("count") - 1);
  },
  /**
   * @return {?}
   */
  getFavoritesCount : function() {
    /** @type {number} */
    var getFavoritesCount = 0;
    var favorites = this.get("favorites");
    if (favorites) {
      favorites.forEach(function(state) {
        if (state.get("labels").length) {
          getFavoritesCount++;
        }
      });
    }
    return getFavoritesCount;
  },
  /**
   * @return {?}
   */
  getNotedCount : function() {
    /** @type {number} */
    var getNotedCount = 0;
    var favorites = this.get("favorites");
    if (favorites) {
      favorites.forEach(function(note) {
        if (note.get("note").length) {
          getNotedCount++;
        }
      });
    }
    return getNotedCount;
  }
});
ha = ha || {
  backbone : {
    Models : {}
  }
};
ha.backbone.Models.Favorite = Backbone.Model.extend({
  /**
   * @return {undefined}
   */
  initialize : function() {
    if (!this.get("note")) {
      this.set("note", "");
    }
    if (!this.get("labels")) {
      this.set("labels", []);
    }
  },
  defaults : {
    id : "",
    systemId : "",
    propertyId : "",
    unitId : "",
    created_at : "",
    updated_at : "",
    labels : [],
    note : ""
  },
  /**
   * @param {string} name
   * @return {undefined}
   */
  addLabel : function(name) {
    this.set("labels", _.union(this.get("labels"), [name]));
  },
  /**
   * @param {string} name
   * @return {undefined}
   */
  removeLabel : function(name) {
    this.set("labels", _.without(this.get("labels"), name));
  }
});
ha = ha || {
  backbone : {
    Models : {}
  }
};
ha.backbone.Models.FavoritesLabel = Backbone.Model.extend({
  urlRoot : "/api/traveler/labels",
  /**
   * @return {undefined}
   */
  initialize : function() {
  },
  defaults : {
    id : "",
    name : "",
    count : 0,
    checkInDay : "",
    checkOutDay : ""
  },
  /**
   * @param {?} name
   * @param {Function} target
   * @param {Text} options
   * @return {undefined}
   */
  save : function(name, target, options) {
    options = _.extend({
      beforeSend : this.beforeSend
    }, options);
    if (name) {
      Backbone.Model.prototype.save.call(this, name, target, options);
    } else {
      Backbone.Model.prototype.save.call(this, {}, options);
    }
  },
  /**
   * @param {Object} xhr
   * @return {undefined}
   */
  beforeSend : function(xhr) {
    var val = ha.util.guid();
    $.cookie(ha.api.csrfTokenName, val, {
      path : "/"
    });
    xhr.setRequestHeader("csrf_check", val);
  }
});
ha = ha || {
  backbone : {
    Models : {
      Property : {}
    }
  }
};
ha.backbone.Models.Property.Unit = Backbone.Model.extend({
  keys : {
    propertyId : "propertyId",
    property : "property",
    clearstay : "clearstay",
    hasExactQuotes : "hasExactQuotes",
    images : "images",
    isIPM : "ipm",
    isOLB : "olb",
    isPPB : "ppb",
    spu : "spu",
    unitId : "unitId",
    useQuotableRates : "useQuotableRates",
    quotableInquiries : "quotableInquiries",
    systemId : "systemId",
    isYesBookIt : "yesBookIt",
    availabilityUpdated : "availabilityUpdated",
    requireInquiryForPhone : "requireInquiryForPhone",
    reviewCount : "reviewCount"
  },
  /**
   * @return {undefined}
   */
  initialize : function() {
    var attributes = this.get("contact");
    this.set({
      images : new ha.backbone.Collections.UnitImages(this.get("images"))
    });
    if (attributes) {
      attributes = attributes.phones;
      _.each(attributes, function($scope) {
        if ($scope.countryCode) {
          $scope.countryCode = $scope.countryCode.replace("+", "");
        }
        if ($scope.phoneNumber) {
          $scope.phoneNumber = $scope.phoneNumber.replace("+", "");
        }
      });
    }
  },
  /**
   * @param {string} title
   * @return {?}
   */
  getContactNumberByTitle : function(title) {
    return _.find(this.get("contact").phones, function(notification) {
      return notification.title === title;
    });
  },
  /**
   * @return {?}
   */
  hasQuotableRates : function() {
    return this.get(this.keys.isOLB) || this.get(this.keys.quotableInquiries);
  }
});
ha = ha || {
  backbone : {
    Models : {}
  }
};
ha.backbone.Models.PropertyReviewsModel = Backbone.Model.extend({
  defaults : {
    include : true
  },
  /**
   * @return {?}
   */
  formattedCreatedDate : function() {
    /** @type {Date} */
    var until = new Date(this.attributes.createdDate);
    /** @type {string} */
    until = until.getFullYear() + "-" + (until.getMonth() + 1) + "-" + until.getDate();
    return ha.util.datepicker.formatDateFromISO8601ToMedium(until);
  },
  /**
   * @return {?}
   */
  formattedArrivalDate : function() {
    /** @type {Date} */
    tempDate = new Date(this.attributes.arrivalDate);
    /** @type {string} */
    formattedDate = tempDate.getFullYear() + "-" + (tempDate.getMonth() + 1) + "-" + tempDate.getDate();
    return ha.util.datepicker.formatDateFromISO8601ToMonthNameYear(formattedDate);
  }
});
ha = ha || {
  backbone : {
    Models : {}
  }
};
var brand = brand || {};
ha.backbone.Models.PDPQuote = Backbone.Model.extend({
  urlRoot : "/ajax/olb/rates",
  defaults : {
    olbData : null,
    currentRequest : null
  },
  /**
   * @return {undefined}
   */
  initialize : function() {
    this.listenTo(this.get("olbData"), "change", this.fetch);
  },
  /**
   * @return {?}
   */
  url : function() {
    var cookies = this.get("olbData");
    var urlRoot = ha.util.datepicker.formatDateFromISO8601ToLocal(ha.backbone.Models.pdpAvailability.get("startDate"));
    var c = ha.util.datepicker.formatDateFromISO8601ToLocal(ha.backbone.Models.pdpAvailability.get("endDate"));
    return this.urlRoot + "?arrivalDate=" + urlRoot + "&departureDate=" + c + "&lmId=" + cookies.get("listingManagerId") + "&transactionId=" + cookies.get("transactionId") + "&adultsCount=" + cookies.get("adultsCount") + "&childrenCount=" + cookies.get("childrenCount") + "&petIncluded=" + cookies.get("petIncluded") + "&propertyId=" + cookies.get("propertyId");
  },
  /**
   * @param {Function} options
   * @return {?}
   */
  fetch : function(options) {
    var cycle;
    var c;
    this.clear();
    if (options && options.force) {
      cycle = this.constructor.__super__.fetch.apply(this, arguments);
    } else {
      if (ha.backbone.Models.pdpAvailability.get("startDate")) {
        if (ha.backbone.Models.pdpAvailability.get("endDate")) {
          if (!(c = ha.backbone.Models.pdpAvailability.validate())) {
            cycle = this.constructor.__super__.fetch.apply(this, arguments);
          }
        }
      }
    }
    this.set("currentRequest", cycle);
    return cycle;
  },
  /**
   * @return {undefined}
   */
  clear : function() {
    this.set({
      errorString : void 0,
      errorType : void 0,
      content : void 0,
      total : void 0,
      currentRequest : void 0,
      skipQuoteModal : void 0,
      bookingUrl : void 0
    });
  },
  /**
   * @return {undefined}
   */
  cancelFetch : function() {
    if (this.isPendingRequest()) {
      this.get("currentRequest").abort();
      this.set("currentRequest", null);
    }
  },
  /**
   * @return {?}
   */
  isPendingRequest : function() {
    var data = this.get("currentRequest");
    return data && "pending" === data.state();
  },
  /**
   * @param {Object} data
   * @return {?}
   */
  parse : function(data) {
    data.errorString = data.errorString || "";
    data.errorType = data.errorType || "";
    data.content = data.content || "";
    data.total = data.total || "";
    data.skipQuoteModal = data.skipQuoteModal || "";
    data.bookingUrl = data.bookingUrl || "";
    /** @type {null} */
    data.currentRequest = null;
    return data;
  },
  /**
   * @return {?}
   */
  isNew : function() {
    return void 0 === this.get("total");
  }
});
ha = ha || {
  backbone : {
    Models : {
      Rates : {}
    }
  }
};
ha.backbone.Models.Rates.TripsRateSchedule = Backbone.Model.extend({
  defaults : {
    ratePeriods : null
  },
  propertyId : null,
  unitId : null,
  /**
   * @return {?}
   */
  url : function() {
    return "/ajax/properties/" + this.get("propertyId") + "/units/" + this.get("unitId") + "/rateSchedule";
  },
  /**
   * @param {string} object
   * @return {?}
   */
  parse : function(object) {
    object.ratePeriods = new ha.backbone.Collections.TripsRatePeriods(object.ratePeriods);
    return object;
  }
});
ha = ha || {
  backbone : {
    Models : {
      Rates : {}
    }
  }
};
ha.backbone.Models.Rates.TripsRatePeriod = Backbone.Model.extend({
  defaults : {
    periodName : "",
    begins : 0,
    ends : 0,
    weeklyRate : null,
    weekendRate : null,
    weekendNightRate : null,
    weekdayNightRate : null,
    extraNightRate : null,
    monthlyRate : null,
    packageRate : null,
    minimumStay : 1,
    minimumStayText : null,
    notes : null,
    defaultCurrencyUnits : null
  }
});
ha = ha || {
  backbone : {
    Collections : {}
  }
};
ha.backbone.Collections.UnitImages = Backbone.Collection.extend({
  model : Backbone.Model,
  /**
   * @param {string} graphics
   * @param {boolean} deepDataAndEvents
   * @return {?}
   */
  getImagesByWidth : function(graphics, deepDataAndEvents) {
    return this._getImagesByDimension(graphics, true, deepDataAndEvents);
  },
  /**
   * @param {string} graphics
   * @param {boolean} deepDataAndEvents
   * @return {?}
   */
  getImagesByHeight : function(graphics, deepDataAndEvents) {
    return this._getImagesByDimension(graphics, false, deepDataAndEvents);
  },
  /**
   * @param {string} cycle
   * @param {?} width
   * @return {?}
   */
  getImageFileByWidth : function(cycle, width) {
    var people = _.filter(cycle, function(replacement) {
      return replacement.width >= width;
    });
    return people.length ? (people = _.sortBy(people, function($slide) {
      return $slide.width;
    }), people[0]) : this.getLargestImageFileByWidth(cycle);
  },
  /**
   * @param {string} cycle
   * @param {?} minHeight
   * @return {?}
   */
  getImageFileByHeight : function(cycle, minHeight) {
    var people = _.filter(cycle, function(windowSize) {
      return windowSize.height >= minHeight;
    });
    return people.length ? (people = _.sortBy(people, function(readBuffer) {
      return readBuffer.height;
    }), people[0]) : this.getLargestImageFileByHeight(cycle);
  },
  /**
   * @return {?}
   */
  getLargestImagesByWidth : function() {
    /** @type {Array} */
    var assigns = [];
    var complete;
    var vvar;
    this.each(function(note) {
      complete = note.get("imageFiles");
      if (complete.length) {
        vvar = _.clone(this.getLargestImageFileByWidth(complete));
        vvar.note = note.get("note");
        assigns.push(vvar);
      }
    }, this);
    return assigns;
  },
  /**
   * @param {string} type
   * @return {?}
   */
  getLargestImageFileByWidth : function(type) {
    return _.sortBy(type, function($slide) {
      return $slide.width;
    }).pop();
  },
  /**
   * @param {string} type
   * @return {?}
   */
  getLargestImageFileByHeight : function(type) {
    return _.sortBy(type, function(readBuffer) {
      return readBuffer.height;
    }).pop();
  },
  /**
   * @param {string} graphics
   * @param {boolean} recurring
   * @param {boolean} deepDataAndEvents
   * @return {?}
   */
  _getImagesByDimension : function(graphics, recurring, deepDataAndEvents) {
    var fn = this;
    /** @type {Array} */
    var cycle = [];
    var __indexOf = recurring ? this.getImageFileByWidth : this.getImageFileByHeight;
    var name;
    var copies;
    this.each(function(note) {
      name = note.get("imageFiles");
      if (name.length) {
        copies = _.clone(__indexOf.call(fn, name, graphics));
        copies.note = note.get("note");
        cycle.push(copies);
      }
    }, this);
    if (deepDataAndEvents) {
      cycle = _.filter(cycle, function(tagJSON) {
        return tagJSON.height && tagJSON.width;
      });
    }
    return cycle;
  }
});
ha = ha || {
  backbone : {
    Collections : {}
  }
};
ha.backbone.Collections.AbstractReviewsCollection = Backbone.Collection.extend({
  model : ha.backbone.Models.PropertyReviewsModel,
  pageSize : 50,
  pagesFetched : 0,
  totalPages : 0,
  /**
   * @param {Object} params
   * @return {?}
   */
  fetch : function(params) {
    var pageNum;
    if (!params) {
      params = {};
    }
    if (!params.pageNum) {
      params.pageNum = this.pagesFetched + 1;
    }
    pageNum = params.pageNum;
    if (!(0 < this.totalPages && pageNum > this.totalPages)) {
      return params.data = $.param({
        pageNum : pageNum,
        pageSize : this.pageSize
      }), Backbone.Collection.prototype.fetch.call(this, params);
    }
  },
  _fullResponseList : [],
  /**
   * @param {string} data
   * @return {?}
   */
  parse : function(data) {
    if (0 === this.totalPages) {
      this.totalPages = data.totalPages;
    }
    /** @type {number} */
    this.pagesFetched = Math.max(data.page, this.pagesFetched);
    _.forEach(data.list, function(res) {
      /** @type {string} */
      res.body = String(res.body).replace(/(\r\n|\n|\r)/gm, "<br />");
    }, this);
    return this._fullResponseList = _.union(this._fullResponseList, data.list);
  }
});
ha = ha || {
  backbone : {
    Collections : {}
  }
};
ha.backbone.Collections.GuestbookComments = ha.backbone.Collections.AbstractReviewsCollection.extend({
  pageSize : 10,
  /**
   * @param {Object} value
   * @return {undefined}
   */
  initialize : function(value) {
    var target = value.unit;
    var node = target.keys;
    value = target.get(node.property).uid;
    target = target.get(node.unitId);
    /** @type {string} */
    this.url = "/ajax/review/property/" + value + "/unit/" + target + "/getGuestbookComments";
  }
});
ha = ha || {
  backbone : {
    Collections : {}
  }
};
ha.backbone.Collections.PropertyReviewsCollection = ha.backbone.Collections.AbstractReviewsCollection.extend({
  /**
   * @param {Object} value
   * @return {undefined}
   */
  initialize : function(value) {
    var target = value.unit;
    var node = target.keys;
    value = target.get(node.property).uid;
    target = target.get(node.unitId);
    /** @type {string} */
    this.url = "/ajax/review/property/" + value + "/unit/" + target + "/getAllReviews";
  }
});
ha = ha || {
  backbone : {
    Collections : {}
  }
};
ha.backbone.Collections.Favorites = Backbone.Collection.extend({
  model : ha.backbone.Models.Favorite,
  url : "/api/traveler/favorites",
  /**
   * @return {undefined}
   */
  initialize : function() {
    this.on("add", function(state) {
      var label = state.get("id");
      var selection = state.get("labels");
      state = label.split("-");
      ha.api.traveler.favorites.createFavorite(label, selection, state[0], state[1], state[2], function() {
        if (selection.length) {
          ha.api.traveler.favorites.labels.addLabel(label, selection[0]);
        }
      });
    });
  }
});
ha = ha || {
  backbone : {
    Collections : {}
  }
};
ha.backbone.Collections.FavoritesLabels = Backbone.Collection.extend({
  model : ha.backbone.Models.FavoritesLabel,
  url : "/api/traveler/labels",
  /**
   * @return {undefined}
   */
  initialize : function() {
    this.on("remove", function(ids) {
      ha.api.traveler.labels.deleteLabel(ids.get("id"), function() {
        ha.page.favorites.refresh();
      });
    }, this);
    this.on("add", function(record) {
      ha.api.traveler.labels.createLabel(record.get("name"), function(result) {
        record.set("id", result.id);
      });
    });
  }
});
ha = ha || {
  backbone : {
    Views : {}
  }
};
ha.backbone.Views.DatepickerPairView = Backbone.View.extend({
  calendarAge : 0,
  /**
   * @param {Object} scope
   * @return {undefined}
   */
  initialize : function(scope) {
    var result = scope.calendarData || {};
    var cycle = ha.backbone.Models.pdpAvailability;
    this.isQuotable = scope.isQuotable || false;
    this.initializeMessageStrings(scope);
    this.maxCalendarInactiveAge = scope.maxCalendarInactiveAge || 105;
    _.bindAll(this);
    if (scope.availabilityUpdated) {
      this.determineAgeOfCalendar(scope.availabilityUpdated);
    }
    this.$startCalendar = this.$(".start-calendar");
    this.$endCalendar = this.$(".end-calendar");
    this.$startCalendar.calendar({
      minDate : 0,
      startCalendarDate : scope.startDate,
      endCalendarDate : scope.endDate,
      endCalendar : this.$endCalendar,
      hoverClass : ha.config.calendar.fullSelectedClass,
      hoverClassStart : ha.config.calendar.fullSelectedClass,
      hoverClassEnd : ha.config.calendar.fullSelectedClass,
      showButtonPanel : true,
      calendar : result.calendar,
      reservations : result.reservations,
      availability : result.availability,
      startOfWeek : ha.i18n.startOfWeek,
      language : ha.i18n.calendar,
      dateFormat : ha.i18n.dateFormats.shortDate,
      fetch : false
    });
    this.$startCalendar.on("changed", this.changeStartDate);
    this.$startCalendar.on("noCheckin", this.noCheckin);
    this.$endCalendar.on("changed", this.changeEndDate);
    this.$endCalendar.on("close", this.closeEndDatePickerCallback);
    this.$endCalendar.on("noCheckout", this.noCheckout);
    this.listenTo(cycle, "change:startDate", this.renderDatesAndMessage);
    this.listenTo(cycle, "change:endDate", this.renderDatesAndMessage);
  },
  /**
   * @return {?}
   */
  render : function() {
    this.renderDatesAndMessage();
    return this;
  },
  /**
   * @param {Object} pane
   * @return {undefined}
   */
  initializeMessageStrings : function(pane) {
    var isQuotable = pane.dateFieldLabelQuotable || ha.strings.pricebar.dateFieldLabelQuotable;
    var dateFieldLabel = pane.dateFieldLabel || ha.strings.pricebar.dateFieldLabel;
    var isManager = pane.noCalendarOwner || ha.strings.pricebar.noCalendar;
    var noCalendarLabel = pane.noCalendarManager || ha.strings.pricebar.noCalendarManager;
    this._messages = {
      dateFieldLabel : pane.isQuotable ? isQuotable : dateFieldLabel,
      unavailableLabel : pane.unavailableLabel || ha.strings.pricebar.unavailable,
      availableLabel : pane.availableLabel || ha.strings.pricebar.available,
      minstayLabel : pane.minstayWarningLabel || ha.strings.pricebar.minStay,
      changeoverErrorLabel : pane.changeoverErrorLabel || ha.strings.pricebar.requirementsNotMet,
      noCalendarLabel : pane.isManager ? noCalendarLabel : isManager,
      noCalendarBubble : pane.noCalendarBubble || ha.strings.pricebar.noCalendarBubble
    };
  },
  /**
   * @param {Date} startAt
   * @return {undefined}
   */
  determineAgeOfCalendar : function(startAt) {
    /** @type {number} */
    this.calendarAge = Math.ceil((new Date - startAt) / 864E5);
  },
  /**
   * @param {?} mom
   * @return {undefined}
   */
  addReservations : function(mom) {
    this.$startCalendar.calendar("addReservations", mom);
  },
  /**
   * @param {Text} res
   * @return {undefined}
   */
  changeStartDate : function(res) {
    res = $(res.currentTarget);
    var results = res.val();
    ha.backbone.Models.pdpAvailability.set("startDate", ha.util.datepicker.localDateStringtoISO8601(results));
    if (results) {
      res = res.datepicker("getDate");
      results = ha.backbone.Models.pdpAvailability.validateDate(res);
      if (results.changeoverDay) {
        if (results.changeoverDay - 1 !== res.getDay()) {
          this.$el.addClass("error");
          res = jQuery.validator.format(ha.strings.datepicker.changeOverError, ha.i18n.calendar.dayNames[results.changeoverDay - 1]);
          this.$(".js-quotebarMessagingLabel").html(res);
        }
      }
    }
  },
  /**
   * @param {Event} ev
   * @return {undefined}
   */
  changeEndDate : function(ev) {
    ha.backbone.Models.pdpAvailability.set("endDate", ha.util.datepicker.localDateStringtoISO8601($(ev.currentTarget).val()));
  },
  /**
   * @return {undefined}
   */
  showDepartureCalendar : function() {
    this.$endCalendar.datepicker("show");
  },
  /**
   * @param {Object} model_
   * @return {undefined}
   */
  closeEndDatePickerCallback : function(model_) {
    if (1 == ha.backbone.Models.pdpAvailability.getNumberOfNights()) {
      this.renderDatesAndMessage(model_);
    }
  },
  /**
   * @param {?} dataAndEvents
   * @param {?} mediaElem
   * @return {undefined}
   */
  noCheckin : function(dataAndEvents, mediaElem) {
    this.showDatepickerPopover($(mediaElem), ha.strings.datepicker.noCheckin);
  },
  /**
   * @param {?} dataAndEvents
   * @param {?} mediaElem
   * @return {undefined}
   */
  noCheckout : function(dataAndEvents, mediaElem) {
    this.showDatepickerPopover($(mediaElem), ha.strings.datepicker.noCheckout);
  },
  /**
   * @param {Object} rule
   * @param {string} dataAndEvents
   * @return {undefined}
   */
  showDatepickerPopover : function(rule, dataAndEvents) {
    rule.find("a").popover({
      html : true,
      placement : "left",
      content : '<span class="no-changeover-message">' + dataAndEvents + "</span>"
    }).popover("show");
  },
  /**
   * @param {Object} model
   * @return {undefined}
   */
  renderDatesAndMessage : function(model) {
    if (model) {
      if (model.changed) {
        if (!model.changedAttributes().startDate) {
          model.changedAttributes();
        }
      }
    }
    model = ha.backbone.Models.pdpAvailability;
    var optgroup = model.validate();
    var date2 = ha.util.datepicker.newStandardDate(model.get("startDate"));
    var $options = this.$endCalendar.datepicker("option", "minDate");
    this.$startCalendar.calendar("setStartCalendarDate", date2);
    if (date2) {
      if ($options) {
        /** @type {Date} */
        date2 = new Date(date2.getFullYear(), date2.getMonth(), date2.getDate());
        if (date2 < $options) {
          this.$endCalendar.datepicker("option", "minDate", date2);
        }
      }
    }
    this.$startCalendar.calendar("setEndCalendarDate", ha.util.datepicker.newStandardDate(model.get("endDate")));
    this.toggleFieldClassesIfNeeded();
    this.renderDateValidation(optgroup);
    this.trigger("datesValidated", optgroup);
  },
  /**
   * @return {undefined}
   */
  toggleFieldClassesIfNeeded : function() {
    var $field = this.$startCalendar;
    var b = $field.val();
    var clone = this.$endCalendar;
    var d = clone.val();
    if (b) {
      $field.addClass("has-date");
    } else {
      $field.removeClass("has-date");
    }
    if (d) {
      clone.addClass("has-date");
    } else {
      clone.removeClass("has-date");
    }
  },
  /**
   * @param {(Object|string)} object
   * @return {undefined}
   */
  renderDateValidation : function(object) {
    var $title = this.$(".js-quotebarMessagingLabel");
    this.removeDateValidationFromView();
    if (object && "incomplete" === object.state) {
      $title.text(this._messages.dateFieldLabel);
    } else {
      if (object && "unavailable" === object.state) {
        this.$el.addClass("unavailable");
        $title.html(this._messages.unavailableLabel);
      } else {
        if (object && "invalid-changeover" === object.state) {
          this.$el.addClass("error");
          $title.html(this._messages.changeoverErrorLabel);
          this.showDatesGroupPopover(object.message);
        } else {
          if (object && "minimum-stay-not-met" === object.state) {
            this.$el.addClass("warning");
            $title.html(this._messages.minstayLabel);
            this.showDatesGroupPopover(object.message);
          } else {
            if (this.calendarAge > this.maxCalendarInactiveAge) {
              $title.html(this._messages.noCalendarLabel);
              this.showDatesGroupPopover(this._messages.noCalendarBubble);
            } else {
              this.$el.addClass("available");
              $title.html(this._messages.availableLabel);
              if (30 < this.calendarAge) {
                this.showDatesGroupPopover(this.$(".availability_last_updated_template").html());
              }
            }
          }
        }
      }
    }
  },
  /**
   * @return {undefined}
   */
  markDateFieldsRequired : function() {
    this.$el.addClass("error");
  },
  /**
   * @param {?} dataAndEvents
   * @return {undefined}
   */
  showDatesGroupPopover : function(dataAndEvents) {
    var help_bubble_below;
    if (0 < this.$el.length) {
      /** @type {string} */
      help_bubble_below = 400 < $(window).width() - this.$el.offset().left && 1200 > $(window).width() ? "help-bubble-below" : "help-bubble-left";
    }
    this.closeDatesGroupPopover();
    this.$el.append($('<div class="help-inline help-bubble ' + help_bubble_below + '"><span class="arrow"></span>' + dataAndEvents + "</div>"));
    $("html").on("click.datepickerpairview", this.closeDatesGroupPopover);
    setTimeout(this.closeDatesGroupPopover, 1E4);
  },
  /**
   * @return {undefined}
   */
  closeDatesGroupPopover : function() {
    var tooltip = this.$(".help-bubble");
    tooltip.fadeOut(function() {
      tooltip.remove();
    });
    $("html").off("click.datepickerpairview");
  },
  /**
   * @return {undefined}
   */
  removeDateValidationFromView : function() {
    this.$el.removeClass("available warning error unavailable");
    this.$(".js-quotebarMessagingLabel").empty();
    this.closeDatesGroupPopover();
  },
  /**
   * @return {?}
   */
  hasPopulatedDates : function() {
    return this.$startCalendar.val() && this.$endCalendar.val();
  }
});
ha = ha || {
  backbone : {
    Views : {
      InquirySuccessPage : {}
    }
  }
};
ha.backbone.Views.InquirySuccessPage.InquirySuccessView = Backbone.View.extend({
  el : ".inquiry-success",
  events : {
    "click .js-backToSearch" : "backToSearch",
    "click .js-launchRegisterModal" : "launchRegisterModal"
  },
  /**
   * @return {undefined}
   */
  initialize : function() {
    _.bindAll(this);
    this.$("img").unveil(200);
  },
  /**
   * @param {Object} key
   * @return {undefined}
   */
  backToSearch : function(key) {
    var path = ha.json.cookie.parse(ha.json.qpJsonCookie(), "searchURL");
    if (path) {
      key.preventDefault();
      if (key = this.model.get("spu")) {
        path += "#listing-spu-" + key;
      }
      window.location = path;
    }
  },
  /**
   * @return {undefined}
   */
  launchRegisterModal : function() {
    ha.user.login.ui.launchRegisterModalWithOptions("def", inquirer || {});
  }
});
ha = ha || {
  backbone : {
    Views : {
      MastHead : {}
    }
  }
};
ha.backbone.Views.MastHead.GlobalSearchView = Backbone.View.extend({
  events : {
    "click .search-btn" : "search",
    "keyup #searchKeywords" : "search",
    "change #searchKeywords" : "saveKeywords",
    "change #geonodeDropdown" : "geonodeDropdownChange",
    "click .js-triggerCalendar" : "focusSiblingCalendar",
    "click .js-triggerSleepsSelect" : "showSleepsOptions",
    "change select.js-sleepsSelect" : "styleSleepsSelect"
  },
  /**
   * @param {?} events
   * @return {?}
   */
  delegateEvents : function(events) {
    events = Backbone.View.prototype.delegateEvents.call(this, events);
    ha.backbone.Events.trigger("cta_bound", "global_search");
    return events;
  },
  transliterator : null,
  loadingSentinel : null,
  /**
   * @return {undefined}
   */
  initialize : function() {
    this.initTypeahead();
    _.bindAll(this, "typeaheadSource", "updateDates", "checkIfClearedDates", "checkIfClearedEndDate", "checkIfClearedStartDate", "updateDatesFromNewDatepickers", "updateDatesFromMasthead", "updateDatesFromOldDatepickers");
    if ($.fn.typeahead) {
      this.$el.find("#searchKeywords").typeahead({
        source : this.typeaheadSource,
        matcher : this.typeaheadMatcher,
        updater : this.typeaheadUpdater
      });
    }
    var input = this.$("input.start-calendar");
    var element = this.$(".end-calendar");
    if (input.length) {
      input.calendar({
        minDate : 0,
        startCalendarDate : ha.util.datepicker.newStandardDate(ha.util.datepicker.localDateStringtoISO8601(input.val())),
        endCalendarDate : ha.util.datepicker.newStandardDate(ha.util.datepicker.localDateStringtoISO8601(element.val())),
        fetch : false,
        endCalendar : element,
        hoverClass : "full-selected",
        hoverClassStart : "full-selected",
        hoverClassEnd : "full-selected",
        showButtonPanel : true,
        startOfWeek : ha.i18n.startOfWeek,
        language : ha.i18n.calendar,
        dateFormat : ha.i18n.dateFormats.shortDate
      });
      element.on("close", this.updateDatesFromNewDatepickers);
      input.on("changed", this.checkIfClearedStartDate);
      element.on("changed", this.checkIfClearedEndDate);
    }
    ha.backbone.Events.on("mastHeadendDateInputSelect", this.updateDatesFromMasthead);
    ha.backbone.Events.on("endDateInputSelectOldDatePickers", this.updateDatesFromOldDatepickers);
    if ("undefined" != typeof search) {
      if (this.$(".geonodeSelection")) {
        this.$(".geonodeSelection option[data-regionid=" + search.region + "]").attr("selected", "selected");
      }
    }
  },
  /**
   * @return {undefined}
   */
  initTypeahead : function() {
    if ("undefined" === typeof window.haAutocompleteDataCache) {
      window.haAutocompleteDataCache = {};
    }
    if ("undefined" === typeof window.haAutoCompleteEntries) {
      /**
       * @param {string} match
       * @return {undefined}
       */
      window.haAutoCompleteEntries = function(match) {
        if (match.length > 0) {
          var rsingleTag = new AutocompleteData(match, true, 10, haAutocompleteLocaleCode);
          match = rsingleTag.effectiveMatchText(match[0]);
          if (match.length > 0) {
            window.haAutocompleteDataCache[match.charAt(0)] = rsingleTag;
          }
        }
      };
    }
    this.transliterator = new Transliterator(haAutocompleteLocaleCode);
    this.loadingSentinel = {};
  },
  /**
   * @param {string} cycle
   * @param {?} until
   * @return {?}
   */
  displayAutocompleteResultsFromCache : function(cycle, until) {
    var data = window.haAutocompleteDataCache[cycle.charAt(0)];
    if (data === this.loadingSentinel) {
      return true;
    }
    if (data) {
      data = data.filter(cycle);
      /** @type {Array} */
      var args = Array(data.length);
      /** @type {number} */
      var i = 0;
      for (;i < args.length;i++) {
        args[i] = data[i].label;
      }
      until(args);
      return true;
    }
    return false;
  },
  /**
   * @param {string} input
   * @param {?} until
   * @return {undefined}
   */
  typeaheadSource : function(input, until) {
    var matched = this.transliterator.standardizeAndNormalize(input);
    if (0 !== matched.length) {
      if (!this.displayAutocompleteResultsFromCache(matched, until)) {
        window.haAutocompleteDataCache[matched.charAt(0)] = this.loadingSentinel;
        $.ajax({
          url : haAutocompleteURL + "/" + encodeURIComponent(matched.charAt(0)),
          dataType : "script",
          context : this,
          /**
           * @return {undefined}
           */
          success : function() {
            this.displayAutocompleteResultsFromCache(matched, until);
          },
          cache : true,
          crossDomain : true
        });
      }
    }
  },
  /**
   * @return {?}
   */
  typeaheadMatcher : function() {
    return true;
  },
  /**
   * @param {string} hash
   * @return {?}
   */
  typeaheadUpdater : function(hash) {
    return hash.substring(0, hash.lastIndexOf("(") - 1);
  },
  /**
   * @param {(Object|string)} type
   * @return {undefined}
   */
  setRegionIdFromTypeahead : function(type) {
    var types = this.transliterator.standardizeAndNormalize(type);
    if (types = window.haAutocompleteDataCache[types.charAt(0)]) {
      if (!(types = types.autocompleteDataArray)) {
        /** @type {Array} */
        types = [];
      }
      if (type = this.findRegionFromTypeaheadItems(type, types)) {
        this.model.set({
          regionId : type,
          keywords : ""
        });
      } else {
        this.model.set("regionId", "");
      }
    } else {
      this.model.set("regionId", "");
    }
  },
  /**
   * @param {string} actual
   * @param {Array} codeSegments
   * @return {?}
   */
  findRegionFromTypeaheadItems : function(actual, codeSegments) {
    var expected;
    /** @type {number} */
    var i = 0;
    for (;i < codeSegments.length;i++) {
      if (expected = codeSegments[i][0], codeSegments[i][1] && (expected += ", " + codeSegments[i][1]), expected == actual) {
        return codeSegments[i][2].toString();
      }
    }
  },
  /**
   * @param {Object} e
   * @return {undefined}
   */
  search : function(e) {
    if ("keyup" == e.type) {
      if (13 == (e.keyCode ? e.keyCode : e.which ? e.which : e.charCode)) {
        e.target.blur();
        ha.site.searchform.submit(e);
      }
    } else {
      ha.site.searchform.submit(e);
    }
  },
  /**
   * @param {string} cycle
   * @return {undefined}
   */
  saveKeywords : function(cycle) {
    cycle = $(cycle.currentTarget).val();
    this.model.set("keywords", cycle);
    this.setRegionIdFromTypeahead(cycle);
  },
  /**
   * @param {string} cycle
   * @param {string} fix
   * @return {undefined}
   */
  updateDates : function(cycle, fix) {
    var arrival = ha.site.searchform.noParamDateFormat(this.$(cycle).val());
    var departure = ha.site.searchform.noParamDateFormat(this.$(fix).val());
    this.model.set({
      arrival : arrival,
      departure : departure
    });
  },
  /**
   * @return {undefined}
   */
  updateDatesFromNewDatepickers : function() {
    this.updateDates("input.start-calendar", "input.end-calendar");
  },
  /**
   * @return {undefined}
   */
  updateDatesFromOldDatepickers : function() {
    this.updateDates("#startDateInput", "#endDateInput");
  },
  /**
   * @return {undefined}
   */
  updateDatesFromMasthead : function() {
    this.updateDates("#mastHeadstartDateInput", "#mastHeadendDateInput");
  },
  /**
   * @param {Object} ev
   * @return {undefined}
   */
  checkIfClearedStartDate : function(ev) {
    ev = $(ev.currentTarget).val();
    this.checkIfClearedDates(ev, "");
  },
  /**
   * @param {Object} ev
   * @return {undefined}
   */
  checkIfClearedEndDate : function(ev) {
    ev = $(ev.currentTarget).val();
    var pdataCur = this.$("input.start-calendar").val();
    this.checkIfClearedDates(pdataCur, ev);
  },
  /**
   * @param {Object} data
   * @param {Object} value
   * @return {undefined}
   */
  checkIfClearedDates : function(data, value) {
    if ("" === data) {
      if ("" === value) {
        this.model.set({
          arrival : "",
          departure : ""
        });
      }
    }
  },
  /**
   * @param {Object} url
   * @return {undefined}
   */
  geonodeDropdownChange : function(url) {
    url = $(url.currentTarget).find("option:selected").attr("data-regionId");
    /** @type {string} */
    window.location = "/search/region:" + url;
  },
  /**
   * @param {Event} ev
   * @return {undefined}
   */
  focusSiblingCalendar : function(ev) {
    $(ev.currentTarget).prev().focus();
  },
  /**
   * @param {Event} ev
   * @return {undefined}
   */
  showSleepsOptions : function(ev) {
    /** @type {(Event|null)} */
    var event = document.createEvent("MouseEvents");
    event.initMouseEvent("mousedown", true, true, window);
    $(ev.currentTarget).prev()[0].dispatchEvent(event);
  },
  /**
   * @param {Object} $e
   * @return {undefined}
   */
  styleSleepsSelect : function($e) {
    $e = $($e.currentTarget);
    if ("" === $e.val()) {
      $e.addClass("is-select-empty");
    } else {
      $e.removeClass("is-select-empty");
    }
  }
});
ha = ha || {
  backbone : {
    Views : {
      MastHead : {}
    }
  }
};
ha.backbone.Views.MastHead.MastHeadView = Backbone.View.extend({
  el : ".mastheadView",
  /**
   * @return {?}
   */
  events : function() {
    var deep = {
      "click .traveler-sign-in" : "signIn",
      "click #signout" : "signOut"
    };
    var options = {
      "mouseenter .js-birdhouseToggle" : "hoverOnBirdhouse",
      "mouseleave .js-birdhouseToggle" : "hoverOffBirdhouse"
    };
    var serverAttrs = {
      "ontouchstart .js-birdhouseToggle" : "toggleBirdhouse"
    };
    return deep = "ontouchstart" in document.documentElement ? _.extend(deep, serverAttrs) : _.extend(deep, options);
  },
  /**
   * @return {undefined}
   */
  initialize : function() {
    var children = $("#user-link-haod");
    var id = this.$el.data("srcc");
    ha.user.login.userlinksinit();
    ha.user.login.ui.isAnOwnerToggle(0 < children.length && "true" == children.attr("data-owner"));
    if (null != id) {
      if (children = ha.user.callback[id]) {
        children();
      }
    }
  },
  /**
   * @param {Event} data
   * @return {undefined}
   */
  signIn : function(data) {
    ha.user.login.ui.launchLoginModal($(data.target).attr("data-callback"));
  },
  /**
   * @param {?} options
   * @return {undefined}
   */
  signOut : function(options) {
    options.preventDefault();
    if (ha.user.login.travelerLoggedIn() && ($.browser.msie || ha.user.login.logout_redirect)) {
      /** @type {string} */
      window.location = "/sso/signout?referer=" + encodeURIComponent(ha.user.login.logout_redirect || window.location);
    } else {
      ha.user.login.logout($("body").hasClass("favorites"), true);
    }
  },
  /**
   * @param {string} name
   * @return {undefined}
   */
  signInCallback : function(name) {
    var template = _.template('<@= name @><i class="icon-chevron-down icon-gray"></i>');
    $("#header #user-drop").html(template({
      name : name
    }));
    $("#user-dropdown").show();
    $(".nav-favorites").show();
  },
  /**
   * @return {undefined}
   */
  signOutCallback : function() {
    $("#user-links-signin").show();
    $('a[href*="/haod"]:first').parent("li").show();
    $("#user-dropdown").hide();
    $(".nav-favorites").hide();
    $(".nav-favorites .count-favs").text("");
  },
  /**
   * @param {?} opt_attributes
   * @return {undefined}
   */
  updateCounts : function(opt_attributes) {
    if (opt_attributes) {
      $(".nav-favorites .count-favs").text(opt_attributes.favorited || "");
    }
  },
  /**
   * @param {Event} ev
   * @return {undefined}
   */
  hoverOnBirdhouse : function(ev) {
    $(ev.currentTarget).addClass("open");
  },
  /**
   * @param {Event} ev
   * @return {undefined}
   */
  hoverOffBirdhouse : function(ev) {
    $(ev.currentTarget).removeClass("open");
  },
  /**
   * @param {Event} ev
   * @return {undefined}
   */
  toggleBirdhouse : function(ev) {
    $(ev.currentTarget).toggleClass("open");
  }
});
ha = ha || {
  backbone : {
    Views : {
      PropertyPage : {}
    }
  }
};
ha.backbone.Views.PropertyPage.DefaultPDPAvailabilityView = Backbone.View.extend({
  el : ".property",
  /**
   * @return {undefined}
   */
  initialize : function() {
    _.bindAll(this);
    this.listenTo(this.model, "change:minimumStay", this.validateAvailability);
    this.listenTo(this.model, "change:availability", this.validateAvailability);
    this.validateAvailability();
  },
  /**
   * @return {undefined}
   */
  validateAvailability : function() {
    var pdataCur = ha.json.cookie.parse("ha-qp-sess").searchURL;
    if (pdataCur) {
      var tmpSet = ha.util.datepicker.startDate = ha.util.datepicker.convertToStandardDateString(ha.util.datepicker.formatDateFromUrlISO8601(pdataCur, "arrival"));
      pdataCur = ha.util.datepicker.endDate = ha.util.datepicker.convertToStandardDateString(ha.util.datepicker.formatDateFromUrlISO8601(pdataCur, "departure"));
      ha.util.datepicker.pageInitCheckWithViewChanges(tmpSet, pdataCur);
    }
  }
});
ha = ha || {
  backbone : {
    Views : {
      PropertyPage : {}
    }
  }
};
ha.backbone.Views.PropertyPage.OLBModal = Backbone.View.extend({
  el : "#bookitnow-modal",
  /**
   * @return {undefined}
   */
  initialize : function() {
    _.bindAll(this);
    var model = this.model;
    if ("" != model.get("startDate")) {
      $("#inquiry-modal-form #modalStartDate").val(model.get("startDate"));
    }
    if ("" != model.get("endDate")) {
      $("#inquiry-modal-form #modalEndDate").val(model.get("endDate"));
    }
    var appFrontendUrl = this.getModalUrl();
    var me = this;
    $.ajax({
      type : "GET",
      async : false,
      url : appFrontendUrl,
      dataType : "html",
      /**
       * @param {string} type
       * @return {undefined}
       */
      success : function(type) {
        $("#bookitnow-modal").html(type);
        ha.util.datepicker.init();
        $("#bookitnow-modal").modal({
          onClose : me.onModalClose
        });
        $("#pets").prop("checked", model.get("petIncluded"));
        $("#adultsCount").val(model.get("adultsCount"));
        $("#childrenCount").val(model.get("childrenCount"));
        model.set("transactionId", me.$("#transactionId").val());
      },
      /**
       * @return {undefined}
       */
      error : function() {
        ha.backbone.Events.trigger("showInquiryModal", {
          olbError : true
        });
      }
    });
    ha.backbone.Events.on("olbModalEndSelect", this.updateData);
  },
  events : {
    "change #pets" : "updateData",
    "change #adultsCount" : "updateData",
    "change #childrenCount" : "updateData",
    "click #continueToBookingButton" : "bookit",
    "click #submitInquiry:not([disabled])" : "submitInquiry",
    "keyup :input" : "clearWarnings",
    "click .enableLingua" : "enableLingua",
    "click .readMoreFeesAndTaxes" : "readMoreFeesAndTaxes"
  },
  /**
   * @return {undefined}
   */
  updateData : function() {
    var model = this.model;
    $("#continueToBookingButton").button("loading");
    model.set("startDate", $("#bookitnow-modal-startDateInput").val());
    model.set("endDate", $("#bookitnow-modal-endDateInput").val());
    model.set("petIncluded", void 0 != $("#pets").prop("checked") ? $("#pets").prop("checked") : false);
    model.set("adultsCount", $("#adultsCount").val());
    model.set("childrenCount", $("#childrenCount").val());
    if ("" != model.get("startDate")) {
      $("#inquiry-modal-form #modalStartDate").val(model.get("startDate"));
    }
    if ("" != model.get("endDate")) {
      $("#inquiry-modal-form #modalEndDate").val(model.get("endDate"));
    }
    if ("" != model.get("adultsCount")) {
      $("#inquiry-modal-form #modalNumberOfAdults").val(model.get("adultsCount"));
    }
    if ("" != model.get("childrenCount")) {
      $("#inquiry-modal-form #modalNumberOfChildren").val(model.get("childrenCount"));
    }
    this.updateQuote();
  },
  /**
   * @return {undefined}
   */
  clearWarnings : function() {
    $(".qtip").remove();
  },
  /**
   * @return {undefined}
   */
  updateQuote : function() {
    var model = this.model;
    $("#bookitnow-modal-startDateInput").css("border", "solid 1px #CFE1EF");
    $("#bookitnow-modal-endDateInput").css("border", "solid 1px #CFE1EF");
    $("#bookitnow-modal-stayDates").css("color", "black");
    $("#bookitnow-modal-endDateInput,#pets,#childrenCount").qtip("destroy");
    $("#pets").qtip("destroy");
    $("#childrenCount").qtip("destroy");
    var key = model.get("startDate");
    model = model.get("endDate");
    if ("" == key || "" == model) {
      if (key == $("#bookitnow-modal-startDateInput").attr("rel") || "" == key) {
        $("#bookitnow-modal-startDateInput").css("border", "solid 1px red");
      }
      if (model == $("#bookitnow-modal-endDateInput").attr("rel") || "" == model) {
        $("#bookitnow-modal-endDateInput").css("border", "solid 1px red");
      }
    } else {
      $("#bookitnow-modal-endDateInput").qtip("destroy");
      key = this.getRatesUrl(false);
      var s = this;
      $.ajax({
        type : "GET",
        url : key,
        timeout : 2E4,
        dataType : "json",
        /**
         * @return {undefined}
         */
        beforeSend : function() {
          $("#bookitnow-modal-ratesection").css("opacity", "0.3");
          $("#bookitnow-modal #loader").removeClass("hide");
          $("#bookitnow-modal #success").addClass("hide");
          $("#bookitnow-modal #submitInquiry").css("opacity", "0.3");
          $("#bookitnow-modal #submitInquiry").attr("disabled", "disabled");
        },
        /**
         * @param {string} type
         * @return {undefined}
         */
        success : function(type) {
          $("#bookitnow-modal #loader").addClass("hide");
          if ("" != type.errorString) {
            s.handleError(type);
          } else {
            $("#bookitnow-modal #success").removeClass("hide");
            $("#bookitnow-modal-rates-section").html(type.content);
            $("#bookitnow-modal #submitInquiry").css("opacity", "1");
            $("#bookitnow-modal #submitInquiry").removeAttr("disabled");
            if ($("#bookitnow-modal-rates-section .additionalFeesAndTaxes")) {
              if (90 < $("#bookitnow-modal-rates-section .additionalFeesAndTaxes").height()) {
                type = $('<span class="readMoreFeesAndTaxes">' + ha.strings.showMore + "</span> ");
                $("#bookitnow-modal-rates-section .additionalFeesAndTaxes").attr("data-originalHeight", $("#bookitnow-modal-rates-section .additionalFeesAndTaxes").height());
                $("#bookitnow-modal-rates-section .additionalFeesAndTaxes").css({
                  height : "90px"
                });
                $("#bookitnow-modal-rates-section .additionalFeesAndTaxes").after(type);
              }
            }
            s.$(".submitInquiry").removeClass("hidden");
          }
          $.modal.update("#bookitnow-modal");
        },
        /**
         * @return {undefined}
         */
        error : function() {
          ha.backbone.Events.trigger("showInquiryModal", {
            olbError : true,
            /**
             * @return {undefined}
             */
            onClose : function() {
              $("#bookitnow-button").button("enable");
            }
          });
        }
      });
    }
  },
  /**
   * @return {undefined}
   */
  bookit : function() {
    var model = this.model;
    var id = model.get("startDate");
    model = model.get("endDate");
    if (model == $("#bookitnow-modal-endDateInput").attr("rel") || ("" == model || (id == $("#bookitnow-modal-startDateInput").attr("rel") || "" == id))) {
      e.preventDefault();
      $("#bookitnow-modal-startDateInput").css("border", "solid 1px red");
      $("#bookitnow-modal-endDateInput").css("border", "solid 1px red");
      id = $("#bookitnow-modal req_dates").val();
      this.handleError({
        errorString : id,
        errorType : "dates"
      });
    } else {
      /** @type {string} */
      id = "";
      if (analyticsdatalayer) {
        if (analyticsdatalayer.propertydetails) {
          /** @type {string} */
          id = "&propertydetails=" + analyticsdatalayer.propertydetails;
        }
      }
      window.location = $("#continueToBookingButton").attr("data-bookingUrl") + id;
    }
  },
  /**
   * @return {undefined}
   */
  enableLingua : function() {
    var dat = this.getRatesUrl(true) + "&isLingua=true";
    window.open(dat, "linguaWindow");
  },
  /**
   * @return {?}
   */
  getModalUrl : function() {
    var model = this.model;
    var name = brand.baseUrl + "/ajax/olb/modal?lmId=" + model.get("listingManagerId") + "&propertyId=" + $("#bookitnow-propertyId").val();
    var val = model.get("startDate");
    model = model.get("endDate");
    if ("" != val) {
      if ("" != model) {
        /** @type {string} */
        name = name + "&arrivalDate=" + val + "&departureDate=" + model;
      }
    }
    return name;
  },
  /**
   * @return {?}
   */
  getRatesUrl : function() {
    var model = this.model;
    return brand.baseUrl + "/ajax/olb/rates?lmId=" + model.get("listingManagerId") + "&arrivalDate=" + model.get("startDate") + "&departureDate=" + model.get("endDate") + "&adultsCount=" + model.get("adultsCount") + "&childrenCount=" + model.get("childrenCount") + "&petIncluded=" + model.get("petIncluded") + "&propertyId=" + $("#bookitnow-propertyId").val() + "&transactionId=" + model.get("transactionId");
  },
  /**
   * @param {Object} error
   * @return {undefined}
   */
  handleError : function(error) {
    if ("dates" == error.errorType) {
      $("#bookitnow-modal-stayDates").css("color", "red");
      $("#bookitnow-modal-startDateInput").css("border", "solid 1px red");
      $("#bookitnow-modal-endDateInput").css("border", "solid 1px red");
      this.showTooltip("#bookitnow-modal-endDateInput", error.errorString);
    } else {
      if ("children" == error.errorType) {
        this.showTooltip("#childrenCount", error.errorString);
      } else {
        if ("pets" == error.errorType) {
          this.showTooltip("#pets", error.errorString);
        } else {
          if (ha.backbone.Models.unit.get("olb") && ha.backbone.Models.unit.get("property").contact.hasEmail) {
            ha.backbone.Events.trigger("showInquiryModal", {
              olbError : true,
              olbMessage : error.errorString,
              /**
               * @return {undefined}
               */
              onClose : function() {
                $("#bookitnow-button").button("enable");
              }
            });
          } else {
            this.handleError($.extend(error, {
              errorType : "dates"
            }));
          }
        }
      }
    }
  },
  /**
   * @param {string} el
   * @param {?} content
   * @return {undefined}
   */
  showTooltip : function(el, content) {
    $(el).qtip({
      position : {
        my : "left center",
        at : "right center",
        adjust : {
          x : 5
        }
      },
      content : {
        text : content
      },
      show : {
        ready : true
      },
      style : {
        width : 250,
        tip : {
          width : 20,
          height : 10
        }
      }
    }).qtip("disable");
  },
  /**
   * @return {?}
   */
  submitInquiry : function() {
    if ($("#bookitnow-inquiry-form div.bookit-modal-terms-agree").length) {
      if ($("#bookitnow-inquiry-form input[name=termsAgree]").is(":checked")) {
        $("#bookitnow-inquiry-form #accept-terms-msg").hide();
      } else {
        return $("#bookitnow-inquiry-form #accept-terms-msg").show(), false;
      }
    }
    this.clearWarnings();
    if (0 >= $("#estimatedCost").length) {
      return this.showTooltip("#bookitnow-modal #bookitnow-modal-endDateInput", $("#stay_dates").text()), false;
    }
    var data;
    data = this.checkRequiredField("#bookitnow-modal #bookitnow-modal-startDateInput", "#req_dates") || false;
    data = this.checkRequiredField("#bookitnow-modal #bookitnow-modal-endDateInput", "#req_dates") || data;
    data = this.checkRequiredField("#bookitnow-modal #inquirerFirstName", "#req_firstName") || data;
    data = this.checkRequiredField("#bookitnow-modal #inquirerLastName", "#req_lastName") || data;
    data = this.checkRequiredField("#bookitnow-modal #inquirerEmailAddress", "#req_emailAddress") || data;
    if (0 < $("#req_phoneNumber").length) {
      data = this.checkRequiredField("#bookitnow-modal #inquirerPhoneNumber", "#req_phoneNumber") || data;
    }
    if (!data) {
      var manipulation_rcheckableType = this;
      data = {
        dataType : "json",
        /**
         * @param {string} type
         * @return {undefined}
         */
        success : function(type) {
          /** @type {*} */
          type = "string" == typeof type ? JSON.parse(type) : type;
          manipulation_rcheckableType.inquirySuccess(type, "#bookitnow-inquiry-form");
        },
        /**
         * @param {string} type
         * @return {undefined}
         */
        error : function(type) {
          manipulation_rcheckableType.inquiryError(type, "#bookitnow-inquiry-form");
        },
        data : {
          referrer : document.referrer,
          location : document.location.href
        }
      };
      $("#bookitnow-inquiry-form").ajaxSubmit(data);
    }
  },
  /**
   * @param {string} option
   * @param {string} _cell
   * @return {?}
   */
  checkRequiredField : function(option, _cell) {
    return!$(option).val() ? (this.showTooltip(option, $(_cell).text()), true) : false;
  },
  /**
   * @param {Object} i
   * @return {undefined}
   */
  inquirySuccess : function(i) {
    var codeSegments = i.errors;
    if (codeSegments && 0 < codeSegments.length) {
      /** @type {number} */
      i = 0;
      for (;i < codeSegments.length;i++) {
        this.showTooltip("#" + codeSegments[i].field, codeSegments[i].msg);
      }
    } else {
      if (!i.success) {
        ha.backbone.Events.trigger("showInquiryModal", {
          olbError : true
        });
      }
      window.location = $("#propertyInquiryForm").attr("action");
    }
  },
  /**
   * @return {undefined}
   */
  inquiryError : function() {
    ha.backbone.Events.trigger("showInquiryModal", {
      olbError : true
    });
  },
  /**
   * @param {Object} $e
   * @return {undefined}
   */
  readMoreFeesAndTaxes : function($e) {
    $e = $($e.currentTarget);
    var elements = $e.siblings(".additionalFeesAndTaxes");
    var dialogHeight = elements.attr("data-originalheight");
    elements.animate({
      height : dialogHeight
    });
    $e.hide();
  },
  /**
   * @return {undefined}
   */
  onModalClose : function() {
    this.trigger("modalClose");
  }
});
ha = ha || {
  backbone : {
    Views : {}
  }
};
ha.backbone.Views.PaymentDetailsView = Backbone.View.extend({
  events : {},
  /**
   * @return {undefined}
   */
  initialize : function() {
    _.bindAll(this);
    var html = _.template($(this.selectTemplateForModel()).html(), {
      model : this.model
    });
    this.$el.append(html);
  },
  /**
   * @return {?}
   */
  selectTemplateForModel : function() {
    return this.model.get("ipm") ? this.model.get("olp") ? "#payment_IPM_onsite_template" : "#payment_IPM_deferred_template" : this.model.get("olp") ? "#payment_OLP_template" : this.model.get("olb") ? "#payment_OLB_template" : "#payment_noOLB_noOLP_template";
  }
});
ha = ha || {
  backbone : {
    Views : {
      PropertyPage : {}
    }
  }
};
ha.backbone.Views.PropertyPage.PropertyPageView = Backbone.View.extend({
  events : {
    "click .favorite-button" : "clickAddFavoriteButton",
    "click .js-callMe" : "ppbCallMe",
    "click .click-reveal" : "ppbClickToReveal"
  },
  /**
   * @param {?} events
   * @return {?}
   */
  delegateEvents : function(events) {
    events = Backbone.View.prototype.delegateEvents.call(this, events);
    ha.backbone.Events.trigger("cta_bound", "property_book");
    ha.backbone.Events.trigger("cta_bound", "property_inquiry");
    return events;
  },
  /**
   * @param {Object} options
   * @return {undefined}
   */
  initialize : function(options) {
    var n = ha.proctor && ha.proctor.numOfReviews || 5;
    _.bindAll(this);
    ha.backbone.Models.traveler = ha.backbone.Models.traveler || new ha.backbone.Models.Traveler;
    this.listenTo(ha.backbone.Models.traveler, "change", this.markFavorite);
    _.extend(this, _.pick(options, "inquiryModalSelector", "ratesReplacedContentSelector", "isPreviewMode"));
    this.mapView = new ha.backbone.Views.PropertyPage.PropertyMapView;
    ha.backbone.Events.on("propertyMapViewLoaded", this.mapView.render);
    if (0 <= window.location.hash.indexOf("map")) {
      ha.backbone.Events.trigger("propertyMapViewLoaded");
    }
    this.$(".js-shareDropTrigger").one("click", this.initializeSocialite);
    $(".modal").on("shown", function() {
      $("body").addClass("modal-open");
    });
    $(".modal").on("hidden", function() {
      $("body").removeClass("modal-open");
    });
    this.reviewsCollection = new ha.backbone.Collections.PropertyReviewsCollection({
      unit : this.model
    });
    this.reviewView = new ha.backbone.Views.PropertyReviewsView({
      collection : this.reviewsCollection,
      unit : this.model,
      el : this.$(".js-propertyReviewsView"),
      reviewSummaryArray : options.reviewSummaryArray,
      target : this.$("#js-propertyReviews"),
      propertyReviewTemplate : "script.js-property_review_template",
      loadMoreButton : ".js-loadNextReviewsButton",
      num : n,
      incrementValue : n
    });
    this.guestbookCollection = new ha.backbone.Collections.GuestbookComments({
      unit : this.model
    });
    this.guestbookView = new ha.backbone.Views.PagedGuestbookCommentsView({
      collection : this.guestbookCollection,
      unit : this.model,
      el : this.$(".js-guestBookCommentView"),
      numberOfGuestbookComments : options.reviewSummaryArray[0]
    });
    if (ha.features.urgencyMessaging) {
      this.urgencyMessagingView = new ha.backbone.Views.UrgencyMessagingView({
        template : ".js-urgencyMessagingTemplate"
      });
    }
    this.$(".js-unveilReviewerImg").unveil(200);
    this.initPPBClickToCallForms();
    if ($.fn.tooltip) {
      this.$(".js-amenityTooltip").tooltip();
    }
    this.isTouchDevice = ha.util.isTouchDevice();
    this.render();
  },
  /**
   * @param {Event} ev
   * @return {undefined}
   */
  initializeSocialite : function(ev) {
    Socialite.setup({
      facebook : {
        lang : ha.config.social.facebook.locale,
        appId : ha.config.social.facebook.appId
      }
    });
    Socialite.load($(ev.currentTarget).next()[0]);
  },
  /**
   * @param {Object} cl
   * @param {Object} body
   * @param {Object} pending
   * @return {undefined}
   */
  initializeCommonModelsForResponsivePdpAndLt : function(cl, body, pending) {
    body = this.getDatesFromSearchUrl(body);
    /** @type {Array} */
    var r20 = [];
    var light = this;
    var j = cl.hasQuotableRates();
    if (j) {
      this.olbModel = this.initializeOLBData(pending, cl, {
        adultsCount : 1 === cl.get("sleeps") ? 1 : 2,
        childrenCount : 0,
        petIncluded : false
      });
      this.quoteModel = new ha.backbone.Models.PDPQuote({
        olbData : this.olbModel
      });
      if (this.olbModel.get("startDate")) {
        if (this.olbModel.get("endDate")) {
          r20 = this.parseQuoteDates(this.olbModel.get("startDate"), this.olbModel.get("endDate"));
        }
      }
    }
    this.inquiryModel = this.initializeInquiryModel(ha.backbone.Models.traveler, body, r20, pending);
    if (j) {
      this.olbModel.on("change:adultsCount change:childrenCount", function(value) {
        var offset = value.changedAttributes().adultsCount;
        value = value.changedAttributes().childrenCount;
        if (typeof offset !== "undefined") {
          light.inquiryModel.set("numberOfAdults", offset + "");
        }
        if (typeof value !== "undefined") {
          light.inquiryModel.set("numberOfChildren", value + "");
        }
      });
      this.inquiryModel.on("change:numberOfAdults change:numberOfChildren", function(monitor) {
        var value = monitor.changedAttributes().numberOfAdults;
        inqChildren = monitor.changedAttributes().numberOfChildren;
        if (typeof value !== "undefined") {
          if (value !== "") {
            light.olbModel.set("adultsCount", value * 1);
          }
        }
        if (typeof inqChildren !== "undefined") {
          if (inqChildren !== "") {
            light.olbModel.set("childrenCount", inqChildren * 1);
          }
        }
      });
    }
    ha.backbone.Models.pdpAvailability = this.initializePdpAvailabilityModel(r20, body);
    if (this.quoteModel) {
      this.quoteModel.listenTo(ha.backbone.Models.pdpAvailability, "change:startDate", this.quoteModel.fetch);
      this.quoteModel.listenTo(ha.backbone.Models.pdpAvailability, "change:endDate", this.quoteModel.fetch);
    }
  },
  /**
   * @return {undefined}
   */
  renderContactInfo : function() {
    var elements = this.$(".js-phoneNumbers");
    var phone = this.model.getContactNumberByTitle("Primary");
    var phone_val = this.model.getContactNumberByTitle("Secondary");
    var PhoneField = this.model.getContactNumberByTitle("Tertiary");
    var number = this.model.getContactNumberByTitle("Fax");
    elements.each(function(dataAndEvents, param) {
      var target = $(param);
      var name = target.parent().parent().find(".contact_info_phone_template").html();
      if (phone) {
        target.append(_.template(name, {
          label : ha.strings.contactInfo.primaryPhoneLabel,
          phone : phone,
          styleClass : "primary"
        }));
      }
      if (phone_val) {
        target.append(_.template(name, {
          label : ha.strings.contactInfo.telephoneLabel,
          phone : phone_val,
          styleClass : "secondary"
        }));
      }
      if (PhoneField) {
        target.append(_.template(name, {
          label : ha.strings.contactInfo.telephoneLabel,
          phone : PhoneField,
          styleClass : "tertiary"
        }));
      }
      if (number) {
        target.append(_.template(name, {
          label : ha.strings.contactInfo.faxLabel,
          phone : number,
          styleClass : "fax"
        }));
      }
    });
  },
  /**
   * @param {Object} src
   * @return {undefined}
   */
  backToSearch : function(src) {
    src.preventDefault();
    src = ha.page.property.searchUrl;
    try {
      src += "#listing-spu-" + this.model.get("spu");
    } catch (b) {
    }
    /** @type {Object} */
    window.location = src;
  },
  /**
   * @return {undefined}
   */
  markFavorite : function() {
    var _self = ha.backbone.Models.traveler;
    if (_self.get("uuid") && ((_self = _self.get("favorites").get(this.model.get("spu"))) && _self.get("labels").length)) {
      $(".favorite-button i").removeClass("not-favorited").addClass("favorited");
      $(".favorite-button span.fav-text").html($(".favorite-button").data("favorite-text"));
    }
  },
  /**
   * @param {Event} event
   * @return {undefined}
   */
  clickAddFavoriteButton : function(event) {
    if (null == $.cookie("ha-usr-prst")) {
      $(event.currentTarget);
      var cookie = {
        spu : this.model.get("spu"),
        systemId : this.model.get("systemId"),
        propertyId : this.model.get("propertyId"),
        unitId : this.model.get("unitId")
      };
      $.cookie("tmp-user-fav", JSON.stringify(cookie), {
        expires : 1,
        path : "/"
      });
      ha.user.login.launchmodal("favorite");
      event.stopPropagation();
      event.preventDefault();
    } else {
      if (this.favoriteMenuView) {
        this.favoriteMenuView.stopListening();
        this.favoriteMenuView.undelegateEvents();
      }
      this.favoriteMenuView = new ha.backbone.Views.FavoriteMenuView({
        model : ha.backbone.Models.traveler,
        el : $(".favorite-button"),
        menuTemplateSelector : "script.add_favorite_template",
        listClass : "dropdown-menu dropdown-menu-trav"
      });
      this.favoriteMenuView.render();
    }
  },
  /**
   * @param {Object} $e
   * @return {undefined}
   */
  getCurrency : function($e) {
    $e = $($e.currentTarget);
    var l = this.model.get("systemId");
    var valid = this.model.get("propertyId");
    var ship = this.model.get("unitId");
    var g = $e.find(":selected").val();
    var errorClass = this.ratesReplacedContentSelector;
    spacers = $e.attr("data-includeSpacers");
    $.ajax({
      url : "/propertyCurrencyChange.htm?systemId=" + l + "&propertyId=" + valid + "&uni_id=" + ship + "&currency=" + g + "&spacers=" + spacers
    }).done(function(html) {
      var footer = $("." + errorClass);
      var klass = footer.find("table").attr("class");
      footer.replaceWith(html);
      $(".ratesTable").addClass(klass);
    }).fail(function() {
      alert(ha.strings.errorMessage);
    });
  },
  /**
   * @return {undefined}
   */
  triggerModalInquiryForm : function() {
    var cycle = this.inquiryModalSelector;
    var thisView = this;
    var config = {};
    var o = {
      /**
       * @return {undefined}
       */
      onShow : function() {
        thisView.$(cycle + " .datepicker").datepicker("destroy");
        ha.util.datepicker.init();
      }
    };
    if (arguments.length && arguments[0].olbError) {
      config = arguments[0];
      if (config.onClose) {
        o.onClose = config.onClose;
      }
      /** @type {string} */
      var selector = "#defaultOlbError";
      if (config.olbMessage) {
        /** @type {string} */
        selector = "#customOlbError";
        $(selector).html(config.olbMessage);
      }
      $(selector).show();
    }
    this.$(cycle).modal(o);
  },
  /**
   * @return {undefined}
   */
  initPPBClickToCallForms : function() {
    var thisView = this;
    $(".js-clickToCall").each(function() {
      $(this).ajaxForm({
        /**
         * @return {undefined}
         */
        error : function() {
          $(".click-reveal img.mail").show();
          $(".click-reveal img.loader").hide();
        },
        /**
         * @return {undefined}
         */
        beforeSubmit : function() {
          $(".click-reveal img.mail").hide();
          $(".click-reveal img.loader").show();
        },
        /**
         * @param {string} type
         * @return {undefined}
         */
        success : function(type) {
          if ("true" === type.success) {
            if (thisView.$(".js-clickToCallEmailWrapper").hide().data("ismobile")) {
              thisView.placeCall();
            }
            thisView.renderContactInfo();
          } else {
            thisView.$(".click-reveal .js-mail").show();
            thisView.$(".click-reveal img.loader").hide();
            if ("undefined" !== typeof type.error) {
              thisView.$(".js-clickToCallEmailWrapper .error-response").text(type.error);
            }
          }
        },
        type : "POST"
      });
    });
  },
  /**
   * @param {Object} data
   * @return {undefined}
   */
  ppbClickToReveal : function(data) {
    data = $(data.currentTarget).parent();
    if (data.length) {
      data.submit();
    }
  },
  /**
   * @param {Object} data
   * @return {undefined}
   */
  ppbCallMe : function(data) {
    var b = this.model.get(this.model.keys.requireInquiryForPhone);
    var $target = this.$(".js-clickToCallEmailWrapper");
    this.$(".js-callMe").hide();
    if (b) {
      $target.show();
      this.$(".js-clickToCallTooltip").tooltip({
        html : true,
        title : this.$(".js-ppbClickToCallEmailHover").html(),
        delay : 1E3
      });
      if (ha.user.login.travelerLoggedIn()) {
        this.$(".js-ppbEmailInput").val(ha.backbone.Models.traveler.get("email"));
        data = $(data.currentTarget).parent().find(".js-clickToCall");
        if (data.length) {
          data.submit();
        }
      }
    } else {
      if ($target.data("ismobile")) {
        this.placeCall();
      }
      this.renderContactInfo();
    }
  },
  /**
   * @param {(Array|number)} regex
   * @param {Array} textAlt
   * @return {?}
   */
  initializePdpAvailabilityModel : function(regex, textAlt) {
    /** @type {(Array|number)} */
    var text = regex;
    /** @type {string} */
    var optsData = "";
    /** @type {string} */
    var end = "";
    /** @type {null} */
    var model = null;
    if ("undefined" === typeof text || 0 == text.length) {
      /** @type {Array} */
      text = textAlt;
    }
    if (text.length) {
      optsData = $.datepicker.formatDate("yy-mm-dd", text[0]);
      end = $.datepicker.formatDate("yy-mm-dd", text[1]);
    }
    if (this.model.get("availabilityCalendar")) {
      model = $("<div></div>").calendar(this.model.get("availabilityCalendar")).data("calendar").model;
    }
    return new ha.backbone.Models.PDPAvailability({
      minimumStay : ha.util.datepicker.calendarMinStayJSON,
      availability : ha.util.datepicker.calendarAvailabilityJSON,
      bootstrapCalendarModel : model,
      startDate : optsData,
      endDate : end
    }, {
      resetOnChange : false
    });
  },
  /**
   * @param {string} resp
   * @return {?}
   */
  getDatesFromSearchUrl : function(resp) {
    var model = ha.util.datepicker;
    var c;
    return resp ? (c = model.newStandardDate(model.convertToStandardDateString(model.formatDateFromUrlISO8601(resp, "arrival"))), resp = model.newStandardDate(model.convertToStandardDateString(model.formatDateFromUrlISO8601(resp, "departure"))), [c, resp]) : [];
  },
  /**
   * @param {Array} k
   * @param {Array} d
   * @return {?}
   */
  parseQuoteDates : function(k, d) {
    var text = ha.util.datepicker;
    var s;
    var cx;
    return k && d ? (s = text.localDateStringtoISO8601(k), s = text.newStandardDate(s), cx = text.localDateStringtoISO8601(d), text = text.newStandardDate(cx), [s, text]) : [];
  },
  /**
   * @param {Object} options
   * @param {Object} self
   * @param {?} defaults
   * @return {?}
   */
  initializeOLBData : function(options, self, defaults) {
    var a = self.keys;
    options = _.clone(options || {});
    options = _.defaults(options, defaults);
    options = _.extend(options, {
      isOLB : self.get(a.isOLB),
      propertyId : self.get(a.property).uid,
      exactQuote : self.get(a.hasExactQuotes)
    });
    return new ha.backbone.Models.OLBData(options);
  },
  /**
   * @param {Object} item
   * @param {Function} ready
   * @param {Array} regex
   * @param {Object} options
   * @return {?}
   */
  initializeInquiryModel : function(item, ready, regex, options) {
    var o = {};
    var value = $.cookie(ha.json.tncJsonCookie());
    /** @type {boolean} */
    o.termsAgree = "true" === value;
    if (regex.length) {
      o.checkInDateString = $.datepicker.formatDate(ha.i18n.dateFormats.shortDate, regex[0]);
      o.checkOutDateString = $.datepicker.formatDate(ha.i18n.dateFormats.shortDate, regex[1]);
    } else {
      if (ready.length) {
        o.checkInDateString = $.datepicker.formatDate(ha.i18n.dateFormats.shortDate, ready[0]);
        o.checkOutDateString = $.datepicker.formatDate(ha.i18n.dateFormats.shortDate, ready[1]);
      }
    }
    if (options && (options.adultsCount && (o.numberOfAdults = options.adultsCount + ""), options.childrenCount)) {
      /** @type {string} */
      o.numberOfChildren = options.childrenCount + "";
    }
    ready = new ha.backbone.Models.Inquiry(o);
    if (item && item.id) {
      ready.addTravelerData(item);
    } else {
      item.once("sync", ready.addTravelerData, ready);
    }
    return ready;
  },
  /**
   * @param {Object} collection
   * @param {HTMLElement} model
   * @return {undefined}
   */
  fetchInquiryModel : function(collection, model) {
    var init;
    if (model.get("startDate") && model.get("endDate")) {
      collection.fetch();
    } else {
      /**
       * @param {string} type
       * @return {undefined}
       */
      init = function(type) {
        var pdataCur = type.get("checkInDateString");
        type = type.get("checkOutDateString");
        if (pdataCur) {
          pdataCur = ha.util.datepicker.localDateStringtoISO8601(pdataCur);
          model.set("startDate", $.datepicker.formatDate("yy-mm-dd", ha.util.datepicker.newStandardDate(pdataCur)));
        }
        if (type) {
          pdataCur = ha.util.datepicker.localDateStringtoISO8601(type);
          model.set("endDate", $.datepicker.formatDate("yy-mm-dd", ha.util.datepicker.newStandardDate(pdataCur)));
        }
      };
      collection.fetch({
        /** @type {function (string): undefined} */
        success : init
      });
    }
  },
  /**
   * @return {undefined}
   */
  placeCall : function() {
    var href = this.model.get("contact").primaryPhone.telFormat;
    /** @type {string} */
    window.location.href = "tel:" + href;
  }
});
ha = ha || {
  backbone : {
    lt : {
      Views : {
        PropertyPage : {}
      }
    },
    Views : {
      PropertyPage : {}
    }
  }
};
ha.backbone.lt.Views.PropertyPage.PropertyPageCalendarView = Backbone.View.extend({
  /**
   * @param {?} scope
   * @return {undefined}
   */
  initialize : function(scope) {
    _.bindAll(this);
    this.buildCalendar(scope.calendarData);
  },
  /**
   * @param {?} mom
   * @return {undefined}
   */
  buildCalendar : function(mom) {
    var options = this.$(".js-populatedCalendars");
    options.calendar({
      fetch : false,
      numberOfMonths : 2,
      startOfWeek : ha.i18n.startOfWeek,
      language : ha.i18n.calendar,
      dateFormat : ha.i18n.dateFormats.shortDate
    });
    options.calendar("addReservations", mom);
  }
});
ha = ha || {
  backbone : {
    Views : {
      PropertyPage : {}
    }
  }
};
ha.backbone.Views.PropertyPage.AbstractInquiryFormView = Backbone.View.extend({
  defaults : {
    blockInquiriesBookedDates : false,
    flexibleInquiryDates : false,
    quoteModel : void 0,
    unitModel : void 0
  },
  events : {
    "keypress input[type=number]" : "validateTextRefinementIsAnInteger",
    "click .js-submitInquiry:enabled" : "submitForm",
    "change input[data-model-attr]" : "changeFormInput",
    "change select[data-model-attr]" : "changeFormInput",
    "change textarea[data-model-attr]" : "changeFormInput",
    "change .js-flexibleDatesCheckbox" : "changeFlexibleDateCheckbox"
  },
  /**
   * @param {Object} options
   * @return {undefined}
   */
  initialize : function(options) {
    _.bindAll(this);
    _.extend(this, this.defaults);
    _.extend(this, _.pick(options, "blockInquiriesBookedDates", "flexibleInquiryDates", "quoteModel", "unitModel", "isModal"));
    this.submitInquiryBtn = this.$(".js-submitInquiry");
    this.initializeDateFields(options.calendarData);
    this.listenTo(this.model, "change", this.populateInputsFromModel);
    if (this.flexibleInquiryDates) {
      this.model.on("change:flexibleInquiryDates", this.renderFlexibleDates, this);
      ha.backbone.Models.pdpAvailability.on("change", this.renderFlexibleDates, this);
    }
    this.initializeAjaxForm();
  },
  /**
   * @return {undefined}
   */
  initializeAjaxForm : function() {
    var options = {
      beforeSerialize : this.beforeFormSerialize,
      beforeSubmit : this.beforeFormSubmit,
      success : this.renderInquirySuccess,
      error : this.handleAjaxError,
      data : {
        referrer : document.referrer,
        location : document.location.href
      }
    };
    this.$("form").ajaxForm(options);
  },
  /**
   * @param {?} dataAndEvents
   * @return {undefined}
   */
  initializeDateFields : function(dataAndEvents) {
    var fields = this.unitModel;
    var column = this.unitModel.keys;
    this.$("input[name=checkInDateString]");
    this.$("input[name=checkOutDateString]");
    var _self = ha.backbone.Models.pdpAvailability;
    var dateFieldLabelQuotable = fields.get(column.property).pm ? ha.strings.inquiryForm.dateFields.dateFieldLabelManager : ha.strings.inquiryForm.dateFields.dateFieldLabel;
    var start = ha.util.datepicker.newStandardDate(_self.get("startDate"));
    _self = ha.util.datepicker.newStandardDate(_self.get("endDate"));
    this.datepickersView = new ha.backbone.Views.DatepickerPairView({
      el : this.$(".dates-group"),
      startDate : start,
      endDate : _self,
      calendarData : dataAndEvents,
      dateFieldLabel : dateFieldLabelQuotable,
      dateFieldLabelQuotable : dateFieldLabelQuotable,
      availabilityUpdated : fields.get(column.availabilityUpdated)
    });
    this.datepickersView.bind("datesValidated", this.handleDatesValidation);
  },
  /**
   * @return {undefined}
   */
  render : function() {
    this.renderFlexibleDates();
  },
  /**
   * @return {undefined}
   */
  renderFlexibleDates : function() {
    var element = this.$(".js-flexibleDatesHelp").addClass("hidden");
    if (this.model.get("flexibleInquiryDates")) {
      if (!this.datepickersView.hasPopulatedDates()) {
        element.toggleClass("hidden");
      }
    }
    this.datepickersView.render();
  },
  /**
   * @param {?} event
   * @return {undefined}
   */
  submitForm : function(event) {
    event.preventDefault();
    this.submitInquiryBtn.button("loading");
    this.$(".js-inquiryForm").submit();
  },
  /**
   * @return {undefined}
   */
  populateInputsFromModel : function() {
    var thisView = this;
    _.each(this.model.attributes, function(name, dataAndEvents) {
      var elem;
      var isDir;
      if (!("checkInDateString" === dataAndEvents)) {
        if (!("checkOutDateString" === dataAndEvents)) {
          elem = thisView.$("[name=" + dataAndEvents + "]");
          isDir = elem.is(":checkbox") || elem.is(":radio");
          if (_.isString(name) && !isDir) {
            elem.val(name);
          } else {
            if (isDir) {
              elem.prop("checked", name);
            }
          }
        }
      }
    });
  },
  /**
   * @param {boolean} error
   * @return {undefined}
   */
  handleDatesValidation : function(error) {
    this.submitInquiryBtn.button("reset");
    this.$(".js-inquiryForm #minstay-inquiry").remove();
    if (this.blockInquiriesBookedDates && (error && ("unavailable" === error.state && !this.model.get("flexibleInquiryDates")))) {
      this.submitInquiryBtn.button("loading");
    } else {
      if (error) {
        if ("minimum-stay-not-met" === error.state) {
          this.$(".js-inquiryForm").prepend(_.template(this.$("script.pricebar_alert_template").html(), {
            id : "minstay-inquiry",
            status : "warning",
            message : error.message
          }));
        }
      }
    }
  },
  /**
   * @param {Event} event
   * @return {undefined}
   */
  validateTextRefinementIsAnInteger : function(event) {
    var $this = $(event.currentTarget);
    if ("0" === $this.attr("value")) {
      $this.attr("value", "");
    }
    /** @type {(Array.<string>|null)} */
    $this = "8,9,13,35,36,37,39".match(RegExp(event.which));
    if (event.which) {
      if (!(48 <= event.which && 57 >= event.which || $this)) {
        event.preventDefault();
      }
    }
  },
  /**
   * @return {undefined}
   */
  beforeFormSerialize : function() {
    var cycle = ha.backbone.Models.pdpAvailability;
    var complete = ha.util.datepicker.formatDateFromISO8601ToLocal(cycle.get("startDate"));
    cycle = ha.util.datepicker.formatDateFromISO8601ToLocal(cycle.get("endDate"));
    this.$("input[name=checkInDateString]").val(complete);
    this.$("input[name=checkOutDateString]").val(cycle);
    this.model.set("checkInDateString", complete);
    this.model.set("checkOutDateString", cycle);
    complete = this.quoteModel ? this.quoteModel.get("totalAmount") : "";
    this.$("input[name=estimatedCost]").val(complete);
    this.model.set("estimatedCost", complete);
    complete = this.quoteModel ? this.quoteModel.get("totalCurrency") : "";
    this.$("input[name=estimatedCostCurrency]").val(complete);
    this.model.set("estimatedCostCurrency", complete);
    complete = this.quoteModel ? this.quoteModel.get("olbData").get("exactQuote") : false;
    this.$("input[name=totalCost]").val(complete);
    this.model.set("totalCost", complete);
    complete = this.$("form").attr("id");
    ha.form.inquiry.setupDatePickerAnalytics("#" + complete);
    this.$(".alert").remove();
  },
  /**
   * @param {string} type
   * @param {Function} name
   * @param {Function} types
   * @return {undefined}
   */
  renderInquirySuccess : function(type, name, types) {
    if (-1 < type.indexOf("ERRORS")) {
      this.submitInquiryBtn.button("reset");
      types.responseText = types.responseText || type;
      this.renderInquiryError(types.responseText);
    } else {
      window.location = this.$("form").attr("action");
    }
  },
  /**
   * @param {Object} e
   * @return {undefined}
   */
  changeFormInput : function(e) {
    e = $(e.currentTarget);
    var attributes = e.attr("name");
    var cycle = e.val();
    if ("checkbox" === e.attr("type")) {
      this.model.set(attributes, e.prop("checked"));
    } else {
      this.model.set(attributes, cycle);
    }
  },
  /**
   * @param {string} output
   * @return {undefined}
   */
  renderInquiryError : function(output) {
    if (this.options.isModal) {
      this.$el.scrollTop(0);
    } else {
      $(window).scrollTop(this.$el.offset().top - 60);
    }
    this.$(".js-inquiryForm").prepend(_.template($("script.pricebar_alert_template").html(), {
      id : "inquiry-error",
      status : "error",
      message : output
    }));
  },
  /**
   * @param {string} type
   * @return {undefined}
   */
  handleAjaxError : function(type) {
    this.renderInquiryError(type.responseText);
    this.submitInquiryBtn.button("reset");
    ajaxInquirySubmittedWithErrors.fire(type.responseText);
  },
  /**
   * @param {Object} options
   * @return {?}
   */
  validateForm : function(options) {
    return(options = this.model.validate(false, options)) && options.status ? (this.renderInquiryError(options.messages.join(", ")), false) : true;
  },
  /**
   * @return {undefined}
   */
  changeFlexibleDateCheckbox : function() {
    var cycle = this.$(".flexible-dates-checkbox").prop("checked");
    this.model.set("flexibleInquiryDates", cycle);
  }
});
ha = ha || {
  backbone : {
    Views : {
      PropertyPage : {}
    }
  }
};
ha.backbone.Views.PropertyPage.InquiryFormViewNoLogin = ha.backbone.Views.PropertyPage.AbstractInquiryFormView.extend({
  /**
   * @return {?}
   */
  events : function() {
    return _.extend({}, ha.backbone.Views.PropertyPage.AbstractInquiryFormView.prototype.events, {
      "click .cancelInquiry" : "cancelInquiry"
    });
  },
  /**
   * @param {?} contentHTML
   * @return {undefined}
   */
  initialize : function(contentHTML) {
    var obj = this;
    this.constructor.__super__.initialize.apply(this, arguments);
    this.$("input[name=jsEnabled]").val("true");
    this.$("input[name=inquiryId]").val("");
    this.$("input[name=refId]").val("");
    this.$el.on("hidden", function() {
      obj.trigger("hidden");
    });
  },
  /**
   * @return {?}
   */
  isExpanded : function() {
    return this.$el.is(":visible");
  },
  /**
   * @param {string} type
   * @param {Function} name
   * @return {undefined}
   */
  toggle : function(type, name) {
    if (this.isExpanded()) {
      this.cancelInquiry(type);
    } else {
      this.expandView(name);
    }
  },
  /**
   * @param {Object} event
   * @return {undefined}
   */
  cancelInquiry : function(event) {
    if (this.isExpanded()) {
      this.$el.modal("hide");
      if (event) {
        event.stopPropagation();
        event.preventDefault();
      }
    }
  },
  /**
   * @param {Function} o
   * @return {undefined}
   */
  expandView : function(o) {
    this.$("#olb-error").remove();
    if (o) {
      if (o.errorText) {
        this.$(".js-inquiryForm").prepend(_.template(this.$("script.pricebar_alert_template").html(), {
          id : "olb-error",
          status : "error",
          message : o.errorText
        }));
      }
    }
    this.render();
    this.$el.modal("show");
    this.trigger("shown");
  },
  /**
   * @return {?}
   */
  beforeFormSubmit : function() {
    /** @type {boolean} */
    var validateForm = true;
    this.submitInquiryBtn.button("loading");
    if (!this.$("input[name=termsAgree]").length) {
      this.model.set("termsAgree", true);
    }
    this.datepickersView.unbind("datesValidated", this.handleDatesValidation);
    validateForm = this.validateForm({
      blockInquiriesBookedDates : this.blockInquiriesBookedDates,
      flexibleInquiryDates : this.flexibleInquiryDates
    });
    if (!validateForm) {
      this.submitInquiryBtn.button("reset");
      this.datepickersView.bind("datesValidated", this.handleDatesValidation);
    }
    return validateForm;
  }
});
ha = ha || {
  backbone : {
    lt : {
      Views : {
        PropertyPage : {}
      }
    },
    Views : {
      PropertyPage : {}
    }
  }
};
ha.backbone.lt.Views.PropertyPage.PropertyPageView = ha.backbone.Views.PropertyPage.PropertyPageView.extend({
  priceBarViews : [],
  photoCarouselView : null,
  calendarDivSelector : "#propertyPageCalendarView",
  propertyTabsAffixSelector : ".js-propertyTabsAffix",
  /**
   * @return {?}
   */
  events : function() {
    return _.extend({}, ha.backbone.Views.PropertyPage.PropertyPageView.prototype.events, {
      "click .js-modalInquiryFormTrigger" : "triggerModalInquiryForm",
      "click .js-tabTrigger" : "triggerTabChange",
      "change .js-exchangeRate" : "getCurrency",
      "click .js-SidebarGoogleMapView" : "scrollToMap",
      "click .viewRateDetails" : "toggleQuoteDetails",
      "click .js-emailOwnerButton" : "triggerModalInquiryForm",
      "hidden .js-descriptionCollapse" : "hideDescriptionText",
      "shown .js-descriptionCollapse" : "showDescriptionText"
    });
  },
  /**
   * @return {undefined}
   */
  initialize : function() {
    var model = this.model;
    var Router = this;
    this.constructor.__super__.initialize.apply(this, arguments);
    this.propertyTabs = new ha.backbone.lt.Views.PropertyPage.PropertyTabsView({
      el : ".js-propertyTabsView"
    });
    this.initializeScrollListeners();
    this.photoCarouselView = new ha.backbone.Views.PropertyPage.PhotoCarouselView({
      collection : this.model.get("images"),
      videoUrls : this.model.get("property").videoUrls,
      sphereUrl : this.model.get("property").sphereUrl,
      thumbnailTemplateSelector : ".carousel_thumbnail_template",
      isTouchDevice : this.isTouchDevice
    });
    this.photoCarouselView.render();
    this.initializeCommonModelsForResponsivePdpAndLt(this.model, ha.json.cookie.parse("ha-qp-sess").searchURL, quoteRequestJson);
    this.priceBarViewOptions = {
      blockInquiriesBookedDates : ha.features.blockInquiriesBookedDates,
      unit : model,
      isPreviewMode : this.isPreviewMode
    };
    this.$priceBarViews = this.$(".priceBarView");
    if (model.hasQuotableRates()) {
      _.extend(this.priceBarViewOptions, {
        olbModel : this.olbModel,
        quoteModel : this.quoteModel
      });
    }
    _.each(this.$priceBarViews, function(form) {
      _.extend(Router.priceBarViewOptions, {
        el : "." + $(form).data("viewselector")
      });
      Router.priceBarViews.push(new ha.backbone.Views.PropertyPage.PriceBarView(Router.priceBarViewOptions));
    });
    this.fetchReservationData();
    this.paymentView = new ha.backbone.Views.PaymentDetailsView({
      model : this.model,
      el : ".payment-method"
    });
    ha.backbone.Events.on("showInquiryFallback", $.proxy(this.showInquiryFallback, this));
    this.footerView = new ha.backbone.Views.BCEFooterView({
      el : ".js-bce-footer"
    });
  },
  /**
   * @return {undefined}
   */
  render : function() {
    if (!this.$(".js-callMe").length) {
      this.renderContactInfo();
    }
  },
  /**
   * @return {undefined}
   */
  initializeScrollListeners : function() {
    var propertyTabs = this;
    var $bar = this.$(this.propertyTabsAffixSelector);
    var sidebar = this.$(".js-affixSideBar");
    var toggle = this.$(".js-carouselWrapper");
    var $in = this.$(".js-footerWrapper");
    var $out = this.$(".js-bceFooterWrapper");
    var f = this.$(".js-footerAdWrapper");
    var query = this.$(".js-innerContent");
    var offBottom = $in.height() + f.height();
    var jump = $bar.offset().top + $bar.height();
    var valueT = toggle.offset().top + toggle.height();
    enquire.register(ha.config.mediaQueries.largerThanMd, {
      /**
       * @return {undefined}
       */
      match : function() {
        sidebar.affix({
          offset : {
            /**
             * @return {?}
             */
            top : function() {
              return 400 > query.height() ? 5E4 : jump;
            },
            /**
             * @return {?}
             */
            bottom : function() {
              return 400 > query.height() ? 1 : offBottom + $out.height() + 250;
            }
          }
        });
        propertyTabs.propertyTabs.affixTabs($bar, jump);
      }
    });
    enquire.register(ha.config.mediaQueries.mdOnly, {
      /**
       * @return {undefined}
       */
      match : function() {
        sidebar.affix({
          offset : {
            top : valueT,
            bottom : offBottom + $out.height()
          }
        });
        propertyTabs.propertyTabs.affixTabs($bar, valueT);
      }
    });
  },
  /**
   * @return {undefined}
   */
  fetchReservationData : function() {
    var opts = this.model.keys;
    opts = "/ajax/property/availability/" + this.model.get(opts.property).uid + "-" + this.model.get(opts.unitId);
    $(this.calendarDivSelector);
    var jQuery = this;
    $.ajax({
      type : "GET",
      async : false,
      url : opts,
      dataType : "json"
    }).done(function(node, dataAndEvents) {
      jQuery.fetchReservationsCallback(node, dataAndEvents);
    });
  },
  /**
   * @param {?} dataAndEvents
   * @param {string} deepDataAndEvents
   * @return {undefined}
   */
  fetchReservationsCallback : function(dataAndEvents, deepDataAndEvents) {
    var mom = {};
    var keys = this.model.keys;
    if ("success" === deepDataAndEvents) {
      if (!this.isPreviewMode) {
        mom = dataAndEvents;
        _.each(this.priceBarViews, function(output) {
          output.addReservations(mom);
        });
      }
    }
    this.calendarView = new ha.backbone.lt.Views.PropertyPage.PropertyPageCalendarView({
      el : this.calendarDivSelector,
      calendarData : mom
    });
    if (ha.features.inquiryLoginRequired) {
      this.inquiryView = new ha.backbone.Views.PropertyPage.InquiryFormViewLogin({
        el : ".js-inquiryFormView",
        model : this.inquiryModel,
        quoteModel : this.quoteModel,
        unitModel : this.model,
        calendarData : mom,
        loadingModal : "#js-inquiryLoadingModal"
      });
    } else {
      this.inquiryView = new ha.backbone.Views.PropertyPage.InquiryFormViewNoLogin({
        el : ".js-inquiryFormModal",
        model : this.inquiryModel,
        quoteModel : this.quoteModel,
        unitModel : this.model,
        calendarData : mom,
        blockInquiriesBookedDates : ha.features.blockInquiriesBookedDates,
        flexibleInquiryDates : ha.features.flexibleInquiryDates,
        isModal : true
      });
      this.inquiryView.bind("hidden", this.onInquiryFormHidden, this);
    }
    this.inquiryView.bind("shown", this.onInquiryFormShown, this);
    this.fetchInquiryModel(this.inquiryModel, ha.backbone.Models.pdpAvailability);
    if (this.model.get(keys.isOLB) || this.model.get(keys.quotableInquiries)) {
      keys = this.$(".priceBarView").data("launcholbmodal");
      this.quoteFormView = new ha.backbone.Views.PropertyPage.QuoteFormView({
        el : ".js-quoteFormView",
        olbModel : this.olbModel,
        quoteModel : this.quoteModel,
        unitModel : this.model,
        calendarData : mom,
        loadOnStartup : keys
      });
      this.quoteFormView.bind("hidden", this.onQuoteFormHidden, this);
      this.quoteFormView.bind("shown", this.onQuoteFormShown, this);
    }
  },
  /**
   * @param {Object} event
   * @return {undefined}
   */
  triggerTabChange : function(event) {
    event.preventDefault();
    this.propertyTabs.changeTab(event, this);
  },
  /**
   * @return {undefined}
   */
  scrollToMap : function() {
    var toggle = this.$(".js-propertyTabsView");
    $(window).scrollTo($(toggle));
  },
  /**
   * @param {?} dataAndEvents
   * @return {undefined}
   */
  showInquiryFallback : function(dataAndEvents) {
    /** @type {null} */
    var errorText = null;
    if (dataAndEvents) {
      if (dataAndEvents.olbError) {
        errorText = this.$(".js-defaultOlbError").html();
        if (dataAndEvents.olbMessage) {
          errorText = dataAndEvents.olbMessage;
        }
      }
    }
    this.toggleInquiryForm(null, {
      errorText : errorText
    });
  },
  /**
   * @param {string} cycle
   * @param {Function} optgroup
   * @return {undefined}
   */
  toggleInquiryForm : function(cycle, optgroup) {
    var type;
    if (cycle && (type = $(cycle.currentTarget).attr("disabled"), "undefined" !== typeof type && "disabled" === type)) {
      cycle.preventDefault();
      return;
    }
    this.inquiryView.toggle(cycle, optgroup);
  },
  /**
   * @return {undefined}
   */
  onInquiryFormShown : function() {
    if (this.quoteFormView) {
      this.quoteFormView.cancelQuote();
    }
  },
  /**
   * @return {undefined}
   */
  onQuoteFormHidden : function() {
    _.each(this.priceBarViews, function(dataAndEvents) {
      dataAndEvents.quoteFormViewCollapsed();
    });
  },
  /**
   * @return {undefined}
   */
  onQuoteFormShown : function() {
    this.inquiryView.cancelInquiry(null);
    _.each(this.priceBarViews, function(dataAndEvents) {
      dataAndEvents.quoteFormViewShown();
    });
  },
  /**
   * @param {?} types
   * @return {undefined}
   */
  toggleQuoteDetails : function(types) {
    types.preventDefault();
    this.quoteFormView.toggle();
  },
  /**
   * @return {undefined}
   */
  hideDescriptionText : function() {
    $("a[data-target='.js-descriptionCollapse']").text(ha.strings.common.moreDetails);
  },
  /**
   * @return {undefined}
   */
  showDescriptionText : function() {
    $("a[data-target='.js-descriptionCollapse']").text(ha.strings.common.lessDetails);
  }
});
ha = ha || {
  backbone : {
    Views : {
      PropertyPage : {}
    }
  }
};
ha.backbone.Views.PropertyPage.PhotoCarouselView = Backbone.View.extend({
  el : "#photoCarouselView",
  events : {
    "click .carousel-item[data-index]" : "clickItem",
    "click .js-previousPhoto" : "advanceLeft",
    "click .js-nextPhoto" : "advanceRight",
    "click .js-thumbnail" : "clickThumbnail"
  },
  defaults : {
    marginBetweenItems : 10,
    transitionSpeed : 500,
    thumbnailWidth : 67,
    activeItemClass : "activeCarouselItem",
    isTouchDevice : false
  },
  /**
   * @param {Object} options
   * @return {undefined}
   */
  initialize : function(options) {
    _.bindAll(this);
    var self = this;
    /** @type {number} */
    var valsLength = 0;
    _.extend(this, _.pick(options, "thumbnailTemplateSelector", "videoUrls", "sphereUrl", "marginBetweenItems", "transitionSpeed", "thumbnailWidth", "activeItemClass", "isTouchDevice"));
    _.defaults(this, this.defaults);
    this.$itemsContainer = this.$(".js-carouselItems");
    if (0 == this.$itemsContainer.length) {
      /**
       * @return {?}
       */
      this.render = function() {
        return false;
      };
    } else {
      if (this.carouselHeight = this.$itemsContainer.height(), this.widthOfViewableArea = this.getWidthOfViewableArea(), this.currentIndex = this.$(".js-focusCarouselViewer").data("hero-index"), this.images = this.collection.getImagesByHeight(this.carouselHeight, true), this.numberOfItems = this.images.length, this.videoUrls && (valsLength = this.videoUrls.length, this.numberOfItems += valsLength), this.sphereUrl && this.numberOfItems++, 0 != this.numberOfItems) {
        if (2 == this.images.length) {
          this.images.push(this.images[0]);
          this.images.push(this.images[1]);
        }
        this.constrainedWidths = this._calculateConstrainedWidths(this.images, 0, 0);
        if (1 < this.numberOfItems) {
          $(document).keydown(function(e) {
            if (!$(e.target).is("input,textarea") && (!e.metaKey && !e.ctrlKey)) {
              if (e.keyCode == 37) {
                self.advanceLeft(e);
                return false;
              }
              if (e.keyCode == 39) {
                self.advanceRight(e);
                return false;
              }
            }
          });
          if (this.isTouchDevice) {
            this.initializeTouchEvents();
          }
        }
        $(window).on("resize.photoCarouselView", function() {
          self.widthOfViewableArea = self.getWidthOfViewableArea();
          self.showItem(self.$("[data-index=" + self.currentIndex + "]"), true);
        });
      }
    }
  },
  /**
   * @return {undefined}
   */
  initializeTouchEvents : function() {
    var thisView = this;
    var li = this.$itemsContainer;
    this.$(".js-focusCarouselViewer").on("swipeleft", this.advanceRight).on("swiperight", this.advanceLeft).on("movestart", function(e) {
      var stream;
      if (e.distX > e.distY && e.distX < -e.distY || e.distX < e.distY && e.distX > -e.distY) {
        e.preventDefault();
      } else {
        li.addClass("notransition");
        stream = thisView.$("." + thisView.activeItemClass);
        stream = 0 > e.distX ? stream.next() : stream.prev();
        if (!stream.length) {
          if (0 > e.distX) {
            thisView._moveFirstToEnd();
          } else {
            thisView._moveLastToBeginning();
          }
        }
      }
    }).on("move", function(result) {
      var x = li.position().left;
      x = x + result.deltaX;
      /** @type {string} */
      li[0].style.left = x + "px";
    }).on("moveend", function(event) {
      var leftOffset;
      if (li.hasClass("notransition")) {
        li.removeClass("notransition");
        leftOffset = li.position().left;
        leftOffset -= event.distX;
        /** @type {string} */
        li[0].style.left = leftOffset + "px";
      }
    });
  },
  /**
   * @return {?}
   */
  getWidthOfViewableArea : function() {
    return this.$(".js-carouselVisibleArea").outerWidth();
  },
  /**
   * @return {undefined}
   */
  render : function() {
    var $parent;
    if (0 != this.numberOfItems) {
      this.renderPlaceholderImages(this.images);
      if (this.videoUrls) {
        this.renderVideos(this.videoUrls, this.images.length);
      }
      if (this.sphereUrl) {
        this.renderSphere(this.sphereUrl, this.images.length + this.videoUrls.length);
      }
      if (this.videoUrls || this.sphereUrl) {
        $parent = this.$itemsContainer.find(".carousel-video, .carousel-video-thumbnail");
        this.constrainedWidths = this._calculateConstrainedWidths(this.images, $parent.length, $parent.outerWidth(false));
      }
      this._updateWidthOfContainer();
      this.showItem(this.$("[data-index=" + this.currentIndex + "]"), false);
      if (480 <= this.carouselHeight) {
        this.appendThumbnailsToPage(this.collection.getImagesByWidth(this.thumbnailWidth, true));
      }
      this.$itemsContainer.redraw();
      this.$(".js-placeHolderImage").hide();
      this.$(".js-focusCarouselViewer").addClass("loaded");
      if (this.isTouchDevice) {
        this.$(".js-nextPhoto, .js-previousPhoto").remove();
      }
    }
  },
  /**
   * @param {?} attr
   * @return {undefined}
   */
  renderPlaceholderImages : function(attr) {
    this.$itemsContainer.append(this.generatePlaceholdersHtml(attr, this.constrainedWidths));
  },
  /**
   * @param {Object} e
   * @param {number} deepDataAndEvents
   * @return {undefined}
   */
  renderVideos : function(e, deepDataAndEvents) {
    this.$itemsContainer.append(this.generateVideoHtml(e, deepDataAndEvents));
  },
  /**
   * @param {string} e
   * @param {number} deepDataAndEvents
   * @return {undefined}
   */
  renderSphere : function(e, deepDataAndEvents) {
    this.$itemsContainer.append(this.generateSphereHtml(e, deepDataAndEvents));
  },
  /**
   * @param {?} attributes
   * @param {Array} buf
   * @return {?}
   */
  generatePlaceholdersHtml : function(attributes, buf) {
    /** @type {Array} */
    var tagNameArr = [];
    var carouselHeight = this.carouselHeight;
    _.each(attributes, function(img, off) {
      imgHeight = img.height;
      constrainedWidth = buf[off];
      tagNameArr.push('<div class="carousel-item" data-index="' + off + '"><img src="//csvcus.homeaway.com/rsrcs/32/5472601571F31E1BF00674C368D335-t.gif" data-src="' + img.uri + '" style="height:' + carouselHeight + "px; width:" + constrainedWidth + 'px;" /></div>');
    });
    return tagNameArr.join("");
  },
  /**
   * @param {Array} codeSegments
   * @param {number} deepDataAndEvents
   * @return {?}
   */
  generateVideoHtml : function(codeSegments, deepDataAndEvents) {
    /** @type {Array} */
    var tagNameArr = [];
    var i;
    var videoId;
    var camelKey;
    /** @type {number} */
    i = 0;
    for (;i < codeSegments.length;i++) {
      camelKey = this._getVideoEmbed(codeSegments[i]);
      videoId = this._getVideoId(camelKey);
      tagNameArr.push(_.template('<div class="carousel-item" data-index="<@= index @>"><img class="carousel-video-thumbnail" src="//csvcus.homeaway.com/rsrcs/32/5472601571F31E1BF00674C368D335-t.gif" data-src="http://img.youtube.com/vi/<@= videoId @>/2.jpg" data-youtubeurl="http://www.youtube.com/embed/<@= videoembed @>" /></div>', {
        index : deepDataAndEvents,
        videoId : videoId,
        videoembed : camelKey
      }));
      deepDataAndEvents++;
    }
    return tagNameArr.join("");
  },
  /**
   * @param {Object} element
   * @return {?}
   */
  loadYoutubeVideo : function(element) {
    var clone = element.find("img").attr("data-youtubeurl");
    var idx = element.attr("data-index");
    clone = _.template('<div class="carousel-item carousel-video" data-index="<@= index @>"><iframe src="<@= videoUrl @>" frameborder="0" allowfullscreen="1"></iframe><div class="videoOverlay">\x3c!-- --\x3e</div></div>', {
      index : idx,
      videoUrl : clone
    });
    element.replaceWith(clone);
    return this.$el.find("[data-index=" + idx + "]");
  },
  /**
   * @param {string} path
   * @param {number} deepDataAndEvents
   * @return {?}
   */
  generateSphereHtml : function(path, deepDataAndEvents) {
    var sphereId = path.substring(path.lastIndexOf("/") + 1);
    return _.template('<div class="carousel-item" data-index="<@= index @>"><img class="carousel-video-thumbnail" src="//csvcus.homeaway.com/rsrcs/32/5472601571F31E1BF00674C368D335-t.gif" data-src="https://s3.amazonaws.com/tourwrist/tours/<@= sphereId @>/images/small/equirect.jpg" data-sphereurl="<@= sphereUrl @>" /></div>', {
      index : deepDataAndEvents,
      sphereId : sphereId,
      sphereUrl : path
    });
  },
  /**
   * @param {Object} element
   * @return {?}
   */
  loadSphereVideo : function(element) {
    var clone = element.find("img").attr("data-sphereurl");
    var idx = element.attr("data-index");
    clone = _.template('<div class="carousel-item carousel-video" data-index="<@= index @>"><iframe src="<@= sphereUrl @>" class="sphere-direct_embed" type="text/html" frameborder=0 scrolling="no"  allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe><div class="videoOverlay">\x3c!-- --\x3e</div></div>', {
      index : idx,
      sphereUrl : clone
    });
    element.replaceWith(clone);
    return this.$el.find("[data-index=" + idx + "]");
  },
  /**
   * @param {Function} attributes
   * @return {undefined}
   */
  appendThumbnailsToPage : function(attributes) {
    var tooltip = $(document.createElement("ul"));
    _.each(attributes, function(imageObj, idx) {
      tooltip.append(_.template(this.$(this.thumbnailTemplateSelector).html(), {
        index : idx,
        image : imageObj
      }));
    }, this);
    this.$(".js-thumbnailsContainer").append(tooltip);
    this.$(".js-thumbnailsContainer").find("[data-index=" + this.currentIndex + "]").parent().addClass("active");
  },
  /**
   * @param {Object} name
   * @param {boolean} recurring
   * @return {undefined}
   */
  showItem : function(name, recurring) {
    var $target = this.$("." + this.activeItemClass);
    /** @type {number} */
    var r20 = 0;
    this._loadItem(name);
    r20 = this._calculateSideFillerWidth(name);
    if (0 < r20) {
      this._loadPreviousItems(name, r20);
      this._loadNextItems(name, r20);
    }
    r20 = this._calculateLeftPosition(name);
    if (r20 != this.$itemsContainer.position().left) {
      this.$itemsContainer.clearQueue();
      if (recurring) {
        this._animate({
          left : r20
        });
      } else {
        this.$itemsContainer.css({
          left : r20
        });
        this.itemChangedCallback();
      }
    }
    this._initializeActiveItem(name, $target);
  },
  /**
   * @param {Object} parent
   * @param {?} element
   * @return {undefined}
   */
  _initializeActiveItem : function(parent, element) {
    var viewElem = parent.find(".carousel-video-thumbnail");
    if (viewElem.length) {
      var data_youtubeurl = viewElem.attr("data-youtubeurl");
      viewElem = viewElem.attr("data-sphereurl");
      if (data_youtubeurl) {
        parent = this.loadYoutubeVideo(parent);
      } else {
        if (viewElem) {
          parent = this.loadSphereVideo(parent);
        }
      }
    }
    this.currentIndex = parent.data("index");
    element.removeClass(this.activeItemClass);
    parent.addClass(this.activeItemClass);
  },
  /**
   * @param {Event} e
   * @return {undefined}
   */
  clickItem : function(e) {
    var a = $(e.currentTarget).data("index");
    var b = this.currentIndex;
    var count = this.numberOfItems;
    count = 2 == count ? 4 : count;
    if (a != b) {
      if (a == count - 1 && 0 == b) {
        this.advanceLeft(e);
      } else {
        if (0 == a && b == count - 1) {
          this.advanceRight(e);
        } else {
          if (a > b) {
            this.advanceRight(e);
          } else {
            if (a < b) {
              this.advanceLeft(e);
            }
          }
        }
      }
    }
  },
  /**
   * @return {undefined}
   */
  advanceRight : function() {
    var $target = this.$("." + this.activeItemClass);
    var parent = $target.next();
    var r20;
    if (!parent.length) {
      parent = this._moveFirstToEnd();
    }
    r20 = this._calculateSideFillerWidth(parent);
    this._loadItem(parent);
    this._loadNextItems(parent, r20);
    this.$itemsContainer.clearQueue();
    this._animate({
      left : this._calculateLeftPosition(parent)
    });
    this._initializeActiveItem(parent, $target);
  },
  /**
   * @return {undefined}
   */
  advanceLeft : function() {
    var $target = this.$("." + this.activeItemClass);
    var parent = $target.prev();
    var r20;
    if (!parent.length) {
      parent = this._moveLastToBeginning();
    }
    r20 = this._calculateSideFillerWidth(parent);
    this._loadItem(parent);
    this._loadPreviousItems(parent, r20);
    this._animate({
      left : this._calculateLeftPosition(parent)
    });
    this._initializeActiveItem(parent, $target);
  },
  /**
   * @param {Object} instance
   * @return {undefined}
   */
  clickThumbnail : function(instance) {
    instance = $(instance.currentTarget).data("index");
    this.showItem(this.$("[data-index=" + instance + "]"), true);
  },
  /**
   * @return {undefined}
   */
  itemChangedCallback : function() {
    var count = this.numberOfItems;
    var index = this.currentIndex;
    var rvar;
    index = index >= count ? index - count : index;
    this.$(".js-thumbnailsContainer .active").removeClass("active");
    this.$(".js-thumbnailsContainer").find("[data-index=" + index + "]").parent().addClass("active");
    rvar = index >= this.images.length ? "" : this.images[index].note;
    rvar = _.template(this.$(".carousel_caption_template").html(), {
      caption : rvar,
      index : index,
      total : count
    });
    this.$(".js-carouselCaptionContainer").html(rvar);
  },
  /**
   * @return {undefined}
   */
  _updateWidthOfContainer : function() {
    var $parent = this.$itemsContainer.children(":first-child");
    /** @type {number} */
    var value = this.marginBetweenItems = $parent.outerWidth(true) - $parent.outerWidth(false);
    this.$itemsContainer.css("width", _.reduce(this.constrainedWidths, function(key, separator2) {
      return key + separator2 + value;
    }, 1) + "px");
  },
  /**
   * @param {Function} attributes
   * @param {number} deleteCount
   * @param {(number|string)} player
   * @return {?}
   */
  _calculateConstrainedWidths : function(attributes, deleteCount, player) {
    /** @type {Array} */
    var result = [];
    var time = this.carouselHeight;
    _.each(attributes, function(img) {
      imgHeight = img.height;
      result.push(img.width / img.height * time);
    });
    if (0 < deleteCount) {
      /** @type {number} */
      i = 0;
      for (;i < deleteCount;i++) {
        result.push(player);
      }
    }
    return result;
  },
  /**
   * @param {Object} label
   * @return {?}
   */
  _calculateSideFillerWidth : function(label) {
    return(this.widthOfViewableArea - (this.constrainedWidths[label.data("index")] + 2 * this.marginBetweenItems)) / 2;
  },
  /**
   * @param {string} item
   * @return {?}
   */
  _loadItem : function(item) {
    item = item.find("img");
    if (item.length) {
      var _cleanupConstrainedWidth = this;
      var pdataOld = item.attr("data-src");
      if (!pdataOld) {
        return item;
      }
      item.attr("src", pdataOld).removeAttr("data-src").load(function() {
        _cleanupConstrainedWidth._cleanupConstrainedWidth(this);
      });
      if (item[0].complete) {
        this._cleanupConstrainedWidth(item[0]);
      }
    }
  },
  /**
   * @param {Object} el
   * @return {undefined}
   */
  _cleanupConstrainedWidth : function(el) {
    el = $(el);
    var a;
    var current;
    var total;
    if (!el.hasClass("carousel-video-thumbnail")) {
      a = el.data("index");
      current = el.naturalWidth();
      total = el.naturalHeight();
      /** @type {number} */
      current = current / total * this.carouselHeight;
      if (5 < Math.abs(current - this.constrainedWidths[a])) {
        el.css("width", current + "px");
        /** @type {number} */
        this.constrainedWidths[a] = current;
        this._updateWidthOfContainer();
        this.showItem(this.$("img[data-index=" + this.currentIndex + "]"), false);
      }
    }
  },
  /**
   * @param {Object} key
   * @param {number} regex
   * @return {undefined}
   */
  _loadPreviousItems : function(key, regex) {
    this._loadItemsByDirection(key, regex, false);
  },
  /**
   * @param {Object} key
   * @param {number} regex
   * @return {undefined}
   */
  _loadNextItems : function(key, regex) {
    this._loadItemsByDirection(key, regex, true);
  },
  /**
   * @param {Object} entry
   * @param {number} outerHTML
   * @param {boolean} recurring
   * @return {undefined}
   */
  _loadItemsByDirection : function(entry, outerHTML, recurring) {
    if (!(0 >= outerHTML)) {
      entry = recurring ? entry.next() : entry.prev();
      if (!entry.length) {
        entry = recurring ? this._moveFirstToEnd() : this._moveLastToBeginning();
      }
      this._loadItem(entry);
      outerHTML -= this.constrainedWidths[entry.data("index")];
      this._loadItemsByDirection(entry, outerHTML, recurring);
    }
  },
  /**
   * @return {?}
   */
  _moveLastToBeginning : function() {
    var $select = this.$itemsContainer.addClass("notransition").children(":last").detach();
    var left;
    this.$itemsContainer.prepend($select);
    left = this.constrainedWidths[$select.data("index")];
    /** @type {number} */
    left = this.$itemsContainer.position().left - left;
    this.$itemsContainer.css({
      left : left
    });
    return $select;
  },
  /**
   * @return {?}
   */
  _moveFirstToEnd : function() {
    var text = this.$itemsContainer.addClass("notransition").children(":first-child").detach();
    var x1;
    this.$itemsContainer.append(text);
    x1 = this.constrainedWidths[text.data("index")];
    x1 = this.$itemsContainer.position().left + x1;
    this.$itemsContainer.css({
      left : x1
    });
    return text;
  },
  /**
   * @param {Object} child
   * @return {?}
   */
  _calculateLeftPosition : function(child) {
    /** @type {number} */
    var string = 0;
    string = child.data("index");
    string = this.constrainedWidths[string];
    var parent = this.marginBetweenItems;
    child = this._widthOfPreviousItems(child.prev());
    return string = this.widthOfViewableArea / 2 - (child + string / 2 + parent);
  },
  /**
   * @param {Object} selected
   * @return {?}
   */
  _widthOfPreviousItems : function(selected) {
    /** @type {number} */
    var d = 0;
    var chunk = this.marginBetweenItems;
    for (;selected && selected.length;) {
      d += this.constrainedWidths[selected.data("index")];
      d += chunk;
      selected = selected.prev();
    }
    return d;
  },
  /**
   * @param {string} tmpl
   * @return {undefined}
   */
  _animate : function(tmpl) {
    var elem = this.$itemsContainer;
    elem.one("webkitTransitionEnd transitionend", this.itemChangedCallback);
    this._emulateTransitionEnd(this.transitionSpeed);
    elem.queue(function() {
      elem.one("webkitTransitionEnd transitionend", function() {
        elem.dequeue();
      }).redraw().removeClass("notransition").css(tmpl);
    });
  },
  /**
   * @param {?} threshold
   * @return {undefined}
   */
  _emulateTransitionEnd : function(threshold) {
    /** @type {boolean} */
    var b = false;
    var $target = this.$itemsContainer;
    $target.one("webkitTransitionEnd transitionend", function() {
      /** @type {boolean} */
      b = true;
    });
    setTimeout(function() {
      if (!b) {
        $target.trigger("webkitTransitionEnd");
      }
    }, threshold);
  },
  /**
   * @param {number} item
   * @return {?}
   */
  _getVideoEmbed : function(item) {
    /** @type {string} */
    var requestUrl = "";
    try {
      if (-1 !== item.indexOf("youtube.com/embed/")) {
        /** @type {string} */
        requestUrl = decodeURI(item).split("youtube.com/embed/")[1];
      } else {
        if (-1 !== item.indexOf("?")) {
          /** @type {Array.<string>} */
          var types = decodeURI(item).split("?")[1].split("&");
          /** @type {number} */
          item = 0;
          /** @type {number} */
          var jlen = types.length;
          for (;item < jlen;item++) {
            if (0 === types[item].indexOf("v=")) {
              /** @type {string} */
              requestUrl = types[item].replace("v=", "");
              break;
            }
          }
        } else {
          if (-1 !== item.indexOf("youtu.be")) {
            /** @type {string} */
            requestUrl = decodeURI(item).split("youtu.be/")[1];
          }
        }
      }
    } catch (g) {
    }
    if (0 < requestUrl.length) {
      requestUrl += 0 < requestUrl.indexOf("?") ? "&wmode=opaque" : "?wmode=opaque";
    }
    return requestUrl;
  },
  /**
   * @param {string} key
   * @return {?}
   */
  _getVideoId : function(key) {
    return key.substring(0, key.indexOf("?"));
  }
});
ha = ha || {
  backbone : {
    lt : {
      Views : {}
    },
    Views : {}
  }
};
ha.backbone.lt.Views.PropertyPage.PropertyTabsView = Backbone.View.extend({
  /**
   * @return {?}
   */
  events : function() {
    return _.extend({}, ha.backbone.lt.Views.PropertyPage.PropertyTabsView.prototype.events, {
      "shown .js-locationTab" : "showHiddenMap",
      "shown .js-reviewsTab" : "unveilReviewPhotos"
    });
  },
  /**
   * @return {undefined}
   */
  initialize : function() {
    _.bindAll(this);
    this.$(this.options.tabSelector || ".js-propertyTab").on("shown", this.callHandleTabChange);
    this.registerMediaQueries();
  },
  /**
   * @return {undefined}
   */
  registerMediaQueries : function() {
    var base = this;
    enquire.register(ha.config.mediaQueries.smallerThanSm, {
      /**
       * @return {undefined}
       */
      match : function() {
        base.intializeMapLazyLoadedOnScroll(ha.map);
      },
      /**
       * @return {undefined}
       */
      unmatch : function() {
        base.resetMapLazyLoadedOnClick(ha.map.base);
      }
    });
  },
  /**
   * @param {Object} parent
   * @return {undefined}
   */
  intializeMapLazyLoadedOnScroll : function(parent) {
    /** @type {boolean} */
    parent.property.loadMapOnScroll = true;
    parent.base.initializeScrollListener();
    this.reloadMap();
  },
  /**
   * @param {?} result
   * @return {undefined}
   */
  resetMapLazyLoadedOnClick : function(result) {
    result.removeMapLazyLoaded();
    result.removeScrollListener();
  },
  /**
   * @return {undefined}
   */
  reloadMap : function() {
    ha.map.base.generatePropertyMap();
  },
  /**
   * @param {Object} event
   * @param {Object} dataAndEvents
   * @return {undefined}
   */
  changeTab : function(event, dataAndEvents) {
    dataAndEvents.$('a[href="' + $(event.currentTarget).attr("href") + '"]').tab("show");
  },
  /**
   * @return {undefined}
   */
  callHandleTabChange : function() {
    this.handleTabChange(this.$(this.options.tabContentSelector || ".js-tabContent").offset().top - 80);
  },
  /**
   * @param {number} deepDataAndEvents
   * @return {undefined}
   */
  handleTabChange : function(deepDataAndEvents) {
    if (this.$(this.options.propertyTabsAffixSelector || ".js-propertyTabsAffix").hasClass("affix")) {
      this.scrollToTabTop(deepDataAndEvents);
    }
  },
  /**
   * @param {number} deepDataAndEvents
   * @return {undefined}
   */
  scrollToTabTop : function(deepDataAndEvents) {
    $(jQuery.browser.webkit ? "body" : "html").animate({
      scrollTop : deepDataAndEvents
    }, 200);
  },
  /**
   * @param {?} sidebar
   * @param {?} t
   * @return {undefined}
   */
  affixTabs : function(sidebar, t) {
    sidebar.affix({
      offset : {
        top : t
      }
    });
  },
  /**
   * @return {undefined}
   */
  showHiddenMap : function() {
    this.resetMapLazyLoadedOnClick(ha.map.base);
    this.reloadMap();
  },
  /**
   * @return {undefined}
   */
  unveilReviewPhotos : function() {
    this.$(".js-unveilReviewerImg").unveil();
  }
});
ha = ha || {
  backbone : {
    Views : {
      PropertyPage : {}
    }
  }
};
ha.backbone.Views.PropertyPage.PropertyMapView = Backbone.View.extend({
  el : "#propertyLocation",
  events : {
    "click .showMore" : "showMorePointsOfInterest",
    "click .gogo-read-more" : "showFullRecommendationText",
    "click .gogo-view-on-map button" : "showMapPopoverFromList"
  },
  unitLatLng : null,
  mapPopover : null,
  /**
   * @return {undefined}
   */
  initialize : function() {
    _.bindAll(this, "showMapPopover");
    _.bindAll(this, "closeMapPopover");
    _.bindAll(this, "render");
    this.$(".js-gogoThumbnail").unveil(200);
    $(".gogo-attraction").each(function(dataAndEvents, item) {
      $item = $(item);
      if (4 < dataAndEvents) {
        $item.hide();
      }
    });
  },
  /**
   * @return {?}
   */
  render : function() {
    var map = this;
    $("#map-overlay").hide();
    ha.map.base.overlay = ha.map.base.createMapOverlay(ha.map.base.maps[ha.map.base.mapData.type]);
    $(".gogo-attraction").each(function(dataAndEvents, item) {
      $item = $(item);
      /** @type {string} */
      pinIconStr = "Restaurant" == $item.data("gogo-type") ? "//csvcus.homeaway.com/rsrcs/17/463FBF45BCB7B788E90FBDBDC440E0-mapIcon_restaurant.png" : "//csvcus.homeaway.com/rsrcs/F6/4BC103E9D18BC65CBF61A23B57B172-mapIcon_attraction.png";
      map.loadAttractionOnMap({
        lat : $item.data("latitude"),
        lng : $item.data("longitude"),
        title : "",
        pinIcon : pinIconStr,
        placeId : $item.data("gogo-place")
      });
    });
    return this;
  },
  /**
   * @param {Object} options
   * @return {undefined}
   */
  loadAttractionOnMap : function(options) {
    options = {
      position : new google.maps.LatLng(unescape(options.lat), unescape(options.lng)),
      map : ha.map.base.maps[ha.map.base.mapData.type],
      title : options.title,
      draggable : false,
      clickable : true,
      icon : options.pinIcon,
      placeId : options.placeId
    };
    options = new google.maps.Marker(options);
    var data_priv = this;
    google.maps.event.addListener(options, "click", function() {
      var pdataOld = new google.maps.LatLng(this.getPosition().lat(), this.getPosition().lng());
      data_priv.showMapPopover(this.placeId, pdataOld);
    });
  },
  /**
   * @param {Object} ev
   * @return {undefined}
   */
  showMapPopoverFromList : function(ev) {
    $poi = $(ev.currentTarget).parents(".gogo-attraction");
    ev = new google.maps.LatLng(unescape($poi.data("latitude")), unescape($poi.data("longitude")));
    if (!this.unitLatLng) {
      if (ha.map.base.mapData.markerDataList && ha.map.base.mapData.markerDataList.length) {
        this.unitLatLng = new google.maps.LatLng(unescape(ha.map.base.mapData.markerDataList[0].lat), unescape(ha.map.base.mapData.markerDataList[0].lng));
      }
    }
    if (this.unitLatLng) {
      var me = new google.maps.LatLngBounds;
      me.extend(ev);
      me.extend(this.unitLatLng);
      ha.map.base.maps.property.fitBounds(me);
    } else {
      ha.map.base.maps.property.panTo(ev);
    }
    this.showMapPopover($poi.data("gogo-place"), ev);
  },
  /**
   * @param {string} dataAndEvents
   * @param {Object} value
   * @return {undefined}
   */
  showMapPopover : function(dataAndEvents, value) {
    if (this.mapPopover) {
      this.closeMapPopover();
    }
    var element = ha.map.base.overlay.getProjection().fromLatLngToContainerPixel(value);
    if ($("body").hasClass("hasResponsivePDP")) {
      element.x += 7;
      element.y -= 30;
    } else {
      element.x += $("#unit-map").position().left - 8;
      element.y += $("#unit-map").position().top + 21 - 134;
    }
    var item = $("#property-map").offset();
    element = $("<div id='mapPopoverTarget'>").css({
      position : "absolute"
    }).offset({
      top : element.y + item.top,
      left : element.x + item.left
    }).appendTo($("body"));
    item = $('div[data-gogo-place="' + dataAndEvents + '"]');
    item = {
      thumbUrl : item.find(".js-gogoThumbnail").attr("data-src"),
      ownerRating : item.data("gogo-rating"),
      name : item.find(".gogo-attraction-name").text(),
      ownerRecommendation : item.find(".gogo-popoover-recommendation").text(),
      footerHtml : item.find(".gogo-attraction-footer").html()
    };
    item = _.template($("#gogo_popover_template").html(), item);
    this.mapPopover = element.popover({
      placement : "top",
      html : true,
      content : item
    });
    element.popover("show");
    this.checkIfInView(this.mapPopover);
    var binding = this;
    setTimeout(function() {
      $("html").on("click.propertymapview", binding.closeMapPopover);
    }, 300);
  },
  /**
   * @return {undefined}
   */
  closeMapPopover : function() {
    this.mapPopover.popover("destroy");
    /** @type {null} */
    this.mapPopover = null;
    $("html").off("click.propertymapview");
    $("#mapPopoverTarget").remove();
  },
  /**
   * @return {undefined}
   */
  showMorePointsOfInterest : function() {
    /** @type {number} */
    var progressCount = 5;
    var $images = $(".gogo-attraction");
    $images.each(function(dataAndEvents, elem) {
      if ($(elem).is(":visible")) {
        progressCount++;
      } else {
        if (dataAndEvents < progressCount) {
          $(elem).show();
        }
      }
    });
    if (progressCount >= $images.length) {
      this.$el.find(".showMore").attr("disabled", "disabled");
    }
  },
  /**
   * @param {Event} event
   * @return {undefined}
   */
  showFullRecommendationText : function(event) {
    event.preventDefault();
    $(event.currentTarget).parent().hide().next(".gogo-recommendation.hidden").show();
  },
  /**
   * @return {?}
   */
  checkIfInView : function() {
    /** @type {number} */
    var top = this.$el.offset().top - 85;
    return top < $(window).scrollTop() ? ($("html,body").animate({
      scrollTop : top
    }, 1E3), false) : true;
  }
});
ha = ha || {
  backbone : {
    Views : {
      ReadReviewsPage : {}
    }
  }
};
ha.backbone.Views.ReadReviewsPage.ReadReviewsPageView = Backbone.View.extend({
  events : {
    "click #summary-photo .enlarge-photo" : "activeResponsiveModal"
  },
  /**
   * @return {undefined}
   */
  initialize : function() {
    _.bindAll(this);
    var photosToSkip = this.$("#photos-container .photo .photo-section").map(function() {
      return $(this).data("imagenumber");
    });
    this.jcarouselView = new ha.backbone.gt.Views.PropertyPage.JCarouselView({
      collection : this.model.get("images"),
      el : ".jCarouselView",
      templateSelector : ".carousel_image_template",
      thumbnailTemplateSelector : ".carousel_thumbnail_template",
      imageMinWidth : 400,
      photosToSkip : photosToSkip
    });
    this.$(".js-unveilReviewerImg").unveil(200);
  },
  /**
   * @param {Event} ev
   * @return {undefined}
   */
  activeResponsiveModal : function(ev) {
    /** @type {number} */
    var cycle = parseInt($(ev.currentTarget).attr("data-imageNumber"), 10);
    var that = this;
    $("#summary-photo .largePhotoViewer").modal({
      /**
       * @return {undefined}
       */
      onShow : function() {
        that.fullScreenCarouselView = new ha.backbone.gt.Views.PropertyPage.FullScreenPhotoCarouselView({
          collection : that.model.get("images"),
          el : ".fullScreenPhotoCarouselView",
          templateSelector : ".carousel_thumbnail_template",
          thumbnailsContainerSelector : ".js-thumbnailsContainer",
          thumbnailMinWidth : 400
        });
        that.fullScreenCarouselView.show(cycle);
      },
      overlayClose : true
    });
  }
});
ha = ha || {
  backbone : {
    Views : {}
  }
};
ha.backbone.Views.HitCollectionView = Backbone.View.extend({
  el : ".hit-collection-view",
  listingIconsPopover : void 0,
  favoritePopover : void 0,
  favoriteMenuView : void 0,
  tabClicked : false,
  /**
   * @return {?}
   */
  events : function() {
    var events = {
      "click input.js-unitId" : "clickCompareCheckbox",
      "click .js-unitCompare" : "clickCompareBox",
      "click a.compare-selected" : "compareSelected",
      "click .listing-icons" : "toggleListingIconsPopover",
      "click .favorite-button" : "toggleFavoritePopover",
      "click .preview-trigger" : "preventPropagation",
      "click .search-hit-tab-container .btn" : "preventClickListing"
    };
    if (this.options.makeEntireSearchHitClickable) {
      /** @type {string} */
      events["click .listing-faces"] = "clickListing";
    }
    return events;
  },
  /**
   * @return {undefined}
   */
  initialize : function() {
    _.bindAll(this);
    var tooltip = this.$(".js-olbBanner");
    var pdataOld;
    this.changeAllCompareBoxes();
    ha.backbone.Models.traveler = ha.backbone.Models.traveler || new ha.backbone.Models.Traveler;
    this.listenTo(ha.backbone.Models.traveler, "change", this.refreshFavorites);
    this.refreshFavorites();
    if (tooltip.length) {
      pdataOld = $("#online_booking_template").html();
      tooltip.attr("title", pdataOld);
      tooltip.tooltip();
    }
    if ($("#paymentsSearchBadgeInfoText").html()) {
      $(".paymentBannerIcon").tooltip();
    }
    ha.backbone.Events.on("scrollToHit", this.scrollToHit, this);
  },
  /**
   * @return {undefined}
   */
  preventClickListing : function() {
    /** @type {boolean} */
    this.tabClicked = true;
  },
  /**
   * @return {undefined}
   */
  refreshFavorites : function() {
    var users = ha.backbone.Models.traveler;
    if (users.get("uuid")) {
      users = users.get("favorites");
      users.forEach(function(dc) {
        if (dc.get("labels").length) {
          this.$("#fav-" + dc.get("id") + " i").removeClass("not-favorited").addClass("favorited");
        }
      });
    } else {
      this.$(".listing i.favorited").removeClass("favorited").addClass("not-favorited");
    }
  },
  /**
   * @param {string} val
   * @return {undefined}
   */
  clickCompareCheckbox : function(val) {
    var obj = $(val.currentTarget);
    /** @type {string} */
    val = "";
    var s = obj.val();
    var i = obj.parents("div.js-unitCompare").children("div.js-labelCompare");
    $("label", i);
    if (null !== $.cookie("cmprd-units")) {
      /** @type {string} */
      val = unescape($.cookie("cmprd-units"));
    }
    if (obj.prop("checked")) {
      val = "" !== val ? val + ("," + s) : s;
    } else {
      if ("" !== val) {
        /** @type {Array.<string>} */
        obj = val.split(",");
        /** @type {string} */
        val = "";
        /** @type {number} */
        i = 0;
        for (;i < obj.length;i++) {
          if (obj[i] !== s) {
            val += obj[i] + ",";
          }
        }
        /** @type {string} */
        val = val.substring(0, val.length - 1);
      }
    }
    $.cookie("cmprd-units", val, {
      path : "/"
    });
  },
  /**
   * @param {Event} ev
   * @return {undefined}
   */
  clickCompareBox : function(ev) {
    ev.stopPropagation();
    ev = $(ev.currentTarget).find('input[type="checkbox"].js-unitId');
    this.changeCompareBox(0, ev);
  },
  /**
   * @return {undefined}
   */
  changeAllCompareBoxes : function() {
    this.$(".listing input:checked.js-unitId").each(this.changeCompareBox);
  },
  /**
   * @param {number} recurring
   * @param {Event} el
   * @return {undefined}
   */
  changeCompareBox : function(recurring, el) {
    var $target = $(el);
    if ($target.prop("checked")) {
      $target.parent().find(".compare-selected").replaceWith(_.template($("#compare_selected_checkbox_template").html()));
    } else {
      $target.parent().find(".compare-selected").replaceWith(_.template($("#compare_checkbox_template").html()));
    }
  },
  /**
   * @param {?} event
   * @return {?}
   */
  compareSelected : function(event) {
    /** @type {string} */
    var queryString = "";
    var value = $(this).attr("jsObj") || compareJsObj;
    var text = ha.json.cookie.parse(ha.json.qpJsonCookie(), "searchURL");
    event.preventDefault();
    event.stopPropagation();
    if (null !== text && -1 !== text.indexOf("search")) {
      if (-1 !== text.indexOf("?view=")) {
        text = text.substr(0, text.indexOf("?view="));
      }
    } else {
      /** @type {string} */
      text = "/search";
    }
    value = value.split(":")[0] + ":" + text;
    if (null !== $.cookie("cmprd-units")) {
      /** @type {string} */
      queryString = unescape($.cookie("cmprd-units"));
    }
    $.cookie("srch-info", value, {
      path : "/"
    });
    if ("" === queryString) {
      return false;
    }
    /** @type {string} */
    window.location = "/property/compare?units=" + queryString;
  },
  /**
   * @param {Event} ev
   * @return {undefined}
   */
  toggleListingIconsPopover : function(ev) {
    var element = $(ev.currentTarget);
    var h = _.template($("#" + element.attr("data-icons-popover-template")).html());
    if (this.listingIconsPopover) {
      this.closeListingIconsPopover(ev);
    }
    this.listingIconsPopover = element.popover({
      placement : "bottom",
      html : true,
      content : h
    });
    this.listingIconsPopover.popover("show");
    $("html").on("click.searchresultview", this.closeListingIconsPopover);
    ev.stopPropagation();
  },
  /**
   * @return {undefined}
   */
  closeListingIconsPopover : function() {
    this.listingIconsPopover.popover("destroy");
    /** @type {null} */
    this.listingIconsPopover = null;
    $("html").off("click.searchresultview");
  },
  /**
   * @param {Event} e
   * @return {undefined}
   */
  clickListing : function(e) {
    var $e;
    var href;
    if (!this.tabClicked) {
      $e = $(e.currentTarget);
      href = $e.find(".listing-url").attr("href");
      $e = $e.closest(".listing").data("unitlink");
      $.cookie("ha-hit-click", JSON.stringify({
        url : href,
        unitLink : $e
      }));
      if (e.isDefaultPrevented() || (e.metaKey || (e.ctrlKey || e.shiftKey))) {
        return;
      }
      if ("undefined" != typeof href) {
        window.location = href;
      }
    }
    /** @type {boolean} */
    this.tabClicked = false;
  },
  /**
   * @param {Event} ev
   * @return {undefined}
   */
  toggleFavoritePopover : function(ev) {
    var value;
    var range;
    if (ha.backbone.Models.traveler.get("uuid")) {
      if (this.favoritePopover) {
        this.closeFavoritePopover(ev);
      }
      value = $(ev.currentTarget);
      this.favoritePopover = value.find("i").popover({
        placement : "left",
        html : true,
        content : this.getPopoverContent(value)
      });
      this.favoritePopover.popover("show");
      $("html").on("click.searchresultview", this.closeFavoritePopover);
    } else {
      value = $(ev.currentTarget).attr("data-spu");
      range = value.split("-");
      value = {
        spu : value,
        systemId : range[0],
        propertyId : range[1],
        unitId : range[2]
      };
      $.cookie("tmp-user-fav", JSON.stringify(value), {
        expires : 1,
        path : "/"
      });
      ha.user.login.launchmodal("favorite");
    }
    ev.stopPropagation();
  },
  /**
   * @return {undefined}
   */
  closeFavoritePopover : function() {
    this.favoritePopover.popover("destroy");
    /** @type {null} */
    this.favoritePopover = null;
    $("html").off("click.searchresultview");
  },
  /**
   * @param {Object} tag
   * @return {?}
   */
  getPopoverContent : function(tag) {
    var output;
    if (this.favoriteMenuView) {
      this.favoriteMenuView.stopListening();
      this.favoriteMenuView.undelegateEvents();
    }
    this.favoriteMenuView = new ha.backbone.Views.FavoriteMenuView({
      model : ha.backbone.Models.traveler,
      el : tag,
      menuTemplateSelector : "script.add_favorite_template",
      listClass : "add-favorites-popover"
    });
    this.favoriteMenuView.render();
    tag = tag.find("ul.favorites-menu");
    output = $(tag.get(0).cloneNode(true)).wrap("<p>").parent().html();
    tag.children().remove();
    return output;
  },
  /**
   * @param {?} e
   * @return {undefined}
   */
  preventPropagation : function(e) {
    e.stopPropagation();
  },
  /**
   * @param {Object} iframe
   * @return {undefined}
   */
  scrollToHit : function(iframe) {
    /** @type {number} */
    var offset = 0;
    var $window = $(window);
    if (480 <= $window.height()) {
      if (480 <= $window.width()) {
        /** @type {number} */
        offset = 200;
      }
    }
    if (iframe = this.$("." + iframe)) {
      if (iframe.offset()) {
        $(jQuery.browser.webkit ? "body" : "html").animate({
          scrollTop : iframe.offset().top - offset
        }, 1E3);
      }
    }
  }
});
ha = ha || {
  backbone : {
    Views : {}
  }
};
ha.backbone.Views.FavoriteMenuView = Backbone.View.extend({
  events : {
    "change input[type=checkbox]" : "toggleLabelCheckbox",
    "click .fav-new-list" : "clickNewList",
    "click .save-item-button" : "createNewFavoriteLabel",
    "click .favorites-menu" : "clickInsideMenu"
  },
  /**
   * @return {undefined}
   */
  initialize : function() {
    _.bindAll(this);
    this.labels = this.model.get("labels");
    this.listenTo(this.labels, "change", this.render);
  },
  /**
   * @return {?}
   */
  render : function() {
    var self = this.$el;
    var m = this.model;
    var cycle = _.template($(this.options.menuTemplateSelector).html(), {
      favorite_labels : this.labels.models,
      listClass : this.options.listClass
    });
    self.find("ul.favorites-menu").replaceWith(cycle);
    if (self = m.get("favorites").get(self.data("spu"))) {
      self = self.get("labels");
      /** @type {number} */
      m = 0;
      for (;m < self.length;m++) {
        $("input[type=checkbox][value=" + self[m] + "]").prop({
          checked : true,
          defaultChecked : true
        });
      }
    }
    return this;
  },
  /**
   * @param {?} event
   * @return {undefined}
   */
  clickInsideMenu : function(event) {
    event.stopPropagation();
  },
  /**
   * @param {Object} $e
   * @return {undefined}
   */
  toggleLabelCheckbox : function($e) {
    $e = $($e.currentTarget);
    var memory = $e.parents(".favorite-button");
    var optgroup = memory.data("spu");
    var ol = $e.val();
    var doc = this.model;
    if ($e.is(":checked")) {
      doc.addLabelToFavorite(optgroup, ol);
    } else {
      doc.removeLabelFromFavorite(optgroup, ol);
    }
    this.toggleButtonState(memory, optgroup);
  },
  /**
   * @param {Object} data
   * @param {string} optgroup
   * @return {undefined}
   */
  toggleButtonState : function(data, optgroup) {
    var state = this.model.get("favorites").get(optgroup);
    if (state && state.get("labels").length) {
      data.find("i").addClass("favorited").removeClass("not-favorited");
      data.find("span.fav-text").html($(".favorite-button").data("favorite-text"));
    } else {
      data.find("i").addClass("not-favorited").removeClass("favorited");
      data.find("span.fav-text").html($(".favorite-button").data("add-favorite-text"));
    }
  },
  /**
   * @param {Object} self
   * @return {undefined}
   */
  clickNewList : function(self) {
    self.stopPropagation();
    self.preventDefault();
    self = $(self.currentTarget);
    self.closest("li").hide();
    self = self.closest("ul").find("li.favdrop-newitem");
    self.removeClass("hide");
    self.find("input").focus();
  },
  /**
   * @param {Object} self
   * @return {undefined}
   */
  createNewFavoriteLabel : function(self) {
    self = $(self.currentTarget);
    var $li = self.closest("li");
    var cycle = $li.find("input[name=new_item]").val();
    var memory;
    var rvar;
    cycle = $.trim(cycle);
    if (cycle.length) {
      cycle = cycle.replace(/</g, "&lt;");
      cycle = cycle.replace(/>/g, "&gt;");
      cycle = cycle.replace(/\n/g, "<br/>");
      cycle = new ha.backbone.Models.FavoritesLabel({
        name : cycle,
        count : 1
      });
      memory = self.closest(".favorite-button");
      rvar = memory.data("spu");
      cycle.once("change:id", function(ids) {
        this.model.addLabelToFavorite(rvar, ids.get("id"));
        this.toggleButtonState(memory, rvar);
      }, this);
      this.labels.add(cycle);
      $li.before('<li class="loading-item">&nbsp;</li>');
    }
  }
});
ha = ha || {
  backbone : {
    Views : {
      PropertyReviews : {}
    }
  }
};
ha.backbone.Views.PropertyReviewsView = Backbone.View.extend({
  events : {
    "click .js-userReviewsStarList .filterReview" : "toggleFilter",
    "click .js-voteHelpful" : "voteHelpful",
    "click .js-voteUnhelpful" : "voteUnhelpful"
  },
  options : {
    checkedFilter : [false, true, true, true, true, true],
    num : 5,
    incrementValue : 5
  },
  /**
   * @return {undefined}
   */
  initialize : function() {
    this.collection.on("reviewFiltered", this.render, this);
    _.bindAll(this, "loadPage", "loadNext", "navigate");
    this.$loadMoreButton = this.$(this.options.loadMoreButton);
    this.$target = this.$(this.options.target);
    this.propertyReviewTemplateHtml = $(this.options.propertyReviewTemplate).html();
    if (this.allReviewsShown(this.options.num, this.getNumberMatchingFilters())) {
      this.$loadMoreButton.hide();
    } else {
      this.$loadMoreButton.on("click", window.history && window.history.pushState ? this.navigate : this.loadNext);
    }
    ha.backbone.Events.bind("historyStart", this.initializeRoute);
  },
  /**
   * @return {?}
   */
  render : function() {
    var now = this.getNumberMatchingFilters();
    /** @type {number} */
    var j = Math.min(this.options.num, now);
    var len = this.options.checkedFilter;
    var destElements = this.collection.filter(function(module) {
      return len[module.get("rating")];
    });
    if (destElements.length >= j) {
      this.$target.html("");
      this.renderReviews(destElements, j);
      this.renderLoadMoreButton(j, now);
      this.updatePager(j, now);
      this.triggerChangeSizeEvent();
    } else {
      this.listenToOnce(this.collection, "sync", this.render);
      this.collection.fetch();
    }
    return this;
  },
  /**
   * @return {undefined}
   */
  initializeRoute : function() {
    /** @type {string} */
    var url = window.location.href;
    /** @type {string} */
    url = url.substring(url.indexOf(window.location.pathname));
    Backbone.history.navigate(url, {
      trigger : true,
      replace : true
    });
  },
  /**
   * @param {Object} options
   * @return {?}
   */
  navigate : function(options) {
    var match = $(options.currentTarget).attr("href");
    options.preventDefault();
    Backbone.history.navigate(match.replace(/^\//, ""), {
      trigger : true,
      replace : true
    });
    return false;
  },
  /**
   * @param {number} opt_fromIndex
   * @param {number} now
   * @return {undefined}
   */
  updatePager : function(opt_fromIndex, now) {
    this.$(".js-reviewsPage").html(_.template(this.$("#x-y_of-z_template").html(), {
      rangeBegin : Math.min(1, now),
      rangeEnd : Math.min(this.options.num, now),
      total : now
    }));
  },
  /**
   * @param {number} y
   * @param {number} deepDataAndEvents
   * @return {undefined}
   */
  renderLoadMoreButton : function(y, deepDataAndEvents) {
    var pdataOld;
    if (this.allReviewsShown(y, deepDataAndEvents)) {
      this.$loadMoreButton.hide();
    } else {
      pdataOld = this.$loadMoreButton.attr("href");
      pdataOld = pdataOld.replace(/reviewsPage\d+/, "reviewsPage" + (Math.floor(y / this.options.incrementValue) + 1));
      this.$loadMoreButton.attr("href", pdataOld).show();
    }
  },
  /**
   * @param {Array} elems
   * @param {number} n
   * @return {undefined}
   */
  renderReviews : function(elems, n) {
    /** @type {number} */
    i = 0;
    for (;i < n;i++) {
      this.renderReview(elems[i]);
    }
  },
  /**
   * @param {Text} value
   * @return {undefined}
   */
  renderReview : function(value) {
    value = _.template(this.propertyReviewTemplateHtml, {
      review : value,
      pmName : this.options.unit.get("propertyManagerName")
    });
    this.$target.append(value);
  },
  /**
   * @param {Event} evt
   * @return {undefined}
   */
  toggleFilter : function(evt) {
    /** @type {boolean} */
    this.options.checkedFilter[evt.target.value] = $(evt.target).prop("checked") ? true : false;
    this.render();
  },
  /**
   * @return {undefined}
   */
  loadPage : function() {
    if (arguments) {
      if (2 === arguments.length) {
        /** @type {number} */
        this.options.num = arguments[1] * this.options.incrementValue;
      }
    }
    this.render();
  },
  /**
   * @param {Object} value
   * @return {undefined}
   */
  loadNext : function(value) {
    value.preventDefault();
    this.options.num += this.options.incrementValue;
    this.render();
  },
  /**
   * @param {number} v11
   * @param {number} deepDataAndEvents
   * @return {?}
   */
  allReviewsShown : function(v11, deepDataAndEvents) {
    return v11 >= deepDataAndEvents;
  },
  /**
   * @return {?}
   */
  getNumberMatchingFilters : function() {
    /** @type {number} */
    var text = 0;
    /** @type {number} */
    var p = 0;
    for (;p < this.options.reviewSummaryArray.length;p++) {
      if (this.options.checkedFilter[p]) {
        text += this.options.reviewSummaryArray[p];
      }
    }
    return text;
  },
  /**
   * @param {Object} e
   * @return {undefined}
   */
  voteHelpful : function(e) {
    e = $(e.currentTarget).closest(".js-propertyReview").attr("id");
    this.vote(e, true);
  },
  /**
   * @param {Object} e
   * @return {undefined}
   */
  voteUnhelpful : function(e) {
    e = $(e.currentTarget).closest(".js-propertyReview").attr("id");
    this.vote(e, false);
  },
  /**
   * @param {string} id
   * @return {?}
   */
  notVoted : function(id) {
    if (document.cookie.match("HATravelerReviewHelpful" + id)) {
      return this.$("#reviewMessage_" + id).html(ha.strings.propertyReviews.voting.alreadyVoted), false;
    }
    $.cookie("HATravelerReviewHelpful" + id, 0, {
      expires : 18250,
      path : "/"
    });
    return true;
  },
  /**
   * @param {string} keepActiveItem
   * @param {?} dataAndEvents
   * @param {?} deepDataAndEvents
   * @param {boolean} keepData
   * @return {undefined}
   */
  updateVotes : function(keepActiveItem, dataAndEvents, deepDataAndEvents, keepData) {
    if (keepData) {
      this.$("#reviewMessage_" + keepActiveItem).html(ha.strings.propertyReviews.voting.thankYou);
    }
  },
  /**
   * @param {string} item
   * @param {boolean} recurring
   * @return {?}
   */
  vote : function(item, recurring) {
    var kendo = this;
    if (this.notVoted(item)) {
      $.ajax({
        type : "GET",
        url : "/ajax/reviews/vote",
        data : {
          helpful : recurring,
          reviewId : item
        },
        dataType : "json",
        /**
         * @param {string} type
         * @return {undefined}
         */
        success : function(type) {
          kendo.updateVotes(item, type.helpful, type.total, true);
        },
        /**
         * @param {string} type
         * @param {Function} name
         * @return {undefined}
         */
        error : function(type, name) {
          alert("Error: " + name);
        }
      });
    }
    return false;
  }
});
_.extend(ha.backbone.Views.PropertyReviewsView.prototype, ha.backbone.Mixins.ChangeSize);
ha = ha || {
  backbone : {
    Views : {
      PropertyReviews : {}
    }
  }
};
ha.backbone.Views.PagedGuestbookCommentsView = Backbone.View.extend({
  shownIndex : 0,
  events : {
    "click .js-nextGuestbook" : "showNextGuestbookComment",
    "click .js-prevGuestbook" : "showPreviousGuestbookComment"
  },
  /**
   * @return {undefined}
   */
  initialize : function() {
    _.bindAll(this, "showNextGuestbookComment", "showPreviousGuestbookComment");
  },
  /**
   * @return {undefined}
   */
  render : function() {
    this.$(".js-guestBookContentContainer").html(_.template(ha.backbone.Templates.GuestbookCommentTemplate.template, {
      index : this.shownIndex,
      pagerText : ha.strings.propertyReviews.pagerTxt,
      numberOfGuestbookComments : this.options.numberOfGuestbookComments,
      review : this.collection.at(this.shownIndex),
      prevDisabledClass : 0 === this.shownIndex ? "disabled" : "",
      nextDisabledClass : this.shownIndex + 1 === this.options.numberOfGuestbookComments ? "disabled" : ""
    }));
    this.triggerChangeSizeEvent();
  },
  /**
   * @param {?} deepDataAndEvents
   * @return {undefined}
   */
  fetchGuestbookComments : function(deepDataAndEvents) {
    this.listenToOnce(this.collection, "sync", deepDataAndEvents);
    this.collection.fetch();
  },
  /**
   * @return {undefined}
   */
  showPreviousGuestbookComment : function() {
    if (0 < this.shownIndex) {
      this.shownIndex--;
      this.render();
    }
  },
  /**
   * @return {undefined}
   */
  showNextGuestbookComment : function() {
    var shownIndex = this.collection.size();
    if (0 === shownIndex || this.shownIndex + 1 >= shownIndex) {
      this.fetchGuestbookComments(this.showNextGuestbookComment);
    } else {
      if (this.shownIndex + 1 < shownIndex) {
        this.shownIndex++;
        this.render();
      }
    }
  }
});
_.extend(ha.backbone.Views.PagedGuestbookCommentsView.prototype, ha.backbone.Mixins.ChangeSize);
ha = ha || {
  backbone : {
    Views : {
      FavoritesPage : {}
    }
  }
};
ha.backbone.Views.FavoritesPage.FavoritesPageView = Backbone.View.extend({
  el : ".favorites",
  events : {
    "click .js-newList" : "toggleCreateLabelInputs",
    "click .cancel-list" : "toggleCreateLabelInputs",
    "click .save-list" : "createLabel",
    "click .favorite-send-friend" : "shareFavorites",
    "click .js-headlineTripDatesContainer .js-addDatesToFavoritesLabel" : "addDatesToFavoritesLabel",
    "click #hit-container .listing-main" : "favoritesViewECommerceTracking",
    "click .listing-hover .unit-preview-button" : "favoritesViewECommerceTracking",
    "click .listing-hover .unit-preview-photo" : "favoritesViewECommerceTracking",
    "click .hit-collection-view .listing-url" : "favoritesViewECommerceTracking"
  },
  /**
   * @return {undefined}
   */
  initialize : function() {
    _.bindAll(this);
    this.renderAnonymousPage();
    this.listenToOnce(this.model, "change", this.bindFavLabels);
    this.listenTo(this.model, "change", this.render);
    new ha.backbone.Views.HitCollectionView;
    if (this.collection) {
      if (this.collection.length) {
        this.collection.forEach(function(dataset, v) {
          var k = "-" + dataset.get("spu");
          new ha.backbone.Views.SearchResultsPage.SearchHitView({
            el : ".listing-spu" + k,
            model : dataset,
            hitIndex : v,
            idSuffix : k + "-" + v,
            baseSearchModel : ha.backbone.Models.baseSearchModel
          });
        });
      }
    }
    if (this.options.bceFooter) {
      this.footerView = new ha.backbone.Views.BCEFooterView({
        el : ".js-bce-footer"
      });
    }
  },
  /**
   * @return {undefined}
   */
  favoritesViewECommerceTracking : function() {
    ha.page.track.updateECommerceCookie({
      tactic : "favorites",
      searchUrl : window.location.href
    });
  },
  /**
   * @return {undefined}
   */
  bindFavLabels : function() {
    var db = this.model.get("favorites");
    db.on("change", this.favoritesChangeCallback, this);
    db.on("remove", this.favoritesChangeCallback, this);
    db = this.model.get("labels");
    db.on("change", this.renderLabelsNav, this);
    db.on("remove", this.renderLabelsNav, this);
  },
  /**
   * @return {?}
   */
  render : function() {
    /** @type {string} */
    var optgroup = window.location.search;
    if (0 === optgroup.indexOf("?")) {
      /** @type {string} */
      optgroup = optgroup.substring(1);
    }
    this.activePage = this.getActivePage(optgroup);
    if (this.activeLabelModel = (optgroup = this.getActiveLabelId(optgroup)) && this.model.get("labels") ? this.model.get("labels").get(optgroup) : null) {
      ha.api.traveler.labels.getAvailableFavorites(this.activeLabelModel, this.renderAvailabilityStatus);
      this.listenTo(this.activeLabelModel, "change", this.render);
    }
    this.renderHeader(this.activePage);
    if ("favorites" === this.activePage) {
      this.renderLabelsNav();
      this.$(".js-favListNavBar").show();
    }
    $(".gt-header-cap .container").show();
    this.renderHeadline(this.activePage, this.activeLabelModel);
    return this;
  },
  /**
   * @param {?} id
   * @return {undefined}
   */
  renderHeader : function(id) {
    /** @type {string} */
    var rvar = "";
    if (this.model.get("uuid")) {
      rvar = _.template($("#header_template").html(), {
        traveler : this.model,
        activePage : id
      });
    }
    $("#fav-page-header").html(rvar);
  },
  /**
   * @param {string} dataAndEvents
   * @param {?} j
   * @return {undefined}
   */
  renderHeadline : function(dataAndEvents, j) {
    var rvar;
    var result;
    if ("inquired" === dataAndEvents) {
      rvar = ha.strings.favorites.nav.inquired;
      result = this.model.get("inquiredProperties").length;
    } else {
      if (j) {
        rvar = j.get("name");
        result = j.get("count");
      } else {
        rvar = ha.strings.favorites.nav.allFavorites;
        result = this.model.getFavoritesCount();
      }
    }
    rvar = _.template($("#label_heading_template").html(), {
      label : j,
      name : rvar,
      count : result
    });
    $(".js-headlineTripDatesContainer").html(rvar);
  },
  /**
   * @return {undefined}
   */
  renderLabelsNav : function() {
    var ready = this;
    /** @type {string} */
    var rvar = "";
    var selection = this.model.get("labels");
    var activeTab = this.activeLabelModel ? this.activeLabelModel.get("id") : null;
    var container;
    if (this.model.get("uuid")) {
      if (selection) {
        rvar = _.template($("#labels_template").html(), {
          favoritesCount : this.model.getFavoritesCount(),
          favorite_labels : this.model.get("labels").models,
          activeList : activeTab
        });
        $("#fav-page-labels-list").html(rvar);
        container = $(".js-labelsNav");
        selection.each(function(player) {
          /** @type {boolean} */
          var active = activeTab === player.get("id");
          /** @type {string} */
          var cls = "removable" + (active ? " active" : "");
          player = new ha.backbone.Views.FavoritesPage.LabelNavItemView({
            model : player,
            templateString : this.$("#label_nav_item_template").html(),
            isActive : active,
            className : cls
          });
          container.append(player.el);
          player.bind("delete", ready.removeFavoriteLabel, ready);
        });
      }
    }
  },
  /**
   * @return {undefined}
   */
  renderAnonymousPage : function() {
    $(".gt-header-cap .container").hide();
  },
  /**
   * @param {string} cycle
   * @return {undefined}
   */
  removeFavoriteLabel : function(cycle) {
    if (cycle === this.activeLabelModel) {
      this.stopListening(this.activeLabelModel);
      /** @type {null} */
      this.activeLabelModel = null;
    }
    this.model.get("labels").remove(cycle);
    this.model.removeFavoritesByLabel(cycle.get("id"));
  },
  /**
   * @param {Node} deepDataAndEvents
   * @return {undefined}
   */
  favoritesChangeCallback : function(deepDataAndEvents) {
    this.renderHeader();
    this.renderLabelsNav();
    this.favoriteLabelsChange(deepDataAndEvents);
  },
  /**
   * @param {Node} deepDataAndEvents
   * @return {undefined}
   */
  favoriteLabelsChange : function(deepDataAndEvents) {
    var row = ha.util.getUrlParameters();
    if (0 == row.length && 0 == deepDataAndEvents.get("labels").length) {
      this.removeHitFromCollectionView(deepDataAndEvents);
    } else {
      if (row.label) {
        if (!_.contains(deepDataAndEvents.get("labels"), row.label)) {
          this.removeHitFromCollectionView(deepDataAndEvents);
        }
      }
    }
  },
  /**
   * @param {Node} deepDataAndEvents
   * @return {undefined}
   */
  removeHitFromCollectionView : function(deepDataAndEvents) {
    $("div[ref=" + deepDataAndEvents.get("id") + "]").fadeOut("slow");
  },
  /**
   * @return {undefined}
   */
  toggleCreateLabelInputs : function() {
    var $el = $(".create-label-inputs");
    var $this = $('.create-label-inputs input[name="new-list"]');
    $el.toggle();
    $(".js-newList").toggle();
    if ($el.is(":visible")) {
      $this.focus();
    } else {
      $this.attr("value", "");
    }
  },
  /**
   * @return {undefined}
   */
  createLabel : function() {
    var cur = $('.create-label-inputs input[name="new-list"]').attr("value");
    cur = $.trim(cur);
    if (cur.length) {
      cur = cur.replace(/</g, "&lt;");
      cur = cur.replace(/>/g, "&gt;");
      cur = cur.replace(/\n/g, "<br/>");
      this.model.get("labels").add(new ha.backbone.Models.FavoritesLabel({
        name : cur
      }));
    }
    this.toggleCreateLabelInputs();
  },
  /**
   * @param {?} types
   * @return {undefined}
   */
  shareFavorites : function(types) {
    types.preventDefault();
    ha.ui.modal.launch($(".favorite-send-friend").attr("rel"), 515, 610);
  },
  /**
   * @param {Event} qualifier
   * @return {undefined}
   */
  addDatesToFavoritesLabel : function(qualifier) {
    if ($.fn.calendar) {
      this.addDatesToFavoritesLabelBootstrapCal(qualifier);
    } else {
      this.addDatesToFavoritesLabelOldDatepicker(qualifier);
    }
  },
  /**
   * @param {Event} event
   * @return {undefined}
   */
  addDatesToFavoritesLabelBootstrapCal : function(event) {
    var existing = $(event.currentTarget);
    var $btn = $('<div class="heading-date-inputs form-inline"><div class="input-datepicker"><i class="icon-calendar"></i><input class="span1 js-startCalendar" type="text"></div><div class="input-datepicker"><i class="icon-calendar"></i><input class="span1 js-endCalendar" type="text"></div></div>');
    var result = {
      minDate : 0,
      fetch : false,
      hoverClass : ha.config.calendar.fullSelectedClass,
      hoverClassStart : ha.config.calendar.fullSelectedClass,
      hoverClassEnd : ha.config.calendar.fullSelectedClass,
      showButtonPanel : true,
      startOfWeek : ha.i18n.startOfWeek,
      language : ha.i18n.calendar,
      dateFormat : ha.i18n.dateFormats.shortDate,
      endCalendar : $btn.find(".js-endCalendar")
    };
    var udataCur = this.activeLabelModel.get("checkInDay");
    var pdataOld = this.activeLabelModel.get("checkOutDay");
    event.preventDefault();
    event.stopPropagation();
    if (udataCur) {
      if (pdataOld) {
        result = _.extend(result, {
          startCalendarDate : ha.util.datepicker.newStandardDate(udataCur),
          endCalendarDate : ha.util.datepicker.newStandardDate(pdataOld)
        });
      }
    }
    $btn.find(".js-startCalendar").calendar(result);
    existing.replaceWith($btn);
    this.$(".js-startCalendar").focus().on("close", this.closeStartDatePickerCallback);
    this.$(".js-endCalendar").on("close", this.closeEndDatePickerCallback);
  },
  /**
   * @param {Event} event
   * @return {undefined}
   */
  addDatesToFavoritesLabelOldDatepicker : function(event) {
    var closeStartDatePickerCallback = this;
    var existing = $(event.currentTarget);
    var d = ha.util.datepicker.formatDateFromISO8601ToLocal(this.activeLabelModel.get("checkInDay"));
    var g = ha.util.datepicker.formatDateFromISO8601ToLocal(this.activeLabelModel.get("checkOutDay"));
    var $btn = $('<div class="heading-date-inputs form-inline"><div class="input-datepicker"><i class="icon-calendar"></i><input class="span1 js-startCalendar datepicker" type="text" value="' + d + '" /></div><div class="input-datepicker"><i class="icon-calendar"></i><input class="span1 js-endCalendar datepicker" type="text" value="' + g + '" /></div></div>');
    event.preventDefault();
    event.stopPropagation();
    $btn.find(".js-startCalendar").datepicker({
      minDate : 0,
      /**
       * @return {undefined}
       */
      onClose : function() {
        var date = $btn.find(".js-startCalendar").datepicker("getDate");
        /** @type {Date} */
        date = new Date(date.getFullYear(), date.getMonth(), date.getDate());
        closeStartDatePickerCallback.closeStartDatePickerCallback();
        $btn.find(".js-endCalendar").datepicker("option", "minDate", date).focus();
      }
    });
    $btn.find(".js-endCalendar").datepicker({
      minDate : 0,
      onClose : this.closeEndDatePickerCallback
    });
    existing.replaceWith($btn);
    this.$(".js-startCalendar").focus();
  },
  /**
   * @return {undefined}
   */
  closeStartDatePickerCallback : function() {
    var udataCur = this.$(".js-startCalendar").val();
    var pdataCur = this.$(".js-endCalendar").val();
    if (this.labelDatesChanged(udataCur, pdataCur, this.activeLabelModel)) {
      if ("" === udataCur) {
        this.activeLabelModel.set({
          checkInDay : null,
          checkOutDay : null
        });
        this.activeLabelModel.save();
      }
    } else {
      this.renderHeadline(this.activePage, this.activeLabelModel);
    }
  },
  /**
   * @return {undefined}
   */
  closeEndDatePickerCallback : function() {
    var udataCur = this.$(".js-startCalendar").val();
    var pdataCur = this.$(".js-endCalendar").val();
    if ("" === pdataCur || !this.labelDatesChanged(udataCur, pdataCur, this.activeLabelModel)) {
      this.renderHeadline(this.activePage, this.activeLabelModel);
    } else {
      udataCur = ha.util.datepicker.localDateStringtoISO8601(udataCur);
      pdataCur = ha.util.datepicker.localDateStringtoISO8601(pdataCur);
      this.activeLabelModel.set({
        checkInDay : udataCur,
        checkOutDay : pdataCur
      });
      this.activeLabelModel.save();
    }
  },
  /**
   * @param {Function} attributes
   * @return {undefined}
   */
  renderAvailabilityStatus : function(attributes) {
    this.$(".js-availableStatus").remove();
    _.each(attributes, function(dataAndEvents) {
      $(".listing-spu-" + dataAndEvents + " .column-bookit-minstay").prepend('<span class="txt-available js-availableStatus">' + ha.strings.favorites.listingRow.available + "</span>");
    });
  },
  /**
   * @param {string} name
   * @return {?}
   */
  getActivePage : function(name) {
    switch(name) {
      case "inquired":
      ;
      case "visited":
      ;
      case "noted":
        return name;
      default:
        return "favorites";
    }
  },
  /**
   * @param {string} name
   * @return {?}
   */
  getActiveLabelId : function(name) {
    return 0 === name.indexOf("label=") ? name.split("=")[1] : null;
  },
  /**
   * @param {?} value
   * @param {?} data
   * @param {(Node|string)} a
   * @return {?}
   */
  labelDatesChanged : function(value, data, a) {
    var prop = a.get("checkInDay");
    a = a.get("checkOutDay");
    return prop !== ha.util.datepicker.localDateStringtoISO8601(value) || a !== ha.util.datepicker.localDateStringtoISO8601(data);
  }
});
ha = ha || {
  backbone : {
    Views : {
      FavoritesPage : {}
    }
  }
};
ha.backbone.Views.FavoritesPage.LabelNavItemView = Backbone.View.extend({
  tagName : "li",
  events : {
    "click .js-addDatesToFavoritesLabel" : "addDatesToFavoritesLabel",
    "click .js-deleteFavoritesLabel" : "deleteFavoriteLabel",
    "click .js-navClickTrap" : "trapClickEvents"
  },
  /**
   * @param {?} url
   * @return {undefined}
   */
  initialize : function(url) {
    this.template = _.template(url.templateString);
    _.bindAll(this);
    this.render();
  },
  /**
   * @return {?}
   */
  render : function() {
    this.$el.html(this.template({
      label : this.model,
      isActive : this.options.isActive
    }));
    return this;
  },
  /**
   * @param {Event} qualifier
   * @return {undefined}
   */
  addDatesToFavoritesLabel : function(qualifier) {
    if ($.fn.calendar) {
      this.addDatesToFavoritesLabelBootstrapCal(qualifier);
    } else {
      this.addDatesToFavoritesLabelOldDatepicker(qualifier);
    }
  },
  /**
   * @param {Object} event
   * @return {undefined}
   */
  addDatesToFavoritesLabelBootstrapCal : function(event) {
    var $this = $(event.currentTarget);
    var tmp = $('<div class="date-inputs js-navClickTrap clearfix"><input class="input-fav-label start-calendar js-startCalendar" type="text" /><input class="input-fav-label end-calendar js-endCalendar" type="text" /></div>');
    event.preventDefault();
    event.stopPropagation();
    tmp.find(".js-startCalendar").calendar({
      minDate : 0,
      fetch : false,
      hoverClass : ha.config.calendar.fullSelectedClass,
      hoverClassStart : ha.config.calendar.fullSelectedClass,
      hoverClassEnd : ha.config.calendar.fullSelectedClass,
      showButtonPanel : true,
      startOfWeek : ha.i18n.startOfWeek,
      language : ha.i18n.calendar,
      dateFormat : ha.i18n.dateFormats.shortDate,
      endCalendar : tmp.find(".js-endCalendar")
    });
    $this.replaceWith(tmp);
    event = this.$(".js-startCalendar").focus();
    $this = this.$(".js-endCalendar");
    event.on("close", this.closeStartDatePickerCallback);
    $this.on("close", this.closeEndDatePickerCallback);
  },
  /**
   * @param {Event} event
   * @return {undefined}
   */
  addDatesToFavoritesLabelOldDatepicker : function(event) {
    var closeStartDatePickerCallback = this;
    var existing = $(event.currentTarget);
    var $btn = $('<div class="date-inputs js-navClickTrap clearfix"><input class="input-fav-label js-startCalendar datepicker" type="text"><input class="input-fav-label js-endCalendar datepicker" type="text"></div>');
    event.preventDefault();
    event.stopPropagation();
    $btn.find(".js-startCalendar").datepicker({
      minDate : 0,
      /**
       * @return {undefined}
       */
      onClose : function() {
        var date = $btn.find(".js-startCalendar").datepicker("getDate");
        /** @type {Date} */
        date = new Date(date.getFullYear(), date.getMonth(), date.getDate());
        closeStartDatePickerCallback.closeStartDatePickerCallback();
        $btn.find(".js-endCalendar").datepicker("option", "minDate", date).focus();
      }
    });
    $btn.find(".js-endCalendar").datepicker({
      minDate : 0,
      onClose : this.closeEndDatePickerCallback
    });
    existing.replaceWith($btn);
    this.$(".js-startCalendar").focus();
  },
  /**
   * @param {?} types
   * @return {undefined}
   */
  trapClickEvents : function(types) {
    types.preventDefault();
  },
  /**
   * @return {undefined}
   */
  closeStartDatePickerCallback : function() {
    if ("" === this.$(".js-startCalendar").val()) {
      this.render();
    }
  },
  /**
   * @return {undefined}
   */
  closeEndDatePickerCallback : function() {
    var pdataCur = this.$(".js-endCalendar").val();
    var checkInDay;
    if ("" === pdataCur) {
      this.render();
    } else {
      checkInDay = ha.util.datepicker.localDateStringtoISO8601(this.$(".js-startCalendar").val());
      pdataCur = ha.util.datepicker.localDateStringtoISO8601(pdataCur);
      this.model.set({
        checkInDay : checkInDay,
        checkOutDay : pdataCur
      });
      this.model.save();
    }
  },
  /**
   * @param {?} types
   * @return {undefined}
   */
  deleteFavoriteLabel : function(types) {
    types.preventDefault();
    this.trigger("delete", this.model);
  }
});
ha = ha || {
  backbone : {
    Collections : {}
  }
};
ha.backbone.Collections.TripsRatePeriods = Backbone.Collection.extend({
  model : ha.backbone.Models.Rates.TripsRatePeriod,
  /**
   * @param {Object} _
   * @param {string} recurring
   * @return {?}
   */
  findRateRange : function(_, recurring) {
    var result = this.stayPeriod(_, recurring);
    result = this.findRateRangeAmount(_, recurring, result);
    if (!this.validResult(result)) {
      if ("weekdayNightRate" === result.period) {
        result = this.findRateRangeAmount(_, recurring, "weeklyRate");
        if (!this.validResult(result)) {
          result = this.findRateRangeAmount(_, recurring, "monthlyRate");
        }
      } else {
        if ("weeklyRate" === result.period) {
          result = this.findRateRangeAmount(_, recurring, "weekdayNightRate");
          if (!this.validResult(result)) {
            result = this.findRateRangeAmount(_, recurring, "monthlyRate");
          }
        } else {
          result = this.findRateRangeAmount(_, recurring, "weeklyRate");
          if (!this.validResult(result)) {
            result = this.findRateRangeAmount(_, recurring, "weekdayNightRate");
          }
        }
      }
    }
    return result;
  },
  /**
   * @param {Object} result
   * @return {?}
   */
  validResult : function(result) {
    return result.min && (result.max && (result.min.get(result.period) && result.max.get(result.period))) ? true : false;
  },
  /**
   * @param {Object} substr
   * @param {string} recurring
   * @return {?}
   */
  stayPeriod : function(substr, recurring) {
    if (!substr && !recurring) {
      return "weekdayNightRate";
    }
    var substrWidth = this.getNumberOfNights(substr, recurring);
    return 6 >= substrWidth ? "weekdayNightRate" : 28 >= substrWidth ? "weeklyRate" : "monthlyRate";
  },
  /**
   * @param {Object} from
   * @param {?} recurring
   * @param {string} optgroup
   * @return {?}
   */
  findRateRangeAmount : function(from, recurring, optgroup) {
    from = this.findRateRangeForCheckinCheckout(from, recurring, function(doc) {
      return doc.get(optgroup) && doc.get(optgroup).amount ? doc.get(optgroup).amount : null;
    });
    /** @type {string} */
    from.period = optgroup;
    return from;
  },
  /**
   * @param {number} min
   * @param {number} recurring
   * @param {number} n
   * @return {?}
   */
  findRateRangeForCheckinCheckout : function(min, recurring, n) {
    recurring = this.findRatePeriodsForCheckinCheckout(min, recurring);
    min = _.min(recurring, n);
    n = _.max(recurring, n);
    return min == Number.POSITIVE_INFINITY || (min == Number.NEGATIVE_INFINITY || (n == Number.POSITIVE_INFINITY || n == Number.NEGATIVE_INFINITY)) ? {
      min : null,
      max : null
    } : {
      min : min,
      max : n
    };
  },
  /**
   * @param {number} v
   * @param {number} recurring
   * @return {?}
   */
  findRatePeriodsForCheckinCheckout : function(v, recurring) {
    return v && recurring ? this.filter(function($templateCache) {
      return $templateCache.get("begins") <= recurring && $templateCache.get("ends") >= v;
    }) : this.toArray();
  },
  /**
   * @param {Object} howmany
   * @param {Object} recurring
   * @return {?}
   */
  getNumberOfNights : function(howmany, recurring) {
    return Math.round((recurring.getTime() - howmany.getTime()) / 864E5);
  }
});
ha = ha || {
  backbone : {
    Views : {
      PropertyPage : {}
    }
  }
};
ha.backbone.Views.PropertyPage.QuoteFormView = Backbone.View.extend({
  olbModel : null,
  quoteModel : null,
  events : {
    "click .js-continueBooking" : "continueBooking",
    "change select.quoteAdults" : "changeAdultsCount",
    "change select.quoteChildren" : "changeChildrenCount",
    "change input.quotePets" : "changePets",
    "click .readMoreFeesAndTaxes" : "readMoreFeesAndTaxes"
  },
  /**
   * @param {?} scope
   * @return {undefined}
   */
  initialize : function(scope) {
    _.bindAll(this);
    var obj = this;
    this.unitModel = scope.unitModel;
    this.quoteModel = scope.quoteModel;
    this.olbModel = scope.olbModel;
    this.$bookButton = this.$(".js-continueBooking");
    this.$topQuoteCta = this.$(".js-topQuoteCta");
    this.$el.on("hidden", function() {
      obj.stopListeningToChanges();
      obj.trigger("hidden");
    });
    this.initializeDateFields(scope.calendarData);
    if (scope.loadOnStartup) {
      this.toggle();
    }
  },
  /**
   * @param {?} dataAndEvents
   * @return {undefined}
   */
  initializeDateFields : function(dataAndEvents) {
    this.$("input[name=checkInDateString]");
    this.$("input[name=checkOutDateString]");
    var _self = ha.backbone.Models.pdpAvailability;
    var start = ha.util.datepicker.newStandardDate(_self.get("startDate"));
    _self = ha.util.datepicker.newStandardDate(_self.get("endDate"));
    this.datepickersView = new ha.backbone.Views.DatepickerPairView({
      el : this.$(".dates-group"),
      startDate : start,
      endDate : _self,
      calendarData : dataAndEvents,
      dateFieldLabel : ha.strings.pricebar.datesRequiredQuote,
      dateFieldLabelQuotable : ha.strings.pricebar.datesRequiredQuote,
      availabilityUpdated : this.unitModel.get(this.unitModel.keys.availabilityUpdated),
      language : ha.i18n.calendar,
      dateFormat : ha.i18n.dateFormats.shortDate
    });
  },
  /**
   * @return {?}
   */
  render : function() {
    var renderQuote = this.renderQuote();
    var pdataOld = this.olbModel.get("petIncluded");
    this.$("select.quoteAdults").val(this.olbModel.get("adultsCount"));
    this.$("select.quoteChildren").val(this.olbModel.get("childrenCount"));
    this.$("input.quotePets").attr("checked", pdataOld);
    if (renderQuote) {
      this.$el.modal("show");
      this.trigger("shown");
      this.startListeningToChanges();
    }
    this.hideLongTaxes();
    this.datepickersView.render();
    return this;
  },
  /**
   * @return {?}
   */
  isExpanded : function() {
    return this.$el.is(":visible");
  },
  /**
   * @return {undefined}
   */
  toggle : function() {
    if (this.isExpanded()) {
      this.cancelQuote();
    } else {
      if (this.quoteModel.isNew()) {
        this.quoteModel.fetch();
      }
      this.render();
    }
  },
  /**
   * @return {?}
   */
  renderQuote : function() {
    var optgroup = this.quoteModel.isPendingRequest();
    var errorType = this.quoteModel.get("errorType");
    var rvar = this.quoteModel.get("errorString");
    var activeItem = this.$(".alert").hide();
    var closed = this.$(".guests-group").removeClass("success warning error");
    var QUnit = this.$(".pets-group").removeClass("success warning error");
    var body = this.$("#olb-alert").html("");
    var parent = this.$(".js-quoteDetails").html("");
    this.$bookButton.attr("disabled", "disabled");
    this.$topQuoteCta.hide();
    if (errorType) {
      if ("dates" === errorType) {
        this.datepickersView.renderDateValidation({
          state : "unavailable"
        });
      } else {
        if ("children" === errorType) {
          closed.addClass("error");
        } else {
          if ("pets" === errorType) {
            QUnit.addClass("error");
          } else {
            if (this.unitModel.get("property").contact.hasEmail) {
              return this.cancelQuote(), ha.backbone.Events.trigger("showInquiryFallback", {
                olbError : true,
                olbMessage : rvar
              }), false;
            }
          }
        }
      }
      body.html(rvar);
      activeItem.show();
    } else {
      if (optgroup ? optgroup = this.$(".js-quoteLoader").html() : (optgroup = this.quoteModel.get("content"), this.isPDPAvailabilityInvalid(ha.backbone.Models.pdpAvailability.validate()) || this.resetValidation()), "undefined" !== typeof optgroup) {
        parent.html(optgroup);
        this.hideLongTaxes();
      }
    }
    return true;
  },
  /**
   * @return {undefined}
   */
  cancelQuote : function() {
    if (this.isExpanded()) {
      this.$el.modal("hide");
    }
  },
  /**
   * @return {undefined}
   */
  startListeningToChanges : function() {
    var self = this;
    self.listenTo(this.quoteModel, "change", function() {
      _.defer(self.renderQuote);
    });
    this.datepickersView.bind("datesValidated", this.handleDatesValidation);
  },
  /**
   * @return {undefined}
   */
  stopListeningToChanges : function() {
    this.stopListening(this.quoteModel, "change", this.renderQuote);
    this.datepickersView.unbind("datesValidated", this.handleDatesValidation);
  },
  /**
   * @return {undefined}
   */
  handleDatesValidation : function() {
    if (this.isPDPAvailabilityInvalid()) {
      this.$bookButton.attr("disabled", "disabled");
      this.$topQuoteCta.hide();
    }
  },
  /**
   * @param {boolean} _xhr
   * @return {?}
   */
  isPDPAvailabilityInvalid : function(_xhr) {
    return _xhr && ("unavailable" === _xhr.state || ("minimum-stay-not-met" === _xhr.state || "incomplete" === _xhr.state));
  },
  /**
   * @return {undefined}
   */
  resetValidation : function() {
    this.$bookButton.removeAttr("disabled");
    this.$topQuoteCta.show();
  },
  /**
   * @return {undefined}
   */
  continueBooking : function() {
    /** @type {string} */
    var queryString = "";
    if (analyticsdatalayer) {
      if (analyticsdatalayer.propertydetails) {
        /** @type {string} */
        queryString = "&propertydetails=" + analyticsdatalayer.propertydetails;
      }
    }
    window.location = this.$("#continueToBookingButton").data("bookingurl") + queryString;
  },
  /**
   * @param {Event} ev
   * @return {undefined}
   */
  changeAdultsCount : function(ev) {
    this.olbModel.set("adultsCount", $(ev.currentTarget).val());
  },
  /**
   * @param {Event} ev
   * @return {undefined}
   */
  changeChildrenCount : function(ev) {
    this.olbModel.set("childrenCount", $(ev.currentTarget).val());
  },
  /**
   * @param {Event} ev
   * @return {undefined}
   */
  changePets : function(ev) {
    this.olbModel.set("petIncluded", $(ev.currentTarget).is(":checked"));
  },
  /**
   * @return {undefined}
   */
  hideLongTaxes : function() {
    if (this.$(".additionalFeesAndTaxes") && 90 < this.$(".additionalFeesAndTaxes").height()) {
      var nodes = $('<span class="readMoreFeesAndTaxes">' + ha.strings.showMore + "</span> ");
      this.$(".additionalFeesAndTaxes").attr("data-originalHeight", this.$(".additionalFeesAndTaxes").height());
      this.$(".additionalFeesAndTaxes").css({
        height : "90px"
      });
      this.$(".additionalFeesAndTaxes").after(nodes);
    }
  },
  /**
   * @param {Object} $e
   * @return {undefined}
   */
  readMoreFeesAndTaxes : function($e) {
    $e = $($e.currentTarget);
    var elements = $e.siblings(".additionalFeesAndTaxes");
    var dialogHeight = elements.attr("data-originalheight");
    elements.animate({
      height : dialogHeight
    });
    $e.hide();
  }
});
ha = ha || {
  backbone : {
    Views : {
      PropertyPage : {}
    }
  }
};
ha.backbone.Views.PropertyPage.AvailabilityView = Backbone.View.extend({
  numberOfMonths : [2, 3],
  window : null,
  events : {
    "click .js-nextMonths" : "showNextMonths",
    "click .js-previousMonths" : "showPreviousMonths"
  },
  /**
   * @param {?} scope
   * @return {undefined}
   */
  initialize : function(scope) {
    var cycle = ha.backbone.Models.pdpAvailability;
    var date = cycle.get("startDate") ? ha.util.datepicker.newStandardDate(cycle.get("startDate")) : new Date;
    date = this._normalizeDate(date);
    _.bindAll(this, "adjustNumberOfMonths", "scrollToDate");
    this.window = $(window);
    this.numberOfMonths = this.determineNumberOfMonths(this.$el.outerWidth());
    this.$("#populatedCalendars").calendar({
      minDate : this._normalizeDate(new Date),
      defaultDate : date,
      numberOfMonths : this.numberOfMonths,
      calendar : scope.calendarData ? scope.calendarData.calendar : {},
      reservations : scope.calendarData ? scope.calendarData.reservations : {},
      availability : scope.calendarData ? scope.calendarData.availability : {},
      fetch : false,
      startOfWeek : ha.i18n.startOfWeek,
      language : ha.i18n.calendar,
      dateFormat : ha.i18n.dateFormats.shortDate
    });
    this.window.on("resize", this.adjustNumberOfMonths);
    this.listenTo(cycle, "change:startDate", this.scrollToDate);
  },
  /**
   * @return {undefined}
   */
  adjustNumberOfMonths : function() {
    var r20 = this.determineNumberOfMonths(this.$el.outerWidth());
    if (r20 !== this.numberOfMonths) {
      this.numberOfMonths = r20;
      this.$("#populatedCalendars").datepicker("option", "numberOfMonths", r20);
    }
  },
  /**
   * @param {number} dataAndEvents
   * @return {?}
   */
  determineNumberOfMonths : function(dataAndEvents) {
    return 871 <= dataAndEvents ? [2, 3] : 700 <= dataAndEvents ? [2, 2] : 525 <= dataAndEvents ? [1, 2] : [1, 1];
  },
  /**
   * @param {Date} date
   * @return {undefined}
   */
  scrollToDate : function(date) {
    date = date.changedAttributes().startDate ? ha.util.datepicker.newStandardDate(date.changedAttributes().startDate) : new Date;
    this.$("#populatedCalendars").datepicker("setDate", this._normalizeDate(date));
  },
  /**
   * @return {undefined}
   */
  showNextMonths : function() {
    this.changeMonth(this.numberOfMonths[0] * this.numberOfMonths[1]);
  },
  /**
   * @return {undefined}
   */
  showPreviousMonths : function() {
    this.changeMonth(-(this.numberOfMonths[0] * this.numberOfMonths[1]));
  },
  /**
   * @param {number} offset
   * @return {undefined}
   */
  changeMonth : function(offset) {
    var date = this._normalizeDate(this.$("#populatedCalendars").datepicker("getDate"));
    date.setMonth(date.getMonth() + offset);
    this.$("#populatedCalendars").datepicker("setDate", date);
  },
  /**
   * @param {Date} date
   * @return {?}
   */
  _normalizeDate : function(date) {
    return date ? new Date(date.getFullYear(), date.getMonth(), 1) : date;
  }
});
ha = ha || {
  backbone : {
    Views : {
      PropertyPage : {}
    }
  }
};
ha.backbone.Views.PropertyPage.PriceBarView = Backbone.View.extend({
  emailOwnerButton : this.$(".js-emailOwnerButton"),
  tripsRateSchedule : null,
  hasChangeoverError : false,
  events : {
    "click #ybi-bookitnow-button" : "yesBookIt"
  },
  /**
   * @param {Object} options
   * @return {undefined}
   */
  initialize : function(options) {
    _.bindAll(this);
    _.extend(this, _.pick(options, "blockInquiriesBookedDates", "unit", "olbModel", "quoteModel", "flexibleInquiryDates", "isPreviewMode"));
    if (!this.isPreviewMode) {
      this.displayYesBookIt = ha.features.bookingOptions.yesBookIt && this.unit.get(this.unit.keys.isYesBookIt);
      this.displayClearstay = ha.features.bookingOptions.clearStay && this.unit.get(this.unit.keys.clearstay);
      if (this.olbModel && this.quoteModel) {
        this.initializeForQuotableRates();
      } else {
        this.initializeForTripsRates();
      }
      if (this.displayClearstay) {
        ha.clearstay.init();
        if (true == $(this.el).data("launcholbmodal")) {
          this.$(".clearstay-booking-button").click();
        }
      }
      if ("undefined" !== typeof accounting) {
        accounting.settings.currency = ha.i18n.currency;
        accounting.settings.number = ha.i18n.number;
      }
      this.initializeDateFieldsView();
    }
  },
  /**
   * @return {undefined}
   */
  initializeDateFieldsView : function() {
    var elem = this.unit;
    var options = elem.keys;
    var _self = ha.backbone.Models.pdpAvailability;
    startCalendarDate = ha.util.datepicker.newStandardDate(_self.get("startDate"));
    endCalendarDate = ha.util.datepicker.newStandardDate(_self.get("endDate"));
    this.datepickersView = new ha.backbone.Views.DatepickerPairView({
      el : this.$(".dates-group"),
      startDate : startCalendarDate,
      endDate : endCalendarDate,
      calendarData : this.calendarData,
      availabilityUpdated : elem.get(options.availabilityUpdated),
      isQuotable : elem.get(options.isOLB) || elem.get(options.quotableInquiries),
      maxCalendarInactiveAge : ha.features.maxCalendarInactiveAge
    });
    if (768 <= $(window).width()) {
      this.datepickersView.bind("datesValidated", this.handleDatesValidation);
    }
    this.datepickersView.render();
  },
  /**
   * @param {?} mom
   * @return {undefined}
   */
  addReservations : function(mom) {
    this.calendarData = mom;
    this.datepickersView.addReservations(mom);
  },
  /**
   * @param {Object} _xhr
   * @return {undefined}
   */
  handleDatesValidation : function(_xhr) {
    this.resetButtons();
    if (_xhr && "minimum-stay-not-met" === _xhr.state) {
      this.$(".btn.viewRateDetails").attr("disabled", "");
    } else {
      if (this.displayYesBookIt) {
        this.$("#ybi-bookitnow-button").button("enable");
      }
    }
  },
  /**
   * @return {undefined}
   */
  initializeForQuotableRates : function() {
    this.listenTo(this.quoteModel, "request", this.showQuoteSpinner);
    this.listenTo(this.quoteModel, "sync", this.updateQuote);
    if (true === this.validateDates()) {
      this.quoteModel.fetch();
    }
    if (0 < $(".js-guestPickerView").length) {
      this.guestPickerView = new ha.backbone.Views.PropertyPage.GuestPickerView({
        el : ".js-guestPickerView",
        quoteModel : this.quoteModel,
        olbModel : this.olbModel,
        unit : this.unit
      });
    }
  },
  /**
   * @return {undefined}
   */
  initializeForTripsRates : function() {
    var map = this.unit;
    var options = map.keys;
    map = {
      propertyId : map.get(options.property).uid,
      unitId : map.get(options.unitId)
    };
    this.tripsRateSchedule = new ha.backbone.Models.Rates.TripsRateSchedule(map);
    this.tripsRateSchedule.fetch({
      success : this.updateTripsPrice
    });
    this.listenTo(ha.backbone.Models.pdpAvailability, "change:startDate", this.updateTripsPrice);
    this.listenTo(ha.backbone.Models.pdpAvailability, "change:endDate", this.updateTripsPrice);
  },
  /**
   * @return {?}
   */
  validateDates : function() {
    var top = ha.backbone.Models.pdpAvailability.get("startDate");
    var bottom = ha.backbone.Models.pdpAvailability.get("endDate");
    return top && bottom ? (top = ha.backbone.Models.pdpAvailability.validate()) && ("unavailable" === top.state || ("minimum-stay-not-met" === top.state || "invalid-changeover" === top.state)) ? top : true : false;
  },
  /**
   * @return {?}
   */
  hasQuoteDatesError : function() {
    return this.quoteModel && (this.quoteModel.get("errorString") && (this.quoteModel.get("errorString").length && "dates" === this.quoteModel.get("errorType")));
  },
  /**
   * @param {string} newName
   * @param {string} cycle
   * @param {?} dataAndEvents
   * @return {undefined}
   */
  renderDatesError : function(newName, cycle, dataAndEvents) {
    var layer = this.$(".js-quotebarDatesWrapper");
    var elm = this.$(".js-quotebarMessagingLabel");
    /** @type {boolean} */
    var j = 1 > this.$(".js-detailedQuoteForm:visible").length;
    layer.addClass(newName);
    elm.text(cycle);
    if (j) {
      this.datepickersView.showDatesGroupPopover(dataAndEvents);
    }
    this.$(".btn.viewRateDetails").prop("disabled", "");
  },
  /**
   * @return {undefined}
   */
  resetButtons : function() {
    this.emailOwnerButton.removeAttr("disabled");
    this.$(".btn.viewRateDetails").removeAttr("disabled");
    if (this.displayYesBookIt) {
      this.$("#ybi-bookitnow-button").attr("disabled", "disabled");
    }
  },
  /**
   * @return {undefined}
   */
  sizePriceContainer : function() {
    var layer = this.$(".js-priceContainer");
    var target = layer.attr("style");
    if (!(target && 0 < target.indexOf("width"))) {
      height = layer.height();
      width = layer.width();
      layer.css({
        height : height + "px",
        width : width + "px"
      });
    }
  },
  /**
   * @return {undefined}
   */
  showQuoteSpinner : function() {
    this.sizePriceContainer();
    this.$(".js-fromPriceContainer, .js-quoteContainer, .js-quoteContents").hide();
    this.$(".price-quote-loader").addClass("in");
  },
  /**
   * @return {undefined}
   */
  resetToDefaultPriceFrom : function() {
    this.$(".js-priceContainer").removeAttr("style");
    this.$(".js-quoteContainer, .js-quoteContents").hide();
    this.showFromPriceContainer();
  },
  /**
   * @return {undefined}
   */
  showFromPriceContainer : function() {
    this.$(".js-fromPriceContainer").fadeIn().css("display", "inline-block");
  },
  /**
   * @return {undefined}
   */
  updateQuote : function() {
    var tr = this.quoteModel.get("errorString");
    var errorType = this.quoteModel.get("errorType");
    var rvar = this.quoteModel.get("total");
    var cb = this.quoteModel.get("olbData").get("exactQuote");
    this.$(".js-priceContainer").removeAttr("style");
    this.resetButtons();
    if (this.hasQuoteDatesError()) {
      this.datepickersView.removeDateValidationFromView();
      this.renderDatesError("error", ha.strings.pricebar.dateFieldLabel, tr);
    }
    this.$(".js-fromPriceContainer, .js-quoteContainer, .js-quoteContents, .price-quote-loader").removeClass("in");
    if (tr && tr.length) {
      if ("dates" === errorType) {
        this.showFromPriceContainer();
      } else {
        if ("general" === errorType) {
          this.showFromPriceContainer();
          this.renderDatesError("error", ha.strings.pricebar.dateFieldLabel, tr);
        } else {
          this.$(".js-quoteContainer").fadeIn().css("display", "inline-block");
        }
      }
    } else {
      if (rvar) {
        tr = cb ? jQuery.validator.format(ha.strings.pricebar.total, ha.backbone.Models.pdpAvailability.getNumberOfNights()) : ha.strings.pricebar.totalExcludesFees;
        this.$(".js-priceTotalLabel").html(tr);
        this.$(".js-priceTotalValue").html(rvar);
        this.$(".js-quoteContainer").fadeIn().css("display", "inline-block");
        if (this.$(".js-quoteContents")) {
          this.$(".js-quoteContents").fadeIn();
        }
      } else {
        this.showFromPriceContainer();
      }
    }
  },
  /**
   * @return {undefined}
   */
  updateTripsPrice : function() {
    var state = ha.backbone.Models.pdpAvailability.get("startDate");
    var result = ha.backbone.Models.pdpAvailability.get("endDate");
    var me = this.tripsRateSchedule.get("ratePeriods");
    if (state) {
      if (result && (me && !me.isEmpty())) {
        state = ha.util.datepicker.newStandardDate(state);
        result = ha.util.datepicker.newStandardDate(result);
        result = me.findRateRange(state, result);
        if (!result.min) {
          result = me.findRateRange(null, null);
        }
        if (result) {
          if (result.min.get(result.period)) {
            me = result.min.get(result.period);
            this.$(".js-fromPriceValue").text(accounting.formatMoney(me.amount, this.tripsRateSchedule.get("quotedCurrency").displaySymbol));
            this.$(".js-fromPriceLabel").text(ha.strings.pricebar.rates[result.period]);
          }
        }
      }
    }
  },
  /**
   * @return {undefined}
   */
  yesBookIt : function() {
    ha.page.property.yesbookit.modal();
  },
  /**
   * @param {?} dataAndEvents
   * @param {Event} deepDataAndEvents
   * @return {undefined}
   */
  showDatesGroupPopoverBasedOnDates : function(dataAndEvents, deepDataAndEvents) {
    var _self = ha.backbone.Models.pdpAvailability;
    var startDay = _self.get("startDate");
    _self = _self.get("endDate");
    if (!startDay || !_self) {
      if (deepDataAndEvents) {
        deepDataAndEvents.stopPropagation();
      }
      this.datepickersView.showDatesGroupPopover(dataAndEvents);
    }
  },
  /**
   * @param {Event} deepDataAndEvents
   * @return {undefined}
   */
  quoteFormViewShown : function(deepDataAndEvents) {
    this.showDatesGroupPopoverBasedOnDates(ha.strings.pricebar.datesRequiredQuote, deepDataAndEvents);
  },
  /**
   * @return {undefined}
   */
  quoteFormViewCollapsed : function() {
  }
});
ha = ha || {
  backbone : {
    Views : {}
  }
};
ha.backbone.Views.BCEFooterView = Backbone.View.extend({
  events : {
    "shown .js-toggleViewMoreSites" : "shownFooterSites",
    "hidden .js-toggleViewMoreSites" : "hiddenFooterSites"
  },
  /**
   * @return {undefined}
   */
  initialize : function() {
    _.bindAll(this);
  },
  /**
   * @return {undefined}
   */
  shownFooterSites : function() {
    var elem = this.$(".js-toggleMoreSitesTxt");
    elem.text(elem.data("hiddentxt"));
  },
  /**
   * @return {undefined}
   */
  hiddenFooterSites : function() {
    var elem = this.$(".js-toggleMoreSitesTxt");
    elem.text(elem.data("showntxt"));
  }
});
ha = ha || {
  util : {}
};
ha.util = ha.util || {};
ha.util.analytics = {
  /**
   * @return {undefined}
   */
  init : function() {
    /** @type {Window} */
    var container = window;
    var clientTop = container.ha.timestampDocumentLoaded;
    /**
     * @return {undefined}
     */
    var render = function() {
      /** @type {Array} */
      var a1 = ["_trackTiming"].concat(Array.prototype.slice.call(arguments));
      if (container._gas) {
        container._gas.push.call(container._gas, a1);
      } else {
        /** @type {number} */
        var poll = setInterval(function() {
          if (container._gas) {
            clearInterval(poll);
            container._gas.push.call(container._gas, a1);
          }
        }, 300)
      }
    };
    ha.backbone.Events.on("cta_bound", function(cl) {
      /** @type {number} */
      var top = (new Date).getTime() - clientTop;
      render("cta_bound", cl, top);
    });
  }
};
ha = ha || {
  util : {}
};
ha.util = ha.util || {};
ha.util.datepicker = {
  /**
   * @return {undefined}
   */
  init : function() {
    $.datepicker.regional.custom = {
      closeText : ha.i18n.calendar.closeText,
      prevText : ha.i18n.calendar.prevText,
      nextText : ha.i18n.calendar.nextText,
      currentText : ha.i18n.calendar.currentText,
      clearText : ha.i18n.calendar.clearText,
      monthNames : ha.i18n.calendar.monthNames,
      monthNamesShort : ha.i18n.calendar.monthNamesShort,
      dayNames : ha.i18n.calendar.dayNames,
      dayNamesShort : ha.i18n.calendar.dayNamesShort,
      dayNamesMin : ha.i18n.calendar.dayNamesMin,
      weekHeader : ha.i18n.calendar.weekHeader,
      dateFormat : ha.i18n.dateFormats.shortDate,
      firstDay : ha.i18n.startOfWeek,
      isRTL : false,
      showMonthAfterYear : false,
      showButtonPanel : true,
      yearSuffix : ""
    };
    $.datepicker.setDefaults($.datepicker.regional.custom);
    if (ha.abtests.responsivePdp) {
      $(".datepicker").not(".hasDatepicker").each(function() {
        var $target = $(this);
        if ($target.hasClass("datepicker-start") && !$target.hasClass("js-singleDatepicker")) {
          var value;
          var endCalendarDate;
          /** @type {string} */
          var option = "#" + $target.parents("form").attr("id") + " .datepicker-end";
          if ($target.val()) {
            value = ha.util.datepicker.newStandardDate(ha.util.datepicker.localDateStringtoISO8601($target.val()));
          }
          if ($(option).val()) {
            endCalendarDate = ha.util.datepicker.newStandardDate(ha.util.datepicker.localDateStringtoISO8601($(option).val()));
          }
          $target.calendar({
            minDate : 0,
            fetch : false,
            endCalendar : option,
            hoverClass : ha.config.calendar.fullSelectedClass,
            hoverClassStart : ha.config.calendar.fullSelectedClass,
            hoverClassEnd : ha.config.calendar.fullSelectedClass,
            showButtonPanel : true,
            startCalendarDate : value,
            endCalendarDate : endCalendarDate,
            startOfWeek : ha.i18n.startOfWeek,
            language : ha.i18n.calendar,
            dateFormat : ha.i18n.dateFormats.shortDate
          });
        } else {
          if (!$target.hasClass("datepicker-end")) {
            /** @type {boolean} */
            value = 0 < $target.parents("#reviewForm").length;
            $target.calendar({
              minDate : value ? "-1y" : null,
              maxDate : value ? "-1" : null,
              fetch : false,
              showButtonPanel : true,
              startOfWeek : ha.i18n.startOfWeek,
              language : ha.i18n.calendar,
              dateFormat : ha.i18n.dateFormats.shortDate
            });
          }
        }
      });
    } else {
      if (ha.util.isTouchDevice()) {
        $("body").on("click", ".ui-datepicker-calendar .ui-datepicker-td.ui-datepicker-unselectable", ha.util.datepicker.hoverRangeInit);
      } else {
        $("body").on("mouseenter", ".ui-datepicker-calendar .ui-datepicker-td", ha.util.datepicker.hoverRangeInit);
        $("body").on("mouseleave", ".ui-datepicker-calendar .ui-datepicker-td", function() {
          var $field = $(".hoverRange");
          $field.removeClass("hoverRange");
          $field.removeClass("hoverRangeError");
          $field.removeClass("minStayError");
          if ($.fn.qtip) {
            $(this).qtip("destroy");
            $(".qtip").remove();
          }
        });
      }
      if (void 0 === ha.backbone.Models.pdpAvailability) {
        ha.backbone.Models.pdpAvailability = new ha.backbone.Models.PDPAvailability({
          minimumStay : ha.util.datepicker.calendarMinStayJSON,
          availability : ha.util.datepicker.calendarAvailabilityJSON,
          startDate : ha.util.datepicker.startDate,
          endDate : ha.util.datepicker.endDate
        });
      }
      $("form").each(function() {
        var form = $(this);
        var input = $(".datepicker-start", form);
        var $input = $(".datepicker-end", form);
        if (input.length > 0 && $input.length > 0) {
          $(".datepicker").each(function() {
            $(this).data("previous_value", $(this).val());
          });
          input.datepicker({
            showAnim : "",
            minDate : 0,
            /**
             * @param {Element} element
             * @return {undefined}
             */
            beforeShow : function(element) {
              ha.backbone.Models.pdpAvailability.set({
                isHoveringDatepickerActive : false
              });
              /** @type {boolean} */
              var hasPopulatedDatepicker = $(element).closest("#keywordSearchForm-responsive").length > 0;
              ha.backbone.Models.pdpAvailability.set({
                hasPopulatedDatepicker : !hasPopulatedDatepicker
              });
              if ($(element).data("blocked") === true || (element.id == "bookitnow-startDateInput" || (element.id == "bookitnow-endDateInput" || (element.id == "bookitnow-modal-startDateInput" || element.id == "bookitnow-modal-endDateInput")) || $("#pdp-container").hasClass("hasBlockedInquiries"))) {
                $("#ui-datepicker-div").addClass("hasBlockedInquiries");
                ha.backbone.Models.pdpAvailability.set({
                  hasBlockedDatepicker : true
                });
              } else {
                $("#ui-datepicker-div").removeClass("hasBlockedInquiries");
                ha.backbone.Models.pdpAvailability.set({
                  hasBlockedDatepicker : false
                });
              }
              if ($("body").hasClass("hasBlockedInquiriesForBookedDatesOnly")) {
                $("#ui-datepicker-div").addClass("hasBlockedInquiriesForBookedDatesOnly");
                ha.backbone.Models.pdpAvailability.set({
                  hasBlockedInquiriesForBookedDatesOnly : true
                });
              } else {
                $("#ui-datepicker-div").removeClass("hasBlockedInquiriesForBookedDatesOnly");
                ha.backbone.Models.pdpAvailability.set({
                  hasBlockedInquiriesForBookedDatesOnly : false
                });
              }
              setTimeout(function() {
                if ($(element).parents("#simplemodal-container").length > 0) {
                  var pickWinTop = $(".simplemodal-data").position().top + $(element).position().top + $(element).outerHeight(true) + 15;
                  $("#ui-datepicker-div").css({
                    top : pickWinTop
                  });
                }
                $("#ui-datepicker-div").css({
                  zIndex : 15E5
                });
              }, 10);
            },
            /**
             * @return {undefined}
             */
            onSelect : function() {
              var $target = $(this);
              if (!$target.val()) {
                $input.val("");
              }
              var cycle = ha.util.datepicker.localDateStringtoISO8601($target.val());
              ha.backbone.Models.pdpAvailability.set("startDate", cycle);
              ha.util.datepicker.startDate = cycle;
              ha.util.datepicker.startDateDaysOfYear = ha.util.datepicker.convertToDayYear(cycle);
              ha.util.datepicker.updateDates($target);
            },
            /**
             * @return {undefined}
             */
            onClose : function() {
              var selected = $(this);
              var optgroup = selected.val();
              if (optgroup) {
                if (selected.attr("rel") != optgroup && selected.data("previous_value") != optgroup) {
                  setTimeout('$("#' + $input.attr("id") + '").focus()', 1);
                }
              }
              selected.data("previous_value", optgroup);
              $(".qtip").remove();
              if (ha.util.datepicker.startDate === "" && ha.util.datepicker.endDate === "") {
                $(".datepicker-error").text("");
                $(".inquiry-date-group.control-group.warning").removeClass("warning");
              }
            },
            beforeShowDay : ha.util.datepicker.beforeShowDateStartDatepicker,
            showOtherMonths : true,
            selectOtherMonths : true
          });
          $input.datepicker({
            showAnim : "",
            minDate : 1,
            /**
             * @param {Element} element
             * @return {undefined}
             */
            beforeShow : function(element) {
              /** @type {boolean} */
              var hasPopulatedDatepicker = $(element).closest("#keywordSearchForm-responsive").length > 0;
              ha.backbone.Models.pdpAvailability.set({
                hasPopulatedDatepicker : !hasPopulatedDatepicker
              });
              if ((hasPopulatedDatepicker = $(element).data("blocked") === true || (element.id == "bookitnow-startDateInput" || (element.id == "bookitnow-endDateInput" || (element.id == "bookitnow-modal-startDateInput" || element.id == "bookitnow-modal-endDateInput")))) || $("#pdp-container").hasClass("hasBlockedInquiries")) {
                $("#ui-datepicker-div").addClass("hasBlockedInquiries");
                ha.backbone.Models.pdpAvailability.set({
                  hasBlockedDatepicker : true
                });
              } else {
                $("#ui-datepicker-div").removeClass("hasBlockedInquiries");
                ha.backbone.Models.pdpAvailability.set({
                  hasBlockedDatepicker : false
                });
              }
              if ($("body").hasClass("hasBlockedInquiriesForBookedDatesOnly")) {
                $("#ui-datepicker-div").addClass("hasBlockedInquiriesForBookedDatesOnly");
                ha.backbone.Models.pdpAvailability.set({
                  hasBlockedInquiriesForBookedDatesOnly : true
                });
              } else {
                $("#ui-datepicker-div").removeClass("hasBlockedInquiriesForBookedDatesOnly");
                ha.backbone.Models.pdpAvailability.set({
                  hasBlockedInquiriesForBookedDatesOnly : false
                });
              }
              if (hasPopulatedDatepicker) {
                $("#ui-datepicker-div").addClass("olbDatePicker");
              }
              ha.backbone.Models.pdpAvailability.set({
                isHoveringDatepickerActive : true
              });
              setTimeout(function() {
                if ($(element).parents("#simplemodal-container").length > 0) {
                  var pickWinTop = $(".simplemodal-data").position().top + $(element).position().top + $(element).outerHeight(true) + 15;
                  $("#ui-datepicker-div").css({
                    top : pickWinTop
                  });
                }
                $("#ui-datepicker-div").css({
                  zIndex : 15E5
                });
              }, 10);
            },
            /**
             * @return {undefined}
             */
            onSelect : function() {
              var $target = $(this);
              var pdataCur = $target.val();
              if (!pdataCur) {
                input.val("").data("previous_value", "");
              }
              ha.backbone.Models.pdpAvailability.set({
                endDate : ha.util.datepicker.localDateStringtoISO8601(pdataCur)
              });
              ha.util.datepicker.endDate = ha.util.datepicker.localDateStringtoISO8601(pdataCur);
              ha.util.datepicker.endDateDaysOfYear = ha.util.datepicker.convertToDayYear(ha.util.datepicker.endDate);
              ha.util.datepicker.pageInitCheckWithViewChanges(ha.util.datepicker.startDate, ha.util.datepicker.endDate);
              ha.util.datepicker.updateDates($target);
              if ($target.hasClass("olbModalDatePicker")) {
                ha.backbone.Events.trigger("olbModalEndSelect");
              } else {
                if ($("#ui-datepicker-div").hasClass("olbDatePicker")) {
                  ha.backbone.Events.trigger("olbDatePickerEndSelect");
                }
              }
              if ($("body.search-page").length) {
                if ($target.attr("id") === "mastHeadendDateInput") {
                  ha.backbone.Events.trigger("mastHeadendDateInputSelect");
                } else {
                  ha.page.search.update(search.baseUrl);
                }
              }
            },
            /**
             * @return {undefined}
             */
            onClose : function() {
              var $target = $(this);
              if (!input.val()) {
                if ($target.val()) {
                  setTimeout('$("#' + input.attr("id") + '").focus()', 1);
                }
              }
              ha.util.datepicker.pageInitCheckWithViewChanges(ha.util.datepicker.startDate, ha.util.datepicker.endDate);
              $(".qtip").remove();
              if (ha.util.datepicker.startDate === "" && ha.util.datepicker.endDate === "") {
                $(".datepicker-error").text("");
                $(".inquiry-date-group.control-group").addClass("warning");
              }
              if ($target.attr("id") == "mastHeadendDateInput" && $target.not(".search-page #mastHeadendDateInput").length) {
                ha.backbone.Events.trigger("mastHeadendDateInputSelect");
              } else {
                if ($target.attr("id") == "endDateInput") {
                  ha.backbone.Events.trigger("endDateInputSelectOldDatePickers");
                }
              }
            },
            beforeShowDay : ha.util.datepicker.beforeShowDateEndDatepicker,
            showOtherMonths : true,
            selectOtherMonths : true
          });
          $input.click(function() {
            var start_datepicker = ha.util.datepicker.validateEndDatepicker($(this));
            if (start_datepicker == "start_datepicker") {
              $(this).trigger("blur");
              ha.util.datepicker.other($(this), "datepicker-start").trigger("focus");
            } else {
              if (start_datepicker == "end_datepicker") {
                $(this).focus();
              }
            }
          });
        } else {
          if (input.length > 0) {
            input.datepicker({
              minDate : $(this).is("#reviewForm") ? "-1y" : null,
              maxDate : -1,
              showAnim : "",
              /**
               * @return {undefined}
               */
              onClose : function() {
                if ($(this).parents("#reviewForm").length > 0) {
                  $("#nameOnContract").focus();
                }
              }
            });
            $(".datepicker", form).change(function() {
              ha.util.datepicker.updateStartDate();
            });
          }
        }
      });
      $("#ui-datepicker-div.ui-helper-clearfix").hide();
    }
  },
  /**
   * @param {?} element
   * @return {?}
   */
  validateEndDatepicker : function(element) {
    var input = ha.util.datepicker.other(element, "datepicker-start");
    var pdataCur = input.val();
    /** @type {string} */
    var optsData = "";
    /** @type {string} */
    var value = "";
    try {
      value = ha.util.datepicker.localDateStringtoISO8601(pdataCur);
    } catch (j) {
    }
    if ("" === pdataCur || (pdataCur === input.attr("rel") || ("Invalid Date" === value || "" === value))) {
      /** @type {string} */
      optsData = "start_datepicker";
    } else {
      if (1 >= element.datepicker("option", "minDate")) {
        input = input.datepicker("getDate");
        /** @type {Date} */
        input = new Date(input.getFullYear(), input.getMonth(), input.getDate() + 1);
        element.datepicker("option", "minDate", input);
        /** @type {string} */
        optsData = "end_datepicker";
      }
    }
    return optsData;
  },
  /**
   * @param {Object} img
   * @return {?}
   */
  which : function(img) {
    return-1 < $(img).attr("class").indexOf("datepicker-start") ? "start" : -1 < $(img).attr("class").indexOf("datepicker-end") ? "end" : null;
  },
  /**
   * @param {?} el
   * @param {string} name
   * @return {?}
   */
  other : function(el, name) {
    return $(el).parents("form").find("." + name);
  },
  /**
   * @param {Object} element
   * @return {undefined}
   */
  updateDates : function(element) {
    $("#ui-datepicker-div.ui-helper-clearfix").show();
    var left = ha.util.datepicker.which(element);
    if (null == left) {
      alert("no start or end date was found");
    } else {
      var value;
      if ("start" == left) {
        /** @type {Object} */
        value = element;
        element = ha.util.datepicker.other(element, "datepicker-end");
      } else {
        value = ha.util.datepicker.other(element, "datepicker-start");
      }
      if (null == value || null == element) {
        alert("datepicker could not execute");
      } else {
        value = value.datepicker("getDate");
        var n = null != value ? value.getTime() : 0;
        var date = element.datepicker("getDate");
        var len = null != date ? date.getTime() : 0;
        if ("start" == left && n > len) {
          date = value;
          date.setDate(value.getDate() + 1);
          if (len <= n) {
            element.datepicker("setDate", date);
          }
          element.datepicker("option", "minDate", date);
          element.change();
        } else {
          if (null != value) {
            value.setDate(value.getDate() + 1);
            element.datepicker("option", "minDate", value);
            element.change();
          }
        }
        $(".datepicker").each(function() {
          if ($(this).val() && $(this).val() == $(this).attr("rel")) {
            $(this).addClass("default");
          } else {
            $(this).removeClass("default");
          }
        });
      }
    }
  },
  /**
   * @return {undefined}
   */
  updateStartDate : function() {
    $("#ui-datepicker-div.ui-helper-clearfix").css("display", "block");
    if ("undefined" != typeof $("#startDateInput").attr("rel")) {
      if ($("#startDateInput").val() != $("#startDateInput").attr("rel")) {
        $("#startDateInput").removeClass("default");
      }
    }
  },
  /**
   * @return {undefined}
   */
  addDefaultDates : function() {
    var pdataCur = ha.json.cookie.parse("ha-qp-sess").searchURL;
    if (pdataCur) {
      var pdataOld = ha.util.datepicker.formatDateFromUrl(pdataCur, "arrival");
      if (pdataOld) {
        $(".datepicker-start").not(".datepicker-start#mastHeadstartDateInput").attr("value", pdataOld);
      }
      if (pdataCur = ha.util.datepicker.formatDateFromUrl(pdataCur, "departure")) {
        $(".datepicker-end").not(".datepicker-end#mastHeadendDateInput").attr("value", pdataCur);
      }
    }
  },
  /**
   * @param {string} arg
   * @return {?}
   */
  formatDateFromISO8601ToMedium : function(arg) {
    if (!arg) {
      return arg;
    }
    arg = arg.match(/([0-9]+)-([0-9]+)-([0-9]+)/);
    var format = ha.i18n.dateFormats.mediumDate;
    format = format.replace("yy", arg[1]);
    format = format.replace("mm", arg[2]);
    format = format.replace("MM", ha.i18n.calendar.monthNamesShort[arg[2] - 1]);
    return format = format.replace("dd", arg[3]);
  },
  /**
   * @param {string} s
   * @return {?}
   */
  formatDateFromISO8601ToMonthNameYear : function(s) {
    if (!s) {
      return s;
    }
    s = s.match(/([0-9]+)-([0-9]+)-([0-9]+)/);
    var format = brandDateFormat.javaDateInputPattern;
    format = format.replace(/\//g, " ");
    format = format.replace("yyyy", s[1]);
    format = format.replace(/mm/i, ha.i18n.calendar.monthNamesShort[s[2] - 1]);
    return format = format.replace("dd", "");
  },
  /**
   * @param {string} replacement
   * @return {?}
   */
  formatDateFromISO8601ToLocal : function(replacement) {
    if (!replacement) {
      return replacement;
    }
    replacement = replacement.match(/([0-9]+)-([0-9]+)-([0-9]+)/);
    var format = brandDateFormat.javaDateInputPattern;
    format = format.replace("yyyy", replacement[1]);
    format = format.replace(/mm/i, replacement[2]);
    return format = format.replace("dd", replacement[3]);
  },
  /**
   * @param {string} data
   * @param {string} i
   * @return {?}
   */
  formatDateFromUrl : function(data, i) {
    if (-1 != data.indexOf(i + ":")) {
      var replacement = data.match(RegExp(i + ":([0-9]+)-([0-9]+)-([0-9]+)"));
      var format = brandDateFormat.javaDateInputPattern;
      format = format.replace("yyyy", replacement[1]);
      format = format.replace(/mm/i, replacement[2]);
      return format = format.replace("dd", replacement[3]);
    }
  },
  /**
   * @param {string} data
   * @param {string} i
   * @return {?}
   */
  formatDateFromUrlISO8601 : function(data, i) {
    if (-1 != data.indexOf(i + ":")) {
      var dateElements = data.match(RegExp(i + ":([0-9]+)-([0-9]+)-([0-9]+)"));
      return dateElements[1] + "-" + dateElements[2] + "-" + dateElements[3];
    }
  },
  /**
   * @param {?} data
   * @return {?}
   */
  localDateStringtoISO8601 : function(data) {
    if (!data) {
      return data;
    }
    /** @type {string} */
    var query = "yyyy-MM-dd";
    data = data.match(/(\d+)/g);
    var codeSegments = brandDateFormat.javaDateInputPattern.split("/");
    /** @type {number} */
    var i = 0;
    for (;i < codeSegments.length;i++) {
      /** @type {string} */
      query = query.replace(codeSegments[i], data[i]);
    }
    return query;
  },
  calendarAvailabilityJSON : {},
  calendarMinStayJSON : {},
  /**
   * @param {Object} node
   * @return {undefined}
   */
  drawHoverRange : function(node) {
    /** @type {number} */
    var i = 0;
    for (;i <= node.range.length;i++) {
      $(".dayOfYear-" + node.range[i]).addClass("hoverRange");
    }
    if ("unavailable" === node.state) {
      $(".hoverRange").addClass("hoverRangeError");
    }
    if ("minimum-stay-not-met" === node.state) {
      $(".hoverRange").addClass("minStayError");
      if (0 < node.range.length) {
        $(".dayOfYear-" + node.range[node.range.length - 1]).addClass("minStayBlock unavailable");
      }
    }
  },
  /**
   * @param {Event} event
   * @return {undefined}
   */
  hoverRangeInit : function(event) {
    var result = {};
    var method = $(this).attr("class").match(/datepicker-(\d{4}-\d{1,2}-\d{1,2})/)[1];
    /** @type {number} */
    var p = parseInt($(this).attr("class").match(/dayOfYear-(\d{1,3})/)[1] || -1, 10);
    /** @type {string} */
    var fix = "";
    /** @type {string} */
    var ready = "";
    if (ha.backbone.Models.pdpAvailability.get("isHoveringDatepickerActive")) {
      p = ha.util.datepicker.newStandardDate(ha.util.datepicker.startDate);
      method = ha.util.datepicker.newStandardDate(method);
      if (void 0 != p) {
        if (void 0 != method) {
          result = ha.backbone.Models.pdpAvailability.validateHoverRange(p, method, 1);
          ha.util.datepicker.drawHoverRange(result);
        }
      }
    } else {
      p = $(".dayOfYear-" + p);
      method = ha.util.datepicker.newStandardDate(method);
      if (void 0 != method) {
        result = ha.backbone.Models.pdpAvailability.validateHoverRange(method, method);
      }
      if (p.hasClass("hasMinStay")) {
        p.attr("class").match(/minStay-(\d{1,3})/);
      }
    }
    if ($.fn.qtip) {
      /** @type {number} */
      $.fn.qtip.zindex = 16E5;
      $(".date-section").removeClass("active");
      var $link = $(this);
      $link.qtip({
        content : " ",
        show : {
          event : event.type,
          ready : true,
          solo : true
        },
        hide : {
          event : "mouseout"
        },
        position : {
          my : "bottom right",
          at : "top left",
          /**
           * @return {?}
           */
          target : function() {
            return $(".hoverRange.unavailable").first();
          }
        },
        events : {
          /**
           * @param {string} type
           * @param {Function} name
           * @return {undefined}
           */
          show : function(type, name) {
            if ($link.hasClass("pastDate")) {
              try {
                type.preventDefault();
              } catch (d) {
              }
              $(".datepicker-error").text("");
              $(".inquiry-date-group.control-group.warning").removeClass("warning");
            } else {
              if ($link.hasClass("changeoverday")) {
                /** @type {number} */
                var cycle = ha.backbone.Models.pdpAvailability.calculateChangeoverDay(result.startDate) - 1;
                cycle = jQuery.validator.format(ha.strings.datepicker.changeOverError, ha.i18n.calendar.dayNames[cycle]);
                name.set("content.text", cycle);
                $(".datepicker-error").text(cycle);
                $(".inquiry-date-group.control-group").addClass("warning");
              } else {
                if ($link.hasClass("unavailable") && (result.state != void 0 && result.startDate == result.endDate)) {
                  name.set("content.text", ha.strings.datepicker.unavailableNight);
                  $(".datepicker-error").text(ha.backbone.Models.pdpAvailability.get("hasBlockedInquiriesForBookedDatesOnly") || $("body").hasClass("hasBlockedInquiries") ? ha.strings.datepicker.sidebarUnavailableNightBlocked : ha.strings.datepicker.sidebarUnavailableNight);
                  $(".inquiry-date-group.control-group").addClass("warning");
                } else {
                  if (result.state != void 0 && result.state === "unavailable") {
                    name.set("content.text", ha.strings.datepicker.unavailableNightHoverRange);
                    $(".datepicker-error").text(ha.backbone.Models.pdpAvailability.get("hasBlockedInquiriesForBookedDatesOnly") || $("body").hasClass("hasBlockedInquiries") ? ha.strings.datepicker.sidebarUnavailableNightBlocked : ha.strings.datepicker.sidebarUnavailableNight);
                    $(".inquiry-date-group.control-group").addClass("warning");
                  } else {
                    if ($link.hasClass("minStayError")) {
                      fix = jQuery.validator.format(ha.strings.datepicker.minimumStayHoverRange, result.minstay) || ha.strings.datepicker.minimumStayHoverRange;
                      ready = jQuery.validator.format(ha.strings.datepicker.sidebarMinimumStay, result.minstay) || ha.strings.datepicker.sidebarMinimumStay;
                      $(".datepicker-error").text(ready);
                      name.set("content.text", fix);
                      $(".datepicker-error").text(fix);
                      $(".inquiry-date-group.control-group").addClass("warning");
                    } else {
                      try {
                        type.preventDefault();
                      } catch (r) {
                      }
                      $(".datepicker-error").text("");
                      $(".inquiry-date-group.control-group.warning").removeClass("warning");
                    }
                  }
                }
              }
            }
          }
        }
      });
    }
  },
  /**
   * @param {string} isXML
   * @return {?}
   */
  convertToDayYear : function(isXML) {
    return Math.round($.datepicker.formatDate("o", ha.util.datepicker.newStandardDate(isXML)));
  },
  /**
   * @param {string} isXML
   * @return {?}
   */
  convertToStandardDateString : function(isXML) {
    return $.datepicker.formatDate("yy-mm-dd", ha.util.datepicker.newStandardDate(isXML));
  },
  /**
   * @param {string} value
   * @return {?}
   */
  newStandardDate : function(value) {
    if (void 0 != value && (value = value.match(/(\d+)/g), null != value && 3 <= value.length)) {
      return new Date(value[0], value[1] - 1, value[2]);
    }
  },
  startDateDaysOfYear : "",
  endDateDaysOfYear : "",
  startDate : "",
  endDate : "",
  /**
   * @param {Date} value
   * @return {?}
   */
  beforeShowDateStartDatepicker : function(value) {
    var data = ha.backbone.Models.pdpAvailability.validateDate(value);
    /** @type {string} */
    var camelKey = "ui-datepicker-td datepicker-" + data.dateString + " dayOfYear-" + data.dayOfYear;
    if (0 < data.minimumStay) {
      /** @type {string} */
      camelKey = camelKey + " hasMinStay minStay-" + data.minimumStay;
    }
    if (data.isPastDay) {
      camelKey += " pastDate";
    }
    if (data.changeoverDay) {
      if (data.changeoverDay - 1 !== value.getDay()) {
        camelKey += " changeoverday";
      }
    }
    /** @type {string} */
    camelKey = data.isAvailable ? camelKey + " available" : camelKey + " unavailable";
    if (ha.util.datepicker.startDateDaysOfYear == data.dayOfYear) {
      camelKey += " datepicker-select-start";
    }
    return ha.util.datepicker.calculateAvailability(data.dateString, camelKey);
  },
  /**
   * @param {Date} d
   * @return {?}
   */
  beforeShowDateEndDatepicker : function(d) {
    var data;
    var base;
    /** @type {Date} */
    var value = new Date(d);
    value.setDate(value.getDate() - 1);
    $.datepicker.formatDate("o", d);
    var pdataOld = $.datepicker.formatDate("yy-mm-dd", value);
    data = ha.backbone.Models.pdpAvailability.validateDate(d);
    var options = ha.backbone.Models.pdpAvailability.validateDate(value);
    /** @type {string} */
    var month = "ui-datepicker-td datepicker-" + data.dateString + " dayOfYear-" + data.dayOfYear;
    if (0 < options.minimumStay) {
      /** @type {string} */
      month = month + " hasMinStay minStay-" + options.minimumStay;
    }
    if (data.isPastDay) {
      month += " pastDate";
    }
    /** @type {string} */
    month = options.isAvailable ? month + " available" : month + " unavailable";
    if (ha.util.datepicker.startDateDaysOfYear == data.dayOfYear) {
      month += " datepicker-select-start";
    }
    options = ha.util.datepicker.startDate;
    if ("" != options && (base = ha.util.datepicker.endDate, "" != base && (data = ha.util.datepicker.newStandardDate(options), base = ha.util.datepicker.newStandardDate(base), data.getTime() <= value.getTime() && (base.getTime() > value.getTime() && (month = "hoverRange " + month))), data = ha.util.datepicker.newStandardDate(options), base = value, void 0 != base && void 0 != data)) {
      value = ha.backbone.Models.pdpAvailability.validateHoverRange(data, base);
      if (void 0 != value.state) {
        if ("unavailable" == value.state) {
          if (ha.backbone.Models.pdpAvailability.get("hasBlockedDatepicker") || ha.backbone.Models.pdpAvailability.get("hasBlockedInquiriesForBookedDatesOnly")) {
            /** @type {string} */
            month = "blockDay " + month;
          }
        } else {
          if ("past-date" == value.state) {
            /** @type {string} */
            month = "pastDate " + month;
          }
        }
      }
      d = ha.backbone.Models.pdpAvailability.validateHoverRange(data, new Date(d), 1);
      if (void 0 != d.state) {
        if ("minimum-stay-not-met" == d.state) {
          /** @type {string} */
          month = "minStayBlock blockDay " + month;
        }
      }
    }
    return ha.util.datepicker.calculateAvailability(pdataOld, month);
  },
  /**
   * @param {?} value
   * @param {string} key
   * @return {?}
   */
  calculateAvailability : function(value, key) {
    if (-1 != key.indexOf("unavailable") || -1 != key.indexOf("blockDay")) {
      key = key.replace(" available", "");
      /** @type {boolean} */
      var c = true;
      if (ha.backbone.Models.pdpAvailability.get("hasBlockedDatepicker")) {
        /** @type {boolean} */
        c = false;
        key += " ui-datepicker-unselectable";
      }
      if (ha.backbone.Models.pdpAvailability.get("hasBlockedInquiriesForBookedDatesOnly")) {
        if (-1 == key.indexOf("minStayBlock")) {
          /** @type {boolean} */
          c = false;
          key += " ui-datepicker-unselectable";
        }
      }
      return[c, key + " unavailable"];
    }
    return[true, key + " available"];
  },
  /**
   * @param {string} isXML
   * @param {string} object
   * @return {?}
   */
  pageInitCheck : function(isXML, object) {
    var date2 = ha.util.datepicker.newStandardDate(isXML);
    var value = ha.util.datepicker.newStandardDate(object);
    if (void 0 != value && void 0 != date2) {
      return ha.util.datepicker.startDateDaysOfYear = Math.round($.datepicker.formatDate("o", date2)), ha.util.datepicker.endDateDaysOfYear = Math.round($.datepicker.formatDate("o", value)), ha.backbone.Models.pdpAvailability.validateHoverRange(date2, value, 1);
    }
  },
  /**
   * @param {?} isXML
   * @param {?} value
   * @return {undefined}
   */
  pageInitCheckWithViewChanges : function(isXML, value) {
    var cycle = ha.util.datepicker.pageInitCheck(isXML, value);
    if (cycle && "unavailable" === cycle.state) {
      $(".datepicker-error").text(cycle.message);
      $(".date-section").addClass("active");
      $(".inquiry-date-group").addClass("warning");
      $(".datepicker-error").addClass("help-block");
    } else {
      if (cycle && "minimum-stay-not-met" === cycle.state) {
        cycle = jQuery.validator.format(ha.strings.datepicker.minimumStay, cycle.minstay) || ha.strings.datepicker.minimumStay;
        $(".date-section").addClass("active");
        $(".datepicker-error").text(cycle);
        $(".inquiry-date-group").addClass("warning");
        $(".datepicker-error").addClass("help-block");
      } else {
        $(".inquiry-date-group").removeClass("warning");
        $(".datepicker-error").removeClass("help-block");
      }
    }
  }
};
ha.api = {};
/** @type {string} */
ha.api.csrfTokenName = "csrf_check";
ha.api.traveler = {
  /**
   * @param {Function} successCallback
   * @return {undefined}
   */
  getTraveler : function(successCallback) {
    ha.backbone.Models.traveler = ha.backbone.Models.traveler || new ha.backbone.Models.Traveler;
    ha.backbone.Models.traveler.fetch({
      /** @type {Function} */
      success : successCallback
    });
  },
  /**
   * @param {string} deepDataAndEvents
   * @param {string} opt_obj2
   * @param {string} walkers
   * @param {?} isXML
   * @param {Function} next_callback
   * @param {Function} next_scope
   * @return {undefined}
   */
  createFavoriteDefaultList : function(deepDataAndEvents, opt_obj2, walkers, isXML, next_callback, next_scope) {
    ha.api.traveler.getTraveler(function(dataAndEvents, result) {
      var worlds = result.labels ? result.labels.toJSON() : [];
      if (0 < worlds.length) {
        /** @type {Array} */
        var checked = [];
        checked.push(worlds[0].id);
        ha.api.traveler.favorites.createFavorite(deepDataAndEvents, checked, opt_obj2, walkers, isXML, next_callback, next_scope);
      } else {
        ha.api.traveler.createLabelAndFavorite(deepDataAndEvents, opt_obj2, walkers, isXML, ha.strings.favorites.checklist.defaultItem, next_callback, next_scope);
      }
    });
  },
  /**
   * @param {string} deepDataAndEvents
   * @param {string} opt_obj2
   * @param {string} walkers
   * @param {?} isXML
   * @param {string} m1
   * @param {Function} callback
   * @param {Function} scope
   * @return {undefined}
   */
  createLabelAndFavorite : function(deepDataAndEvents, opt_obj2, walkers, isXML, m1, callback, scope) {
    ha.api.traveler.labels.createLabel(m1, function(param) {
      ha.page.favorites.addLabelUI(param.name, param.id, 1);
      /** @type {Array} */
      var params = [];
      params.push(param.id);
      ha.api.traveler.favorites.createFavorite(deepDataAndEvents, params, opt_obj2, walkers, isXML, function(ignores) {
        ha.api.traveler.favorites.labels.addLabelAndRefresh(ignores.id, param.id, callback, scope);
      }, scope);
    }, scope);
  },
  favorites : {
    /**
     * @param {string} deepDataAndEvents
     * @param {(Array|string)} id
     * @param {string} f
     * @param {string} obj
     * @param {?} isXML
     * @param {Function} callback
     * @param {Function} scope
     * @return {undefined}
     */
    createFavorite : function(deepDataAndEvents, id, f, obj, isXML, callback, scope) {
      /** @type {Array} */
      var destroyedRecords = [];
      /** @type {number} */
      i = 0;
      for (;i < id.length;i++) {
        destroyedRecords.push({
          id : id[i]
        });
      }
      id = ha.util.guid();
      $.cookie(ha.api.csrfTokenName, id, {
        path : "/"
      });
      $.ajax({
        type : "POST",
        url : "/api/traveler/favorites",
        data : JSON.stringify({
          id : deepDataAndEvents,
          systemId : f,
          propertyId : obj,
          unitId : isXML,
          labels : destroyedRecords
        }),
        headers : {
          csrf_check : id
        },
        contentType : "application/json",
        dataType : "json",
        /** @type {Function} */
        success : callback,
        /** @type {Function} */
        error : scope
      });
    },
    /**
     * @param {string} optgroup
     * @param {string} cycle
     * @return {undefined}
     */
    editFavorite : function(optgroup, cycle) {
      var cookieVal = ha.util.guid();
      $.cookie(ha.api.csrfTokenName, cookieVal, {
        path : "/"
      });
      $.ajax({
        type : "POST",
        url : "/api/traveler/favorites/" + optgroup,
        data : {
          note : cycle
        },
        headers : {
          csrf_check : cookieVal
        },
        dataType : "json",
        /**
         * @return {undefined}
         */
        success : function() {
          var client = ha.backbone.Models.traveler;
          if (client) {
            if (client.get("favorites").get(optgroup)) {
              client.get("favorites").get(optgroup).set("note", cycle);
            }
          }
          ha.page.favorites.refreshCount();
        }
      });
    },
    labels : {
      /**
       * @param {string} name
       * @param {string} item
       * @return {undefined}
       */
      addLabel : function(name, item) {
        var cookieVal = ha.util.guid();
        $.cookie(ha.api.csrfTokenName, cookieVal, {
          path : "/"
        });
        $.ajax({
          type : "POST",
          url : "/api/traveler/favorites/" + encodeURIComponent(name) + "/labels",
          data : {
            labelId : item
          },
          headers : {
            csrf_check : cookieVal
          },
          dataType : "json",
          /**
           * @return {undefined}
           */
          success : function() {
            ha.page.favorites.refreshCount();
          }
        });
      },
      /**
       * @param {?} sectionName
       * @param {?} dataAndEvents
       * @param {Function} callback
       * @param {Function} msg
       * @return {undefined}
       */
      addLabelAndRefresh : function(sectionName, dataAndEvents, callback, msg) {
        var cookieVal = ha.util.guid();
        $.cookie(ha.api.csrfTokenName, cookieVal, {
          path : "/"
        });
        $.ajax({
          type : "POST",
          url : "/api/traveler/favorites/" + encodeURIComponent(sectionName) + "/labels",
          data : {
            labelId : dataAndEvents
          },
          headers : {
            csrf_check : cookieVal
          },
          dataType : "json",
          /**
           * @param {string} type
           * @return {undefined}
           */
          success : function(type) {
            callback(type);
          },
          /** @type {Function} */
          error : msg
        });
      },
      /**
       * @param {string} name
       * @param {string} deepDataAndEvents
       * @return {undefined}
       */
      removeLabel : function(name, deepDataAndEvents) {
        var cookieVal = ha.util.guid();
        $.cookie(ha.api.csrfTokenName, cookieVal, {
          path : "/"
        });
        $.ajax({
          type : "DELETE",
          url : "/api/traveler/favorites/" + name + "/labels/" + deepDataAndEvents,
          headers : {
            csrf_check : cookieVal
          },
          dataType : "json",
          /**
           * @return {undefined}
           */
          success : function() {
            if ($("body").hasClass("favorites") && (!$("#main").hasClass("unique-list") && ("" == $("#fav-" + name).attr("data-favorites") && !$("#fav-" + name).parents(".favorites-container").hasClass("has-note")))) {
              var elem = $("#fav-" + name).parents(".favorite-container");
              if (elem.find(".item-list").is(":visible")) {
                /** @type {number} */
                var poll = setInterval(function() {
                  if (!elem.find(".item-list").is(":visible")) {
                    if ("" == elem.find(".fn-checklist").attr("data-favorites")) {
                      if ("" == elem.find(".fn-note .display-note").html()) {
                        elem.fadeOut("slow", function() {
                        });
                      }
                    }
                    clearInterval(poll);
                  }
                }, 2E3)
              } else {
                elem.fadeOut("slow", function() {
                });
              }
            }
            ha.page.favorites.refreshCount();
          }
        });
      }
    }
  },
  labels : {
    /**
     * @param {string} text
     * @param {Function} successCallback
     * @param {Function} str
     * @return {undefined}
     */
    createLabel : function(text, successCallback, str) {
      var cookieVal = ha.util.guid();
      text = text.replace(/<br\s*[\/]?>/gi, " ");
      $.cookie(ha.api.csrfTokenName, cookieVal, {
        path : "/"
      });
      $.ajax({
        type : "POST",
        url : "/api/traveler/labels",
        data : JSON.stringify({
          name : text
        }),
        headers : {
          csrf_check : cookieVal
        },
        contentType : "application/json",
        dataType : "json",
        /** @type {Function} */
        success : successCallback,
        /** @type {Function} */
        failure : str
      });
    },
    /**
     * @param {string} i
     * @param {Function} successCallback
     * @return {undefined}
     */
    deleteLabel : function(i, successCallback) {
      var cookieVal = ha.util.guid();
      $.cookie(ha.api.csrfTokenName, cookieVal, {
        path : "/"
      });
      $.ajax({
        type : "DELETE",
        headers : {
          csrf_check : cookieVal
        },
        url : "/api/traveler/labels/" + i,
        dataType : "json",
        /** @type {Function} */
        success : successCallback
      });
    },
    /**
     * @param {(Node|string)} ids
     * @param {Function} successCallback
     * @return {?}
     */
    getAvailableFavorites : function(ids, successCallback) {
      if (ids && (ids.get("checkInDay") && ids.get("checkOutDay"))) {
        return $.ajax({
          type : "GET",
          url : "/api/traveler/labels/" + ids.get("id") + "/availability?checkInDate=" + ids.get("checkInDay") + "&checkOutDate=" + ids.get("checkOutDay"),
          dataType : "json",
          /** @type {Function} */
          success : successCallback
        });
      }
    }
  },
  /**
   * @return {undefined}
   */
  registerSuccess : function() {
    if (void 0 != s) {
      /** @type {string} */
      s.linkTrackVars = "events";
      /** @type {string} */
      s.linkTrackEvents = "event39";
      /** @type {string} */
      s.events = "event39";
      s.tl(this, "o", "register");
    }
  },
  /**
   * @param {?} systemId
   * @param {string} dataAndEvents
   * @param {?} unitId
   * @param {Function} successCallback
   * @param {Error} err
   * @return {undefined}
   */
  addInquiry : function(systemId, dataAndEvents, unitId, successCallback, err) {
    var cookieVal = ha.util.guid();
    $.cookie(ha.api.csrfTokenName, cookieVal, {
      path : "/"
    });
    $.ajax({
      type : "POST",
      url : "/api/traveler/inquiries",
      data : {
        inquiry : {
          systemId : systemId,
          propertyId : dataAndEvents,
          unitId : unitId
        }
      },
      headers : {
        csrf_check : cookieVal
      },
      dataType : "json",
      /** @type {Function} */
      success : successCallback,
      error : err
    });
  }
};
ha.page.favorites = {
  /**
   * @return {undefined}
   */
  init : function() {
    ha.page.search.initPreviewEvents();
    ha.ui.favorites.init();
    ha.ui.favorites.sidebarInit();
    var value = ha.json.cookie.parse(ha.json.qpJsonCookie(), "searchURL");
    if (null != value) {
      if (-1 != value.indexOf("?view=")) {
        value = value.substr(0, value.indexOf("?view="));
      }
      if (-1 != value.search("search")) {
        $("#list-view-button").attr("href", value + "?view=l");
        $("#grid-view-button").attr("href", value + "?view=g");
        $("#map-view-button").attr("href", value + "?view=m");
      }
    }
    $(".listing-main .content-container").click(function() {
      var href = $(this).find(".listing-url").attr("href");
      if (typeof href != "undefined") {
        window.location = href;
      }
    });
    value = ha.page.favorites.getParameter("label");
    $("." + value).parents(".favorite-label").addClass("active");
  },
  /**
   * @param {string} config
   * @param {string} m1
   * @param {Function} next_callback
   * @return {undefined}
   */
  createItem : function(config, m1, next_callback) {
    config = config.parents(".favorite-container").attr("ref");
    var buf = config.split("-");
    ha.api.traveler.createLabelAndFavorite(config, buf[0], buf[1], buf[2], m1, next_callback);
  },
  /**
   * @param {string} text
   * @param {Object} p
   * @return {undefined}
   */
  createLabel : function(text, p) {
    var mypulldata = p.find(".display-note").html();
    p.find(".display-view, .edit-view").hide();
    p.find(".edit-note").val("");
    p.find(".display-note").html("");
    p.parent().find(".loading-item").show();
    ha.api.traveler.labels.createLabel(mypulldata, function(map) {
      p.parent().find(".loading-item").hide();
      p.find(".add-view").show();
      ha.page.favorites.addLabelUI(map.name, map.id, 0);
    }, "");
  },
  /**
   * @param {string} text
   * @param {Object} $element
   * @return {undefined}
   */
  updateNote : function(text, $element) {
    var frameName = $element.parents(".favorite-container").attr("ref");
    frameName.split("-");
    var cycle = $element.parents(".favorite-container").find(".fn-note .display-note").html();
    ha.api.traveler.favorites.editFavorite(frameName, cycle);
  },
  /**
   * @param {Array} range
   * @param {Object} a
   * @param {string} item
   * @return {undefined}
   */
  addFavoriteLabel : function(range, a, item) {
    var match = a.parents(".favorite-container").attr("ref");
    if (ha.backbone.Models.traveler) {
      ha.backbone.Models.traveler.addLabelToFavorite(match, item);
    } else {
      range = match.split("-");
      /** @type {Array} */
      a = [];
      a.push(item);
      ha.api.traveler.favorites.createFavorite(match, a, range[0], range[1], range[2], function() {
        ha.api.traveler.favorites.labels.addLabel(match, item);
      });
    }
  },
  /**
   * @param {string} messageFormat
   * @return {?}
   */
  escapedId : function(messageFormat) {
    return messageFormat.replace(/(:|\.)/g, "\\$1");
  },
  /**
   * @param {string} name
   * @return {?}
   */
  getParameter : function(name) {
    var i;
    var cookie;
    /** @type {Array.<string>} */
    var codeSegments = window.location.search.substring(1).split("&");
    /** @type {number} */
    i = 0;
    for (;i < codeSegments.length;i++) {
      if (cookie = codeSegments[i].split("="), cookie[0] == name) {
        return unescape(cookie[1]);
      }
    }
    return null;
  },
  /**
   * @param {Text} optgroup
   * @param {Object} $element
   * @param {string} deepDataAndEvents
   * @return {undefined}
   */
  removeFavoriteLabel : function(optgroup, $element, deepDataAndEvents) {
    optgroup = $element.parents(".favorite-container").attr("ref");
    ha.api.traveler.favorites.labels.removeLabel(optgroup, deepDataAndEvents);
  },
  /**
   * @param {Function} optgroup
   * @return {undefined}
   */
  refresh : function(optgroup) {
    var ha_usr_prst = $.cookie("ha-usr-prst");
    var uHostName = $.cookie("ha-inq-hist");
    var oldClasses = $.cookie("ha-view-hist");
    /** @type {string} */
    var normalizedName = "";
    if (null != ha_usr_prst) {
      ha.api.traveler.getTraveler(function(dataAndEvents, data) {
        normalizedName = void 0 != data.first_name && void 0 != data.last_name ? data.first_name + " " + data.last_name.charAt(0) + "." : void 0 != data.first_name ? data.first_name : void 0 != data.last_name ? data.last_name.charAt(0) + "." : "";
        if (void 0 != data.first_name) {
          if (!$("#modalFirstName").val()) {
            $("#modalFirstName").val(data.first_name);
          }
          if (!$("#sidebar-inquirerFirstName").val()) {
            $("#sidebar-inquirerFirstName").val(data.first_name);
          }
          if (!$("#inquirerFirstName").val()) {
            $("#inquirerFirstName").val(data.first_name);
          }
        }
        if (void 0 != data.last_name) {
          if (!$("#modalLastName").val()) {
            $("#modalLastName").val(data.last_name);
          }
          if (!$("#sidebar-inquirerLastName").val()) {
            $("#sidebar-inquirerLastName").val(data.last_name);
          }
          if (!$("#inquirerLastName").val()) {
            $("#inquirerLastName").val(data.last_name);
          }
        }
        if (void 0 != data.email) {
          if (!$("#sidebar-inquirerEmailAddress").val()) {
            $("#sidebar-inquirerEmailAddress").val(data.email);
          }
          if (!$("#modalEmailAddress").val()) {
            $("#modalEmailAddress").val(data.email);
          }
          if (!$("#inquirerEmailAddress").val()) {
            $("#inquirerEmailAddress").val(data.email);
          }
        }
        var codeSegments = _.template("<span class='user-links-name'><@= name @></span><span class='user-links-button-dropdown'></span>");
        $("#user-links-dropdown").html(codeSegments({
          name : normalizedName
        })).show();
        if (ha.backbone.Views.MastHead.mastheadView) {
          ha.backbone.Views.MastHead.mastheadView.signInCallback(normalizedName);
        }
        $(".has-check").removeClass("has-check");
        $(".item-list").remove();
        var s = data.favorites ? data.favorites.toJSON() : [];
        codeSegments = data.inquiredProperties;
        var i = data.visitedProperties;
        var devices = data.labels ? data.labels.toJSON() : [];
        /** @type {Array} */
        var elems = [];
        /** @type {Array} */
        var a = [];
        /** @type {number} */
        var k = 0;
        for (;k < devices.length;k++) {
          elems.push(devices[k].id);
          a.push(devices[k].name);
        }
        /** @type {number} */
        a = devices = 0;
        if (s) {
          /** @type {number} */
          k = 0;
          for (;k < s.length;k++) {
            var remote = s[k].id;
            var checkbox = ha.page.favorites.escapedId("fav-" + remote);
            checkbox = $('[data-spu="' + checkbox + '"]');
            /** @type {string} */
            var requestUrl = "";
            if (0 != s[k].labels.length) {
              /** @type {boolean} */
              var n = false;
              /** @type {number} */
              var j = 0;
              for (;j < s[k].labels.length;j++) {
                if (-1 != $.inArray(s[k].labels[j], elems)) {
                  /** @type {string} */
                  requestUrl = requestUrl + "" + s[k].labels[j] + "|";
                  /** @type {boolean} */
                  n = true;
                } else {
                  ha.api.traveler.favorites.labels.removeLabel(s[k].id, s[k].labels[j]);
                }
              }
              if (n) {
                checkbox.addClass("has-check");
                ++devices;
                ha.map.base.upDatePinIcon(remote, "isFavorited", true);
              }
              /** @type {string} */
              requestUrl = requestUrl.substring(0, requestUrl.length - 1);
              checkbox.attr("data-favorites", requestUrl);
            }
            if (s[k].note && "" != s[k].note) {
              ++a;
              checkbox.parents(".favorite-container").find(".display-note").html(s[k].note);
              checkbox.parents(".favorite-container").find(".edit-note").html(s[k].note);
            } else {
              if ("" == s[k].note) {
                checkbox.parents(".favorite-container").find(".display-note").html("");
                checkbox.parents(".favorite-container").find(".edit-note").val("");
                checkbox.parents(".favorite-container").find(".add-view").show();
                checkbox.parents(".favorite-container").find(".display-view").hide();
              }
            }
          }
        }
        if (i) {
          /** @type {number} */
          s = 0;
          for (;s < i.length;s++) {
            ha.page.favorites.updateInqView(i[s].systemId + "-" + i[s].propertyId + "-" + i[s].unitId);
          }
        }
        if (codeSegments) {
          /** @type {number} */
          i = 0;
          for (;i < codeSegments.length;i++) {
            ha.page.favorites.updateInqView(codeSegments[i].systemId + "-" + codeSegments[i].propertyId + "-" + codeSegments[i].unitId, true);
          }
        }
        traveler_labels = {
          labels : data.labels ? data.labels.toJSON() : []
        };
        ha.page.favorites.updateCount(devices, a, data);
        $("#login-modal-loading").trigger("finishlogin", optgroup);
      });
    } else {
      if (null != uHostName || oldClasses) {
        $(document).ready(function() {
          if (oldClasses) {
            visited_spus = oldClasses.split(":");
            /** @type {number} */
            var conditionIndex = 0;
            for (;conditionIndex < visited_spus.length;conditionIndex++) {
              ha.page.favorites.updateInqView(visited_spus[conditionIndex]);
            }
            $(".viewed-count").text(" (" + visited_spus.length + ")");
          } else {
            $(".viewed-count").text(" (0)");
          }
          if (uHostName) {
            inquired_spus = uHostName.split(":");
            /** @type {number} */
            conditionIndex = 0;
            for (;conditionIndex < inquired_spus.length;conditionIndex++) {
              ha.page.favorites.updateInqView(inquired_spus[conditionIndex], true);
            }
            $(".inq-count").text(" (" + inquired_spus.length + ")");
          } else {
            $(".inq-count").text(" (0)");
          }
          $(".favorite-count").text(" (0)");
        });
      } else {
        ha.page.favorites.updateCount(0, 0, 0);
      }
    }
  },
  /**
   * @return {undefined}
   */
  refreshCount : function() {
    var ha_usr_prst = $.cookie("ha-usr-prst");
    var oldClasses = $.cookie("ha-inq-hist");
    var uHostName = $.cookie("ha-view-hist");
    if (null != ha_usr_prst) {
      ha.api.traveler.getTraveler(function(dataAndEvents, inplace) {
        ha.page.favorites.updateCount(dataAndEvents.getFavoritesCount(), dataAndEvents.getNotedCount(), inplace);
      });
    } else {
      if (null != oldClasses) {
        if (uHostName ? (visited_spus = uHostName.split(":"), $(".viewed-count").text(" (" + visited_spus.length + ")")) : $(".viewed-count").text(" (0)"), oldClasses) {
          inquired_spus = oldClasses.split(":");
          $(".inq-count").text(" (" + inquired_spus.length + ")");
        } else {
          $(".inq-count").text(" (0)");
        }
      }
    }
  },
  /**
   * @param {number} devices
   * @param {number} v03
   * @param {(Object|string)} data
   * @return {undefined}
   */
  updateCount : function(devices, v03, data) {
    var inquired = data.inquiredProperties ? data.inquiredProperties.length : 0;
    data = data.visitedProperties ? data.visitedProperties.length : 0;
    $(".inq-count").text(" (" + inquired + ")");
    $(".viewed-count").text(" (" + data + ")");
    $(".noted-count").text(" (" + v03 + ")");
    $(".favorite-count").text(" (" + devices + ")");
    $(".favs-count").text(" (" + devices + ")");
    if (ha.backbone.Views.MastHead.mastheadView) {
      ha.backbone.Views.MastHead.mastheadView.updateCounts({
        inquired : inquired,
        visited : data,
        noted : v03,
        favorited : devices
      });
    }
  },
  /**
   * @param {string} mom
   * @param {boolean} dataAndEvents
   * @return {undefined}
   */
  updateInqView : function(mom, dataAndEvents) {
    /** @type {null} */
    var cycle = null;
    var status = $("#" + ha.page.favorites.escapedId("inq-viewed-" + mom));
    status.text(" ");
    if (dataAndEvents) {
      /** @type {string} */
      cycle = "isInquired";
      status.removeClass("viewed");
      status.removeClass("icon-check");
      status.addClass("inquired");
      status.addClass("icon-inbox");
    } else {
      /** @type {string} */
      cycle = "isViewed";
      status.removeClass("inquired");
      status.removeClass("icon-inbox");
      status.addClass("viewed");
      status.addClass("icon-check");
    }
    ha.map.base.upDatePinIcon(mom, cycle, true);
  },
  /**
   * @param {string} dataAndEvents
   * @param {string} dataName
   * @param {number} recurring
   * @param {boolean} first
   * @return {undefined}
   */
  addLabelUI : function(dataAndEvents, dataName, recurring, first) {
    if ($("body").hasClass("favorites")) {
      /** @type {string} */
      var select = "";
      select = $('<div class="favorite-label"><div class="display-block"><a class="favorite-item" href="/favorites?label=' + dataName + '"><span class="name">' + dataAndEvents + '</span><span class="count label-count-' + dataName + '"> (' + recurring + ')</span></a><div class="remove-label ' + (first ? "first" : "") + '" ref="' + dataName + '">X</div></div></div>');
      select.find(".remove-label").click(function() {
        select.html('<div class="loading-item remove-label-' + dataName + '">&nbsp;</div>');
        ha.api.traveler.labels.deleteLabel(dataName, function() {
          $(".remove-label-" + dataName).parents(".favorite-label").fadeOut("slow");
          ha.page.favorites.refresh();
        });
      });
      $(".sidebar-section.favorite-labels .create-new-label").before(select);
    }
  }
};
ha.ui.favorites = {
  /**
   * @return {undefined}
   */
  init : function() {
    if (null != jQuery().note) {
      $(".fn-note").note({
        addNote : true,
        noteTextareaCols : "90",
        noteTextareaRows : "5",
        editButtonContent : "",
        addButtonContent : ha.strings.favorites.notes.hit.add,
        saveButtonContent : ha.strings.favorites.notes.hit.save,
        cancelButtonContent : ha.strings.favorites.notes.hit.cancel,
        removeButtonContent : "",
        addNoteContent : ha.strings.favorites.notes.hit.addNoteContent,
        buttonClass : "",
        saveClass : "btn btn-primary display-save",
        cancelClass : "btn display-cancel",
        removeClass : "icon-close icon-lightgray display-remove",
        editClass : "icon-edit icon-lightgray display-edit",
        updateEvent : ha.page.favorites.updateNote,
        /**
         * @param {?} res
         * @param {Object} $element
         * @return {undefined}
         */
        isLoggedIn : function(res, $element) {
          ha.ui.favorites.isLoggedIn($element.parents(".favorite-container"));
        }
      });
      $(".create-new-label").note({
        addNote : true,
        noteTextareaCols : "25",
        noteTextareaRows : "1",
        editButtonContent : ha.strings.favorites.notes.hit.edit,
        addButtonContent : ha.strings.favorites.checklist.newFavorite,
        saveButtonContent : ha.strings.favorites.checklist.saveText,
        cancelButtonContent : ha.strings.favorites.notes.hit.cancel,
        removeButtonContent : ha.strings.favorites.notes.hit.remove,
        addNoteContent : "",
        buttonClass : "button-base big dark-darkborder",
        buttonSaveClass : "button-base big dark-darkborder orange",
        submitOnEnterClass : "submit-on-enter",
        noteDefaultText : ha.strings.favorites.lists.defaultInputText,
        updateEvent : ha.page.favorites.createLabel,
        characterLimit : 20,
        /**
         * @param {?} theEvent
         * @param {Object} event
         * @return {undefined}
         */
        cancelEvent : function(theEvent, event) {
          event.find(".display-note").html("");
          event.find(".edit-note").val();
          event.find(".display-view").hide();
          event.find(".add-view").show();
        },
        /**
         * @param {?} res
         * @param {Object} $element
         * @return {undefined}
         */
        isLoggedIn : function(res, $element) {
          ha.ui.favorites.isLoggedIn($element.parents(".favorite-container"));
        }
      });
    }
  },
  /**
   * @return {undefined}
   */
  sendFavoritesEmailFormInit : function() {
    if (!$("#mb-load").length) {
      $("body").append('<div id="mb-load"><img src="//csvcus.homeaway.com/rsrcs/23/628D00947F44E8C66CEA043B8D507F-loading-lg.gif" /></div>');
    }
    $("#email-favorite-form-button").click(function() {
      /** @type {RegExp} */
      var rhtml = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/;
      emails = $("#recipients").val().split(",");
      /** @type {string} */
      var alias = "";
      /** @type {boolean} */
      var job = false;
      /** @type {boolean} */
      var d = 0 != $("#message.default").size();
      /** @type {boolean} */
      var err = 0 != $("#recipients.default").size();
      /** @type {number} */
      i = 0;
      for (;i < emails.length && !err;i++) {
        if (0 != $.trim(emails[i]).length && !rhtml.test($.trim(emails[i]))) {
          alias = emails[i];
        } else {
          if (0 != $.trim(emails[i]).length) {
            /** @type {boolean} */
            job = true;
          }
        }
      }
      if (0 != alias.length) {
        alert(ha.strings.favorites.checklist.invalidEmail + alias);
      } else {
        if (!job || err) {
          alert(ha.strings.favorites.checklist.noEmail);
        } else {
          $("#mb-load").show();
          if (d) {
            $("#message").removeClass("default");
            $("#message").val("");
          }
          $("#favorites-email").submit();
        }
      }
    });
  },
  /**
   * @return {undefined}
   */
  propertyInit : function() {
    if (null != jQuery().note) {
      $(".fn-note").note({
        addNote : true,
        noteTextareaCols : "107",
        noteTextareaRows : "3",
        editButtonContent : ha.strings.favorites.notes.property.edit,
        addButtonContent : ha.strings.favorites.notes.property.add,
        saveButtonContent : ha.strings.favorites.notes.property.save,
        cancelButtonContent : ha.strings.favorites.notes.property.cancel,
        removeButtonContent : ha.strings.favorites.notes.property.remove,
        addNoteContent : ha.strings.favorites.notes.property.addNoteContent,
        buttonClass : "btn btn-small",
        updateEvent : ha.page.favorites.updateNote,
        /**
         * @param {?} res
         * @param {Object} $element
         * @return {undefined}
         */
        isLoggedIn : function(res, $element) {
          ha.ui.favorites.isLoggedIn($element.parents(".favorite-container"));
        }
      });
    }
  },
  /**
   * @param {string} ref
   * @return {undefined}
   */
  isLoggedIn : function(ref) {
    if (null == $.cookie("ha-usr-prst")) {
      ref.find(".fn-checklist");
      ref.find(".fn-note .display-note").html();
      ref = ref.attr("ref");
      var buf = ref.split("-");
      $.cookie("tmp-user-fav", JSON.stringify({
        spu : ref,
        systemId : buf[0],
        propertyId : buf[1],
        unitId : buf[2]
      }), {
        expires : 1,
        path : "/"
      });
      ha.user.login.launchmodal("favorite");
    }
  },
  /**
   * @return {undefined}
   */
  sidebarInit : function() {
    $(".favorite-labels .favorite-label .rename-label").click(function() {
      $(".favorite-label .cancel").click();
      $(this).parents(".favorite-label").find(".display-block").hide();
      $(this).parents(".favorite-label").find(".rename-block").show();
    });
    $(".favorite-labels .favorite-label .rename-block .cancel").click(function() {
      $(this).parents(".favorite-label").find(".display-block").show();
      $(this).parents(".favorite-label").find(".rename-block").hide();
      $(this).parents(".favorite-label").find(".rename-block input").val($(this).parents(".favorite-label").find(".favorite-item .name").html());
    });
    $(".favorite-labels .favorite-label .rename-block .submit").click(function() {
      $label = $(this);
      ha.page.favorites.renameLabel($label);
    });
    $(".favorite-labels .favorite-label .remove-label").click(function() {
      $label = $(this);
      var idx = $label.attr("ref");
      $label.parents(".favorite-label").html('<div class="loading-item remove-label-' + idx + '">&nbsp;</div>');
      ha.api.traveler.labels.deleteLabel(idx, function() {
        $(".remove-label-" + idx).parents(".favorite-label").fadeOut("slow");
        ha.page.favorites.refresh();
      });
    });
  }
};
/** @type {number} */
var fadeCount = 0;
/** @type {number} */
var layerCount = 1;
ha.page.home = {
  /**
   * @return {undefined}
   */
  init : function() {
    ha.util.initToggles();
    if (1 < heroTotal) {
      ha.page.home.fade(true);
    }
  },
  /**
   * @param {Object} amount
   * @return {undefined}
   */
  fade : function(amount) {
    var $this = $("#layer" + layerCount);
    if (amount || ha.page.home.faded()) {
      $($this).fadeIn(1500);
      fadeCount++;
      /** @type {number} */
      amount = 8E3;
    } else {
      $($this).fadeOut(1500);
      layerCount++;
      if (layerCount == $(".fade-layer").length + 1) {
        /** @type {number} */
        layerCount = 1;
      }
      /** @type {number} */
      fadeCount = 0;
      /** @type {number} */
      amount = 10;
    }
    setTimeout(ha.page.home.fade, amount);
  },
  /**
   * @return {?}
   */
  faded : function() {
    return fadeCount % 2 ? false : true;
  },
  /**
   * @param {Array} comp
   * @param {string} isXML
   * @return {undefined}
   */
  cms_qstring : function(comp, isXML) {
    if (0 < comp.length) {
      var newPath = $(comp).attr("href");
      if (newPath) {
        if (0 < newPath.length) {
          $(comp).attr("href", newPath + isXML);
        } else {
          $(comp).attr("href", isXML);
        }
      }
    }
  },
  /**
   * @return {undefined}
   */
  fadeBackgroundIn : function() {
    $("<img/>").attr("src", $("." + backgroundSelector).attr("ref")).load(function() {
      var borderColor = $("." + backgroundSelector).css("background-color");
      /** @type {string} */
      var pdataOld = "url(" + $("." + backgroundSelector).attr("ref") + ") no-repeat center top " + borderColor;
      $("." + backgroundSelector).css("background", pdataOld);
      $("." + backgroundSelector).css("height", $(document).height());
      $("." + backgroundSelector).fadeIn(1500, function() {
        $("body").css("background", pdataOld);
        lateLoadImage();
      });
    });
  }
};
ha.page.inquiry = {
  /**
   * @return {undefined}
   */
  init : function() {
    ha.page.search.initPreviewEvents();
    $("a.prop-details-btn").click(function() {
      $.cookie("ip_similar", "true", {
        path : "/"
      });
    });
    var text = ha.json.cookie.parse(ha.json.qpJsonCookie(), "searchURL");
    if (null != text) {
      if (-1 != text.indexOf("?view=")) {
        text = text.substr(0, text.indexOf("?view="));
      }
      if (-1 != text.search("search")) {
        $("#backSearch").attr("href", text);
        if (0 != $("#backSearchLink").length) {
          text += -1 != text.indexOf("?") ? "&" : "?";
          $("#backSearchLink").attr("href", text + "prev_pg=inqconf");
        }
      }
    }
  }
};
ha.form.multiinquiry = {
  /**
   * @param {Function} optgroup
   * @return {undefined}
   */
  init : function(optgroup) {
    optgroup = optgroup || "#multiInquiryForm";
    var $title = $("textarea[name=comments]");
    $title.keyup(function(qualifier) {
      ha.util.limiter(qualifier, $title, "modal-remainder");
    });
    $("#modal-submit-btn").click(function() {
      if ($("div.terms-agree").length) {
        if ($("#modal-inquirerTermsAgree").prop("checked")) {
          $("#accept-terms-msg").hide();
        } else {
          return $("#accept-terms-msg").show(), false;
        }
      }
    });
    var options = {
      /**
       * @return {undefined}
       */
      beforeSubmit : function() {
        $(optgroup + " .error-response").html("");
        $(optgroup).find(".loading").show();
      },
      /**
       * @param {string} type
       * @return {undefined}
       */
      success : function(type) {
        ha.form.multiinquiry.success(type, optgroup);
      },
      /**
       * @param {string} type
       * @return {undefined}
       */
      error : function(type) {
        ha.form.multiinquiry.error(type, optgroup);
      },
      data : {
        referrer : document.referrer,
        location : document.location.href
      },
      url : "/multiInquiry/ajax",
      type : "POST"
    };
    $(optgroup).ajaxForm(options);
  },
  /**
   * @param {string} type
   * @param {Function} name
   * @return {undefined}
   */
  success : function(type, name) {
    $(name).find(".loading").hide();
    $(name + " .error-response").html(type);
  },
  /**
   * @param {string} type
   * @param {Function} name
   * @return {undefined}
   */
  error : function(type, name) {
    $(name).find(".loading").hide();
    $(name + " .error-response").html("An unknown error has occurred");
  },
  /**
   * @return {undefined}
   */
  launch : function() {
    $("#multiInquiryForm").show();
    $(".multiInquiryImg").show();
    $("#multiInquiry-success").hide();
    $(".multiInquiry_spurow_thanks").hide();
    $(".no-script-error").html("");
    $(".error-response").html("");
    $(".multiInquiryImg").css("border-style", "solid");
    $(".multiInquiryImg").css("border-color", "transparent");
    $(".multiInquiryImg").css("border-width", "1px");
    $(".multiInquiryRow").show();
    $(".multiSpuListCheckbox").each(function() {
      if ("disabled" != $(this).attr("disabled")) {
        $(this).prop("checked", true);
      }
    });
    $.modal($("#multiInquiryFormModal"), {
      closeClass : "close",
      containerCss : {
        zIndex : 5E3
      }
    });
  },
  /**
   * @return {undefined}
   */
  singleInquiryInit : function() {
    $(".sendAll").click(function(types) {
      types.preventDefault();
      ha.form.multiinquiry.init();
      ha.form.multiinquiry.launch();
    });
  }
};
$(document).ready(function() {
  if (0 < $("#inquiryFormCallback").length) {
    /** @type {string} */
    var appFrontendUrl = "/ajax/property/inquiry";
    if ($.browser.msie) {
      appFrontendUrl += "?" + (new Date).getTime();
    }
    $.ajax({
      type : "GET",
      url : appFrontendUrl,
      dataType : "script"
    });
  }
});
/** @type {null} */
var previewTimeout = null;
/** @type {string} */
var pastPreviewId = "";
ha.ui.unitPreview = {
  /**
   * @return {undefined}
   */
  initPreviewEvents : function() {
    if (!(979 > $(window).width())) {
      $(".preview-trigger").hover(function() {
        clearTimeout(previewTimeout);
        var selected = $(this).parents(".listing");
        var selector = selected.attr("data-previewId");
        $(".preview-modal-" + selector);
        /** @type {number} */
        previewTimeout = setTimeout(function() {
          $(".listing-hover").addClass("hidden");
          pastPreviewId = $(".preview-modal-" + selector).attr("id");
          var el = selected.siblings(".preview-modal-" + selector);
          if (selected.hasClass("featured-property")) {
            if (500 < selected.offset().left) {
              el.css({
                left : selected.position().left - 300 + "px"
              });
            }
          }
          if (!$("body").hasClass("compare") && selected.offset().top + selected.height() / 2 - $(window).scrollTop() > $(window).height() / 2) {
            el.css({
              top : selected.position().top - 255 + "px"
            });
          } else {
            el.css({
              top : selected.position().top + 90 + "px"
            });
          }
          $(".preview-icon-" + selector).addClass("on");
          el.removeClass("hidden");
          var field = el.find(".preview-target");
          if (-1 == field.html().indexOf("unit-preview")) {
            var url = "/unit/preview?spu=" + el.attr("spu");
            if (0 < $.trim($("#startDateInput").val()).length) {
              url += "&start=" + encodeURIComponent($("#startDateInput").val());
            }
            var queryString = field.data("flspusage");
            if (queryString) {
              url += "&flspusage=" + queryString;
            }
            field.load(url);
          }
          el.mouseleave(function() {
            $(".img-overlay").removeClass("on");
            $(this).addClass("hidden");
          });
        }, 600);
      }, function() {
        clearTimeout(previewTimeout);
      });
      $(".preview-trigger .img-overlay").click(function(event) {
        event.stopPropagation();
        event.preventDefault();
      });
      $(document).on("mouseenter", ".unit-preview .unit-photos .thumbnail-gt", function() {
        var errorClass = $.trim($(this).attr("index"));
        if (!$(this).hasClass("empty")) {
          $(".unit-preview div.photo img").hide();
          $(".unit-preview div.photo img#thumbnail-" + errorClass).show();
          $(this).addClass("active");
        }
      });
      $(document).on("mouseleave", ".unit-preview .unit-photos .thumbnail-gt", function() {
        $(this).removeClass("active");
      });
      ha.ui.unitPreview.initListingHover();
    }
  },
  /**
   * @return {undefined}
   */
  initListingHover : function() {
    $(".listing").mouseover(function() {
      var size = $(this).attr("id");
      if ("" != pastPreviewId) {
        if (size && size.replace("listing-", "") != pastPreviewId.replace("target-", "")) {
          $("#" + pastPreviewId).trigger("mouseleave");
        }
      }
      $(".img-overlay").removeClass("on");
      $(this).addClass("on");
    }).mouseleave(function() {
      $(this).removeClass("on");
    });
    $(".preview-container").mouseleave(function() {
      $(".img-overlay").removeClass("on");
      $(".listing-hover").addClass("hidden");
    });
  }
};
ha.ui.search = {
  /**
   * @param {?} ctx
   * @return {undefined}
   */
  initPaymentBadgeTooltip : function(ctx) {
    var expectationResult = $(ctx).data("payments-identifier");
    expectationResult = $("#paymentsSearchBadgeInfoText-" + expectationResult).html();
    ha.ui.search.initHitTooltip(ctx, expectationResult);
  },
  /**
   * @param {?} node
   * @param {Object} result
   * @return {undefined}
   */
  initHitTooltip : function(node, result) {
    $(node).qtip({
      content : result,
      style : {
        width : 350,
        classes : "searchPaymentBadgeInfo",
        tip : {
          width : 20,
          height : 10
        }
      },
      position : {
        my : "top right",
        at : "left bottom",
        viewport : $(window)
      },
      hide : {
        fixed : true,
        delay : 500
      }
    });
  }
};
ha.page.search = {
  /**
   * @return {undefined}
   */
  init : function() {
    if ("m" != search.view) {
      ha.json.cookie.update(search.cName, search.geocodeKey);
    }
    $("#startDateInput, #endDateInput").each(function() {
      if ("" == $(this).val() || -1 == $(this).val().indexOf("/")) {
        $(this).val($(this).attr("rel"));
        $(this).addClass("default");
      }
    });
    ha.util.partialBox(300);
    ha.page.search.initPreviewEvents();
    ha.seo.showSeoText();
    ha.json.cookie.update(ha.json.stateCookie(), "lastSearchUrl", window.location.pathname);
    $.cookie(ha.json.advJsonCookie(), null, {
      path : "/"
    });
    ha.json.cookie.update(search.cName, search.pageKey);
    var pdataCur = ha.json.cookie.parse("ha-qp-sess").searchURL;
    if (pdataCur) {
      ha.util.datepicker.startDate = ha.util.datepicker.convertToStandardDateString(ha.util.datepicker.formatDateFromUrlISO8601(pdataCur, "arrival"));
      ha.util.datepicker.endDate = ha.util.datepicker.convertToStandardDateString(ha.util.datepicker.formatDateFromUrlISO8601(pdataCur, "departure"));
      ha.backbone.Models.pdpAvailability = new ha.backbone.Models.PDPAvailability({
        minimumStay : ha.util.datepicker.calendarMinStayJSON,
        availability : ha.util.datepicker.calendarAvailabilityJSON,
        startDate : ha.util.datepicker.startDate,
        endDate : ha.util.datepicker.endDate
      });
    }
  },
  /**
   * @return {undefined}
   */
  initInquired : function() {
    $("a.inquired").each(function(dataAndEvents, item) {
      /** @type {string} */
      var el = "#" + item.id;
      $(el).hover(function() {
        /** @type {number} */
        var pickWinTop = $(el + " div.inq-icon").offset().top - 220;
        if (-1 != navigator.userAgent.toLowerCase().indexOf("safari")) {
          pickWinTop -= 20;
        }
        $("#inquired-msg").css({
          top : pickWinTop,
          left : 661
        }).fadeIn(200);
      }, function() {
        $("#inquired-msg").fadeOut(100);
      });
    });
  },
  /**
   * @return {undefined}
   */
  initEvents : function() {
    $("a.refinement-link").bind("click", function(isXML) {
      isXML.preventDefault();
      if ($(this).hasClass("inactive")) {
        $(this).toggleClass("active");
      } else {
        $(this).removeClass("active");
        $(this).addClass("inactive");
      }
      /** @type {boolean} */
      isXML = "region" == $(this).attr("id").split("|")[0];
      ha.page.search.update($(this).attr("href"), isXML);
      return false;
    }).bind("mousedown", function() {
      ha.util.stop();
    });
    $(".listing-main .content-container").click(function(e) {
      if (!e.metaKey && !e.shiftKey) {
        var link = $(this).find(".listing-url").attr("href");
        e = $(e.target);
        if ((-1 != navigator.userAgent.indexOf("iPhone") || (-1 != navigator.userAgent.indexOf("iPod") || -1 != navigator.userAgent.indexOf("iPad"))) && e.hasClass("listing-image")) {
          return false;
        }
        if ("undefined" != typeof link) {
          window.location = link;
        }
      }
    });
    $("select.refinement-element").bind("change", function() {
      ha.page.search.update($(this).val());
      return false;
    }).bind("mousedown", function() {
      ha.util.stop();
    });
    if (void 0 != $("#list-view-button").attr("href")) {
      if (void 0 != $(".search-tabs .on").attr("href")) {
        ha.json.cookie.update(search.cName, "searchURL", $(".search-tabs .on").attr("href"));
      } else {
        ha.json.cookie.update(search.cName, "searchURL", $("#list-view-button").attr("href"));
      }
    }
    $(".paginationLinks a").click(function(item) {
      item.preventDefault();
      if ((item = $(this).attr("id")) && "" != item) {
        item = item.substring(0, 1);
        if ("l" != item) {
          ha.json.cookie.update(search.pcName, search.viewKey, item);
        } else {
          ha.json.cookie.update(search.pcName, search.viewKey);
        }
      }
      if ($("base.favorites")) {
        window.location.href = $(this).attr("href");
      } else {
        ha.page.search.update($(this).attr("href"), true);
      }
    });
    $("a.curr-node-lnk").click(function(types) {
      types.preventDefault();
      document.getElementById("main").scrollIntoView(true);
    });
  },
  /**
   * @return {undefined}
   */
  initPreviewEvents : function() {
    ha.ui.unitPreview.initPreviewEvents();
  },
  /**
   * @param {string} value
   * @param {string} e
   * @param {?} data
   * @return {undefined}
   */
  update : function(value, e, data) {
    if (!value || ("undefined" == typeof value || "" == value)) {
      /** @type {string} */
      window.location = location.href.split("#")[0];
    } else {
      /** @type {string} */
      var quote = "";
      /** @type {string} */
      var url = "";
      /** @type {string} */
      var str = "";
      var parts = value.split("#");
      if (2 == parts.length) {
        url = parts[1];
      }
      parts = parts[0].split("?");
      if (2 == parts.length) {
        quote = "?" + parts[1];
      }
      uri = parts[0];
      if (!e || "undefined" == typeof e) {
        /** @type {number} */
        e = window.scrollY;
        if ("undefined" == typeof window.scrollY) {
          /** @type {(Element|null)} */
          e = document.compatMode && "BackCompat" != document.compatMode ? document.documentElement : document.body;
          e = document.all ? e.scrollTop : pageYOffset;
        }
        if (2 == value.length) {
          if (parseInt(value[1], 10) == e) {
            e += 1;
          }
        }
        url = ha.json.paramsToJson(location.hash.replace("#", ""), "&", "=");
        /** @type {string} */
        url = "undefined" != typeof url.gc ? "&gc=" + url.gc : "";
        /** @type {string} */
        url = "#sp=" + e + url;
      } else {
        ha.json.cookie.update(search.cName, search.anchorKey, "true");
      }
      if ("/favorites" != uri) {
        if (!data) {
          str = ha.page.search.segments(value);
        }
      }
      value = uri + str + quote + url;
      /** @type {string} */
      window.location = value;
    }
  },
  /**
   * @param {string} xs
   * @return {?}
   */
  segments : function(xs) {
    /** @type {string} */
    var buff = "";
    if (-1 == xs.indexOf("/keywords:")) {
      if ("" != search.keywords) {
        buff += "/keywords:" + search.keywords;
      }
    }
    if (-1 == xs.indexOf("/arrival:")) {
      if ($("#startDateInput").length) {
        buff += ha.site.searchform.dateParamFormat($("#startDateInput"));
      } else {
        if ($("#mastHeadstartDateInput").length) {
          buff += ha.site.searchform.dateParamFormat($("#mastHeadstartDateInput"));
        }
      }
    }
    if (-1 == xs.indexOf("/departure:")) {
      if ($("#endDateInput").length) {
        buff += ha.site.searchform.dateParamFormat($("#endDateInput"));
      } else {
        if ($("#mastHeadendDateInput").length) {
          buff += ha.site.searchform.dateParamFormat($("#mastHeadendDateInput"));
        }
      }
    }
    /** @type {string} */
    var data = "";
    if (-1 == xs.indexOf("/minPrice/")) {
      if ("" != rates.minPrice) {
        data += "/minPrice/" + rates.minPrice;
      }
    }
    if (-1 == xs.indexOf("/maxPrice/")) {
      if ("" != rates.maxPrice) {
        data += "/maxPrice/" + rates.maxPrice;
      }
    }
    if ("" != data) {
      /** @type {string} */
      buff = buff + data + ("/currency/" + brand.baseCurrency);
    }
    if ("undefined" == typeof buff) {
      /** @type {string} */
      buff = "";
    }
    return buff;
  },
  /**
   * @return {undefined}
   */
  menu : function() {
    if (!$("#bedrooms-element").hasClass("gtmenu")) {
      if (!$("#sidebar-criteria-heading").hasClass("off")) {
        $(".make-menu").gtmenu().bind("change", function() {
          /** @type {boolean} */
          var pdataCur = false;
          if ($(this).closest("#rates-select")) {
            /** @type {boolean} */
            pdataCur = true;
          }
          ha.page.search.update($(this).attr("data-value"), void 0, pdataCur);
        });
        $(".make-select").gtmenu().bind("change", function() {
          ha.page.search.update($(this).attr("data-value"));
        });
      }
    }
  }
};
ha.page.writeReview = {
  confirmationModal : null,
  propertyPageUrl : null,
  submitLocked : false,
  /**
   * @return {undefined}
   */
  init : function() {
    $("#body").keyup(ha.util.limiter);
    if ("" === $("#body").val()) {
      $("#remainder").text($("#body").attr("maxlength"));
    } else {
      $("#body").change(ha.util.limiter).change();
    }
    $("#ratings").on("click", "label", function() {
      var $field = $(this);
      var td = $field.parents(".rating-stars");
      var index = $field.attr("data-rating");
      $field.find("input").prop("checked", true);
      td.attr("class", "rating-stars");
      td.addClass("rating-stars-" + index);
    });
    $("#ratings label input[checked]").parent().triggerHandler("click");
    $("#review-login-reminder").qtip({
      content : $("#why-login-review-info"),
      position : {
        my : "bottom center",
        at : "top center",
        viewport : $(window)
      },
      style : {
        width : 350,
        tip : {
          width : 20,
          height : 10
        }
      },
      hide : {
        delay : 250,
        fixed : true
      }
    });
    if (!ha.page.writeReview.submitLocked) {
      if (-1 < window.location.search.indexOf("loggedIn=true")) {
        $("#review-submit-btn").trigger("click");
      }
    }
  },
  /**
   * @param {number} deepDataAndEvents
   * @return {undefined}
   */
  initAjaxForm : function(deepDataAndEvents) {
    var cookieVal = ha.util.guid();
    $.cookie("csrf_check", cookieVal, {
      path : "/"
    });
    var settings = {
      /**
       * @return {undefined}
       */
      beforeSubmit : function() {
        $("#review-submit-btn").toggle();
        $("#reviewForm").find(".loading").css("display", "inline-block");
      },
      /**
       * @param {string} type
       * @return {undefined}
       */
      success : function(type) {
        $("#form-col").html(type);
        ha.page.writeReview.init();
        ha.util.datepicker.init();
        /** @type {boolean} */
        ha.page.writeReview.submitLocked = true;
        ha.page.writeReview.initAjaxForm(deepDataAndEvents);
      },
      /**
       * @return {undefined}
       */
      error : function() {
        $("#review-submit-btn").toggle();
        $("#reviewForm").find(".loading").css("display", "none");
      },
      url : "/ajax/review/" + deepDataAndEvents,
      type : "POST",
      headers : {
        csrf_check : cookieVal,
        "cache-control" : "no-cache"
      }
    };
    $("#reviewForm").on("submit", function(types) {
      $(this).ajaxSubmit(settings);
      types.preventDefault();
      return false;
    });
  },
  /**
   * @param {?} dataAndEvents
   * @return {undefined}
   */
  initReviewConfirmationModal : function(dataAndEvents) {
    if ("undefined" !== typeof window.waTrackGTReview) {
      try {
        window.waTrackGTReview();
      } catch (b) {
      }
    }
    ha.page.writeReview.propertyPageUrl = dataAndEvents;
    ha.page.writeReview.showReviewConfirmationModal();
  },
  /**
   * @return {undefined}
   */
  showReviewConfirmationModal : function() {
    ha.page.writeReview.confirmationModal = $("#review-confirmation").modal({
      escClose : false
    });
    $(".simplemodal-close").unbind("click");
    $(".simplemodal-close").click(function() {
      window.location = ha.page.writeReview.propertyPageUrl;
    });
  },
  /**
   * @return {undefined}
   */
  closeReviewConfirmationModal : function() {
    if (ha.page.writeReview.confirmationModal) {
      ha.page.writeReview.confirmationModal.close();
      /** @type {null} */
      ha.page.writeReview.confirmationModal = null;
    }
  },
  /**
   * @return {undefined}
   */
  generateReviewFormCookie : function() {
    if ($('textarea[id="headline"]').val()) {
      ha.json.cookie.update(ha.json.reviewCookie(), "headline", $('textarea[id="headline"]').val());
    }
    if ($('input[id="headline"]').val()) {
      ha.json.cookie.update(ha.json.reviewCookie(), "headline", $('input[id="headline"]').val());
    }
    if ($('input[name="rating"]:checked').val()) {
      ha.json.cookie.update(ha.json.reviewCookie(), "rating", $('input[name="rating"]:checked').val());
    }
    if ($('input[id="startDateInput"]').val()) {
      ha.json.cookie.update(ha.json.reviewCookie(), "arrivalDate", $('input[id="startDateInput"]').val());
    }
    if ($('input[id="firstName"]').val()) {
      ha.json.cookie.update(ha.json.reviewCookie(), "firstName", $('input[id="firstName"]').val());
    }
    if ($('input[id="lastName"]').val()) {
      ha.json.cookie.update(ha.json.reviewCookie(), "lastName", $('input[id="lastName"]').val());
    }
    if ($('input[id="email"]').val()) {
      ha.json.cookie.update(ha.json.reviewCookie(), "email", $('input[id="email"]').val());
    }
    if ($('textarea[id="body"]').val()) {
      ha.json.cookie.update(ha.json.reviewCookie(), "body", $('textarea[id="body"]').val());
    }
  },
  /**
   * @return {undefined}
   */
  clearReviewFormCookie : function() {
    var cycle = ha.json.reviewCookie();
    var requestAnimationFrame = ha.json.cookie.update;
    $.map("headline rating arrivalDate firstName lastName email body".split(" "), function(isXML) {
      requestAnimationFrame(cycle, isXML);
    });
  }
};
ha.page.writeReview.social = {
  socialObj : null,
  /**
   * @param {string} type
   * @param {string} destination
   * @return {undefined}
   */
  init : function(type, destination) {
    /** @type {string} */
    ha.page.writeReview.social.socialObj = destination;
    jQuery.getScript(type, function() {
      Social.initForHost();
      /** @type {Array} */
      Social.Facebook.defaultPermissions = ["email", "publish_stream"];
      $(document).on("click", "a[rel=facebook-share]", ha.page.writeReview.social._shareCallback);
    });
  },
  /**
   * @return {undefined}
   */
  _shareCallback : function() {
    if ("undefined" !== typeof window.waModalInquiryFacebookClick) {
      try {
        window.waModalInquiryFacebookClick();
      } catch (a) {
      }
    }
    ha.page.writeReview.social.shareToFacebook(ha.page.writeReview.social.socialObj);
  },
  /**
   * @param {?} message
   * @return {undefined}
   */
  shareToFacebook : function(message) {
    ha.page.writeReview.closeReviewConfirmationModal();
    Social.Share.dialog(message, function(response) {
      ha.page.writeReview.showReviewConfirmationModal();
      if (response && response.post_id) {
        if ("undefined" !== typeof window.waModalInquiryFacebookShare) {
          try {
            window.waModalInquiryFacebookShare();
          } catch (c) {
          }
        }
        Social.Facebook.me(function() {
          $("#review-confirmation .share-to-fb").hide();
          $("#review-confirmation .share-success").show();
        });
      }
    }, ha.page.writeReview.showReviewConfirmationModal);
  }
};
ha.ui.photos = {
  /**
   * @param {string} type
   * @return {undefined}
   */
  init : function(type) {
    /**
     * @param {?} step
     * @param {string} klass
     * @param {string} header
     * @return {undefined}
     */
    function init(step, klass, header) {
      $(step).addClass(header);
      $(step).removeClass(klass);
    }
    /** @type {string} */
    type = "#" + type;
    $(type + " .jcarousel-skin").jcarousel({
      scroll : 1,
      /**
       * @param {?} stream
       * @return {undefined}
       */
      initCallback : function(stream) {
        $(type + " .jcarousel-next").bind("click", function() {
          stream.next();
          $(this).blur();
          return false;
        });
        $(type + " .jcarousel-prev").bind("click", function() {
          stream.prev();
          $(this).blur();
          return false;
        });
        if (1 < $(type + " .jcarousel-skin li").length) {
          $(type + " .jcarousel-next").css("display", "block");
          $(type + " .jcarousel-prev").css("display", "block");
        }
      },
      /**
       * @param {?} v22
       * @param {Array} dataAndEvents
       * @param {Function} res
       * @return {undefined}
       */
      buttonNextCallback : function(v22, dataAndEvents, res) {
        if (res) {
          init($(type + " .jcarousel-next"), "arw-rt-off", "arw-rt");
        } else {
          init($(type + " .jcarousel-next"), "arw-rt", "arw-rt-off");
        }
      },
      /**
       * @param {?} v22
       * @param {Array} dataAndEvents
       * @param {Function} name
       * @return {undefined}
       */
      buttonPrevCallback : function(v22, dataAndEvents, name) {
        if (name) {
          init($(type + " .jcarousel-prev"), "arw-lft-off", "arw-lft");
        } else {
          init($(type + " .jcarousel-prev"), "arw-lft", "arw-lft-off");
        }
      },
      buttonNextHTML : null,
      buttonPrevHTML : null
    });
  }
};
ha.traveler = {};
ha.traveler.login = {};
ha.user.login = {
  /**
   * @return {?}
   */
  travelerLoggedIn : function() {
    var cur = $.cookie("ha-usr-prst");
    return null != cur && 0 < $.trim(cur).length;
  },
  /**
   * @param {boolean} deepDataAndEvents
   * @return {undefined}
   */
  dropdowninit : function(deepDataAndEvents) {
    $("#signout").click(function(types) {
      types.preventDefault();
      if (ha.user.login.travelerLoggedIn() && ($.browser.msie || ha.user.login.logout_redirect)) {
        /** @type {string} */
        window.location = "/sso/signout?referer=" + encodeURIComponent(ha.user.login.logout_redirect || window.location);
      } else {
        ha.user.login.logout(deepDataAndEvents, true);
      }
    });
    $("#user-links-dropdown").click(function(types) {
      types.preventDefault();
      ha.user.login.toggledropdown();
    });
    var tref;
    $("#user-links-li").mouseout(function() {
      /** @type {number} */
      tref = setTimeout(function() {
        $(".user-links-dropdown-on").attr("class", "user-links-dropdown");
        $(".user-links").hide();
      }, 1E3);
    }).mouseover(function() {
      clearTimeout(tref);
    });
    ha.page.favorites.refresh();
  },
  /**
   * @param {boolean} deepDataAndEvents
   * @param {boolean} recurring
   * @return {undefined}
   */
  logout : function(deepDataAndEvents, recurring) {
    $.cookie("ha-usr-prst", null, {
      path : "/"
    });
    $.cookie("fbs_" + fb.authId, null, {
      path : "/"
    });
    $("#user-links-signin").show();
    $('a[href*="/haod"]:first').parent("li").show();
    $("#user-links-list").hide();
    $("#user-links-dropdown").hide();
    $(".viewed").hide();
    $(".inquired").hide();
    ha.backbone.Models.traveler = ha.backbone.Models.traveler || new ha.backbone.Models.Traveler;
    if (!ha.backbone.Models.traveler.isNew()) {
      ha.backbone.Models.traveler.clear();
    }
    if (ha.backbone.Views.MastHead.mastheadView) {
      ha.backbone.Views.MastHead.mastheadView.signOutCallback();
    }
    ha.page.favorites.refresh();
    ha.user.login.sendfriendtoggle();
    $(".favoriteTabSize").html("0");
    $(".has-check").removeClass("has-check");
    if (deepDataAndEvents) {
      ha.user.login.reload();
    } else {
      if (recurring) {
        $("#sso").attr("src", "/sso/logout");
      }
    }
  },
  /**
   * @return {undefined}
   */
  reload : function() {
    /** @type {Array.<string>} */
    var obj = location.href.split("#");
    if (2 == obj.length) {
      window.location.reload();
    }
    /** @type {string} */
    window.location = obj[0];
  },
  /**
   * @return {undefined}
   */
  toggledropdown : function() {
    var classes = $(".user-links-dropdown").attr("class");
    var loading = $(".user-links");
    if (null != classes) {
      $(".user-links-dropdown").attr("class", "user-links-dropdown-on");
      loading.show();
    } else {
      $(".user-links-dropdown-on").attr("class", "user-links-dropdown");
      loading.hide();
    }
  },
  /**
   * @return {undefined}
   */
  sendfriendtoggle : function() {
    var link = $(768 > $(window).width() ? ".js-sendFriendSmall" : ".js-sendFriend");
    link.unbind("click");
    if (ha.user.login.travelerLoggedIn()) {
      link.attr("href", link.attr("rel")).click(function(types) {
        types.preventDefault();
        ha.user.login.sendfriendmodal();
      });
    } else {
      link.click(function() {
        link.attr("href", "javascript:void(0)");
        ha.user.login.ui.launchLoginModal("sendfriend");
      });
    }
  },
  /**
   * @return {undefined}
   */
  sendfriendmodal : function() {
    var udataCur;
    var fieldset;
    if (768 > $(window).width()) {
      /** @type {string} */
      udataCur = "100%";
      /** @type {string} */
      fieldset = ".js-sendFriendSmall";
    } else {
      /** @type {number} */
      udataCur = 515;
      /** @type {string} */
      fieldset = ".js-sendFriend";
    }
    ha.ui.modal.launch($(fieldset).attr("href"), udataCur, 610);
  },
  /**
   * @return {undefined}
   */
  refresh : function() {
    if (ha.user.login.travelerLoggedIn()) {
      ha.user.login.reload();
    }
  },
  /**
   * @return {undefined}
   */
  userlinksinit : function() {
    if (ha.user.login.travelerLoggedIn()) {
      ha.page.favorites.refresh();
      ha.user.login.sendfriendtoggle();
      $("#user-links-signin").hide();
      $('a[href*="/haod"]:first').parent("li").hide();
    } else {
      ha.user.login.logout(false, false);
    }
  },
  /**
   * @param {string} deepDataAndEvents
   * @return {undefined}
   */
  launchmodal : function(deepDataAndEvents) {
    ha.user.login.ui.launchLoginModal(deepDataAndEvents);
  }
};
ha.user.login.ui = {
  dialog : {},
  /**
   * @return {undefined}
   */
  showDialog : function() {
    if (ha.user.login.ui.dialog) {
      if (ha.user.login.ui.dialog.container) {
        ha.user.login.ui.dialog.container.show(function() {
          ha.user.login.ui.dialog.data.show();
          /** @type {null} */
          ha.user.login.ui.dialog = null;
        });
      }
    }
  },
  /**
   * @param {string} isXML
   * @return {undefined}
   */
  setIFrameSrc : function(isXML) {
    $("#loginIFrame").attr("src", isXML);
  },
  /**
   * @param {string} extra
   * @param {number} opt_attributes
   * @param {number} expectedNumberOfNonCommentArgs
   * @param {string} deepDataAndEvents
   * @return {undefined}
   */
  launchModal : function(extra, opt_attributes, expectedNumberOfNonCommentArgs, deepDataAndEvents) {
    $.modal('<iframe id="loginIFrame" width="' + opt_attributes + '" height="' + expectedNumberOfNonCommentArgs + '" src="about:blank" frameborder="0" onload="ha.user.login.ui.showDialog();$(&quot;#mb-load&quot;).hide();"  scolling="no"  allowtransparency="true"></iframe>', {
      /**
       * @param {Object} self
       * @return {undefined}
       */
      onShow : function(self) {
        ha.user.login.ui.setIFrameSrc(extra);
        self.overlay.append('<div id="mb-load"><img src="//csvcus.homeaway.com/rsrcs/23/628D00947F44E8C66CEA043B8D507F-loading-lg.gif" /></div>');
        $("#mb-load").show();
        /** @type {Object} */
        ha.user.login.ui.dialog = self;
        self.overlay.show(function() {
          self.data.hide();
        });
      },
      /**
       * @return {undefined}
       */
      onClose : function() {
        if (deepDataAndEvents) {
          ha.user.login.ui.isNewUserCloseEvent(deepDataAndEvents);
        }
      },
      containerCss : {
        zIndex : 5E3
      }
    });
  },
  /**
   * @return {?}
   */
  getBaseUrl : function() {
    var baseUrl = brand.baseUrl.replace("http://", "").replace(":8080", "");
    if ("localhost" == baseUrl) {
      /** @type {string} */
      baseUrl = "www.homelidays.com".replace("http://", "");
    }
    return baseUrl;
  },
  /**
   * @param {string} deepDataAndEvents
   * @return {undefined}
   */
  launchLoginModal : function(deepDataAndEvents) {
    /** @type {string} */
    var strBrowser = navigator.userAgent.toLowerCase();
    if (-1 != strBrowser.indexOf("safari")) {
      strBrowser.indexOf("chrome");
    }
    $(window).width();
    ha.user.login.ui.launchStandaloneLogin(deepDataAndEvents);
  },
  /**
   * @param {string} deepDataAndEvents
   * @return {undefined}
   */
  launchStandaloneLogin : function(deepDataAndEvents) {
    var baseUrl = this.getBaseUrl();
    /** @type {string} */
    var url = window.location.toString().replace(brand.baseUrl, "");
    /** @type {string} */
    window.location = "https://cas.homeaway.com/auth/homeaway/login?service=https%3A%2F%2F" + baseUrl + "%2Fuser%2Fsso%2Fauth%3Flt%3Dtraveler%26context%3D" + deepDataAndEvents + "%26service%3D" + url;
  },
  /**
   * @param {string} deepDataAndEvents
   * @return {undefined}
   */
  launchRegisterModal : function(deepDataAndEvents) {
    if (768 > $(window).width()) {
      ha.user.login.ui.launchStandaloneRegister(deepDataAndEvents);
    } else {
      /** @type {string} */
      this.getBaseUrl().url = "https://cas.homeaway.com/auth/traveler/register?service=https%3A%2F%2Fundefined%2Fuser%2Fsso%2Fauth%3Flt%3Dtraveler%26context%3D" + deepDataAndEvents + "&requestingBrand=homeaway&context=" + deepDataAndEvents;
      ha.user.login.ui.launchModal(void 0, 500, 650, deepDataAndEvents);
    }
  },
  /**
   * @param {string} deepDataAndEvents
   * @param {Object} data
   * @return {undefined}
   */
  launchRegisterModalWithOptions : function(deepDataAndEvents, data) {
    var tmpSet;
    if (768 > $(window).width()) {
      ha.user.login.ui.launchStandaloneRegister();
    } else {
      tmpSet = this.getBaseUrl();
      /** @type {string} */
      tmpSet = "https://cas.homeaway.com/auth/traveler/register?service=https%3A%2F%2F" + tmpSet + "%2Fuser%2Fsso%2Fauth%3Flt%3Dtraveler%26context%3D" + deepDataAndEvents + "&requestingBrand=homeaway&context=" + deepDataAndEvents + "&ea=" + encodeURIComponent(data.emailAddress || "") + "&fn=" + encodeURIComponent(data.firstName || "") + "&ln=" + encodeURIComponent(data.lastName || "");
      ha.user.login.ui.launchModal(tmpSet, 500, 650, deepDataAndEvents);
    }
  },
  /**
   * @param {string} deepDataAndEvents
   * @return {undefined}
   */
  launchStandaloneRegister : function(deepDataAndEvents) {
    var baseUrl = this.getBaseUrl();
    /** @type {string} */
    var url = window.location.toString().replace(brand.baseUrl, "");
    /** @type {string} */
    window.location = "https://cas.homeaway.com/auth/traveler/register?service=https%3A%2F%2F" + baseUrl + "%2Fuser%2Fsso%2Fauth%3Flt%3Dtraveler%26context%3D" + deepDataAndEvents + "%26service%3D" + url;
  },
  /**
   * @param {string} deepDataAndEvents
   * @return {undefined}
   */
  isNewUserCloseEvent : function(deepDataAndEvents) {
    if (!ha.user.login.travelerLoggedIn()) {
      $("#sso").attr("src", "/user/sso/auth?lt=traveler&context=" + deepDataAndEvents);
    }
  },
  /**
   * @param {boolean} dataAndEvents
   * @return {undefined}
   */
  isAnOwnerToggle : function(dataAndEvents) {
    var tmpSet;
    $("#user-link-haod").unbind("click").click(function(types) {
      types.preventDefault();
      if (dataAndEvents) {
        window.location = brand.baseUrl.replace("http", "https").replace(":8080", "") + "/haod/";
      } else {
        /** @type {string} */
        tmpSet = "https://cas.homeaway.com/auth/ownerLoginAlert?service=" + brand.baseUrl.replace(":8080", "").replace("http", "https") + "/user/umsredirect&context=def";
        ha.user.login.ui.launchModal(tmpSet, 500, 450);
      }
      return false;
    });
  },
  /**
   * @param {?} dataAndEvents
   * @return {undefined}
   */
  launchReviewFormLogin : function(dataAndEvents) {
    if (dataAndEvents) {
      ha.user.login.ui.launchLoginModal("review");
    } else {
      ha.user.login.ui.launchRegisterModal("review");
    }
  }
};
ha.user.callback = {
  /**
   * @param {string} type
   * @return {undefined}
   */
  def : function(type) {
    $("#user-links-signin").hide();
    $('a[href*="/haod"]:first').parent("li").hide();
    $("#user-links-dropdown").show();
    ha.page.favorites.refresh();
    ha.user.login.sendfriendtoggle();
    ha.backbone.Models.traveler = ha.backbone.Models.traveler || new ha.backbone.Models.Traveler;
    ha.backbone.Models.traveler.fetch();
    if (!type) {
      $.modal.close();
    }
  },
  /**
   * @return {undefined}
   */
  review : function() {
    ha.user.callback.def();
    self.parent.$("#reviewForm").submit();
  },
  /**
   * @return {undefined}
   */
  compare : function() {
    ha.user.callback.def(true);
  },
  /**
   * @return {undefined}
   */
  sendfriend : function() {
    ha.user.callback.def(true);
    self.parent.ha.user.login.sendfriendmodal();
  },
  /**
   * @return {undefined}
   */
  favorite : function() {
    /** @type {*} */
    var createFavoriteDefaultList = JSON.parse($.cookie("tmp-user-fav"));
    ha.api.traveler.createFavoriteDefaultList(createFavoriteDefaultList.spu, createFavoriteDefaultList.systemId, createFavoriteDefaultList.propertyId, createFavoriteDefaultList.unitId, function(ignores) {
      ha.user.callback.def();
      ha.page.favorites.refresh();
      ha.backbone.Events.trigger("scrollToHit", "listing-spu-" + ignores.id);
      try {
        if ("undefined" == typeof s) {
          s = parent.s;
        }
        /** @type {string} */
        s.linkTrackVars = "events";
        /** @type {string} */
        s.linkTrackEvents = "event66";
        /** @type {string} */
        s.events = "event66";
        s.tl(this, "o", "favorites");
      } catch (c) {
      }
    }, function() {
      ha.user.callback.def();
      ha.page.favorites.refresh();
    });
  },
  /**
   * @return {undefined}
   */
  refresh : function() {
    window.parent.location.reload();
  },
  /**
   * @return {undefined}
   */
  owner : function() {
    ha.user.callback.def();
    window.location = brand.baseUrl.replace("http", "https").replace(":8080", "") + "/haod/";
  },
  /**
   * @return {undefined}
   */
  profile : function() {
    ha.user.callback.def();
    /** @type {string} */
    window.location = brand.baseUrl + "/traveler/profile";
  },
  /**
   * @return {undefined}
   */
  inquiry : function() {
    ha.user.callback.def();
  }
};
/** @type {string} */
var haAutocompleteURL = "http://csvcus.homeaway.com/aggregator/homelidays_fr/webservices/typeAhead/homelidays_fr";
/** @type {string} */
var haAutocompleteLocaleCode = "fr";
/**
 * @param {?} timeoutKey
 * @return {undefined}
 */
function Transliterator(timeoutKey) {
  this.characterMap = Transliterator.CHARACTER_MAPS_BY_LOCALE[timeoutKey];
  if (!this.characterMap) {
    this.characterMap = Transliterator.DEFAULT_CHARACTER_MAP;
  }
}
/** @type {RegExp} */
Transliterator.PUNCUATION_REGEX = /\s*[;:,\."!@#$%\^&\*\(\)\+=\{\}\[\]\?\/\\<>`~_-]+\s*/g;
/** @type {RegExp} */
Transliterator.WHITESPACE_REGEX = /\s+/;
Transliterator.DEFAULT_CHARACTER_MAP = {
  "\u00c0" : "A",
  "\u00c1" : "A",
  "\u00c2" : "A",
  "\u00c3" : "A",
  "\u00c4" : "A",
  "\u00c5" : "A",
  "\u00c6" : "AE",
  "\u00c7" : "C",
  "\u00c8" : "E",
  "\u00c9" : "E",
  "\u00ca" : "E",
  "\u00cb" : "E",
  "\u00cc" : "I",
  "\u00cd" : "I",
  "\u00ce" : "I",
  "\u00cf" : "I",
  "\u00d0" : "?",
  "\u00d1" : "N",
  "\u00d2" : "O",
  "\u00d3" : "O",
  "\u00d4" : "O",
  "\u00d5" : "O",
  "\u00d6" : "O",
  "\u00d8" : "O",
  "\u00d9" : "U",
  "\u00da" : "U",
  "\u00db" : "U",
  "\u00dc" : "U",
  "\u00dd" : "Y",
  "\u00de" : "?",
  "\u00df" : "ss",
  "\u00e0" : "a",
  "\u00e1" : "a",
  "\u00e2" : "a",
  "\u00e3" : "a",
  "\u00e4" : "a",
  "\u00e5" : "a",
  "\u00e6" : "ae",
  "\u00e7" : "c",
  "\u00e8" : "e",
  "\u00e9" : "e",
  "\u00ea" : "e",
  "\u00eb" : "e",
  "\u00ec" : "i",
  "\u00ed" : "i",
  "\u00ee" : "i",
  "\u00ef" : "i",
  "\u00f0" : "?",
  "\u00f1" : "n",
  "\u00f2" : "o",
  "\u00f3" : "o",
  "\u00f4" : "o",
  "\u00f5" : "o",
  "\u00f6" : "o",
  "\u00f8" : "o",
  "\u00f9" : "u",
  "\u00fa" : "u",
  "\u00fb" : "u",
  "\u00fc" : "u",
  "\u00fd" : "y",
  "\u00fe" : "?",
  "\u00ff" : "y"
};
Transliterator.DA_CHARACTER_MAP_OVERRIDES = {
  "\u00d8" : "O"
};
Transliterator.DE_CHARACTER_MAP_OVERRIDES = {
  "\u00e4" : "ae",
  "\u00f6" : "oe",
  "\u00fc" : "ue",
  "\u00c4" : "Ae",
  "\u00d6" : "Oe",
  "\u00dc" : "Ue",
  "\u00df" : "ss"
};
Transliterator.FI_CHARACTER_MAP_OVERRIDES = {
  "\u00ce" : "OE",
  "\u00dc" : "Y",
  "\u00fc" : "y",
  "\u0168" : "Y",
  "\u0169" : "y",
  "\u0110" : "D",
  "\u0111" : "d",
  "\u00fe" : "TH",
  "\u00de" : "th",
  "\u0160" : "SH",
  "\u0161" : "sh",
  "\u017d" : "ZH",
  "\u017e" : "zh"
};
/**
 * @param {?} helper
 * @param {?} object
 * @return {?}
 */
Transliterator.combineMaps = function(helper, object) {
  var old = {};
  var key;
  for (key in helper) {
    old[key] = helper[key];
  }
  var name;
  for (name in object) {
    old[name] = object[name];
  }
  return old;
};
Transliterator.CHARACTER_MAPS_BY_LOCALE = {
  da : Transliterator.combineMaps(Transliterator.DEFAULT_CHARACTER_MAP, Transliterator.DA_CHARACTER_MAP_OVERRIDES),
  de : Transliterator.combineMaps(Transliterator.DEFAULT_CHARACTER_MAP, Transliterator.DE_CHARACTER_MAP_OVERRIDES),
  fi : Transliterator.combineMaps(Transliterator.DEFAULT_CHARACTER_MAP, Transliterator.FI_CHARACTER_MAP_OVERRIDES)
};
/**
 * @param {string} string
 * @return {?}
 */
Transliterator.prototype.standardizeAndNormalize = function(string) {
  /** @type {number} */
  var index = 0;
  for (;index < string.length;index++) {
    if (null != this.characterMap[string.charAt(index)]) {
      string = string.substr(0, index) + this.characterMap[string.charAt(index)] + string.substr(index + 1);
    }
  }
  return string.replace(Transliterator.PUNCUATION_REGEX, " ").replace(Transliterator.WHITESPACE_REGEX, " ").toLowerCase();
};
/**
 * @param {Function} ignoreMethodDoesntExist
 * @param {boolean} textAlt
 * @param {number} dataAndEvents
 * @param {?} deepDataAndEvents
 * @return {undefined}
 */
function AutocompleteData(ignoreMethodDoesntExist, textAlt, dataAndEvents, deepDataAndEvents) {
  /** @type {Function} */
  this.autocompleteDataArray = ignoreMethodDoesntExist;
  /** @type {boolean} */
  this.sortByPropertyCount = textAlt ? true : false;
  this.numResultsToShow = dataAndEvents ? dataAndEvents : 15;
  this.transliterator = new Transliterator(deepDataAndEvents);
  /**
   * @param {Array} deepDataAndEvents
   * @return {?}
   */
  this.effectiveMatchText = function(deepDataAndEvents) {
    return 5 <= deepDataAndEvents.length ? deepDataAndEvents[0] : this.transliterator.standardizeAndNormalize(deepDataAndEvents[0]);
  };
  /**
   * @param {string} fn
   * @param {Array} deepDataAndEvents
   * @return {?}
   */
  this.isPrefix = function(fn, deepDataAndEvents) {
    return 0 === this.effectiveMatchText(deepDataAndEvents).lastIndexOf(fn, 0);
  };
  /**
   * @param {string} renderer
   * @return {?}
   */
  this.nodeDisplayName = function(renderer) {
    return 5 <= renderer.length ? renderer[1] : renderer[0];
  };
  /**
   * @param {string} row
   * @return {?}
   */
  this.formatItem = function(row) {
    /** @type {number} */
    var id = 5 <= row.length ? 1 : 0;
    var tr = this.nodeDisplayName(row);
    var value = row[1 + id];
    row = row[3 + id];
    /** @type {string} */
    id = "";
    if ("string" === typeof value) {
      /** @type {string} */
      id = ", " + value;
    } else {
      if ("number" === typeof value) {
        if (0 <= value) {
          id = ", " + this.nodeDisplayName(this.autocompleteDataArray[value]);
        }
      }
    }
    return{
      value : tr + id,
      label : tr + id + " (" + row + ")"
    };
  };
}
/**
 * @param {string} type
 * @return {?}
 */
AutocompleteData.prototype.filter = function(type) {
  type = this.transliterator.standardizeAndNormalize(type);
  /** @type {number} */
  var p = 0;
  /** @type {number} */
  var i = this.autocompleteDataArray.length - 1;
  /** @type {number} */
  var n = -1;
  for (;p <= i;) {
    /** @type {number} */
    var x = Math.floor((p + i) / 2);
    var effectiveMatchText = this.effectiveMatchText(this.autocompleteDataArray[x]);
    if (effectiveMatchText > type) {
      /** @type {number} */
      i = x - 1;
    } else {
      if (effectiveMatchText < type) {
        /** @type {number} */
        p = x + 1;
      } else {
        /** @type {number} */
        n = x;
        break;
      }
    }
  }
  if (-1 == n) {
    /** @type {number} */
    n = p;
  }
  /** @type {number} */
  p = n;
  for (;0 < p && this.isPrefix(type, this.autocompleteDataArray[p - 1]);) {
    p--;
  }
  /** @type {number} */
  i = p;
  for (;i < this.autocompleteDataArray.length && this.isPrefix(type, this.autocompleteDataArray[i]);) {
    i++;
  }
  type = this.autocompleteDataArray.slice(p, i);
  if (this.sortByPropertyCount) {
    type.sort(function(mat1, mat0) {
      return mat0[mat0.length - 1] - mat1[mat1.length - 1];
    });
  }
  /** @type {Array} */
  p = [];
  i = {};
  /** @type {number} */
  n = 0;
  for (;n < type.length && p.length < this.numResultsToShow;n++) {
    x = this.formatItem(type[n]);
    if (void 0 == i[x.value]) {
      /** @type {boolean} */
      i[x.value] = true;
      p.push(x);
    }
  }
  return p;
};
/**
 * @return {undefined}
 */
function haAutocompleteRegionKeywords() {
  if ("undefined" === typeof window.haAutocompleteDataCache) {
    window.haAutocompleteDataCache = {};
  }
  if ("undefined" === typeof window.haAutoCompleteEntries) {
    /**
     * @param {string} match
     * @return {undefined}
     */
    window.haAutoCompleteEntries = function(match) {
      if (match.length > 0) {
        var rsingleTag = new AutocompleteData(match, true, 10, haAutocompleteLocaleCode);
        match = rsingleTag.effectiveMatchText(match[0]);
        if (match.length > 0) {
          window.haAutocompleteDataCache[match.charAt(0)] = rsingleTag;
        }
      }
    };
  }
}
$(function() {
  haAutocompleteRegionKeywords();
});
var lazyload = {
  IdentClass : ".imgDelayLoadRef",
  SwapSourceAttr : "ref",
  ScrollstopTimeoutMs : 100,
  OutOfViewportFudging : 400,
  DatabindingKey : "lazyload-positioning",
  /**
   * @return {undefined}
   */
  UpdateViewport : function() {
    if (!lazyload.viewport) {
      lazyload.viewport = {};
    }
    /** @type {(null|number)} */
    lazyload.viewport.top = self.pageYOffset || (document.documentElement && document.documentElement.scrollTop || document.body && document.body.scrollTop);
    /** @type {(null|number)} */
    lazyload.viewport.height = self.innerHeight || (document.documentElement && document.documentElement.clientHeight || document.body && document.body.clientHeight);
  },
  /**
   * @return {undefined}
   */
  InitImageCoords : function() {
    $(lazyload.IdentClass).each(function() {
      var center = $(this).offset();
      var delta;
      if (!(delta = parseInt($(this).height(), 10))) {
        delta = $(this).css("min-height");
      }
      if (!delta && $(this).attr(lazyload.SwapSourceAttr)) {
        lazyload.LoadImage($(this));
      } else {
        $(this).data(lazyload.DatabindingKey, {
          height : delta,
          top : Math.floor(center.top)
        });
      }
    });
  },
  /**
   * @return {undefined}
   */
  EventBinds : function() {
    $(window).bind("scroll.lazyloadimages", function() {
      if (lazyload.viewportCheckTimer) {
        clearTimeout(lazyload.viewportCheckTimer);
      }
      /** @type {number} */
      lazyload.viewportCheckTimer = setTimeout(function() {
        if (lazyload.DidViewportChange()) {
          lazyload.CheckImages();
        }
      }, lazyload.ScrollstopTimeoutMs);
    });
    $(window).bind("resize.lazyloadimages", function() {
      if (lazyload.viewportCheckTimer) {
        clearTimeout(lazyload.viewportCheckTimer);
      }
      /** @type {number} */
      lazyload.viewportCheckTimer = setTimeout(function() {
        if (lazyload.DidViewportChange()) {
          lazyload.CheckImages();
        }
      }, lazyload.ScrollstopTimeoutMs);
    });
  },
  /**
   * @return {undefined}
   */
  Init : function() {
    lazyload.UpdateViewport();
    lazyload.InitImageCoords();
    lazyload.CheckImages();
    lazyload.EventBinds();
    if (!lazyload.viewport) {
      lazyload.EventUnbinds();
      $(lazyload.IdentClass).each(function() {
        lazyload.LoadImage($(this));
      });
    }
  },
  /**
   * @return {undefined}
   */
  EventUnbinds : function() {
    $(window).unbind("scroll.lazyloadimages");
    $(window).unbind("resize.lazyloadimages");
  },
  /**
   * @return {?}
   */
  DidViewportChange : function() {
    /** @type {boolean} */
    var DidViewportChange = false;
    /** @type {null} */
    var t = null;
    /** @type {null} */
    var fixed = null;
    if (lazyload.viewport) {
      t = lazyload.viewport.top;
      fixed = lazyload.viewport.height;
    } else {
      /** @type {boolean} */
      DidViewportChange = true;
    }
    lazyload.UpdateViewport();
    if (t != lazyload.viewport.top || fixed != lazyload.viewport.height) {
      /** @type {boolean} */
      DidViewportChange = true;
    }
    return DidViewportChange;
  },
  /**
   * @return {undefined}
   */
  CheckImages : function() {
    if (lazyload.viewport) {
      $(lazyload.IdentClass).each(function() {
        var pos = $(this).data(lazyload.DatabindingKey);
        if (pos) {
          if (lazyload.IsVerticalVisible(pos.top, pos.top + pos.height)) {
            lazyload.LoadImage($(this));
            $(this).removeData(lazyload.DatabindingKey);
            if (0 === $(lazyload.IdentClass).length) {
              lazyload.EventUnbinds();
            }
          }
        }
      });
    }
  },
  /**
   * @param {Object} element
   * @return {undefined}
   */
  LoadImage : function(element) {
    var pdataOld = element.attr(lazyload.SwapSourceAttr);
    /** @type {string} */
    var udataCur = "url(" + pdataOld + ")";
    if ("IMG" == element.get(0).tagName) {
      element.attr("src", pdataOld);
    } else {
      element.css("background-image", udataCur);
    }
    element.css({
      filter : "progid:DXImageTransform.Microsoft.AlphaImageLoader(src='" + pdataOld + "', sizingMethod='scale')",
      "-ms-filter" : "progid:DXImageTransform.Microsoft.AlphaImageLoader(src='" + pdataOld + "', sizingMethod='scale')"
    });
    element.removeAttr(lazyload.SwapSourceAttr);
    element.removeClass("imgDelayLoadRef");
  },
  /**
   * @param {number} mouseY
   * @param {number} ty
   * @return {?}
   */
  IsVerticalVisible : function(mouseY, ty) {
    var py = lazyload.viewport.top;
    var y = lazyload.viewport.top + lazyload.viewport.height;
    return lazyload.viewport && (ty > py - lazyload.OutOfViewportFudging && ty < y + lazyload.OutOfViewportFudging) || mouseY > py - lazyload.OutOfViewportFudging && mouseY < y + lazyload.OutOfViewportFudging ? true : false;
  }
};
ha.i18n = ha.i18n || {};
ha.i18n.calendar = {
  prevText : "&#x3c;Pr\u00e9c",
  nextText : "Suiv&#x3e;",
  currentText : "Courant",
  clearText : "annuler",
  monthNames : "Janvier F\u00e9vrier Mars Avril Mai Juin Juillet Ao\u00fbt Septembre Octobre Novembre D\u00e9cembre".split(" "),
  monthNamesShort : "jan. f\u00e9vr. mars avr. mai juin jul. ao\u00fbt sep. oct. nov. d\u00e9c.".split(" "),
  dayNames : "Dimanche Lundi Mardi Mercredi Jeudi Vendredi Samedi".split(" "),
  dayNamesShort : "Dim Lun Mar Mer Jeu Ven Sam".split(" "),
  dayNamesMin : "Di Lu Ma Me Je Ve Sa".split(" "),
  weekHeader : "Sm",
  closeText : "fermer",
  checkinDates : "Dates <b>d'arriv\u00e9e</b> disponibles",
  checkoutDates : "Dates <b>de d\u00e9part</b> disponibles"
};
/** @type {number} */
ha.i18n.startOfWeek = 1;
ha.i18n.dateFormats = {
  shortDate : "dd/mm/yy",
  mediumDate : "dd MM yy"
};
ha.i18n.currency = {
  symbol : "\u20ac",
  format : "%v %s",
  decimal : ",",
  thousand : " ",
  precision : 0
};
ha.i18n.number = {
  decimal : ",",
  thousand : " ",
  precision : 0
};
/**
 * @param {Attr} part
 * @param {number} pos
 * @return {undefined}
 */
function limitText(part, pos) {
  if (0 != pos) {
    if (part.value.length > pos) {
      part.value = part.value.substring(0, pos);
    }
  }
}
(function($) {
  /**
   * @param {Object} context
   * @param {?} args
   * @return {undefined}
   */
  function start(context, args) {
    context.find("." + args.displayModeClass).toggle();
    context.find("." + args.editModeClass).toggle();
    if (context.find("." + args.editModeClass).is(":visible")) {
      $("." + args.noteTextareaClass, context).focus();
    }
  }
  /**
   * @param {Object} element
   * @param {?} optionsString
   * @return {undefined}
   */
  function update(element, optionsString) {
    element.find("." + optionsString.noteTextareaClass).val("");
    element.find("." + optionsString.displayNoteClass).html("");
    if (optionsString.addNote) {
      element.find("." + optionsString.displayModeClass).hide();
      element.find("." + optionsString.editModeClass).hide();
      element.find("." + optionsString.addModeClass).show();
    } else {
      element.hide();
    }
    element.trigger("deleteNoteEvent", [element]);
  }
  /**
   * @param {Object} e
   * @param {?} options
   * @param {string} tmpl
   * @return {undefined}
   */
  function add(e, options, tmpl) {
    if ("" != tmpl) {
      tmpl = tmpl.replace(/</g, "&lt;");
      tmpl = tmpl.replace(/>/g, "&gt;");
      tmpl = tmpl.replace(/\n/g, "<br/>");
      e.find("." + options.displayNoteClass).html(tmpl);
      start(e, options);
      e.trigger("updateNoteEvent", [e]);
    } else {
      update(e, options);
    }
  }
  /**
   * @param {string} type
   * @return {?}
   */
  $.fn.note = function(type) {
    var options = $.extend({}, $.fn.note.defaults, type);
    return this.each(function() {
      var element = $(this);
      /** @type {boolean} */
      var g = false;
      /** @type {string} */
      var right = "";
      /** @type {string} */
      var optsData = "";
      /** @type {string} */
      var urlConfigHtml = "";
      /** @type {string} */
      var later = "";
      if ("" != options.noteTextareaRows) {
        /** @type {string} */
        optsData = "rows=" + options.noteTextareaRows;
      }
      if ("" != options.noteTextareaCols) {
        /** @type {string} */
        urlConfigHtml = "cols=" + options.noteTextareaCols;
      }
      if (0 < options.characterLimit) {
        /** @type {string} */
        later = 'onKeyDown="limitText(this,' + options.characterLimit + ');" onKeyUp="limitText(this,' + options.characterLimit + ');"';
      }
      element.hide();
      element.bind("addNoteEvent", options.addEvent);
      element.bind("deleteNoteEvent", options.updateEvent);
      element.bind("updateNoteEvent", options.updateEvent);
      element.bind("cancelNoteEvent", options.cancelEvent);
      element.bind("isLoggedIn", options.isLoggedIn);
      var key = element.html();
      key = key.replace(/&amp;/g, "&");
      var middle = key.replace(/<br>/g, "\n");
      right = middle;
      if (null == options.buttonSaveClass) {
        options.buttonSaveClass = options.buttonClass;
      }
      element.html('<div class="' + options.displayModeClass + '"><div class="' + options.removeClass + " " + options.buttonClass + '">' + options.removeButtonContent + '</div><div class="' + options.displayNoteClass + '">' + key + '</div><div class="' + options.editClass + " " + options.buttonClass + '">' + options.editButtonContent + '</div></div><div style="display:none" class="' + options.editModeClass + '"><textarea class=" ' + options.noteTextareaClass + " " + options.submitOnEnterClass + '" placeholder="' + 
      options.noteDefaultText + '" ' + urlConfigHtml + " " + optsData + " " + later + " >" + middle + '</textarea><div class="commands"><input type="button" class="' + options.saveClass + " " + options.buttonSaveClass + '" value="' + options.saveButtonContent + '"/> <div class="' + options.cancelClass + " " + options.buttonClass + '">' + options.cancelButtonContent + '</div></div></div><div style="display:none" class="' + options.addModeClass + '"><div class="' + options.addNoteContentClass + " " + 
      options.addClass + '">' + options.addNoteContent + '</div><div class="' + options.addClass + " " + options.buttonClass + '">' + options.addButtonContent + "</div></div>");
      element.show();
      if ("" == key) {
        element.find("." + options.displayModeClass).hide();
        element.find("." + options.editModeClass).hide();
        if (options.addNote) {
          element.find("." + options.addModeClass).show();
          element.show();
        } else {
          element.hide();
        }
      }
      element.click(function(d) {
        element.trigger("isLoggedIn", [element]);
        d = $(d.target);
        /** @type {boolean} */
        g = false;
        if (d.hasClass(options.editClass) || d.hasClass(options.displayNoteClass)) {
          right = element.find("." + options.noteTextareaClass).val();
          start(element, options);
        } else {
          if (d.hasClass(options.removeClass)) {
            update(element, options);
            /** @type {string} */
            right = "";
          } else {
            if (d.hasClass(options.saveClass)) {
              /** @type {boolean} */
              g = true;
              right = element.find("." + options.noteTextareaClass).val();
              add(element, options, right);
            } else {
              if (d.hasClass(options.cancelClass)) {
                /** @type {boolean} */
                g = true;
                d = right;
                if (d == "") {
                  element.find("." + options.noteTextareaClass).val("");
                  element.find("." + options.displayNoteClass).html("");
                  if (options.addNote) {
                    element.find("." + options.displayModeClass).hide();
                    element.find("." + options.editModeClass).hide();
                    element.find("." + options.addModeClass).show();
                  } else {
                    element.hide();
                  }
                } else {
                  element.find("." + options.noteTextareaClass).val(d);
                  start(element, options);
                }
                element.trigger("cancelNoteEvent", [element]);
              } else {
                if (d.hasClass(options.addClass)) {
                  element.find("." + options.addModeClass).toggle();
                  element.find("." + options.displayModeClass).toggle();
                  start(element, options);
                  element.trigger("addNoteEvent", [element]);
                }
              }
            }
          }
        }
        key = element.find("." + options.noteTextareaClass).val();
      });
      element.keypress(function(e) {
        var divSpan = $(e.target);
        if ($(e.keyCode)[0] == 13 && divSpan.hasClass("submit-on-enter")) {
          right = element.find("." + options.noteTextareaClass).val();
          add(element, options, right);
        }
      });
      if (true == options.textFocusOut) {
        $("." + options.noteTextareaClass, element).focusout(function() {
          right = element.find("." + options.noteTextareaClass).val();
          setTimeout(function() {
            if (!g) {
              add(element, options, right);
            }
          }, 500);
          key = element.find("." + options.noteTextareaClass).val();
        });
      }
    });
  };
  $.fn.note.defaults = {
    displayModeClass : "display-view",
    editModeClass : "edit-view",
    addModeClass : "add-view",
    removeClass : "display-remove",
    displayNoteClass : "display-note",
    cancelClass : "edit-cancel",
    editClass : "display-edit",
    saveClass : "edit-save",
    addClass : "add-note",
    submitOnEnterClass : "dont-submit-on-enter",
    noteTextareaClass : "edit-note",
    addNoteContentClass : "add-note-content",
    characterLimit : 0,
    noteTextareaCols : "70",
    noteTextareaRows : "",
    noteDefaultText : "",
    buttonClass : "btn btn-small",
    buttonSaveClass : null,
    textFocusOut : false,
    addNote : false,
    editButtonContent : "Edit",
    addButtonContent : "Add Note",
    saveButtonContent : "Save",
    cancelButtonContent : "Cancel",
    removeButtonContent : "X",
    addNoteContent : "Add notes to remember what you thought about this property then share your notes with your friend.",
    /**
     * @return {undefined}
     */
    updateEvent : function() {
    },
    /**
     * @return {undefined}
     */
    deleteEvent : function() {
    },
    /**
     * @return {undefined}
     */
    addEvent : function() {
    },
    /**
     * @return {undefined}
     */
    cancelEvent : function() {
    }
  };
})(jQuery);
/** @type {boolean} */
var mapInit = false;
/** @type {number} */
var gMapInterval = 0;
/** @type {number} */
var maxHeight = 0;
/** @type {number} */
var minHeight = 1E3;
ha.ui.property = {
  /**
   * @param {string} type
   * @return {undefined}
   */
  init : function(type) {
    if ($.browser.webkit) {
      ha.ui.property.initWebkit();
    }
    ha.ui.property.initEvents();
    ha.ui.property.ppbcheck();
    if (type) {
      ha.ui.property.autoFillInquiryForm();
    }
    ha.page.property.yesbookit.init();
  },
  /**
   * @return {undefined}
   */
  initWebkit : function() {
    $(".pdp-section").each(function() {
      if ($(this).height() > maxHeight) {
        maxHeight = $(this).height();
      }
      if ($(this).height() < minHeight) {
        minHeight = $(this).height();
      }
    });
  },
  /**
   * @return {undefined}
   */
  initEvents : function() {
    $("#summary-review .read-link").click(function(types) {
      types.preventDefault();
      ha.ui.property.link("reviews");
    });
    $("#summary-rates .title a").click(function() {
      ha.ui.property.link("rates");
    });
    $("#summary-rates .no-rates").click(function() {
      ha.ui.property.link("rates");
    });
    $("#summary-sub #special-offer .offer a").click(function() {
      ha.ui.property.link("rates");
    });
    $(".expandableDescription .isexpandable").hide();
    $(".expandableDescription .expandButton").show();
    $(".expandableDescription .preview").show();
    if (0 < $(".expandableDescription").length) {
      $(".expandableDescription .toggleButton").click(function(types) {
        $(".expandableDescription .toggleButton").toggle();
        $(".expandableDescription .ellipse").slideToggle();
        $(".expandableDescription .isexpandable").slideToggle();
        types.preventDefault();
      });
    }
    lazyload.Init();
    $(".payment-method-section").qtip({
      content : $(".homeawayPayments-hover").html(),
      position : {
        my : "center right",
        at : "center left",
        viewport : $(window)
      },
      style : {
        width : 350,
        classes : "homeawayPayments-hover-tooltip",
        tip : {
          width : 20,
          height : 10
        }
      },
      hide : {
        fixed : true,
        delay : 500
      }
    });
  },
  /**
   * @return {undefined}
   */
  initDisplay : function() {
    $("#propertyDetailsContent a.moreDetails").click(function() {
      var $e = $(this);
      $e.find(".more").toggleClass("hide");
      $e.find(".less").toggleClass("hide");
      if ($("#extraInfo").is(":visible")) {
        $("#extraInfo").fadeOut(200);
      } else {
        $("#extraInfo").fadeIn(200);
      }
      return false;
    });
  },
  /**
   * @param {string} h
   * @return {undefined}
   */
  initMap : function(h) {
    if (!mapInit) {
      if (-1 < h.indexOf("map") && "undefined" !== typeof mapData) {
        /** @type {boolean} */
        mapInit = true;
        ha.map.property.init(mapData);
      }
    }
  },
  /**
   * @return {undefined}
   */
  ppbcheck : function() {
    if (ha.user.login.travelerLoggedIn()) {
      if ($("#contact-info-dynamic").hasClass("hasInquired")) {
        $(".contact-info input.callme").hide();
        $(".contact-info .email-div").hide();
        $("#contact-info-dynamic").show();
      }
    }
  },
  /**
   * @return {undefined}
   */
  initPPBClickToCallEmailHover : function() {
    $(".email-div .msg").qtip({
      content : $("#ppbClickToCallEmailHover"),
      position : {
        my : "right center",
        at : "left center",
        viewport : $(window)
      },
      style : {
        tip : {
          width : 20,
          height : 10
        }
      },
      hide : {
        delay : 250,
        fixed : true
      }
    });
  },
  /**
   * @param {string} elem
   * @return {undefined}
   */
  link : function(elem) {
    if (0 < $("#" + elem).length) {
      document.getElementById(elem).scrollIntoView(true);
    }
  },
  /**
   * @return {undefined}
   */
  autoFillInquiryForm : function() {
    ha.util.datepicker.addDefaultDates();
  }
};
ha.ajax.reviews = {
  /**
   * @return {undefined}
   */
  initAuthor : function() {
    $(".sub-nav-tab li").each(function() {
      if ($(this).hasClass("select-tab")) {
        $(this).unbind("click");
      } else {
        $(this).click(function() {
          ha.ajax.reviews.author($(this));
        });
      }
    });
  },
  /**
   * @param {Object} node
   * @return {undefined}
   */
  author : function(node) {
    node.addClass("select-tab");
    node.siblings("li").removeClass("select-tab");
    var c = node.attr("id");
    /** @type {string} */
    node = '<div class="loading-results"><h3>' + urlData.waitMsg + "</h3></div>";
    c = -1 < c.indexOf("property") ? urlData.pUrl : urlData.aUrl;
    $("#author-ajax").prepend(node);
    $("#author-ajax").load(c, function() {
      $("#author-ajax > .loading-results").remove();
    });
  }
};
var ajaxInquirySubmittedSuccessfully = new Observer;
var ajaxInquirySubmittedWithErrors = new Observer;
ha.ajax.property = {
  /**
   * @param {string} n
   * @param {string} date
   * @param {string} d
   * @param {string} s
   * @return {?}
   */
  getMonth : function(n, date, d, s) {
    $.ajax({
      url : "/propertyAvailabilityNextPrevious.htm?propertyId=" + n + "&uni_id=" + d + "&systemId=" + date + "&offset=" + s,
      type : "get",
      /**
       * @param {string} type
       * @return {undefined}
       */
      success : function(type) {
        $("#availabilityCalendars").html(type);
      },
      /**
       * @return {undefined}
       */
      error : function() {
        alert(ha.strings.errorMessage);
      }
    });
    return false;
  }
};
/** @type {boolean} */
var success = false;
/** @type {string} */
var inquiryId = "";
ha.form.inquiry = {
  hasBeenSubmitted : false,
  /**
   * @param {?} optgroup
   * @param {string} destination
   * @return {undefined}
   */
  init : function(optgroup, destination) {
    var options = {
      /**
       * @return {?}
       */
      beforeSubmit : function() {
        if ($("div.terms-agree").length) {
          if ($(optgroup + " input[name=termsAgree]").is(":checked")) {
            $(optgroup + " #accept-terms-msg").hide();
          } else {
            return $(optgroup + " #accept-terms-msg").show(), ha.form.inquiry.hasBeenSubmitted = false;
          }
        }
        try {
          var pdataOld = $(optgroup + " .datepicker-start").val();
          var camelKey = $(optgroup + " .datepicker-end").val();
          if (($("body").hasClass("hasBlockedInquiries") || $("body").hasClass("hasBlockedInquiriesForBookedDatesOnly")) && (pdataOld && camelKey)) {
            var tmpSet = ha.util.datepicker.localDateStringtoISO8601(pdataOld);
            var udataCur = ha.util.datepicker.localDateStringtoISO8601(camelKey);
            var pdataCur = ha.util.datepicker.newStandardDate(tmpSet);
            var suiteView = ha.util.datepicker.newStandardDate(udataCur);
            var test = ha.backbone.Models.pdpAvailability.validateHoverRange(pdataCur, suiteView, 1);
            if ("" !== test.state && !("minimum-stay-not-met" === test.state && $("body").hasClass("hasBlockedInquiriesForBookedDatesOnly"))) {
              return ha.util.datepicker.pageInitCheckWithViewChanges(tmpSet, udataCur), ha.form.inquiry.hasBeenSubmitted = false;
            }
          }
        } catch (r) {
        }
        $(optgroup).parent().find(".loading").show();
        $(optgroup).parent().find("input[type=submit]").addClass("disabled");
      },
      /**
       * @return {undefined}
       */
      beforeSerialize : function() {
        ha.form.inquiry.setupDatePickerAnalytics(optgroup);
      },
      /**
       * @param {string} type
       * @return {undefined}
       */
      success : function(type) {
        ha.form.inquiry.success(type, optgroup);
      },
      /**
       * @param {string} type
       * @return {undefined}
       */
      error : function(type) {
        /** @type {boolean} */
        ha.form.inquiry.hasBeenSubmitted = false;
        ha.form.inquiry.error(type, optgroup);
      },
      data : {
        referrer : document.referrer,
        location : document.location.href
      }
    };
    $(optgroup + " input.datepicker").attr("autocomplete", "off");
    $(optgroup + " input[name=jsEnabled]").val("true");
    $(optgroup + " input[name=inquiryId]").val("");
    $(optgroup + " input[name=refId]").val("");
    var $title = $(optgroup + " textarea[name=comments]");
    $title.keyup(function(qualifier) {
      ha.util.limiter(qualifier, $title, destination);
    });
    $(optgroup).submit(function() {
      if (!ha.form.inquiry.hasBeenSubmitted) {
        /** @type {boolean} */
        ha.form.inquiry.hasBeenSubmitted = true;
        $(this).ajaxSubmit(options);
      }
      return false;
    });
  },
  /**
   * @param {string} type
   * @param {Function} name
   * @return {undefined}
   */
  success : function(type, name) {
    if (-1 < type.indexOf("ERRORS")) {
      $(name).parent().find(".loading").hide();
      $(name + " input[name=jsEnabled]").val("true");
      $(name + " .error-response").html(type);
      /** @type {boolean} */
      success = false;
      /** @type {string} */
      inquiryId = "";
      ha.util.datepicker.init();
      if ($(name).parents(".modal").length) {
        $("#mb-overlay").scrollTop(0);
      } else {
        window.scrollTo($(name + " .error-response").offset().left, $(name + " .error-response").offset().top);
      }
      ajaxInquirySubmittedWithErrors.fire(type);
      $(name).parent().find("input[type=submit]").removeClass("disabled");
      /** @type {boolean} */
      ha.form.inquiry.hasBeenSubmitted = false;
    } else {
      window.location = $(name).attr("action");
    }
  },
  /**
   * @param {string} type
   * @param {Function} name
   * @return {undefined}
   */
  error : function(type, name) {
    $(name).parent().find(".loading").hide();
    /** @type {string} */
    var rvar = '<div class="no-script-error">' + ha.strings.errorMessage + "</div>";
    var cssText = null !== type.responseText ? type.responseText : "";
    if (-1 < cssText.indexOf("ERRORS")) {
      rvar = cssText;
    }
    $(name + " .error-response").html(rvar);
    if ($(name).parents(".modal").length) {
      $("#mb-overlay").scrollTop(0);
    } else {
      window.scrollTo($(name + " .error-response").offset().left, $(name + " .error-response").offset().top);
    }
  },
  /**
   * @param {Object} element
   * @param {string} value
   * @param {boolean} template
   * @return {undefined}
   */
  populate : function(element, value, template) {
    element = $("#propertyInquiryForm input[name=" + element + "], #inquiry-modal-form input[name=" + element + "], form textarea[name=" + element + "]");
    if (void 0 !== element) {
      if (template || (void 0 === element.val() || "" === element.val())) {
        element.val(value);
      }
    }
    if ("comments" === element.attr("name")) {
      element.keyup();
    }
  },
  /**
   * @param {?} dataAndEvents
   * @return {undefined}
   */
  populateUserSubscribe : function(dataAndEvents) {
    var $target = $("#propertyInquiryForm input[name=userSubscribe], #inquiry-modal-form input[name=userSubscribe], form textarea[name=userSubscribe], #multiInquiryForm input[name=userSubscribe]");
    if ($target.data("docookiecallback")) {
      if (dataAndEvents) {
        $target.prop("checked", true);
      } else {
        $target.prop("checked", false);
      }
    }
  },
  /**
   * @param {string} name
   * @return {undefined}
   */
  setupDatePickerAnalytics : function(name) {
    /** @type {string} */
    var found = "";
    /** @type {string} */
    var match = "";
    /** @type {string} */
    var selector = "";
    if ((selector = $(name + " input[name=checkInDateString]")) && selector.val()) {
      selector = ha.util.datepicker.localDateStringtoISO8601(selector.val());
      found = ha.util.datepicker.newStandardDate(selector);
    }
    if ((selector = $(name + " input[name=checkOutDateString]")) && selector.val()) {
      selector = ha.util.datepicker.localDateStringtoISO8601(selector.val());
      match = ha.util.datepicker.newStandardDate(selector);
    }
    selector = $(name + " input[name=minStayStatus]");
    name = $(name + " input[name=bookedStatus]");
    if (selector) {
      if (name) {
        if (!found || !match) {
          selector.val("minstaynodates");
          name.val("bookednodates");
        } else {
          found = ha.backbone.Models.pdpAvailability.validateHoverRange(found, match, 1);
          selector.val(found.minstay > found.staycount ? "minstaytrue" : "minstayfalse");
          name.val("unavailable" === found.state ? "bookedtrue" : "bookedfalse");
        }
      }
    }
  }
};
ha.clearstay = {
  /**
   * @return {undefined}
   */
  init : function() {
    var conf = {
      closeClass : "close",
      containerCss : {
        zIndex : 5E3
      }
    };
    if (!ha.abtests.responsivePdp) {
      /**
       * @return {undefined}
       */
      conf.onShow = function() {
        $("#clearstay-modal-startDateInput").datepicker("destroy");
        $("#clearstay-modal-endDateInput").datepicker("destroy");
        ha.util.datepicker.init();
      };
    }
    $(".clearstay-booking-button").click(function() {
      $.modal($("#mb-clearstay-window"), conf);
    });
    /** @type {string} */
    var obj = "false";
    $("#modal-book-now-button-inq").click(function(types) {
      types.preventDefault();
      /** @type {string} */
      obj = "true";
      /** @type {number} */
      var interval = self.setInterval(function() {
        $("#sidebar-book-now-button-inq").click();
        $("#clearstay-modal-startDateInput").val($("#modalStartDate").val());
        $("#clearstay-modal-endDateInput").val($("#modalEndDate").val());
        $("#clearstay-num-adults").val($("#modalNumberOfAdults").val());
        $("#clearstay-num-children").val($("#modalNumberOfChildren").val());
        ha.clearstay.ratelookup();
        interval = window.clearInterval(interval);
      }, 250);
    });
    $("#sidebar-book-now-button-inq").click(function() {
      $("#clearstay-modal-startDateInput").val($("#sidebar-startDateInput").val());
      $("#clearstay-modal-endDateInput").val($("#sidebar-endDateInput").val());
      $("#clearstay-num-adults").val($("#sidebar-numberOfAdults").val());
      $("#clearstay-num-children").val($("#sidebar-numberOfChildren").val());
      if (obj === "true") {
        /** @type {string} */
        obj = "false";
      } else {
        ha.clearstay.ratelookup();
      }
    });
    $(".clearstay-booking-button").click(function(types) {
      types.preventDefault();
      $("#clearstay-modal-startDateInput").val($("#sidebar-startDateInput").val());
      $("#clearstay-modal-endDateInput").val($("#sidebar-endDateInput").val());
      $("#clearstay-num-adults").val($("#sidebar-numberOfAdults").val());
      $("#clearstay-num-children").val($("#sidebar-numberOfChildren").val());
      ha.clearstay.ratelookup();
    });
    $("#clearstay-get-rates-btn").click(function(cycle) {
      cycle.preventDefault();
      ha.clearstay.clear();
      /** @type {string} */
      cycle = "";
      if ($("#clearstay-modal-startDateInput").val() === "") {
        $("#clearstay-startDate-label").attr("style", "color:red");
        /** @type {string} */
        cycle = cycle + ha.strings.clearstay.error.nostartdate;
      }
      if ($("#clearstay-modal-endDateInput").val() === "") {
        $("#clearstay-endDate-label").attr("style", "color:red");
        /** @type {string} */
        cycle = cycle + (" " + ha.strings.clearstay.error.noenddate);
      }
      /** @type {RegExp} */
      var rchecked = /^[0-9]{1,3}$/;
      var value = $("#clearstay-num-adults").val();
      if (value === "") {
        $("#clearstay-adults-label").attr("style", "color:red");
        /** @type {string} */
        cycle = cycle + (" " + ha.strings.clearstay.error.noadults);
      } else {
        if (parseInt(value, 10) <= "0") {
          $("#clearstay-adults-label").attr("style", "color:red");
          /** @type {string} */
          cycle = cycle + (" " + ha.strings.clearstay.error.zeroadults);
        } else {
          if (!rchecked.test(value)) {
            $("#clearstay-adults-label").attr("style", "color:red");
            /** @type {string} */
            cycle = cycle + (" " + ha.strings.clearstay.error.validadults);
          }
        }
      }
      value = $("#clearstay-num-children").val();
      if (value === "") {
        $("#clearstay-kids-label").attr("style", "color:red");
        /** @type {string} */
        cycle = cycle + (" " + ha.strings.clearstay.error.nochildren);
      } else {
        if (!rchecked.test(value)) {
          $("#clearstay-kids-label").attr("style", "color:red");
          /** @type {string} */
          cycle = cycle + (" " + ha.strings.clearstay.error.validchildren);
        }
      }
      $("#clearstay-modal-errs").text(cycle);
      if (cycle === "") {
        $("#clearstay-modal-loading").show();
        $.ajax({
          type : "GET",
          url : "/clearstay",
          data : {
            bookingUrl : $("#clearstay-booking-url").val(),
            startDate : $("#clearstay-modal-startDateInput").val(),
            endDate : $("#clearstay-modal-endDateInput").val(),
            numAdults : $("#clearstay-num-adults").val(),
            numChildren : $("#clearstay-num-children").val(),
            dogsChecked : $("#clearstay-dogs").prop("checked"),
            catsChecked : $("#clearstay-cats").prop("checked")
          },
          dataType : "json",
          /**
           * @param {string} type
           * @return {undefined}
           */
          success : function(type) {
            $("#clearstay-modal-loading").hide();
            $("#clearstay-modal-base-amt").html("$" + type.base);
            $("#clearstay-modal-taxes").html("$" + type.taxes);
            $("#clearstay-modal-total").html("$" + type.total);
            /** @type {string} */
            var pdataOld = "#";
            if (typeof type.errorCode !== "undefined" && typeof type.errorCode !== "undefined") {
              /** @type {string} */
              var cycle = "";
              switch(type.errorCode) {
                case 142:
                  /** @type {string} */
                  cycle = ha.strings.clearstay.error.maxtravelers + " " + type.maxCapacity + ".";
                  $("#clearstay-adults-label").attr("style", "color:red");
                  $("#clearstay-kids-label").attr("style", "color:red");
                  break;
                case 425:
                  cycle = ha.strings.clearstay.error.nounit;
                  break;
                case 906:
                  cycle = ha.strings.clearstay.error.nopets;
                  $("#clearstay-pets-label").attr("style", "color:red");
                  break;
                case 320:
                  cycle = ha.strings.clearstay.error.toobigdates;
                  $("#clearstay-endDate-label").attr("style", "color:red");
                  break;
                case 322:
                  cycle = ha.strings.clearstay.error.unavailable;
                  $("#clearstay-startDate-label").attr("style", "color:red");
                  $("#clearstay-endDate-label").attr("style", "color:red");
                  break;
                default:
                  /** @type {string} */
                  cycle = type.errorCode + ": " + type.errorMessage;
              }
              $("#clearstay-modal-errs").text(cycle);
              $("#clearstay-button").hide();
            } else {
              pdataOld = type.bookingUrl;
              $("#clearstay-button").show();
            }
            $("#clearstay-button").attr("href", pdataOld);
          }
        });
      }
    });
  },
  /**
   * @return {undefined}
   */
  ratelookup : function() {
    ha.clearstay.clear();
    var ch = $("#clearstay-num-adults").val();
    var inputStr = $("#clearstay-num-children").val();
    var quote = $("#clearstay-modal-startDateInput").val();
    var g = $("#clearstay-modal-endDateInput").val();
    if ("" === inputStr) {
      $("#clearstay-num-children").val("0");
    }
    if ("" !== g) {
      if ("" !== ch && "" !== quote) {
        $("#clearstay-get-rates-btn").click();
      }
    }
  },
  /**
   * @return {undefined}
   */
  clear : function() {
    $(".clearstay-err-text").attr("style", "color:black");
    $("#clearstay-modal-base-amt").html("$0");
    $("#clearstay-modal-taxes").html("$0");
    $("#clearstay-modal-total").html("$0");
    $("#clearstay-button").attr("href", "#");
    $("#clearstay-button").hide();
    $("#clearstay-modal-errs").text("");
  }
};
ha.page.property = {
  searchUrl : "",
  /**
   * @return {undefined}
   */
  init : function() {
    ha.json.cookie.parse(ha.json.advJsonCookie(), "url");
    $.cookie("ip_similar", null, {
      path : "/"
    });
    $.cookie("qp_featured", null, {
      path : "/"
    });
    ha.site.tips.init();
    ha.util.initToggles();
    ha.page.property.initNavBar();
    ha.ui.favorites.propertyInit();
    ha.page.property.videoEmbed();
    if (window.ie6 && (image = $("#regionMapImage"))) {
      imageSourceUrl = image.srcsure;
      /** @type {string} */
      image.src = "";
      image.src = imageSourceUrl;
    }
    var selector = ha.state.lastSearchUrl;
    if (selector) {
      if (-1 !== selector.indexOf("?view=")) {
        selector = selector.substr(0, selector.indexOf("?view="));
      }
    } else {
      selector = $(".breadcrumb .last a").attr("href");
    }
    ha.page.property.searchUrl = selector;
  },
  /**
   * @return {undefined}
   */
  initNavBar : function() {
    /** @type {Array} */
    var codeSegments = ["photos", "location", "rates", "amenities"];
    /** @type {number} */
    var i = 0;
    for (;i < codeSegments.length;i++) {
      if (0 === $("#" + codeSegments[i] + "-bar").length || "none" === $("#" + codeSegments[i] + "-bar").css("display")) {
        $("." + codeSegments[i] + "-link").css("display", "none");
      }
    }
  },
  /**
   * @param {number} item
   * @return {?}
   */
  getVideoId : function(item) {
    try {
      if (-1 !== item.indexOf("youtube.com/embed/")) {
        return decodeURI(item).split("youtube.com/embed/")[1];
      }
      if (-1 !== item.indexOf("?")) {
        /** @type {Array.<string>} */
        var types = decodeURI(item).split("?")[1].split("&");
        /** @type {number} */
        item = 0;
        /** @type {number} */
        var jlen = types.length;
        for (;item < jlen;item++) {
          if (0 === types[item].indexOf("v=")) {
            return types[item].replace("v=", "");
          }
        }
      } else {
        if (-1 !== item.indexOf("youtu.be")) {
          return decodeURI(item).split("youtu.be/")[1];
        }
      }
    } catch (d) {
    }
    return null;
  },
  /**
   * @return {undefined}
   */
  videoEmbed : function() {
    try {
      if (!($.browser.mozilla && "1.9" === $.browser.version.slice(0, 3))) {
        $("#externalLinks li.videoLink").each(function() {
          var a = ha.page.property.getVideoId($(this).children("a").attr("href"));
          $(this).html('<iframe id="' + a + '" name="' + a + '" width="640" height="480" src="http://www.youtube.com/embed/' + a + '" frameborder="0" allowfullscreen="1"></iframe>');
        });
      }
    } catch (a) {
    }
  },
  /**
   * @param {Object} associatedModel
   * @param {?} startDay
   * @param {?} end
   * @param {?} dataAndEvents
   * @param {number} deepDataAndEvents
   * @param {(number|string)} ignoreMethodDoesntExist
   * @param {?} textAlt
   * @param {Function} optgroup
   * @return {undefined}
   */
  fireOLBAjax : function(associatedModel, startDay, end, dataAndEvents, deepDataAndEvents, ignoreMethodDoesntExist, textAlt, optgroup) {
    associatedModel = new ha.backbone.Models.OLBData({
      listingManagerId : associatedModel,
      startDate : startDay,
      endDate : end,
      petIncluded : dataAndEvents,
      adultsCount : deepDataAndEvents,
      childrenCount : ignoreMethodDoesntExist
    });
    document.olbModal = new ha.backbone.Views.PropertyPage.OLBModal({
      model : associatedModel
    });
    document.olbModal.bind("modalClose", optgroup);
    if (textAlt) {
      document.olbModal.updateQuote();
    }
  }
};
ha.ui.property.bookitnow = {
  /**
   * @param {string} type
   * @param {string} now
   * @return {undefined}
   */
  init : function(type, now) {
    $(type).on("click", function() {
      var $html = $(".bookitnow-startDate-group");
      var sender = $(".bookitnow-endDate-group");
      $html.removeClass("error");
      sender.removeClass("error");
      $html.find(".help-block").hide();
      sender.find(".help-block").hide();
      var field = $html.find("#bookitnow-startDateInput");
      var ret = sender.find("#bookitnow-endDateInput");
      if (field.val() === field.attr("rel") || ("" === field.val() || (ret.val() === ret.attr("rel") || "" === ret))) {
        if (field.val() === field.attr("rel") || "" === field.val()) {
          $html.addClass("error");
          $html.find(".help-block").show();
        }
        if (ret.val() === ret.attr("rel") || "" === ret.val()) {
          sender.addClass("error");
          sender.find(".help-block").show();
        }
      } else {
        now();
      }
    });
  },
  /**
   * @param {?} $sanitize
   * @param {?} Application
   * @return {undefined}
   */
  getBookingRates : function($sanitize, Application) {
    $("#bookitnow-modal-error").html("");
    if ($("#bookitnow-modal-startDateInput").val() === $("#bookitnow-modal-startDateInput").attr("rel") || ($("#bookitnow-modal-endDateInput").val() === $("#bookitnow-modal-endDateInput").attr("rel") || ("" === $("#bookitnow-modal-startDateInput").val() || "" === $("#bookitnow-modal-endDateInput").val()))) {
      if ($("#bookitnow-modal-startDateInput").val() === $("#bookitnow-modal-startDateInput").attr("rel") || "" === $("#bookitnow-modal-startDateInput").val()) {
        $("#bookitnow-modal-datesSection .control-group").addClass("error");
      }
      if ($("#bookitnow-modal-endDateInput").val() === $("#bookitnow-modal-endDateInput").attr("rel") || "" === $("#bookitnow-modal-endDateInput").val()) {
        $("#bookitnow-modal-datesSection .control-group").addClass("error");
      }
      Application();
    } else {
      $("#bookitnow-modal-datesSection .control-group").removeClass("error");
      $("#bookitnow-modal-datesSection .endDateControl .help-inline").remove();
      $sanitize();
    }
  }
};
ha.page.property.yesbookit = {
  /**
   * @param {string} dataAndEvents
   * @return {undefined}
   */
  handleYBIError : function(dataAndEvents) {
    $("#bookitnow-modal-datesSection .control-group").addClass("error");
    $("#bookitnow-modal-datesSection .endDateControl").append("<span class='help-inline help-bubble'><span class='arrow'></span><span class='bubbleText'>" + dataAndEvents + "</span></span>");
  },
  /**
   * @return {undefined}
   */
  init : function() {
    $("#ybi-bookitnow-button").button();
    ha.ui.property.bookitnow.init("#ybi-bookitnow-button", ha.page.property.yesbookit.modal);
  },
  /**
   * @return {undefined}
   */
  disableFormButton : function() {
    /** @type {boolean} */
    ha.page.property.yesbookit.continueToBookingButtonEnabled = false;
    $("#continueToBookingButton").addClass("disabled");
  },
  /**
   * @return {undefined}
   */
  enableFormButton : function() {
    /** @type {boolean} */
    ha.page.property.yesbookit.continueToBookingButtonEnabled = true;
    $("#continueToBookingButton").removeClass("disabled");
  },
  modalHasError : false,
  continueToBookingButtonEnabled : false,
  /**
   * @param {Object} recurring
   * @param {Object} obj
   * @param {number} opt_attributes
   * @param {Object} v33
   * @return {?}
   */
  getRatesUrl : function(recurring, obj, opt_attributes, v33) {
    var getRatesUrl;
    getRatesUrl = "/ajax/ybi/getrates?propertyCode=" + $("#ybiPropertyId").val();
    getRatesUrl += "&agentId=" + $("#ybiAgentId").val();
    /** @type {string} */
    getRatesUrl = getRatesUrl + ("&guestCount=" + opt_attributes) + ("&isModal=" + v33) + ("&ybiServerId=" + $("#ybiServerId").val());
    if ("" !== recurring) {
      if ("" !== obj) {
        /** @type {string} */
        getRatesUrl = getRatesUrl + ("&arrivalDate=" + recurring) + ("&departureDate=" + obj);
      }
    }
    return getRatesUrl;
  },
  /**
   * @return {undefined}
   */
  inspectFieldsForSubmitButton : function() {
    /** @type {number} */
    var a = 0;
    $("#ybiForm input").each(function() {
      if ("" === $(this).val()) {
        a++;
      }
      if (0 === a) {
        if (!ha.page.property.yesbookit.modalHasError) {
          ha.page.property.yesbookit.enableFormButton();
        }
      } else {
        ha.page.property.yesbookit.disableFormButton();
      }
    });
    $("#bookitnow-dates input").each(function() {
      if ("" === $(this).val()) {
        a++;
      }
      if (0 === a) {
        if (!ha.page.property.yesbookit.modalHasError) {
          ha.page.property.yesbookit.enableFormButton();
        }
      } else {
        ha.page.property.yesbookit.disableFormButton();
      }
    });
  },
  /**
   * @return {undefined}
   */
  initYBIForm : function() {
    var appFrontendUrl;
    appFrontendUrl = "/ajax/ybi/submitBooking/" + $("#propertyId").val();
    var settings = {
      /**
       * @return {undefined}
       */
      beforeSubmit : function() {
        $("#bookitnow-modal-loading").show();
        ha.page.property.yesbookit.disableFormButton();
      },
      /**
       * @param {string} type
       * @return {undefined}
       */
      success : function(type) {
        var responsivePdp = ha.abtests.responsivePdp;
        $("#bookitnow-modal-loading").hide();
        if (-1 !== type.indexOf("ybiForm")) {
          $("#ybiForm-container").html(type);
          ha.page.property.yesbookit.initYBIForm();
        } else {
          if (responsivePdp) {
            $("#bookitnow-modal").modal("hide");
            $("#bookitnow-modal-wrapper").html(type);
            $("#bookit-modal").modal();
            $("body").addClass("modal-open");
            $("#bookit-modal").on("hidden.yesbookit", function() {
              $("body").removeClass("modal-open");
              $("#ybi-bookitnow-button").button("enable");
              $("#bookit-modal").off("hidden.yesbookit");
            });
          } else {
            $("#bookitnow-modal").html(type);
          }
        }
        if (!responsivePdp) {
          $.modal.update("#bookitnow-modal");
        }
      },
      /**
       * @return {undefined}
       */
      error : function() {
        ha.page.property.yesbookit.enableFormButton();
      },
      url : appFrontendUrl,
      type : "POST"
    };
    $("#ybiForm input").keyup(function() {
      ha.page.property.yesbookit.inspectFieldsForSubmitButton();
    });
    $("#bookitnow-dates input").change(function() {
      ha.page.property.yesbookit.inspectFieldsForSubmitButton();
    });
    $("#ybiForm").unbind("submit");
    $("#ybiForm").submit(function() {
      $(this).ajaxSubmit(settings);
      return false;
    });
  },
  /**
   * @return {undefined}
   */
  getYBIRates : function() {
    var appFrontendUrl = ha.page.property.yesbookit.getRatesUrl($("#bookitnow-modal-startDateInput").val(), $("#bookitnow-modal-endDateInput").val(), $("#adultsCount").val(), false);
    $.ajax({
      type : "GET",
      url : appFrontendUrl,
      dataType : "html",
      /**
       * @return {undefined}
       */
      beforeSend : function() {
        $("#bookitnow-modal-loading").show();
      },
      /**
       * @param {string} type
       * @return {undefined}
       */
      success : function(type) {
        $("#ybi-hiddenForm").html($(type).find("#ybi-hiddenForm").html());
        $(".js-adultsSelection").html($(type).find(".js-adultsSelection").html());
        $("#bookitnow-modal-rates-section").html($(type).find("#bookitnow-modal-rates-section").html());
        $("#bookitnow-modal-loading").hide();
        if (-1 !== type.indexOf("ERROR")) {
          /** @type {boolean} */
          ha.page.property.yesbookit.modalHasError = true;
          /** @type {boolean} */
          ha.page.property.yesbookit.continueToBookingButtonEnabled = false;
          ha.page.property.yesbookit.handleYBIError($("#errorString").html());
        } else {
          /** @type {boolean} */
          ha.page.property.yesbookit.modalHasError = false;
          /** @type {boolean} */
          ha.page.property.yesbookit.continueToBookingButtonEnabled = true;
        }
        ha.page.property.yesbookit.inspectFieldsForSubmitButton();
      }
    });
  },
  /**
   * @return {undefined}
   */
  clearRates : function() {
    $(".ybi-rate").html("AU$0.00");
  },
  /**
   * @return {undefined}
   */
  modal : function() {
    if (void 0 === $("#ybi-bookitnow-button").attr("disabled")) {
      $("#ybi-bookitnow-button").button("loading");
      /** @type {null} */
      var recurring = null;
      /** @type {null} */
      var suiteView = null;
      if ($("#bookitnow-startDateInput").length) {
        recurring = $("#bookitnow-startDateInput").val();
        suiteView = $("#bookitnow-endDateInput").val();
      } else {
        recurring = ha.util.datepicker.formatDateFromISO8601ToLocal(ha.backbone.Models.pdpAvailability.get("startDate"));
        suiteView = ha.util.datepicker.formatDateFromISO8601ToLocal(ha.backbone.Models.pdpAvailability.get("endDate"));
      }
      recurring = ha.page.property.yesbookit.getRatesUrl(recurring, suiteView, 2, true);
      $.ajax({
        type : "GET",
        url : recurring,
        dataType : "html",
        /**
         * @param {string} type
         * @return {undefined}
         */
        success : function(type) {
          if (type.indexOf("YBIunavailable") !== -1) {
            if ($("body").hasClass("hasResponsivePDP")) {
              $("#ybi-bookitnow-button").button("enable");
              ha.backbone.Events.trigger("showInquiryFallback", {
                olbError : true,
                olbMessage : $(type).find("#errorString").html()
              });
            } else {
              ha.backbone.Events.trigger("showInquiryModal", {
                olbError : true,
                olbMessage : $(type).find("#errorString").html(),
                /**
                 * @return {undefined}
                 */
                onClose : function() {
                  $("#ybi-bookitnow-button").button("enable");
                }
              });
            }
          } else {
            var isDir = ha.abtests.responsivePdp;
            /** @type {string} */
            var cycle = isDir ? "changed" : "change";
            if (isDir) {
              $("#bookitnow-modal-wrapper").html(type);
            } else {
              $("#bookitnow-modal").html(type);
            }
            if (type.indexOf("ERROR") !== -1) {
              /** @type {boolean} */
              ha.page.property.yesbookit.continueToBookingButtonEnabled = false;
              $("#continueToBookingButton").addClass("disabled");
              /** @type {boolean} */
              ha.page.property.yesbookit.modalHasError = true;
            } else {
              /** @type {boolean} */
              ha.page.property.yesbookit.modalHasError = false;
            }
            ha.util.datepicker.init();
            $("#bookitnow-modal-endDateInput").on(cycle, function() {
              ha.ui.property.bookitnow.getBookingRates(ha.page.property.yesbookit.getYBIRates, ha.page.property.yesbookit.clearRates);
            });
            $("#bookitnow-modal-form .adultsSelection").change(function() {
              ha.ui.property.bookitnow.getBookingRates(ha.page.property.yesbookit.getYBIRates, ha.page.property.yesbookit.clearRates);
            });
            $(".yesBookIt").on("click", "#continueToBookingButton", function(types) {
              types.preventDefault();
              if (ha.page.property.yesbookit.continueToBookingButtonEnabled) {
                $("#ybiForm").submit();
              }
            });
            ha.page.property.yesbookit.initYBIForm();
            if (isDir) {
              $("#bookitnow-modal").on("shown.yesbookit", function() {
                $("body").addClass("modal-open");
                $("#bookitnow-modal").off("shown.yesbookit");
              });
              $("#bookitnow-modal").on("hidden.yesbookit", function() {
                $("body").removeClass("modal-open");
                $("#ybi-bookitnow-button").button("enable");
                $("#bookitnow-modal").off("hidden.yesbookit");
              });
              $("#bookitnow-modal").modal();
            } else {
              $("#bookitnow-modal").modal({
                /**
                 * @return {undefined}
                 */
                onClose : function() {
                  $("#ybi-bookitnow-button").button("enable");
                }
              });
            }
          }
        }
      });
    }
  }
};
ha.page.property.inquirySuccessModal = {
  elem : null,
  modal : null,
  /**
   * @param {string} type
   * @return {undefined}
   */
  init : function(type) {
    /** @type {string} */
    ha.page.property.inquirySuccessModal.elem = type;
    ha.page.property.inquirySuccessModal.show();
    $("iframe[rel]").each(function() {
      if (-1 !== $(this).attr("src").indexOf("about:blank")) {
        var self = $(this);
        self.attr("src", self.attr("rel"));
      }
    });
  },
  /**
   * @return {undefined}
   */
  show : function() {
    ha.page.property.inquirySuccessModal.modal = ha.page.property.inquirySuccessModal.elem.modal();
  },
  /**
   * @return {undefined}
   */
  close : function() {
    if (ha.page.property.inquirySuccessModal.modal) {
      ha.page.property.inquirySuccessModal.modal.close();
      /** @type {null} */
      ha.page.property.inquirySuccessModal.modal = null;
    }
  }
};
ha.page.property.social = {
  inquirySharedCookie : "facebook-inq-share",
  propertyObj : null,
  /**
   * @param {string} type
   * @param {string} destination
   * @return {undefined}
   */
  init : function(type, destination) {
    /** @type {string} */
    ha.page.property.social.propertyObj = destination;
    if ($.cookie(ha.page.property.social.inquirySharedCookie)) {
      $(".inquiry-success .signup").show();
    } else {
      $(".inquiry-success .share-to-fb").show();
      jQuery.getScript(type, function() {
        Social.initForHost();
        /** @type {Array} */
        Social.Facebook.defaultPermissions = ["email", "publish_stream"];
        $(document).on("click", "a[rel=facebook-share]", ha.page.property.social._shareCallback);
      });
    }
  },
  /**
   * @return {undefined}
   */
  _shareCallback : function() {
    if ("undefined" !== typeof window.waModalInquiryFacebookClick) {
      try {
        window.waModalInquiryFacebookClick();
      } catch (a) {
      }
    }
    ha.page.property.social.shareToFacebook(ha.page.property.social.propertyObj);
  },
  /**
   * @param {?} message
   * @return {undefined}
   */
  shareToFacebook : function(message) {
    ha.page.property.inquirySuccessModal.close();
    Social.Share.dialog(message, function(item) {
      ha.page.property.inquirySuccessModal.show();
      if (item) {
        if (item.post_id) {
          Social.Facebook.me(function(node) {
            $.cookie(ha.page.property.social.inquirySharedCookie, true);
            if ("undefined" !== typeof window.waModalInquiryFacebookShare) {
              try {
                window.waModalInquiryFacebookShare();
              } catch (b) {
              }
            }
            $(".inquiry-success .signup #profile-img").attr("src", node.link.replace("www.", "graph.") + "/picture?type=normal");
            $(".inquiry-success .share-to-fb").hide();
            $(".inquiry-success .share-success").show();
          });
        }
      }
    }, ha.page.property.inquirySuccessModal.show);
  }
};
ha.site.tips = {
  /**
   * @return {undefined}
   */
  init : function() {
    $("a.vote-button").each(function() {
      $(this).click(function() {
        ha.site.tips.vote($(this));
      });
    });
  },
  /**
   * @param {Object} item
   * @return {undefined}
   */
  vote : function(item) {
    var $wrapper = item.parents("div.tip");
    $wrapper.addClass("loading");
    item.addClass("vote-button-off");
    item.removeClass("vote-button");
    $.get("/ajax/attraction/vote", {
      attractionId : $wrapper.attr("id")
    }, function(elm) {
      if ("true" === elm) {
        item.unbind("click");
        elm = $("#" + $wrapper.attr("id") + " .vote-count");
        var count = elm.text();
        elm.text(++count);
      } else {
        item.removeClass("vote-button-off");
        item.addClass("vote-button");
      }
      $wrapper.removeClass("loading");
    });
  }
};
$(function() {
  ha.ui.property.initDisplay();
  if (1 < $("body.author .sub-nav-tab li").length) {
    ha.ajax.reviews.initAuthor();
  }
});
ha.map.base = {
  reqId : 0,
  maps : {},
  overlay : null,
  markers : {},
  proximityMarker : null,
  mapLazyLoaded : {},
  /**
   * @param {Object} child
   * @param {(Function|string)} deepDataAndEvents
   * @return {undefined}
   */
  generatePropertyMap : function(child, deepDataAndEvents) {
    var n;
    var hue;
    var unlock = ha.map.base.getLazyLoadKey(deepDataAndEvents);
    if (!ha.map.base.mapLazyLoaded[unlock]) {
      n = $(window);
      if (!child) {
        child = $("#property-map-container");
      }
      if (!deepDataAndEvents) {
        /** @type {string} */
        deepDataAndEvents = "";
      }
      wt = n.scrollTop();
      wb = n.height() + n.scrollTop();
      n = child.offset().top;
      hue = n + child.height();
      if (wb + 200 > n) {
        if (wt - 200 < hue) {
          ha.map.base.createMap(ha.map.base.mapData.type, "unit-map" + deepDataAndEvents);
          if (ha.map.base.maps[ha.map.base.mapData.type]) {
            ha.map.property.genMap(ha.map.base.mapData.type, ha.map.base.mapData.maxZoom);
          }
          ha.backbone.Events.trigger("propertyMapViewLoaded");
          /** @type {boolean} */
          ha.map.base.mapLazyLoaded[unlock] = true;
          this.removeScrollListener();
        }
      }
    }
  },
  /**
   * @param {(Function|string)} deepDataAndEvents
   * @return {?}
   */
  getLazyLoadKey : function(deepDataAndEvents) {
    var type = ha.map.base.mapData.type;
    if (deepDataAndEvents) {
      type += deepDataAndEvents;
    }
    return type;
  },
  /**
   * @return {undefined}
   */
  loadMaps : function() {
    if ("preview" === ha.map.base.mapData.type) {
      ha.map.base.createMap(ha.map.base.mapData.type, ha.map.property.previewMapId);
      if (ha.map.base.maps[ha.map.base.mapData.type]) {
        ha.map.property.genMap(ha.map.base.mapData.type, ha.map.base.mapData.maxZoom);
      }
    } else {
      if ("property" === ha.map.base.mapData.type) {
        if (0 < $("#pdp-container").length && (ha.map.base.createMap("preview", "unit-map-sm"), ha.map.base.maps.preview && ha.map.property.genMap("preview", ha.map.base.mapData.maxZoom)), 0 <= window.location.hash.indexOf("map") ? (ha.map.base.createMap(ha.map.base.mapData.type, "unit-map"), ha.map.base.maps[ha.map.base.mapData.type] && ha.map.property.genMap(ha.map.base.mapData.type, ha.map.base.mapData.maxZoom)) : ha.map.property.loadMapOnScroll && this.initializeScrollListener(), 0 < $("#sidebar-google-map").length) {
          ha.map.base.createMap("sidebar-google-map", "sidebar-google-map", "sidebar-map");
          if (ha.map.base.maps["sidebar-google-map"]) {
            ha.map.property.genMap("sidebar-google-map", ha.map.base.mapData.maxZoom);
          }
        }
      } else {
        if ("compare" === ha.map.base.mapData.type) {
          ha.map.base.createMap(ha.map.base.mapData.type, "unit-map", "compare-preview");
          if (ha.map.base.maps[ha.map.base.mapData.type]) {
            ha.map.property.genMap(ha.map.base.mapData.type);
          }
          ha.page.favorites.refresh();
        } else {
          if ("search" === ha.map.base.mapData.type) {
            $("#prop-loading").css("display", "none");
            $("#prop-scroller ul").css("display", "block");
            ha.map.base.createMap(ha.map.base.mapData.type, "map-bin");
            ha.map.base.overlay = ha.map.base.createMapOverlay(ha.map.base.maps[ha.map.base.mapData.type]);
            ha.map.search.init();
          }
        }
      }
    }
  },
  /**
   * @return {undefined}
   */
  removeMapLazyLoaded : function() {
    delete ha.map.base.mapLazyLoaded[ha.map.base.mapData.type];
  },
  /**
   * @return {undefined}
   */
  initializeScrollListener : function() {
    $(window).on("scroll.haMapLoader", function() {
      ha.map.base.generatePropertyMap();
    });
  },
  /**
   * @return {undefined}
   */
  removeScrollListener : function() {
    $(window).off("scroll.haMapLoader");
  },
  /**
   * @param {string} name
   * @param {string} container
   * @param {string} props
   * @return {undefined}
   */
  createMap : function(name, container, props) {
    if (!props) {
      /** @type {string} */
      props = name;
    }
    props = ha.map.base.getMapOptions(props);
    /** @type {(HTMLElement|null)} */
    container = document.getElementById(container);
    if (null !== container) {
      if (void 0 !== container) {
        ha.map.base.maps[name] = new google.maps.Map(container, props);
      }
    }
  },
  mapData : {
    id : "",
    title : null,
    gc : null,
    type : "",
    maxZoom : null,
    markers : {},
    markerDataList : [],
    previewMarker : null,
    /**
     * @return {undefined}
     */
    Create : function() {
      this.id = ha.map.base.mapData.id;
      this.title = ha.map.base.mapData.title;
      this.gc = ha.map.base.mapData.gc;
      this.type = ha.map.base.mapData.type;
      this.markers = ha.map.base.mapData.markers;
      this.makerDataList = ha.map.base.mapData.markerDataList;
      this.previewMarker = ha.map.base.mapData.previewMarker;
    }
  },
  /**
   * @param {string} opacity
   * @return {?}
   */
  getMapOptions : function(opacity) {
    /** @type {boolean} */
    var draggable = true;
    /** @type {boolean} */
    var memory = true;
    var pos = {
      mapTypeIds : [google.maps.MapTypeId.ROADMAP, google.maps.MapTypeId.SATELLITE, google.maps.MapTypeId.HYBRID],
      style : google.maps.MapTypeControlStyle.HORIZONTAL_BAR,
      position : google.maps.ControlPosition.TOP_RIGHT
    };
    /** @type {boolean} */
    var stack = true;
    var style = {
      style : google.maps.NavigationControlStyle.ZOOM_PAN,
      position : google.maps.ControlPosition.TOP_LEFT
    };
    /** @type {boolean} */
    var list = true;
    /** @type {boolean} */
    var streetViewControl = false;
    /** @type {boolean} */
    var zoomControl = true;
    if ("preview" === opacity) {
      /** @type {boolean} */
      memory = false;
      /** @type {null} */
      pos = null;
      /** @type {boolean} */
      stack = true;
      style = {
        style : google.maps.NavigationControlStyle.SMALL
      };
      /** @type {boolean} */
      list = false;
    }
    if ("property" === opacity) {
      /** @type {boolean} */
      streetViewControl = true;
    }
    if ("compare-preview" === opacity) {
      /** @type {boolean} */
      memory = false;
      /** @type {null} */
      pos = null;
      /** @type {boolean} */
      stack = false;
      style = {
        style : google.maps.NavigationControlStyle.SMALL
      };
      /** @type {boolean} */
      list = false;
    }
    if ("search" === opacity) {
      pos = {
        position : google.maps.ControlPosition.TOP_LEFT
      };
    }
    if ("sidebar-map" == opacity) {
      /** @type {boolean} */
      zoomControl = list = stack = memory = draggable = false;
    }
    return{
      center : new google.maps.LatLng(0, 0),
      disableDefaultUI : false,
      draggable : draggable,
      mapTypeId : google.maps.MapTypeId.ROADMAP,
      mapTypeControl : memory,
      mapTypeControlOptions : pos,
      navigationControl : stack,
      navigationControlOptions : style,
      scaleControl : list,
      scaleControlOptions : {
        position : google.maps.ControlPosition.BOTTOM_LEFT
      },
      scrollwheel : false,
      streetViewControl : streetViewControl,
      zoomControl : zoomControl
    };
  },
  /**
   * @return {?}
   */
  createMapOverlay : function() {
    var layer = new google.maps.OverlayView;
    /**
     * @return {undefined}
     */
    layer.draw = function() {
    };
    layer.setMap(ha.map.base.maps[ha.map.base.mapData.type]);
    return layer;
  },
  gc : {
    minLat : 0,
    maxLat : 0,
    minLng : 0,
    maxLng : 0,
    zoom : 0,
    region : 0,
    /**
     * @return {?}
     */
    Create : function() {
      this.minLat = ha.map.base.gc.minLat;
      this.maxLat = ha.map.base.gc.maxLat;
      this.minLng = ha.map.base.gc.minLng;
      this.maxLng = ha.map.base.gc.maxLng;
      this.zoom = ha.map.base.gc.zoom;
      this.region = ha.map.base.gc.region;
      return this;
    }
  },
  markerData : {
    spu : null,
    unitId : null,
    title : null,
    lat : 0,
    lng : 0,
    gc : null,
    exact : false,
    pinIcon : null,
    pinSelIcon : null,
    pinViewedIcon : null,
    pinViewedSelIcon : null,
    pinInquiredIcon : null,
    pinInquiredSelIcon : null,
    pinFavoritedIcon : null,
    pinFavoritedSelIcon : null,
    markerType : "",
    /**
     * @param {Object} data
     * @return {?}
     */
    Create : function(data) {
      if ("undefined" === typeof data) {
        data = ha.map.base.markerData;
      }
      this.spu = data.spu;
      this.unitId = data.unitId;
      this.title = data.title;
      this.gc = data.gc;
      this.lat = data.lat;
      this.lng = data.lng;
      this.exact = data.exact;
      this.pinIcon = data.pinIcon;
      this.pinSelIcon = data.pinSelIcon;
      this.pinViewedIcon = data.pinViewedIcon;
      this.pinViewedSelIcon = data.pinViewedSelIcon;
      this.pinInquiredIcon = data.pinInquiredIcon;
      this.pinInquiredSelIcon = data.pinInquiredSelIcon;
      this.pinFavoritedIcon = data.pinFavoritedIcon;
      this.pinFavoritedSelIcon = data.pinFavoritedSelIcon;
      this.isViewed = data.isViewed;
      this.isInquired = data.isInquired;
      this.isFavorited = data.isFavorited;
      return this;
    }
  },
  /**
   * @param {Object} data
   * @return {?}
   */
  hitToMarkerData : function(data) {
    var placeInfo = {
      spu : data.spu,
      lat : data.lat,
      lng : data.lng,
      title : data.spu.split("-")[1],
      isViewed : true === data.isViewed,
      isInquired : true === data.isInquired,
      isFavorited : true === data.isFavorited,
      exact : data.exact
    };
    if (data.listingIcon) {
      placeInfo.pinIcon = data.listingIcon;
      placeInfo.pinSelIcon = data.highlightIcon;
      placeInfo.pinViewedIcon = data.pinViewedIcon;
      placeInfo.pinViewedSelIcon = data.pinViewedSelIcon;
      placeInfo.pinInquiredIcon = data.pinInquiredIcon;
      placeInfo.pinInquiredSelIcon = data.pinInquiredSelIcon;
      placeInfo.pinFavoritedIcon = data.pinFavoritedIcon;
      placeInfo.pinFavoritedSelIcon = data.pinFavoritedSelIcon;
    } else {
      placeInfo.pinIcon = mapData.listingIcon;
      placeInfo.pinSelIcon = mapData.highlightIcon;
      placeInfo.pinViewedIcon = mapData.pinViewedIcon;
      placeInfo.pinViewedSelIcon = mapData.pinViewedSelIcon;
      placeInfo.pinInquiredIcon = mapData.pinInquiredIcon;
      placeInfo.pinInquiredSelIcon = mapData.pinInquiredSelIcon;
      placeInfo.pinFavoritedIcon = mapData.pinFavoritedIcon;
      placeInfo.pinFavoritedSelIcon = mapData.pinFavoritedSelIcon;
    }
    return ha.map.base.markerData.Create(placeInfo);
  },
  /**
   * @param {Object} data
   * @return {undefined}
   */
  loadMarkerData : function(data) {
    var win = $('<div id="hit-' + data.spu + '" class="hidden"></div>');
    var location = new google.maps.LatLng(unescape(data.lat), unescape(data.lng));
    var options = {
      position : location,
      map : ha.map.base.maps[ha.map.base.mapData.type],
      title : data.title + " " + ha.strings.map.markerTitle,
      draggable : false,
      clickable : true,
      icon : data.pinIcon
    };
    win.data("pinInquiredIcon", data.pinInquiredIcon);
    win.data("pinInquiredSelIcon", data.pinInquiredSelIcon);
    win.data("pinFavoritedIcon", data.pinFavoritedIcon);
    win.data("pinFavoritedSelIcon", data.pinFavoritedSelIcon);
    win.data("pinViewedIcon", data.pinViewedIcon);
    win.data("pinViewedSelIcon", data.pinViewedSelIcon);
    win.data("pinIcon", data.pinIcon);
    win.data("pinSelIcon", data.pinSelIcon);
    options = new google.maps.Marker(options);
    if (!data.exact) {
      location = new google.maps.Circle(_.extend({
        center : location,
        visible : false,
        map : ha.map.base.maps[ha.map.base.mapData.type],
        draggable : false,
        clickable : false
      }, ha.config.maps.circleOptions));
      options.circle = location;
    }
    ha.map.base.markerEvents(options, win, data);
    ha.map.base.setPinIcon(options, false);
  },
  /**
   * @param {Function} optgroup
   * @param {Object} elem
   * @param {Object} m
   * @return {undefined}
   */
  markerEvents : function(optgroup, elem, m) {
    $(elem).data("marker", optgroup);
    /** @type {Object} */
    optgroup.hit = elem;
    google.maps.event.addListener(optgroup, "click", function() {
      ha.map.base.show(optgroup.hit);
    });
    if (optgroup.circle) {
      google.maps.event.addListener(optgroup, "mouseover", function() {
        optgroup.circle.setVisible(true);
        optgroup.closeCircleEvent = google.maps.event.addListenerOnce(optgroup, "mouseout", function() {
          optgroup.circle.setVisible(false);
        });
      });
    }
    $(".listing-preview").bind("mouseleave", function() {
      $(this).hide();
      ha.map.base.hideCircles();
    });
    /** @type {Function} */
    ha.map.base.markers[m.spu] = optgroup;
  },
  /**
   * @return {undefined}
   */
  hide : function() {
    var self;
    $(".listing-preview").hide();
    var i;
    for (i in ha.map.base.markers) {
      self = ha.map.base.markers[i];
      ha.map.base.setPinIcon(self, false);
      if (self.circle) {
        self.circle.setVisible(false);
      }
    }
  },
  /**
   * @return {undefined}
   */
  hideCircles : function() {
    var group;
    var i;
    for (i in ha.map.base.markers) {
      group = ha.map.base.markers[i];
      if (group.circle) {
        group.circle.setVisible(false);
      }
    }
  },
  /**
   * @param {string} type
   * @return {undefined}
   */
  show : function(type) {
    ha.map.base.hide();
    $("#map-overlay").css("display", "none");
    ha.map.base.hide();
    var self = type.data("marker");
    if (self.circle) {
      self.circle.setVisible(true);
    }
    ha.map.base.setPinIcon(self, false);
    self.setZIndex(1E3);
    var url = type.attr("id").replace("hit-", "");
    var $e = $('<div><div id="' + url + '" class="listing-hover"><div class="preview-top"><div class="preview-target"><div class="preview-loading"></div></div></div>\t<div class="preview-btm"></div></div></div>');
    /** @type {string} */
    url = "/unit/preview?mode=map&spu=" + url;
    if (0 < $.trim($("#startDateInput").val()).length) {
      url += "&start=" + encodeURIComponent($("#startDateInput").val());
    }
    $e.find(".preview-target").load(url, function() {
      if (self.closeCircleEvent) {
        google.maps.event.removeListener(self.closeCircleEvent);
        /** @type {null} */
        self.closeCircleEvent = null;
      }
      type.data("preview", $e.html());
      $(".listing-preview").html($e.html());
      var optgroup = ha.map.base.overlay.getProjection().fromLatLngToContainerPixel(self.getPosition());
      /** @type {null} */
      var cycle = null;
      /** @type {(HTMLElement|null)} */
      cycle = document.getElementById("map-bin") ? document.getElementById("map-bin") : document.getElementById("unit-map");
      optgroup = ha.map.base.offset(cycle, optgroup);
      /** @type {string} */
      cycle = optgroup.x - $(".listing-hover").width() / 2 - 330 + "px";
      if ($(".listing-hover").width() > optgroup.x) {
        /** @type {string} */
        cycle = optgroup.x + $(".listing-hover").width() / 2 - 330 + "px";
      }
      $(".listing-preview").css({
        display : "block",
        position : "absolute",
        left : cycle
      });
      if (optgroup.y - $(window).scrollTop() < $(".listing-hover").height() - 5) {
        $(".listing-preview").css({
          top : optgroup.y - 5 + "px"
        });
      } else {
        $(".listing-preview").css({
          top : optgroup.y - $(".listing-hover").height() - 15 + "px"
        });
      }
    });
    ha.page.favorites.refresh();
  },
  /**
   * @param {Object} m
   * @param {string} cycle
   * @param {Function} optgroup
   * @return {undefined}
   */
  upDatePinIcon : function(m, cycle, optgroup) {
    if (ha.map.base.markers) {
      if ("undefined" !== typeof ha.map.base.markers[m]) {
        m = ha.map.base.markers[m];
        m.hit.data(cycle, optgroup);
        ha.map.base.setPinIcon(m, false);
      }
    }
  },
  /**
   * @param {Object} event
   * @param {boolean} recurring
   * @return {undefined}
   */
  setPinIcon : function(event, recurring) {
    /** @type {null} */
    var test = null;
    if (recurring) {
      if (event.hit.data("isInquired")) {
        event.setZIndex(30);
        test = event.hit.data("pinInquiredSelIcon");
      } else {
        if (event.hit.data("isFavorited")) {
          event.setZIndex(20);
          test = event.hit.data("pinFavoritedSelIcon");
        } else {
          if (event.hit.data("isViewed")) {
            event.setZIndex(10);
            test = event.hit.data("pinViewedSelIcon");
          } else {
            event.setZIndex(1);
            test = event.hit.data("pinSelIcon");
          }
        }
      }
    } else {
      if (event.hit.data("isInquired")) {
        event.setZIndex(30);
        test = event.hit.data("pinInquiredIcon");
      } else {
        if (event.hit.data("isFavorited")) {
          event.setZIndex(20);
          test = event.hit.data("pinFavoritedIcon");
        } else {
          if (event.hit.data("isViewed")) {
            event.setZIndex(10);
            test = event.hit.data("pinViewedIcon");
          } else {
            event.setZIndex(1);
            test = event.hit.data("pinIcon");
          }
        }
      }
    }
    event.setIcon(test);
  },
  /**
   * @param {string} type
   * @param {Function} name
   * @return {?}
   */
  offset : function(type, name) {
    /** @type {({x: ??, y: ??}|{x: number, y: number})} */
    var ret = name ? {
      x : name.x,
      y : name.y
    } : {
      x : 0,
      y : 0
    };
    /** @type {number} */
    leftOffset = vertOffset = 0;
    for (;null !== type;) {
      ret.y += type.offsetTop;
      ret.x += type.offsetLeft;
      type = type.offsetParent;
    }
    return ret;
  }
};
ha.map.property = {
  data : {},
  markerDataList : [],
  previewMapId : "",
  map : null,
  loadMapOnScroll : true,
  /**
   * @param {Object} options
   * @param {string} destination
   * @param {Function} keepData
   * @return {undefined}
   */
  init : function(options, destination, keepData) {
    /** @type {Object} */
    ha.map.property.data = options;
    ha.map.property.addToMapData(options.mType, options, destination);
    ha.map.base.mapData.maxZoom = options.location[0].maxZoom;
    if (!keepData) {
      ha.map.loadGoogleMaps("ha.map.base.loadMaps");
    }
  },
  /**
   * @param {Object} res
   * @param {?} dataName
   * @return {undefined}
   */
  initPreview : function(res, dataName) {
    ha.map.property.previewMapId = dataName;
    /** @type {string} */
    res.mType = "preview";
    /** @type {Object} */
    ha.map.property.data = res;
    ha.map.base.mapData.maxZoom = res.location[0].maxZoom;
    ha.map.property.addToMapData(dataName, res, false, true);
    ha.map.loadGoogleMaps("ha.map.base.loadMaps");
  },
  /**
   * @param {Object} i
   * @param {Object} xhr
   * @param {Object} path
   * @param {boolean} dataAndEvents
   * @return {undefined}
   */
  addToMapData : function(i, xhr, path, dataAndEvents) {
    /** @type {Object} */
    ha.map.base.mapData.id = i;
    ha.map.base.mapData.type = xhr.mType;
    /** @type {number} */
    i = 0;
    for (;i < xhr.location.length;i++) {
      if (path) {
        ha.map.base.markerData.spu = path[xhr.location[i].id];
      }
      ha.map.base.markerData.gc = new ha.map.base.gc.Create;
      ha.map.base.markerData.lat = xhr.location[i].a;
      ha.map.base.markerData.lng = xhr.location[i].b;
      ha.map.base.markerData.gc.zoom = xhr.location[i].zoom;
      ha.map.base.markerData.unitId = xhr.location[i].id;
      ha.map.base.markerData.title = xhr.location[i].id;
      ha.map.base.markerData.exact = xhr.location[i].exact;
      if ("compare" === xhr.mType) {
        /** @type {string} */
        ha.map.base.markerData.pinIcon = "//csvcus.homeaway.com/rsrcs/C0/3CAE67EC0FD2CC41893CF96FDCD94F-mapIcon_exact.png";
        /** @type {string} */
        ha.map.base.markerData.pinSelIcon = "//csvcus.homeaway.com/rsrcs/B7/6EF4F1D3F169E15D28C5E1D910A67C-mapIcon_exact_h.png";
        /** @type {string} */
        ha.map.base.markerData.pinViewedIcon = "//csvcus.homeaway.com/rsrcs/7B/76B2CDBC66D217D261D972976D9EB7-mapIcon_viewed_exact.png";
        /** @type {string} */
        ha.map.base.markerData.pinViewedSelIcon = "//csvcus.homeaway.com/rsrcs/B9/BA66954CD4F9732B6A2DB1FAC82552-mapIcon_viewed_exact_h.png";
        /** @type {string} */
        ha.map.base.markerData.pinInquiredIcon = "//csvcus.homeaway.com/rsrcs/37/0522B1F28C011207EE4A3D27C78115-mapIcon_inquired_exact.png";
        /** @type {string} */
        ha.map.base.markerData.pinInquiredSelIcon = "//csvcus.homeaway.com/rsrcs/D7/3F53C48C1F91E216E56EC824B6B14C-mapIcon_inquired_exact_h.png";
        /** @type {string} */
        ha.map.base.markerData.pinFavoritedIcon = "//csvcus.homeaway.com/rsrcs/80/0D1E7EC90DF457B4D9B0B01598E761-mapIcon_favorited_exact.png";
        /** @type {string} */
        ha.map.base.markerData.pinFavoritedSelIcon = "//csvcus.homeaway.com/rsrcs/6B/55C62A88FFC83C005D69D1659B6EE7-mapIcon_favorited_exact_h.png";
      } else {
        /** @type {string} */
        ha.map.base.markerData.pinIcon = ha.map.base.markerData.pinSelIcon = ha.map.base.markerData.pinViewedIcon = ha.map.base.markerData.pinViewedSelIcon = ha.map.base.markerData.pinInquiredIcon = ha.map.base.markerData.pinInquiredSelIcon = ha.map.base.markerData.pinFavoritedIcon = ha.map.base.markerData.pinFavoritedSelIcon = "//csvcus.homeaway.com/rsrcs/CD/0A1D60E0D2AA068DA095CC09B6F1E6-mapIcon_home.png";
      }
      if (dataAndEvents) {
        ha.map.base.mapData.previewMarker = new ha.map.base.markerData.Create;
      } else {
        ha.map.base.mapData.markerDataList[i] = new ha.map.base.markerData.Create;
      }
    }
  },
  /**
   * @param {string} name
   * @param {number} value
   * @return {undefined}
   */
  genMap : function(name, value) {
    if (!value) {
      /** @type {number} */
      value = 20;
    }
    ha.map.base.maps[name] = ha.map.property.setBounds(ha.map.base.maps[name], name, value);
    ha.map.base.maps[name] = ha.map.property.setListeners(ha.map.base.maps[name], value);
  },
  /**
   * @param {string} map
   * @param {string} deepDataAndEvents
   * @param {number} recurring
   * @param {?} minZ
   * @return {?}
   */
  setBounds : function(map, deepDataAndEvents, recurring, minZ) {
    var self = new google.maps.LatLngBounds;
    var location;
    var entry;
    if ("preview" === deepDataAndEvents) {
      if (self = ha.map.base.mapData.previewMarker) {
        Math.min(recurring, self.gc.zoom);
        location = new google.maps.LatLng(parseFloat(unescape(self.lat)), parseFloat(unescape(self.lng)));
        if (!minZ) {
          if (ha.map.property.data.location[0]) {
            ha.map.property.marker(self, map, deepDataAndEvents, ha.map.property.data.location[0]);
          }
        }
        map.setZoom(Math.min(11, self.gc.zoom));
        map.setCenter(location);
      }
    } else {
      /** @type {number} */
      var i = 0;
      for (;i < ha.map.base.mapData.markerDataList.length;i++) {
        if (entry = ha.map.base.mapData.markerDataList[i], entry.gc.zoom < recurring && (recurring = entry.gc.zoom), "null" !== entry.lat && "null" !== entry.lng) {
          location = new google.maps.LatLng(parseFloat(unescape(entry.lat)), parseFloat(unescape(entry.lng)));
          self.extend(location);
          if (!minZ) {
            if (ha.map.property.data.location[i] && ha.map.property.data.location[i].addressLatLngIsValid) {
              ha.map.property.marker(entry, map, deepDataAndEvents, ha.map.property.data.location[i]);
            }
          }
        }
      }
      if (0 === ha.map.base.mapData.markerDataList.length) {
        map.setZoom(0);
        map.setCenter(self.getCenter());
      } else {
        if ("sidebar-google-map" === deepDataAndEvents) {
          map.setZoom(ha.config.maps.zoomLevels.pdpSidebar);
          map.setCenter(self.getCenter());
        } else {
          if (1 === ha.map.base.mapData.markerDataList.length) {
            map.setZoom(ha.map.base.mapData.markerDataList[0].gc.zoom);
            map.setCenter(self.getCenter());
          } else {
            map.fitBounds(self);
          }
        }
      }
    }
    return map;
  },
  /**
   * @param {string} cycle
   * @param {?} zoom
   * @return {?}
   */
  setListeners : function(cycle, zoom) {
    google.maps.event.addListener(cycle, "zoom_changed", function() {
      if (cycle.getZoom() > zoom) {
        cycle.setZoom(zoom);
      }
    });
    google.maps.event.addListener(cycle, "maptypeid_changed", function() {
      cycle.mapTypes[cycle.getMapTypeId()].maxZoom = zoom;
      google.maps.event.trigger(cycle, "zoom_changed");
    });
    return cycle;
  },
  /**
   * @param {Error} x
   * @param {string} map
   * @param {string} deepDataAndEvents
   * @param {Object} params
   * @return {?}
   */
  marker : function(x, map, deepDataAndEvents, params) {
    var name = ha.map.base.mapData.type;
    var defaultOptions = x.pinIcon;
    var myLatlng = new google.maps.LatLng(parseFloat(unescape(params.a)), parseFloat(unescape(params.b)));
    defaultOptions = {
      position : myLatlng,
      map : map,
      title : "",
      draggable : false,
      clickable : "preview" !== deepDataAndEvents,
      icon : defaultOptions
    };
    if ("compare" === name) {
      /** @type {string} */
      ha.map.base.maps[name] = map;
      ha.map.base.overlay = ha.map.base.createMapOverlay(ha.map.base.maps[name]);
      if (0 === $(".listing-preview").length) {
        $("body").append('<div class="listing-preview"></div>');
      }
      ha.map.base.loadMarkerData(x);
    } else {
      if (params.exact) {
        var marker = new google.maps.Marker(defaultOptions);
        if ("preview" !== deepDataAndEvents) {
          var h;
          var infowindow;
          google.maps.event.addListener(marker, "click", function() {
            if ("property" === name) {
              h = $("#pdp-container .header h1").html();
            }
            if (null !== h) {
              if (!infowindow) {
                infowindow = new google.maps.InfoWindow({
                  content : h
                });
              }
              infowindow.open(map, marker);
            }
          });
        }
        return marker;
      }
      x = _.extend({
        center : myLatlng,
        map : map,
        draggable : false,
        clickable : false
      }, ha.config.maps.circleOptions);
      return new google.maps.Circle(x);
    }
  }
};
ha.ui.compare = {
  /**
   * @return {undefined}
   */
  init : function() {
    ha.ui.compare.selections();
    ha.ui.compare.events();
  },
  /**
   * @return {undefined}
   */
  selections : function() {
    /** @type {boolean} */
    var cycle = false;
    if (null !== $.cookie("cmprd-units")) {
      /** @type {Array.<string>} */
      var codeSegments = unescape($.cookie("cmprd-units")).split(",");
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        /** @type {string} */
        var input = "#unit-id-" + codeSegments[i].split(":")[0];
        var s = $(input).parents("div.unit-compare").children("div.label-compare");
        var elem = $("label", s);
        if (0 < $(input).length) {
          $(input).prop("checked", true);
          elem.removeAttr("for");
          s.addClass("link");
          s.addClass("compareButtonClicker");
          /** @type {boolean} */
          cycle = true;
        }
      }
    }
    ha.ui.compare.toggle(cycle);
  },
  /**
   * @return {undefined}
   */
  events : function() {
    $(".unit-id").click(function() {
      /** @type {string} */
      var val = "";
      var s = $(this).val();
      var a = $(this).parents("div.unit-compare").children("div.label-compare");
      var i = $("label", a);
      if (null !== $.cookie("cmprd-units")) {
        /** @type {string} */
        val = unescape($.cookie("cmprd-units"));
      }
      if ($(this).prop("checked")) {
        i.removeAttr("for");
        a.addClass("link");
        a.click(function() {
          $(".compare-button div").click();
        });
        val = "" !== val ? val + ("," + s) : s;
      } else {
        if ("" !== val) {
          i.attr("for", $(this).attr("name"));
          a.removeClass("link");
          a.unbind("click");
          /** @type {Array.<string>} */
          a = val.split(",");
          /** @type {string} */
          val = "";
          /** @type {number} */
          i = 0;
          for (;i < a.length;i++) {
            if (a[i] !== s) {
              val += a[i] + ",";
            }
          }
          /** @type {string} */
          val = val.substring(0, val.length - 1);
        }
      }
      $.cookie("cmprd-units", val, {
        path : "/"
      });
      if (0 < $(".compare-button div").length) {
        ha.ui.compare.selections();
      }
    });
    $(".compare-button div").click(ha.ui.compare.compareClick);
    $(".search-page").on("click", ".compareButtonClicker", function() {
      $(".compare-button div").click();
    });
  },
  /**
   * @return {?}
   */
  compareClick : function() {
    /** @type {string} */
    var queryString = "";
    var value = $(this).attr("jsObj") || compareJsObj;
    if (-1 < $("#pm-page").length) {
      var text = ha.json.cookie.parse(ha.json.qpJsonCookie(), "searchURL");
      if (null !== text && -1 !== text.indexOf("search")) {
        if (-1 !== text.indexOf("?view=")) {
          text = text.substr(0, text.indexOf("?view="));
        }
      } else {
        /** @type {string} */
        text = "/search";
      }
      value = value.split(":")[0] + ":" + text;
    }
    if (null !== $.cookie("cmprd-units")) {
      /** @type {string} */
      queryString = unescape($.cookie("cmprd-units"));
    }
    $.cookie("srch-info", value, {
      path : "/"
    });
    if ("" === queryString) {
      return false;
    }
    /** @type {string} */
    window.location = "/property/compare?units=" + queryString;
  },
  /**
   * @param {string} type
   * @return {undefined}
   */
  toggle : function(type) {
    if (type && 0 < $(".compare-button div").length) {
      $(".compare-button").removeClass("off");
      $(".compare-button div").addClass("on");
    } else {
      if (0 < $(".compare-button div").length) {
        $(".compare-button div").removeClass("on");
        $(".compare-button").addClass("off");
      }
    }
  }
};
$(window).load(function() {
  if (0 < $("body.inquiry-success").length) {
    ha.ui.compare.init();
  }
});
ha.map.search = {
  reqId : 0,
  map : null,
  overlay : null,
  markers : {},
  proximityMarker : null,
  mapLoadTimeout : null,
  originalStatus : null,
  /**
   * @return {undefined}
   */
  prime : function() {
    if (ha.map.search.urlAnchorToGc()) {
      ha.json.cookie.update(search.cName, search.geocodeKey, ha.map.search.gcToCookieFormat());
    } else {
      ha.json.cookie.update(search.cName, search.geocodeKey);
    }
  },
  /**
   * @return {undefined}
   */
  load : function() {
    clearTimeout(ha.map.search.mapLoadTimeout);
    ha.map.base.hide(ha.map.base.markers);
    var y = search.baseUrlForMap.split("?");
    var x = y[0];
    x = "/search" == x.substring(0, 7) ? x : "/search" + x;
    /** @type {string} */
    x = "/ajax/map" + x;
    var width = ha.page.search.segments(x);
    y = 2 == y.length ? "?" + y[1] : "";
    /** @type {string} */
    y = y + (0 < y.length ? "&" : "?");
    /** @type {string} */
    y = y + ("reqId=" + ++ha.map.base.reqId);
    /** @type {string} */
    y = y + ("&timestamp=" + (new Date).getTime());
    if (0 < advertiserUmsUuid.length) {
      y += "&advertiserUmsUuid=" + advertiserUmsUuid;
    }
    /** @type {string} */
    x = x + width + y;
    if ($.browser.msie) {
      /** @type {string} */
      y = -1 < x.indexOf("?") ? "&r=" : "/";
      /** @type {string} */
      x = x + y + (new Date).getTime();
    }
    $("#map-results").load(x, function() {
      if (!(mapData.reqId < ha.map.base.reqId)) {
        /** @type {number} */
        ha.map.search.mapLoadTimeout = setTimeout(function() {
          if (ha.map.base.maps.search == null) {
            /** @type {string} */
            ha.map.base.mapData.type = "search";
            ha.map.loadGoogleMaps("ha.map.base.loadMaps");
          } else {
            ha.map.search.updateMarkers();
            ha.map.search.bookmark();
          }
          if (ha.map.search.originalStatus == null) {
            ha.map.search.originalStatus = $("#map-status").html();
          }
          var rvar = $("#map-status").html();
          rvar = mapData.hasErrors ? '<span class="error">' + mapData.errorMsg + "</span>" : typeof mapData.hits.p1 == "undefined" ? '<span class="noresults">' + mapData.noresultsMsg + "</span>" : ha.map.search.originalStatus;
          $("#map-status").html(rvar);
        }, 100);
      }
    });
  },
  /**
   * @return {undefined}
   */
  init : function() {
    if (!mapData.boundingBoxSearch) {
      ha.map.search.updateMarkers();
    }
    ha.map.search.initLoad();
  },
  /**
   * @return {undefined}
   */
  initLoad : function() {
    ha.map.search.zoom();
    /** @type {number} */
    var a = 0;
    /** @type {number} */
    var poll = setInterval(function() {
      a++;
      if (5 == a) {
        clearInterval(poll);
      }
      if ("undefined" != typeof ha.map.base.maps.search.getZoom()) {
        clearInterval(poll);
        ha.map.search.cookie();
        ha.map.search.load();
        ha.map.search.bookmark();
        ha.map.search.events();
      }
    }, 500);
    ha.map.search.geocoder = new google.maps.Geocoder;
  },
  /**
   * @return {undefined}
   */
  updateMarkers : function() {
    /** @type {number} */
    var cached = 0;
    var i;
    for (i in ha.map.base.markers) {
      if (200 < cached || !ha.map.base.maps.search.getBounds().contains(ha.map.base.markers[i].getPosition())) {
        ha.map.base.markers[i].setMap(null);
        delete ha.map.base.markers[i];
      } else {
        cached++;
      }
    }
    if ("undefined" != typeof mapData.hits.p1) {
      for (i in mapData.hits) {
        cached = mapData.hits[i];
        if (null == ha.map.base.markers[cached.spu]) {
          cached = ha.map.base.hitToMarkerData(cached);
          ha.map.base.loadMarkerData(cached);
        }
      }
      ha.page.favorites.refresh();
    }
  },
  /**
   * @param {string} mom
   * @param {Object} save
   * @param {string} cycle
   * @return {undefined}
   */
  getTravelerHitInfo : function(mom, save, cycle) {
    if (save) {
      var i;
      for (i in save) {
        if (mom == save[i].systemId + "-" + save[i].propertyId + "-" + save[i].unitId) {
          ha.map.base.upDatePinIcon(mom, cycle, true);
        }
      }
    }
    ha.map.base.upDatePinIcon(mom, cycle, false);
  },
  /**
   * @return {undefined}
   */
  zoom : function() {
    var g = null != ha.json.cookie.parse(search.cName) ? ha.json.cookie.parse(search.cName) : "";
    if ("undefined" != typeof g.geocode) {
      var b = ha.json.paramsToJson(g.geocode, "&", "=");
      if ("undefined" != typeof b.cLat && "undefined" != typeof b.cLng) {
        g = new google.maps.LatLng(parseFloat(b.cLat), parseFloat(b.cLng));
        ha.map.base.maps.search.setCenter(g);
        ha.map.base.maps.search.setZoom(parseInt(b.zoom, 10));
      } else {
        b = ha.json.paramsToJson(g.geocode, "&", "=");
        g = new google.maps.LatLngBounds;
        var expectedNumberOfNonCommentArgs = new google.maps.LatLng(parseFloat(b.minLat), parseFloat(b.minLng));
        b = new google.maps.LatLng(parseFloat(b.maxLat), parseFloat(b.maxLng));
        g.extend(expectedNumberOfNonCommentArgs);
        g.extend(b);
        ha.map.base.maps.search.fitBounds(g);
      }
    } else {
      if ("undefined" == typeof ha.map.base.maps.search.getZoom() && !$.isEmptyObject(ha.map.base.markers)) {
        g = new google.maps.LatLngBounds;
        for (b in ha.map.base.markers) {
          g.extend(ha.map.base.markers[b].getPosition());
        }
        ha.map.base.maps.search.fitBounds(g);
      } else {
        if (null != ha.map.base.maps.search) {
          if ($.isEmptyObject(ha.map.base.markers)) {
            ha.map.base.maps.search.setZoom(3);
          }
        }
      }
    }
  },
  /**
   * @return {undefined}
   */
  events : function() {
    google.maps.event.addListener(ha.map.base.maps.search, "dragend", function() {
      ha.map.search.cookie();
      ha.map.search.load();
    });
    google.maps.event.addListener(ha.map.base.maps.search, "zoom_changed", function() {
      ha.map.search.cookie();
      ha.map.search.load();
    });
    google.maps.event.addListener(ha.map.base.maps.search, "click", function() {
      ha.map.base.hide(ha.map.base.markers);
      ha.map.base.hideCircles();
    });
  },
  /**
   * @return {undefined}
   */
  bookmark : function() {
    /** @type {string} */
    var newhash = "";
    if (null != ha.map.base.maps.search) {
      if (ha.map.base.maps.search.getBounds()) {
        newhash = "gc=" + ha.map.base.maps.search.getBounds().getSouthWest().lat();
        newhash += ":" + ha.map.base.maps.search.getBounds().getNorthEast().lat();
        newhash += ":" + ha.map.base.maps.search.getBounds().getSouthWest().lng();
        newhash += ":" + ha.map.base.maps.search.getBounds().getNorthEast().lng();
        newhash += ":" + ha.map.base.maps.search.getCenter().lat();
        newhash += ":" + ha.map.base.maps.search.getCenter().lng();
        newhash += ":" + ha.map.base.maps.search.getZoom();
        newhash += ":" + search.region;
      }
    }
    /** @type {string} */
    location.hash = newhash;
    if (void 0 != $("#list-view-button").attr("href")) {
      ha.json.cookie.update(search.cName, "searchURL", location.href);
    }
  },
  /**
   * @return {undefined}
   */
  cookie : function() {
    ha.json.cookie.update(search.cName, search.geocodeKey);
    if (null != ha.map.base.maps.search && ha.map.base.maps.search.getBounds()) {
      var pdataCur = "minLat=" + ha.map.base.maps.search.getBounds().getSouthWest().lat();
      pdataCur = pdataCur + ("&maxLat=" + ha.map.base.maps.search.getBounds().getNorthEast().lat());
      pdataCur = pdataCur + ("&minLng=" + ha.map.base.maps.search.getBounds().getSouthWest().lng());
      pdataCur = pdataCur + ("&maxLng=" + ha.map.base.maps.search.getBounds().getNorthEast().lng());
      pdataCur = pdataCur + ("&cLat=" + ha.map.base.maps.search.getCenter().lat());
      pdataCur = pdataCur + ("&cLng=" + ha.map.base.maps.search.getCenter().lng());
      pdataCur = pdataCur + ("&zoom=" + ha.map.base.maps.search.getZoom());
      /** @type {string} */
      pdataCur = pdataCur + ("&region=" + search.region);
      ha.json.cookie.update(search.cName, search.geocodeKey, pdataCur);
    }
  },
  /**
   * @param {string} dataAndEvents
   * @param {string} deepDataAndEvents
   * @return {undefined}
   */
  cookieProximity : function(dataAndEvents, deepDataAndEvents) {
    ha.json.cookie.update(search.cName, search.geocodeKey);
    if (null != ha.map.base.maps.search) {
      ha.json.cookie.update(search.cName, search.geocodeKey, "cLat=" + dataAndEvents + ("&cLng=" + deepDataAndEvents) + "&distanceInKm=50");
    }
  },
  /**
   * @return {?}
   */
  urlAnchorToGc : function() {
    /** @type {Array.<string>} */
    var alt = location.hash.split("gc=");
    if (2 != alt.length) {
      return false;
    }
    /** @type {Array.<string>} */
    var codeSegments = alt[1].split(":");
    if (8 != codeSegments.length || codeSegments[7] != search.region) {
      return false;
    }
    /** @type {RegExp} */
    var eventSplitter = /^[-]{0,1}?\d+.?\d*$/;
    /** @type {RegExp} */
    var delegateEventSplitter = /^([a-zA-Z0-9_-]+)$/;
    /** @type {number} */
    var i = 0;
    for (;i < codeSegments.length;i++) {
      if (8 == i) {
        if (alt = codeSegments[i].replace(".", "").replace(/-/g, ""), null == alt.match(delegateEventSplitter)) {
          return false;
        }
      } else {
        if (null == codeSegments[i].match(eventSplitter)) {
          return false;
        }
      }
    }
    /** @type {string} */
    ha.map.base.gc.minLat = codeSegments[0];
    /** @type {string} */
    ha.map.base.gc.maxLat = codeSegments[1];
    /** @type {string} */
    ha.map.base.gc.minLng = codeSegments[2];
    /** @type {string} */
    ha.map.base.gc.maxLng = codeSegments[3];
    /** @type {string} */
    ha.map.base.gc.cLat = codeSegments[4];
    /** @type {string} */
    ha.map.base.gc.cLng = codeSegments[5];
    /** @type {string} */
    ha.map.base.gc.zoom = codeSegments[6];
    /** @type {string} */
    ha.map.base.gc.region = codeSegments[7];
    return true;
  },
  /**
   * @return {?}
   */
  gcToCookieFormat : function() {
    return "minLat=" + ha.map.base.gc.minLat + "&maxLat=" + ha.map.base.gc.maxLat + "&minLng=" + ha.map.base.gc.minLng + "&maxLng=" + ha.map.base.gc.maxLng + "&cLat=" + ha.map.base.gc.cLat + "&cLng=" + ha.map.base.gc.cLng + "&zoom=" + ha.map.base.gc.zoom + "&region=" + ha.map.base.gc.region;
  },
  /**
   * @param {string} loc
   * @return {undefined}
   */
  geocode : function(loc) {
    var label = $(loc);
    loc = label.find("input:text[name=address]").val();
    var rvar = label.find("input:hidden[name=no-results-msg]").val();
    label = label.find("input:hidden[name=error-msg]").val();
    try {
      ha.map.search.geocoder.geocode({
        address : loc
      }, function(results, dataAndEvents) {
        switch(dataAndEvents) {
          case google.maps.GeocoderStatus.OK:
            $(".proximityError").removeClass("active");
            $(".proximityError").html("");
            var geometry = results[0].geometry;
            if (null != ha.map.base.proximityMarker) {
              ha.map.base.proximityMarker.setMap(null);
            }
            ha.map.base.proximityMarker = new google.maps.Marker({
              position : geometry.location,
              map : ha.map.base.maps.search
            });
            ha.map.base.maps.search.fitBounds(geometry.viewport);
            ha.map.search.cookie();
            ha.map.search.load();
            break;
          case google.maps.GeocoderStatus.ZERO_RESULTS:
            $(".proximityError").addClass("active");
            $(".proximityError").html(rvar);
        }
      });
    } catch (str) {
      alert(label + " " + str);
    }
  }
};
(function() {
  /** @type {boolean} */
  var a = false;
  /** @type {RegExp} */
  var fnTest = /xyz/.test(function() {
    xyz;
  }) ? /\b_super\b/ : /.*/;
  /**
   * @return {undefined}
   */
  this.Class = function() {
  };
  /**
   * @param {?} expectedNumberOfNonCommentArgs
   * @return {?}
   */
  Class.extend = function(expectedNumberOfNonCommentArgs) {
    /**
     * @return {undefined}
     */
    function Class() {
      if (!a) {
        if (this.init) {
          this.init.apply(this, arguments);
        }
      }
    }
    var _super = this.prototype;
    /** @type {boolean} */
    a = true;
    var prototype = new this;
    /** @type {boolean} */
    a = false;
    var name;
    for (name in expectedNumberOfNonCommentArgs) {
      prototype[name] = "function" == typeof expectedNumberOfNonCommentArgs[name] && ("function" == typeof _super[name] && fnTest.test(expectedNumberOfNonCommentArgs[name])) ? function(name, matcherFunction) {
        return function() {
          var tmp = this._super;
          this._super = _super[name];
          var props = matcherFunction.apply(this, arguments);
          this._super = tmp;
          return props;
        };
      }(name, expectedNumberOfNonCommentArgs[name]) : expectedNumberOfNonCommentArgs[name];
    }
    Class.prototype = prototype;
    /** @type {function (): undefined} */
    Class.constructor = Class;
    /** @type {(Function|null)} */
    Class.extend = arguments.callee;
    return Class;
  };
})();
(function($) {
  var output = {
    js : [",", ".", "_", " "]
  };
  var templates = {
    "default" : [",", ".", "-", "_", " "]
  };
  var def = {
    width : ["%"],
    height : ["%"]
  };
  var options = {
    "default" : ["-", " ", "%"],
    color : ["#", " ", "(", ")"],
    image : '():/?&-."= '.split("")
  };
  var color = {
    background : '():%/?&- ."=#'.split(""),
    "background-image" : options.image,
    "background-color" : options.color,
    "border-color" : options.color,
    "border-image" : options.image,
    color : options.color,
    icon : options.image,
    "list-style-image" : options.image,
    "outline-color" : options.color
  };
  var self = {
    attr_name : ["on[a-z]{1,}", "style", "href", "src"],
    attr_val : ["javascript:"],
    css_key : ["behavior", "-moz-behavior", "-ms-behavior"],
    css_val : ["expression"]
  };
  var deep = {
    blacklist : true
  };
  /** @type {boolean} */
  var l = false;
  $.encoder = {
    author : "Chris Schmidt (chris.schmidt@owasp.org)",
    version : "${project.version}",
    /**
     * @param {string} options
     * @return {undefined}
     */
    init : function(options) {
      if (l) {
        throw "jQuery Encoder has already been initialized - cannot set options after initialization";
      }
      /** @type {boolean} */
      l = true;
      $.extend(deep, options);
    },
    /**
     * @param {string} cycle
     * @return {?}
     */
    encodeForHTML : function(cycle) {
      /** @type {boolean} */
      l = true;
      /** @type {Element} */
      var el = document.createElement("div");
      $(el).text(cycle);
      return $(el).html();
    },
    /**
     * @param {?} n
     * @param {string} string
     * @param {boolean} dataAndEvents
     * @return {?}
     */
    encodeForHTMLAttribute : function(n, string, dataAndEvents) {
      /** @type {boolean} */
      l = true;
      n = $.encoder.canonicalize(n).toLowerCase();
      string = $.encoder.canonicalize(string);
      if (0 <= $.inArray(n, self.attr_name)) {
        throw "Unsafe attribute name used: " + n;
      }
      /** @type {number} */
      var index = 0;
      for (;index < self.attr_val;index++) {
        if (string.toLowerCase().match(self.attr_val[index])) {
          throw "Unsafe attribute value used: " + string;
        }
      }
      if (!(immune = def[n])) {
        immune = templates["default"];
      }
      /** @type {string} */
      index = "";
      if (!dataAndEvents) {
        /** @type {number} */
        var i = 0;
        for (;i < n.length;i++) {
          var c = n.charAt(i);
          if (!c.match(/[a-zA-Z\-0-9]/)) {
            throw "Invalid attribute name specified";
          }
          index += c;
        }
        index += '="';
      }
      /** @type {number} */
      n = 0;
      for (;n < string.length;n++) {
        i = string.charAt(n);
        c = string.charCodeAt(n);
        if (!i.match(/[a-zA-Z0-9]/) && 0 > $.inArray(i, immune)) {
          i = c.toString(16);
          index += "&#x" + i + ";";
        } else {
          index += i;
        }
      }
      if (!dataAndEvents) {
        index += '"';
      }
      return index;
    },
    /**
     * @param {?} i
     * @param {string} haystack
     * @param {string} n
     * @return {?}
     */
    encodeForCSS : function(i, haystack, n) {
      /** @type {boolean} */
      l = true;
      i = $.encoder.canonicalize(i).toLowerCase();
      haystack = $.encoder.canonicalize(haystack);
      if (0 <= $.inArray(i, self.css_key)) {
        throw "Unsafe property name used: " + i;
      }
      /** @type {number} */
      var s = 0;
      for (;s < self.css_val.length;s++) {
        if (0 <= haystack.toLowerCase().indexOf(self.css_val[s])) {
          throw "Unsafe property value used: " + haystack;
        }
      }
      if (!(immune = color[i])) {
        immune = options["default"];
      }
      /** @type {string} */
      s = "";
      if (!n) {
        /** @type {number} */
        n = 0;
        for (;n < i.length;n++) {
          var c = i.charAt(n);
          if (!c.match(/[a-zA-Z\-]/)) {
            throw "Invalid Property Name specified";
          }
          s += c;
        }
        s += ": ";
      }
      /** @type {number} */
      i = 0;
      for (;i < haystack.length;i++) {
        n = haystack.charAt(i);
        c = haystack.charCodeAt(i);
        if (!n.match(/[a-zA-Z0-9]/) && 0 > $.inArray(n, immune)) {
          n = c.toString(16);
          /** @type {string} */
          c = "000000".substr(n.length);
          s += "\\" + c + n;
        } else {
          s += n;
        }
      }
      return s;
    },
    /**
     * @param {?} b
     * @param {boolean} character
     * @return {?}
     */
    encodeForURL : function(b, character) {
      /** @type {boolean} */
      l = true;
      /** @type {string} */
      var str = "";
      if (character) {
        if (character.match(/^[A-Za-z\-0-9]{1,}$/)) {
          str += $.encoder.canonicalize(character).toLowerCase();
        } else {
          throw "Illegal Attribute Name Specified";
        }
        str += '="';
      }
      str += encodeURIComponent(b);
      return str + (character ? '"' : "");
    },
    /**
     * @param {string} string
     * @return {?}
     */
    encodeForJavascript : function(string) {
      /** @type {boolean} */
      l = true;
      if (!immune) {
        /** @type {Array} */
        immune = output.js;
      }
      /** @type {string} */
      var parsedAnchor = "";
      /** @type {number} */
      var n = 0;
      for (;n < string.length;n++) {
        var c = string.charAt(n);
        var id = string.charCodeAt(n);
        if (0 <= $.inArray(c, immune) || null == cache[id]) {
          parsedAnchor += c;
        } else {
          c = id.toString(16);
          if (256 > id) {
            /** @type {string} */
            id = "00".substr(c.length);
            parsedAnchor += "\\x" + id + c.toUpperCase();
          } else {
            /** @type {string} */
            id = "0000".substr(c.length);
            parsedAnchor += "\\u" + id + c.toUpperCase();
          }
        }
      }
      return parsedAnchor;
    },
    /**
     * @param {?} value
     * @param {boolean} arr
     * @return {?}
     */
    canonicalize : function(value, arr) {
      /** @type {boolean} */
      l = true;
      if (null === value) {
        return null;
      }
      var t = value;
      var type = value;
      /** @type {number} */
      var max = 0;
      /** @type {number} */
      var g = 0;
      /** @type {Array} */
      var branchDataJSON = [new canonicalize, new x, new m];
      for (;;) {
        type = t;
        /** @type {number} */
        var conditionIndex = 0;
        for (;conditionIndex < branchDataJSON.length;conditionIndex++) {
          var i = branchDataJSON[conditionIndex].decode(t);
          if (i != t) {
            max++;
            t = i;
          }
        }
        if (type == t) {
          break;
        }
        g++;
      }
      if (arr && 1 < max) {
        throw "Attack Detected - Multiple/Double Encodings used in input";
      }
      return t;
    }
  };
  /** @type {Array} */
  var cache = [];
  /** @type {number} */
  var data = 0;
  for (;255 > data;data++) {
    /** @type {(null|string)} */
    cache[data] = 48 <= data && 57 >= data || (65 <= data && 90 >= data || 97 <= data && 122 >= data) ? null : data.toString(16);
  }
  var processors = {
    /**
     * @param {string} name
     * @return {?}
     */
    html : function(name) {
      return $.encoder.encodeForHTML(name.unsafe);
    },
    /**
     * @param {string} name
     * @return {?}
     */
    css : function(name) {
      /** @type {Array} */
      var ret = [];
      /** @type {Array} */
      var employees = [];
      if (name.map) {
        ret = name.map;
      } else {
        ret[name.name] = name.unsafe;
      }
      var i;
      for (i in ret) {
        if ("function" != typeof ret[i]) {
          if (ret.hasOwnProperty(i)) {
            employees[i] = $.encoder.encodeForCSS(i, ret[i], true);
          }
        }
      }
      return employees;
    },
    /**
     * @param {string} name
     * @return {?}
     */
    attr : function(name) {
      /** @type {Array} */
      var ret = [];
      /** @type {Array} */
      var employees = [];
      if (name.map) {
        ret = name.map;
      } else {
        ret[name.name] = name.unsafe;
      }
      var i;
      for (i in ret) {
        if ("function" != typeof ret[i]) {
          if (ret.hasOwnProperty(i)) {
            employees[i] = $.encoder.encodeForHTMLAttribute(i, ret[i], true);
          }
        }
      }
      return employees;
    }
  };
  /**
   * @return {?}
   */
  $.fn.encode = function() {
    /** @type {boolean} */
    l = true;
    var options = {
      context : "html",
      unsafe : null,
      name : null,
      map : null,
      setter : null,
      strict : true
    };
    if (1 == arguments.length && "object" == typeof arguments[0]) {
      $.extend(options, arguments[0]);
    } else {
      if (options.context = arguments[0], 2 == arguments.length) {
        if ("html" == options.context) {
          options.unsafe = arguments[1];
        } else {
          if ("attr" == options.content || "css" == options.content) {
            options.map = arguments[1];
          }
        }
      } else {
        options.name = arguments[1];
        options.unsafe = arguments[2];
      }
    }
    if ("html" == options.context) {
      options.setter = this.html;
    } else {
      if ("css" == options.context) {
        options.setter = this.css;
      } else {
        if ("attr" == options.context) {
          options.setter = this.attr;
        }
      }
    }
    return options.setter.call(this, processors[options.context].call(this, options));
  };
  var RegExp = Class.extend({
    _input : null,
    _pushback : null,
    _temp : null,
    _index : 0,
    _mark : 0,
    /**
     * @return {?}
     */
    _hasNext : function() {
      return null == this._input || 0 == this._input.length ? false : this._index < this._input.length;
    },
    /**
     * @param {string} type
     * @return {undefined}
     */
    init : function(type) {
      /** @type {string} */
      this._input = type;
    },
    /**
     * @param {string} v00
     * @return {undefined}
     */
    pushback : function(v00) {
      /** @type {string} */
      this._pushback = v00;
    },
    /**
     * @return {?}
     */
    index : function() {
      return this._index;
    },
    /**
     * @return {?}
     */
    hasNext : function() {
      return null != this._pushback ? true : this._hasNext();
    },
    /**
     * @return {?}
     */
    next : function() {
      if (null != this._pushback) {
        var rv = this._pushback;
        /** @type {null} */
        this._pushback = null;
        return rv;
      }
      return this._hasNext() ? this._input.charAt(this._index++) : null;
    },
    /**
     * @return {?}
     */
    nextHex : function() {
      var item = this.next();
      return null == item ? null : item.match(/[0-9A-Fa-f]/) ? item : null;
    },
    /**
     * @param {string} array
     * @return {?}
     */
    peek : function(array) {
      return array ? this._pushback && this._pushback == array ? true : this._hasNext() ? this._input.charAt(this._index) == array : false : this._pushback ? this._pushback : this._hasNext() ? this._input.charAt(this._index) : null;
    },
    /**
     * @return {undefined}
     */
    mark : function() {
      this._temp = this._pushback;
      this._mark = this._index;
    },
    /**
     * @return {undefined}
     */
    reset : function() {
      this._pushback = this._temp;
      this._index = this._mark;
    },
    /**
     * @return {?}
     */
    remainder : function() {
      var identifier = this._input.substr(this._index);
      if (null != this._pushback) {
        identifier = this._pushback + identifier;
      }
      return identifier;
    }
  });
  data = Class.extend({
    /**
     * @param {Object} arg
     * @return {?}
     */
    decode : function(arg) {
      /** @type {string} */
      var output = "";
      arg = new RegExp(arg);
      for (;arg.hasNext();) {
        var keyName = this.decodeCharacter(arg);
        output = null != keyName ? output + keyName : output + arg.next();
      }
      return output;
    },
    /**
     * @param {Object} target
     * @return {?}
     */
    decodeCharacter : function(target) {
      return target.next();
    }
  });
  var canonicalize = data.extend({
    /**
     * @param {Object} t
     * @return {?}
     */
    decodeCharacter : function(t) {
      t.mark();
      var c = t.next();
      if (null == c || "&" != c) {
        return t.reset(), null;
      }
      c = t.next();
      if (null == c) {
        return t.reset(), null;
      }
      if ("#" == c) {
        if (c = this._getNumericEntity(t), null != c) {
          return c;
        }
      } else {
        if (c.match(/[A-Za-z]/) && (t.pushback(c), c = this._getNamedEntity(t), null != c)) {
          return c;
        }
      }
      t.reset();
      return null;
    },
    /**
     * @param {Object} stream
     * @return {?}
     */
    _getNamedEntity : function(stream) {
      /** @type {string} */
      var node = "";
      var _len;
      /** @type {number} */
      _len = Math.min(stream.remainder().length, result.getMaxKeyLength());
      /** @type {number} */
      var _i = 0;
      for (;_i < _len;_i++) {
        node += stream.next().toLowerCase();
      }
      node = result.getLongestMatch(node);
      if (null == node) {
        return null;
      }
      stream.reset();
      stream.next();
      _len = node.getKey().length;
      /** @type {number} */
      _i = 0;
      for (;_i < _len;_i++) {
        stream.next();
      }
      if (stream.peek(";")) {
        stream.next();
      }
      return node.getValue();
    },
    /**
     * @param {number} source
     * @return {?}
     */
    _getNumericEntity : function(source) {
      var val = source.peek();
      return null == val ? null : "x" == val || "X" == val ? (source.next(), this._parseHex(source)) : this._parseNumber(source);
    },
    /**
     * @param {number} start
     * @return {?}
     */
    _parseHex : function(start) {
      /** @type {string} */
      var cDigit = "";
      for (;start.hasNext();) {
        var value = start.peek();
        if (isNaN(parseInt(value, 16))) {
          if (";" == value) {
            start.next();
          }
          break;
        } else {
          cDigit += value;
          start.next();
        }
      }
      /** @type {number} */
      start = parseInt(cDigit, 16);
      return!isNaN(start) && (0 <= start && 1114111 >= start) ? String.fromCharCode(start) : null;
    },
    /**
     * @param {number} start
     * @return {?}
     */
    _parseNumber : function(start) {
      /** @type {string} */
      var cDigit = "";
      for (;start.hasNext();) {
        var value = start.peek();
        if (isNaN(parseInt(value, 10))) {
          if (";" == value) {
            start.next();
          }
          break;
        } else {
          cDigit += value;
          start.next();
        }
      }
      /** @type {number} */
      start = parseInt(cDigit, 10);
      return!isNaN(start) && (0 <= start && 1114111 >= start) ? String.fromCharCode(start) : null;
    }
  });
  var x = data.extend({
    /**
     * @param {Object} b
     * @return {?}
     */
    decodeCharacter : function(b) {
      b.mark();
      var start = b.next();
      if (null == start || "%" != start) {
        return b.reset(), null;
      }
      /** @type {string} */
      start = "";
      /** @type {number} */
      var c = 0;
      for (;2 > c;c++) {
        var step = b.nextHex();
        if (null != step) {
          start += step;
        }
      }
      if (2 == start.length && (start = parseInt(start, 16), 0 <= start && 1114111 >= start)) {
        return String.fromCharCode(start);
      }
      b.reset();
      return null;
    }
  });
  var m = data.extend({
    /**
     * @param {number} t
     * @return {?}
     */
    decodeCharacter : function(t) {
      t.mark();
      var cDigit = t.next();
      if (null == cDigit || "\\" != cDigit) {
        return t.reset(), null;
      }
      cDigit = t.next();
      if (null == cDigit) {
        return t.reset(), null;
      }
      switch(cDigit) {
        case "\r":
          if (t.peek("\n")) {
            t.next();
          }
        ;
        case "\n":
        ;
        case "\f":
        ;
        case "\x00":
          return this.decodeCharacter(t);
      }
      if ("NaN" == parseInt(cDigit, 16)) {
        return cDigit;
      }
      /** @type {number} */
      var c = 0;
      for (;5 > c;c++) {
        var x = t.next();
        if (null == x || x.match(/[\s]/)) {
          break;
        }
        if ("NaN" != parseInt(x, 16)) {
          cDigit += x;
        } else {
          t.pushback(x);
          break;
        }
      }
      /** @type {number} */
      t = parseInt(cDigit, 16);
      return 0 <= t && 1114111 >= t ? String.fromCharCode(t) : "\ufffd";
    }
  });
  var nodes = Class.extend({
    root : null,
    maxKeyLen : 0,
    size : 0,
    /**
     * @return {undefined}
     */
    init : function() {
      this.clear();
    },
    /**
     * @param {string} match
     * @return {?}
     */
    getLongestMatch : function(match) {
      return null == this.root && null == match ? null : this.root.getLongestMatch(match, 0);
    },
    /**
     * @return {?}
     */
    getMaxKeyLength : function() {
      return this.maxKeyLen;
    },
    /**
     * @return {undefined}
     */
    clear : function() {
      /** @type {null} */
      this.root = null;
      /** @type {number} */
      this.size = this.maxKeyLen = 0;
    },
    /**
     * @param {string} name
     * @param {(Object|string)} options
     * @return {?}
     */
    put : function(name, options) {
      var result;
      if (null == this.root) {
        this.root = new nodes.Node;
      }
      if (null != (result = this.root.put(name, 0, options))) {
        return result;
      }
      if (name.length > this.maxKeyLen) {
        this.maxKeyLen = name.length;
      }
      this.size++;
      return null;
    }
  });
  nodes.Entry = Class.extend({
    _key : null,
    _value : null,
    /**
     * @param {string} type
     * @param {string} destination
     * @return {undefined}
     */
    init : function(type, destination) {
      /** @type {string} */
      this._key = type;
      /** @type {string} */
      this._value = destination;
    },
    /**
     * @return {?}
     */
    getKey : function() {
      return this._key;
    },
    /**
     * @return {?}
     */
    getValue : function() {
      return this._value;
    },
    /**
     * @param {?} value
     * @return {?}
     */
    equals : function(value) {
      return!(value instanceof nodes.Entry) ? false : this._key == value._key && this._value == value._value;
    }
  });
  nodes.Node = Class.extend({
    _value : null,
    _nextMap : null,
    /**
     * @param {Object} value
     * @return {undefined}
     */
    setValue : function(value) {
      /** @type {Object} */
      this._value = value;
    },
    /**
     * @param {?} timeoutKey
     * @return {?}
     */
    getNextNode : function(timeoutKey) {
      return!this._nextMap ? null : this._nextMap[timeoutKey];
    },
    /**
     * @param {string} name
     * @param {number} i
     * @param {Object} value
     * @return {?}
     */
    put : function(name, i, value) {
      var buffer;
      var index;
      if (name.length == i) {
        return name = this._value, this.setValue(value), name;
      }
      index = name.charAt(i);
      if (null == this._nextMap) {
        this._nextMap = nodes.Node.newNodeMap();
        buffer = new nodes.Node;
        this._nextMap[index] = buffer;
      } else {
        if (null == (buffer = this._nextMap[index])) {
          buffer = new nodes.Node;
          this._nextMap[index] = buffer;
        }
      }
      return buffer.put(name, i + 1, value);
    },
    /**
     * @param {string} name
     * @param {boolean} type
     * @return {?}
     */
    get : function(name, type) {
      var data_priv;
      return name.length <= type ? this._value : null == (data_priv = this.getNextNode(name.charAt(type))) ? null : data_priv.get(name, type + 1);
    },
    /**
     * @param {string} match
     * @param {number} i
     * @return {?}
     */
    getLongestMatch : function(match, i) {
      var template;
      var base;
      return match.length <= i ? nodes.Entry.newInstanceIfNeeded(match, this._value) : null == (template = this.getNextNode(match.charAt(i))) ? nodes.Entry.newInstanceIfNeeded(match, i, this._value) : null != (base = template.getLongestMatch(match, i + 1)) ? base : nodes.Entry.newInstanceIfNeeded(match, i, this._value);
    }
  });
  /**
   * @param {string} name
   * @param {(Function|string)} i
   * @param {string} g
   * @return {?}
   */
  nodes.Entry.newInstanceIfNeeded = function(name, i, g) {
    if ("string" == typeof i) {
      /** @type {(Function|string)} */
      g = i;
      i = name.length;
    }
    if (null == g || null == name) {
      return null;
    }
    if (name.length > i) {
      name = name.substr(0, i);
    }
    return new nodes.Entry(name, g);
  };
  /**
   * @return {?}
   */
  nodes.Node.newNodeMap = function() {
    return{};
  };
  /** @type {Array} */
  var dict = [];
  /** @type {Array} */
  data = [];
  var result = new nodes;
  /** @type {string} */
  dict["&quot"] = "34";
  /** @type {string} */
  dict["&amp"] = "38";
  /** @type {string} */
  dict["&lt"] = "60";
  /** @type {string} */
  dict["&gt"] = "62";
  /** @type {string} */
  dict["&nbsp"] = "160";
  /** @type {string} */
  dict["&iexcl"] = "161";
  /** @type {string} */
  dict["&cent"] = "162";
  /** @type {string} */
  dict["&pound"] = "163";
  /** @type {string} */
  dict["&curren"] = "164";
  /** @type {string} */
  dict["&yen"] = "165";
  /** @type {string} */
  dict["&brvbar"] = "166";
  /** @type {string} */
  dict["&sect"] = "167";
  /** @type {string} */
  dict["&uml"] = "168";
  /** @type {string} */
  dict["&copy"] = "169";
  /** @type {string} */
  dict["&ordf"] = "170";
  /** @type {string} */
  dict["&laquo"] = "171";
  /** @type {string} */
  dict["&not"] = "172";
  /** @type {string} */
  dict["&shy"] = "173";
  /** @type {string} */
  dict["&reg"] = "174";
  /** @type {string} */
  dict["&macr"] = "175";
  /** @type {string} */
  dict["&deg"] = "176";
  /** @type {string} */
  dict["&plusmn"] = "177";
  /** @type {string} */
  dict["&sup2"] = "178";
  /** @type {string} */
  dict["&sup3"] = "179";
  /** @type {string} */
  dict["&acute"] = "180";
  /** @type {string} */
  dict["&micro"] = "181";
  /** @type {string} */
  dict["&para"] = "182";
  /** @type {string} */
  dict["&middot"] = "183";
  /** @type {string} */
  dict["&cedil"] = "184";
  /** @type {string} */
  dict["&sup1"] = "185";
  /** @type {string} */
  dict["&ordm"] = "186";
  /** @type {string} */
  dict["&raquo"] = "187";
  /** @type {string} */
  dict["&frac14"] = "188";
  /** @type {string} */
  dict["&frac12"] = "189";
  /** @type {string} */
  dict["&frac34"] = "190";
  /** @type {string} */
  dict["&iquest"] = "191";
  /** @type {string} */
  dict["&Agrave"] = "192";
  /** @type {string} */
  dict["&Aacute"] = "193";
  /** @type {string} */
  dict["&Acirc"] = "194";
  /** @type {string} */
  dict["&Atilde"] = "195";
  /** @type {string} */
  dict["&Auml"] = "196";
  /** @type {string} */
  dict["&Aring"] = "197";
  /** @type {string} */
  dict["&AElig"] = "198";
  /** @type {string} */
  dict["&Ccedil"] = "199";
  /** @type {string} */
  dict["&Egrave"] = "200";
  /** @type {string} */
  dict["&Eacute"] = "201";
  /** @type {string} */
  dict["&Ecirc"] = "202";
  /** @type {string} */
  dict["&Euml"] = "203";
  /** @type {string} */
  dict["&Igrave"] = "204";
  /** @type {string} */
  dict["&Iacute"] = "205";
  /** @type {string} */
  dict["&Icirc"] = "206";
  /** @type {string} */
  dict["&Iuml"] = "207";
  /** @type {string} */
  dict["&ETH"] = "208";
  /** @type {string} */
  dict["&Ntilde"] = "209";
  /** @type {string} */
  dict["&Ograve"] = "210";
  /** @type {string} */
  dict["&Oacute"] = "211";
  /** @type {string} */
  dict["&Ocirc"] = "212";
  /** @type {string} */
  dict["&Otilde"] = "213";
  /** @type {string} */
  dict["&Ouml"] = "214";
  /** @type {string} */
  dict["&times"] = "215";
  /** @type {string} */
  dict["&Oslash"] = "216";
  /** @type {string} */
  dict["&Ugrave"] = "217";
  /** @type {string} */
  dict["&Uacute"] = "218";
  /** @type {string} */
  dict["&Ucirc"] = "219";
  /** @type {string} */
  dict["&Uuml"] = "220";
  /** @type {string} */
  dict["&Yacute"] = "221";
  /** @type {string} */
  dict["&THORN"] = "222";
  /** @type {string} */
  dict["&szlig"] = "223";
  /** @type {string} */
  dict["&agrave"] = "224";
  /** @type {string} */
  dict["&aacute"] = "225";
  /** @type {string} */
  dict["&acirc"] = "226";
  /** @type {string} */
  dict["&atilde"] = "227";
  /** @type {string} */
  dict["&auml"] = "228";
  /** @type {string} */
  dict["&aring"] = "229";
  /** @type {string} */
  dict["&aelig"] = "230";
  /** @type {string} */
  dict["&ccedil"] = "231";
  /** @type {string} */
  dict["&egrave"] = "232";
  /** @type {string} */
  dict["&eacute"] = "233";
  /** @type {string} */
  dict["&ecirc"] = "234";
  /** @type {string} */
  dict["&euml"] = "235";
  /** @type {string} */
  dict["&igrave"] = "236";
  /** @type {string} */
  dict["&iacute"] = "237";
  /** @type {string} */
  dict["&icirc"] = "238";
  /** @type {string} */
  dict["&iuml"] = "239";
  /** @type {string} */
  dict["&eth"] = "240";
  /** @type {string} */
  dict["&ntilde"] = "241";
  /** @type {string} */
  dict["&ograve"] = "242";
  /** @type {string} */
  dict["&oacute"] = "243";
  /** @type {string} */
  dict["&ocirc"] = "244";
  /** @type {string} */
  dict["&otilde"] = "245";
  /** @type {string} */
  dict["&ouml"] = "246";
  /** @type {string} */
  dict["&divide"] = "247";
  /** @type {string} */
  dict["&oslash"] = "248";
  /** @type {string} */
  dict["&ugrave"] = "249";
  /** @type {string} */
  dict["&uacute"] = "250";
  /** @type {string} */
  dict["&ucirc"] = "251";
  /** @type {string} */
  dict["&uuml"] = "252";
  /** @type {string} */
  dict["&yacute"] = "253";
  /** @type {string} */
  dict["&thorn"] = "254";
  /** @type {string} */
  dict["&yuml"] = "255";
  /** @type {string} */
  dict["&OElig"] = "338";
  /** @type {string} */
  dict["&oelig"] = "339";
  /** @type {string} */
  dict["&Scaron"] = "352";
  /** @type {string} */
  dict["&scaron"] = "353";
  /** @type {string} */
  dict["&Yuml"] = "376";
  /** @type {string} */
  dict["&fnof"] = "402";
  /** @type {string} */
  dict["&circ"] = "710";
  /** @type {string} */
  dict["&tilde"] = "732";
  /** @type {string} */
  dict["&Alpha"] = "913";
  /** @type {string} */
  dict["&Beta"] = "914";
  /** @type {string} */
  dict["&Gamma"] = "915";
  /** @type {string} */
  dict["&Delta"] = "916";
  /** @type {string} */
  dict["&Epsilon"] = "917";
  /** @type {string} */
  dict["&Zeta"] = "918";
  /** @type {string} */
  dict["&Eta"] = "919";
  /** @type {string} */
  dict["&Theta"] = "920";
  /** @type {string} */
  dict["&Iota"] = "921";
  /** @type {string} */
  dict["&Kappa"] = "922";
  /** @type {string} */
  dict["&Lambda"] = "923";
  /** @type {string} */
  dict["&Mu"] = "924";
  /** @type {string} */
  dict["&Nu"] = "925";
  /** @type {string} */
  dict["&Xi"] = "926";
  /** @type {string} */
  dict["&Omicron"] = "927";
  /** @type {string} */
  dict["&Pi"] = "928";
  /** @type {string} */
  dict["&Rho"] = "929";
  /** @type {string} */
  dict["&Sigma"] = "931";
  /** @type {string} */
  dict["&Tau"] = "932";
  /** @type {string} */
  dict["&Upsilon"] = "933";
  /** @type {string} */
  dict["&Phi"] = "934";
  /** @type {string} */
  dict["&Chi"] = "935";
  /** @type {string} */
  dict["&Psi"] = "936";
  /** @type {string} */
  dict["&Omega"] = "937";
  /** @type {string} */
  dict["&alpha"] = "945";
  /** @type {string} */
  dict["&beta"] = "946";
  /** @type {string} */
  dict["&gamma"] = "947";
  /** @type {string} */
  dict["&delta"] = "948";
  /** @type {string} */
  dict["&epsilon"] = "949";
  /** @type {string} */
  dict["&zeta"] = "950";
  /** @type {string} */
  dict["&eta"] = "951";
  /** @type {string} */
  dict["&theta"] = "952";
  /** @type {string} */
  dict["&iota"] = "953";
  /** @type {string} */
  dict["&kappa"] = "954";
  /** @type {string} */
  dict["&lambda"] = "955";
  /** @type {string} */
  dict["&mu"] = "956";
  /** @type {string} */
  dict["&nu"] = "957";
  /** @type {string} */
  dict["&xi"] = "958";
  /** @type {string} */
  dict["&omicron"] = "959";
  /** @type {string} */
  dict["&pi"] = "960";
  /** @type {string} */
  dict["&rho"] = "961";
  /** @type {string} */
  dict["&sigmaf"] = "962";
  /** @type {string} */
  dict["&sigma"] = "963";
  /** @type {string} */
  dict["&tau"] = "964";
  /** @type {string} */
  dict["&upsilon"] = "965";
  /** @type {string} */
  dict["&phi"] = "966";
  /** @type {string} */
  dict["&chi"] = "967";
  /** @type {string} */
  dict["&psi"] = "968";
  /** @type {string} */
  dict["&omega"] = "969";
  /** @type {string} */
  dict["&thetasym"] = "977";
  /** @type {string} */
  dict["&upsih"] = "978";
  /** @type {string} */
  dict["&piv"] = "982";
  /** @type {string} */
  dict["&ensp"] = "8194";
  /** @type {string} */
  dict["&emsp"] = "8195";
  /** @type {string} */
  dict["&thinsp"] = "8201";
  /** @type {string} */
  dict["&zwnj"] = "8204";
  /** @type {string} */
  dict["&zwj"] = "8205";
  /** @type {string} */
  dict["&lrm"] = "8206";
  /** @type {string} */
  dict["&rlm"] = "8207";
  /** @type {string} */
  dict["&ndash"] = "8211";
  /** @type {string} */
  dict["&mdash"] = "8212";
  /** @type {string} */
  dict["&lsquo"] = "8216";
  /** @type {string} */
  dict["&rsquo"] = "8217";
  /** @type {string} */
  dict["&sbquo"] = "8218";
  /** @type {string} */
  dict["&ldquo"] = "8220";
  /** @type {string} */
  dict["&rdquo"] = "8221";
  /** @type {string} */
  dict["&bdquo"] = "8222";
  /** @type {string} */
  dict["&dagger"] = "8224";
  /** @type {string} */
  dict["&Dagger"] = "8225";
  /** @type {string} */
  dict["&bull"] = "8226";
  /** @type {string} */
  dict["&hellip"] = "8230";
  /** @type {string} */
  dict["&permil"] = "8240";
  /** @type {string} */
  dict["&prime"] = "8242";
  /** @type {string} */
  dict["&Prime"] = "8243";
  /** @type {string} */
  dict["&lsaquo"] = "8249";
  /** @type {string} */
  dict["&rsaquo"] = "8250";
  /** @type {string} */
  dict["&oline"] = "8254";
  /** @type {string} */
  dict["&frasl"] = "8260";
  /** @type {string} */
  dict["&euro"] = "8364";
  /** @type {string} */
  dict["&image"] = "8365";
  /** @type {string} */
  dict["&weierp"] = "8472";
  /** @type {string} */
  dict["&real"] = "8476";
  /** @type {string} */
  dict["&trade"] = "8482";
  /** @type {string} */
  dict["&alefsym"] = "8501";
  /** @type {string} */
  dict["&larr"] = "8592";
  /** @type {string} */
  dict["&uarr"] = "8593";
  /** @type {string} */
  dict["&rarr"] = "8594";
  /** @type {string} */
  dict["&darr"] = "8595";
  /** @type {string} */
  dict["&harr"] = "8596";
  /** @type {string} */
  dict["&crarr"] = "8629";
  /** @type {string} */
  dict["&lArr"] = "8656";
  /** @type {string} */
  dict["&uArr"] = "8657";
  /** @type {string} */
  dict["&rArr"] = "8658";
  /** @type {string} */
  dict["&dArr"] = "8659";
  /** @type {string} */
  dict["&hArr"] = "8660";
  /** @type {string} */
  dict["&forall"] = "8704";
  /** @type {string} */
  dict["&part"] = "8706";
  /** @type {string} */
  dict["&exist"] = "8707";
  /** @type {string} */
  dict["&empty"] = "8709";
  /** @type {string} */
  dict["&nabla"] = "8711";
  /** @type {string} */
  dict["&isin"] = "8712";
  /** @type {string} */
  dict["&notin"] = "8713";
  /** @type {string} */
  dict["&ni"] = "8715";
  /** @type {string} */
  dict["&prod"] = "8719";
  /** @type {string} */
  dict["&sum"] = "8721";
  /** @type {string} */
  dict["&minus"] = "8722";
  /** @type {string} */
  dict["&lowast"] = "8727";
  /** @type {string} */
  dict["&radic"] = "8730";
  /** @type {string} */
  dict["&prop"] = "8733";
  /** @type {string} */
  dict["&infin"] = "8734";
  /** @type {string} */
  dict["&ang"] = "8736";
  /** @type {string} */
  dict["&and"] = "8743";
  /** @type {string} */
  dict["&or"] = "8744";
  /** @type {string} */
  dict["&cap"] = "8745";
  /** @type {string} */
  dict["&cup"] = "8746";
  /** @type {string} */
  dict["&int"] = "8747";
  /** @type {string} */
  dict["&there4"] = "8756";
  /** @type {string} */
  dict["&sim"] = "8764";
  /** @type {string} */
  dict["&cong"] = "8773";
  /** @type {string} */
  dict["&asymp"] = "8776";
  /** @type {string} */
  dict["&ne"] = "8800";
  /** @type {string} */
  dict["&equiv"] = "8801";
  /** @type {string} */
  dict["&le"] = "8804";
  /** @type {string} */
  dict["&ge"] = "8805";
  /** @type {string} */
  dict["&sub"] = "8834";
  /** @type {string} */
  dict["&sup"] = "8835";
  /** @type {string} */
  dict["&nsub"] = "8836";
  /** @type {string} */
  dict["&sube"] = "8838";
  /** @type {string} */
  dict["&supe"] = "8839";
  /** @type {string} */
  dict["&oplus"] = "8853";
  /** @type {string} */
  dict["&otimes"] = "8855";
  /** @type {string} */
  dict["&perp"] = "8869";
  /** @type {string} */
  dict["&sdot"] = "8901";
  /** @type {string} */
  dict["&lceil"] = "8968";
  /** @type {string} */
  dict["&rceil"] = "8969";
  /** @type {string} */
  dict["&lfloor"] = "8970";
  /** @type {string} */
  dict["&rfloor"] = "8971";
  /** @type {string} */
  dict["&lang"] = "9001";
  /** @type {string} */
  dict["&rang"] = "9002";
  /** @type {string} */
  dict["&loz"] = "9674";
  /** @type {string} */
  dict["&spades"] = "9824";
  /** @type {string} */
  dict["&clubs"] = "9827";
  /** @type {string} */
  dict["&hearts"] = "9829";
  /** @type {string} */
  dict["&diams"] = "9830";
  var name;
  for (name in dict) {
    if ("function" != typeof dict[name]) {
      if (dict.hasOwnProperty(name)) {
        /** @type {string} */
        data[dict[name]] = name;
      }
    }
  }
  var i;
  for (i in data) {
    if ("function" != typeof data[i]) {
      if (data.hasOwnProperty(i)) {
        name = data[i].toLowerCase().substr(1);
        result.put(name, String.fromCharCode(i));
      }
    }
  }
  if (Object.freeze) {
    $.encoder = Object.freeze($.encoder);
    /** @type {function (): ?} */
    $.fn.encode = Object.freeze($.fn.encode);
  } else {
    if (Object.seal) {
      $.encoder = Object.seal($.encoder);
      /** @type {function (): ?} */
      $.fn.encode = Object.seal($.fn.encode);
    } else {
      if (Object.preventExtensions) {
        $.encoder = Object.preventExtensions($.encoder);
        /** @type {function (): ?} */
        $.fn.encode = Object.preventExtensions($.fn.encode);
      }
    }
  }
})(jQuery);
(function(first, noConflict) {
  /**
   * @param {string} obj
   * @return {?}
   */
  function isString(obj) {
    return!!("" === obj || obj && (obj.charCodeAt && obj.substr));
  }
  /**
   * @param {Object} obj
   * @return {?}
   */
  function isArray(obj) {
    return nativeIsArray ? nativeIsArray(obj) : "[object Array]" === core_toString.call(obj);
  }
  /**
   * @param {Object} obj
   * @return {?}
   */
  function isObject(obj) {
    return obj && "[object Object]" === core_toString.call(obj);
  }
  /**
   * @param {Object} object
   * @param {Object} defs
   * @return {?}
   */
  function defaults(object, defs) {
    var key;
    object = object || {};
    defs = defs || {};
    for (key in defs) {
      if (defs.hasOwnProperty(key)) {
        if (null == object[key]) {
          object[key] = defs[key];
        }
      }
    }
    return object;
  }
  /**
   * @param {Object} arr
   * @param {Function} fn
   * @param {Object} elems
   * @return {?}
   */
  function map(arr, fn, elems) {
    /** @type {Array} */
    var res = [];
    var i;
    var valsLength;
    if (!arr) {
      return res;
    }
    if (nativeMap && arr.map === nativeMap) {
      return arr.map(fn, elems);
    }
    /** @type {number} */
    i = 0;
    valsLength = arr.length;
    for (;i < valsLength;i++) {
      res[i] = fn.call(elems, arr[i], i, arr);
    }
    return res;
  }
  /**
   * @param {?} val
   * @param {number} base
   * @return {?}
   */
  function checkPrecision(val, base) {
    /** @type {number} */
    val = Math.round(Math.abs(val));
    return isNaN(val) ? base : val;
  }
  /**
   * @param {string} format
   * @return {?}
   */
  function checkCurrencyFormat(format) {
    /** @type {string} */
    var defaults = lib.settings.currency.format;
    if ("function" === typeof format) {
      format = format();
    }
    return isString(format) && format.match("%v") ? {
      pos : format,
      neg : format.replace("-", "").replace("%v", "-%v"),
      zero : format
    } : !format || (!format.pos || !format.pos.match("%v")) ? !isString(defaults) ? defaults : lib.settings.currency.format = {
      pos : defaults,
      neg : defaults.replace("%v", "-%v"),
      zero : defaults
    } : format;
  }
  var lib = {
    version : "0.3.2",
    settings : {
      currency : {
        symbol : "$",
        format : "%s%v",
        decimal : ".",
        thousand : ",",
        precision : 2,
        grouping : 3
      },
      number : {
        precision : 0,
        grouping : 3,
        thousand : ",",
        decimal : "."
      }
    }
  };
  /** @type {function (this:(Array.<T>|string|{length: number}), (function (this:S, T, number, Array.<T>): R|null), S=): Array.<R>} */
  var nativeMap = Array.prototype.map;
  /** @type {function (*): boolean} */
  var nativeIsArray = Array.isArray;
  /** @type {function (this:*): string} */
  var core_toString = Object.prototype.toString;
  /** @type {function (?, string): ?} */
  var unformat = lib.unformat = lib.parse = function(str, prop) {
    if (isArray(str)) {
      return map(str, function(val) {
        return unformat(val, prop);
      });
    }
    str = str || 0;
    if ("number" === typeof str) {
      return str;
    }
    prop = prop || lib.settings.number.decimal;
    /** @type {RegExp} */
    var rx = RegExp("[^0-9-" + prop + "]", ["g"]);
    /** @type {number} */
    rx = parseFloat(("" + str).replace(/\((.*)\)/, "-$1").replace(rx, "").replace(prop, "."));
    return!isNaN(rx) ? rx : 0;
  };
  /** @type {function (?, ?): ?} */
  var toFixed = lib.toFixed = function(value, precision) {
    precision = checkPrecision(precision, lib.settings.number.precision);
    /** @type {number} */
    var power = Math.pow(10, precision);
    return(Math.round(lib.unformat(value) * power) / power).toFixed(precision);
  };
  /** @type {function (number, number, ?, ?): ?} */
  var formatNumber = lib.formatNumber = function(number, precision, thousand, decimal) {
    if (isArray(number)) {
      return map(number, function(val) {
        return formatNumber(val, precision, thousand, decimal);
      });
    }
    number = unformat(number);
    var opts = defaults(isObject(precision) ? precision : {
      precision : precision,
      thousand : thousand,
      decimal : decimal
    }, lib.settings.number);
    var usePrecision = checkPrecision(opts.precision);
    /** @type {string} */
    var negative = 0 > number ? "-" : "";
    /** @type {string} */
    var base = parseInt(toFixed(Math.abs(number || 0), usePrecision), 10) + "";
    /** @type {number} */
    var mod = 3 < base.length ? base.length % 3 : 0;
    return negative + (mod ? base.substr(0, mod) + opts.thousand : "") + base.substr(mod).replace(/(\d{3})(?=\d)/g, "$1" + opts.thousand) + (usePrecision ? opts.decimal + toFixed(Math.abs(number), usePrecision).split(".")[1] : "");
  };
  /** @type {function (number, string, number, ?, string, number): ?} */
  var formatMoney = lib.formatMoney = function(number, symbol, precision, thousand, decimal, format) {
    if (isArray(number)) {
      return map(number, function(val) {
        return formatMoney(val, symbol, precision, thousand, decimal, format);
      });
    }
    number = unformat(number);
    var opts = defaults(isObject(symbol) ? symbol : {
      symbol : symbol,
      precision : precision,
      thousand : thousand,
      decimal : decimal,
      format : format
    }, lib.settings.currency);
    var formats = checkCurrencyFormat(opts.format);
    return(0 < number ? formats.pos : 0 > number ? formats.neg : formats.zero).replace("%s", opts.symbol).replace("%v", formatNumber(Math.abs(number), checkPrecision(opts.precision), opts.thousand, opts.decimal));
  };
  /**
   * @param {number} $keys
   * @param {string} symbol
   * @param {number} precision
   * @param {?} thousand
   * @param {?} decimal
   * @param {number} format
   * @return {?}
   */
  lib.formatColumn = function($keys, symbol, precision, thousand, decimal, format) {
    if (!$keys) {
      return[];
    }
    var opts = defaults(isObject(symbol) ? symbol : {
      symbol : symbol,
      precision : precision,
      thousand : thousand,
      decimal : decimal,
      format : format
    }, lib.settings.currency);
    var formats = checkCurrencyFormat(opts.format);
    /** @type {boolean} */
    var padAfterSymbol = formats.pos.indexOf("%s") < formats.pos.indexOf("%v") ? true : false;
    /** @type {number} */
    var len = 0;
    $keys = map($keys, function(val) {
      if (isArray(val)) {
        return lib.formatColumn(val, opts);
      }
      val = unformat(val);
      val = (0 < val ? formats.pos : 0 > val ? formats.neg : formats.zero).replace("%s", opts.symbol).replace("%v", formatNumber(Math.abs(val), checkPrecision(opts.precision), opts.thousand, opts.decimal));
      if (val.length > len) {
        len = val.length;
      }
      return val;
    });
    return map($keys, function(val) {
      return isString(val) && val.length < len ? padAfterSymbol ? val.replace(opts.symbol, opts.symbol + Array(len - val.length + 1).join(" ")) : Array(len - val.length + 1).join(" ") + val : val;
    });
  };
  if ("undefined" !== typeof exports) {
    if ("undefined" !== typeof module) {
      if (module.exports) {
        exports = module.exports = lib;
      }
    }
    exports.accounting = lib;
  } else {
    if ("function" === typeof define && define.amd) {
      define([], function() {
        return lib;
      });
    } else {
      var i = first.accounting;
      /**
       * @return {?}
       */
      lib.noConflict = function() {
        first.accounting = i;
        /** @type {(RegExp|string)} */
        lib.noConflict = noConflict;
        return lib;
      };
      first.accounting = lib;
    }
  }
})(this);
(function(dataAndEvents, f) {
  /**
   * @return {?}
   */
  function getElements() {
    var a = html5.elements;
    return "string" == typeof a ? a.split(" ") : a;
  }
  /**
   * @param {Object} obj
   * @return {?}
   */
  function get(obj) {
    var value = cache[obj[i]];
    if (!value) {
      value = {};
      prop++;
      obj[i] = prop;
      cache[prop] = value;
    }
    return value;
  }
  /**
   * @param {string} type
   * @param {Object} context
   * @param {Object} data
   * @return {?}
   */
  function createElement(type, context, data) {
    if (!context) {
      /** @type {HTMLDocument} */
      context = f;
    }
    if (g) {
      return context.createElement(type);
    }
    if (!data) {
      data = get(context);
    }
    context = data.cache[type] ? data.cache[type].cloneNode() : exclude.test(type) ? (data.cache[type] = data.createElem(type)).cloneNode() : data.createElem(type);
    return context.canHaveChildren && !manipulation_rcheckableType.test(type) ? data.frag.appendChild(context) : context;
  }
  /**
   * @param {Object} key
   * @return {?}
   */
  function t(key) {
    if (!key) {
      /** @type {HTMLDocument} */
      key = f;
    }
    var data = get(key);
    if (html5.shivCSS && (!j && !data.hasCSS)) {
      var node;
      /** @type {Object} */
      var d = key;
      node = d.createElement("p");
      d = d.getElementsByTagName("head")[0] || d.documentElement;
      /** @type {string} */
      node.innerHTML = "x<style>article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}mark{background:#FF0;color:#000}template{display:none}</style>";
      node = d.insertBefore(node.lastChild, d.firstChild);
      /** @type {boolean} */
      data.hasCSS = !!node;
    }
    if (!g) {
      /** @type {Object} */
      var ownerDocument = key;
      if (!data.cache) {
        data.cache = {};
        data.createElem = ownerDocument.createElement;
        data.createFrag = ownerDocument.createDocumentFragment;
        data.frag = data.createFrag();
      }
      /**
       * @param {string} type
       * @return {?}
       */
      ownerDocument.createElement = function(type) {
        return!html5.shivMethods ? data.createElem(type) : createElement(type, ownerDocument, data);
      };
      ownerDocument.createDocumentFragment = Function("h,f", "return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&&(" + getElements().join().replace(/\w+/g, function(type) {
        data.createElem(type);
        data.frag.createElement(type);
        return'c("' + type + '")';
      }) + ");return n}")(html5, data.frag);
    }
    return key;
  }
  var options = dataAndEvents.html5 || {};
  /** @type {RegExp} */
  var manipulation_rcheckableType = /^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i;
  /** @type {RegExp} */
  var exclude = /^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i;
  var j;
  /** @type {string} */
  var i = "_html5shiv";
  /** @type {number} */
  var prop = 0;
  var cache = {};
  var g;
  try {
    /** @type {Element} */
    var a = f.createElement("a");
    /** @type {string} */
    a.innerHTML = "<xyz></xyz>";
    /** @type {boolean} */
    j = "hidden" in a;
    var err_;
    if (!(err_ = 1 == a.childNodes.length)) {
      f.createElement("a");
      /** @type {DocumentFragment} */
      var frag = f.createDocumentFragment();
      /** @type {boolean} */
      err_ = "undefined" == typeof frag.cloneNode || ("undefined" == typeof frag.createDocumentFragment || "undefined" == typeof frag.createElement);
    }
    /** @type {boolean} */
    g = err_;
  } catch (n) {
    /** @type {boolean} */
    g = j = true;
  }
  var html5 = {
    elements : options.elements || "abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output progress section summary template time video",
    version : "3.6.2",
    shivCSS : false !== options.shivCSS,
    supportsUnknownElements : g,
    shivMethods : false !== options.shivMethods,
    type : "default",
    /** @type {function (Object): ?} */
    shivDocument : t,
    /** @type {function (string, Object, Object): ?} */
    createElement : createElement,
    /**
     * @param {Object} a
     * @param {Object} b
     * @return {?}
     */
    createDocumentFragment : function(a, b) {
      if (!a) {
        /** @type {HTMLDocument} */
        a = f;
      }
      if (g) {
        return a.createDocumentFragment();
      }
      b = b || get(a);
      var clone = b.frag.cloneNode();
      /** @type {number} */
      var i = 0;
      var elems = getElements();
      var length = elems.length;
      for (;i < length;i++) {
        clone.createElement(elems[i]);
      }
      return clone;
    }
  };
  dataAndEvents.html5 = html5;
  t(f);
})(this, document);
(function(name, context, definition) {
  /** @type {function (this:Window, string): (MediaQueryList|null)} */
  var matchMedia = window.matchMedia;
  if ("undefined" !== typeof module && module.exports) {
    module.exports = definition(matchMedia);
  } else {
    if ("function" === typeof define && define.amd) {
      define(function() {
        return context[name] = definition(matchMedia);
      });
    } else {
      context[name] = definition(matchMedia);
    }
  }
})("enquire", this, function(matchMedia) {
  /**
   * @param {Array} collection
   * @param {Function} callback
   * @return {undefined}
   */
  function each(collection, callback) {
    /** @type {number} */
    var i = 0;
    var e = collection.length;
    var value;
    i;
    for (;i < e && !(value = callback(collection[i], i), false === value);i++) {
    }
  }
  /**
   * @param {Object} options
   * @return {undefined}
   */
  function QueryHandler(options) {
    /** @type {Object} */
    this.options = options;
    if (!options.deferSetup) {
      this.setup();
    }
  }
  /**
   * @param {string} query
   * @param {Function} isUnconditional
   * @return {undefined}
   */
  function MediaQuery(query, isUnconditional) {
    /** @type {string} */
    this.query = query;
    /** @type {Function} */
    this.isUnconditional = isUnconditional;
    /** @type {Array} */
    this.handlers = [];
    this.mql = matchMedia(query);
    var self = this;
    /**
     * @param {Object} mql
     * @return {undefined}
     */
    this.listener = function(mql) {
      /** @type {Object} */
      self.mql = mql;
      self.assess();
    };
    this.mql.addListener(this.listener);
  }
  /**
   * @return {undefined}
   */
  function MediaQueryDispatch() {
    if (!matchMedia) {
      throw Error("matchMedia not present, legacy browsers require a polyfill");
    }
    this.queries = {};
    /** @type {boolean} */
    this.browserIsIncapable = !matchMedia("only all").matches;
  }
  QueryHandler.prototype = {
    /**
     * @return {undefined}
     */
    setup : function() {
      if (this.options.setup) {
        this.options.setup();
      }
      /** @type {boolean} */
      this.initialised = true;
    },
    /**
     * @return {undefined}
     */
    on : function() {
      if (!this.initialised) {
        this.setup();
      }
      if (this.options.match) {
        this.options.match();
      }
    },
    /**
     * @return {undefined}
     */
    off : function() {
      if (this.options.unmatch) {
        this.options.unmatch();
      }
    },
    /**
     * @return {undefined}
     */
    destroy : function() {
      if (this.options.destroy) {
        this.options.destroy();
      } else {
        this.off();
      }
    },
    /**
     * @param {?} target
     * @return {?}
     */
    equals : function(target) {
      return this.options === target || this.options.match === target;
    }
  };
  MediaQuery.prototype = {
    /**
     * @param {string} handler
     * @return {undefined}
     */
    addHandler : function(handler) {
      handler = new QueryHandler(handler);
      this.handlers.push(handler);
      if (this.matches()) {
        handler.on();
      }
    },
    /**
     * @param {?} handler
     * @return {undefined}
     */
    removeHandler : function(handler) {
      var handlers = this.handlers;
      each(handlers, function(h, a) {
        if (h.equals(handler)) {
          return h.destroy(), !handlers.splice(a, 1);
        }
      });
    },
    /**
     * @return {?}
     */
    matches : function() {
      return this.mql.matches || this.isUnconditional;
    },
    /**
     * @return {undefined}
     */
    clear : function() {
      each(this.handlers, function(todo) {
        todo.destroy();
      });
      this.mql.removeListener(this.listener);
      /** @type {number} */
      this.handlers.length = 0;
    },
    /**
     * @return {undefined}
     */
    assess : function() {
      /** @type {string} */
      var value = this.matches() ? "on" : "off";
      each(this.handlers, function(tagMap) {
        tagMap[value]();
      });
    }
  };
  MediaQueryDispatch.prototype = {
    /**
     * @param {?} q
     * @param {Object} options
     * @param {boolean} isUnconditional
     * @return {?}
     */
    register : function(q, options, isUnconditional) {
      var queries = this.queries;
      isUnconditional = isUnconditional && this.browserIsIncapable;
      if (!queries[q]) {
        queries[q] = new MediaQuery(q, isUnconditional);
      }
      if ("function" === typeof options) {
        options = {
          match : options
        };
      }
      if ("[object Array]" !== Object.prototype.toString.apply(options)) {
        /** @type {Array} */
        options = [options];
      }
      each(options, function(handler) {
        queries[q].addHandler(handler);
      });
      return this;
    },
    /**
     * @param {?} q
     * @param {?} handler
     * @return {?}
     */
    unregister : function(q, handler) {
      var query = this.queries[q];
      if (query) {
        if (handler) {
          query.removeHandler(handler);
        } else {
          query.clear();
          delete this.queries[q];
        }
      }
      return this;
    }
  };
  return new MediaQueryDispatch;
});
window.Socialite = function(win, doc, dependency) {
  /** @type {number} */
  var uid = 0;
  /** @type {Array} */
  var instances = [];
  var networks = {};
  var widgets = {};
  /** @type {RegExp} */
  var stopParent = /^($|loaded|complete)/;
  var encode = win.encodeURIComponent;
  var socialite = {
    settings : {},
    /**
     * @param {string} text
     * @return {?}
     */
    trim : function(text) {
      return text.trim ? text.trim() : text.replace(/^\s+|\s+$/g, "");
    },
    /**
     * @param {string} name
     * @param {string} o
     * @return {?}
     */
    hasClass : function(name, o) {
      return-1 !== (" " + name.className + " ").indexOf(" " + o + " ");
    },
    /**
     * @param {string} name
     * @param {Object} cn
     * @return {undefined}
     */
    addClass : function(name, cn) {
      if (!socialite.hasClass(name, cn)) {
        name.className = "" === name.className ? cn : name.className + " " + cn;
      }
    },
    /**
     * @param {string} name
     * @param {string} classNames
     * @return {undefined}
     */
    removeClass : function(name, classNames) {
      name.className = socialite.trim(" " + name.className + " ".replace(" " + classNames + " ", " "));
    },
    /**
     * @param {Element} to
     * @param {?} from
     * @param {boolean} deepDataAndEvents
     * @return {undefined}
     */
    extendObject : function(to, from, deepDataAndEvents) {
      var prop;
      for (prop in from) {
        /** @type {boolean} */
        var suite = to[prop] !== dependency;
        if (suite && "object" === typeof from[prop]) {
          socialite.extendObject(to[prop], from[prop], deepDataAndEvents);
        } else {
          if (deepDataAndEvents || !suite) {
            to[prop] = from[prop];
          }
        }
      }
    },
    /**
     * @param {Object} context
     * @param {string} selector
     * @return {?}
     */
    getElements : function(context, selector) {
      /** @type {number} */
      var i = 0;
      /** @type {Array} */
      var results = [];
      /** @type {boolean} */
      var soFar = !!context.getElementsByClassName;
      var all = soFar ? context.getElementsByClassName(selector) : context.getElementsByTagName("*");
      for (;i < all.length;i++) {
        if (soFar || socialite.hasClass(all[i], selector)) {
          results.push(all[i]);
        }
      }
      return results;
    },
    /**
     * @param {Object} a
     * @param {boolean} noprefix
     * @param {boolean} dataAndEvents
     * @return {?}
     */
    getDataAttributes : function(a, noprefix, dataAndEvents) {
      /** @type {number} */
      var i = 0;
      /** @type {string} */
      var optsData = "";
      var exports = {};
      a = a.attributes;
      for (;i < a.length;i++) {
        var name = a[i].name;
        var val = a[i].value;
        if (val.length) {
          if (0 === name.indexOf("data-")) {
            if (noprefix) {
              name = name.substring(5);
            }
            if (dataAndEvents) {
              exports[name] = val;
            } else {
              optsData += encode(name) + "=" + encode(val) + "&";
            }
          }
        }
      }
      return dataAndEvents ? exports : optsData;
    },
    /**
     * @param {?} from
     * @param {Element} to
     * @param {boolean} noprefix
     * @param {boolean} nohyphen
     * @return {undefined}
     */
    copyDataAttributes : function(from, to, noprefix, nohyphen) {
      from = socialite.getDataAttributes(from, noprefix, true);
      var i;
      for (i in from) {
        to.setAttribute(nohyphen ? i.replace(/-/g, "_") : i, from[i]);
      }
    },
    /**
     * @param {string} suite
     * @param {Object} instance
     * @return {?}
     */
    createIframe : function(suite, instance) {
      /** @type {Element} */
      var iframe = doc.createElement("iframe");
      /** @type {string} */
      iframe.style.cssText = "overflow: hidden; border: none;";
      socialite.extendObject(iframe, {
        src : suite,
        allowtransparency : "true",
        frameborder : "0",
        scrolling : "no"
      }, true);
      if (instance) {
        /** @type {function (): undefined} */
        iframe.onload = iframe.onreadystatechange = function() {
          if (stopParent.test(iframe.readyState || "")) {
            /** @type {null} */
            iframe.onload = iframe.onreadystatechange = null;
            socialite.activateInstance(instance);
          }
        };
      }
      return iframe;
    },
    /**
     * @param {string} name
     * @return {?}
     */
    networkReady : function(name) {
      return networks[name] ? networks[name].loaded : dependency;
    },
    /**
     * @param {Object} network
     * @return {undefined}
     */
    appendNetwork : function(network) {
      if (network) {
        if (!network.appended) {
          if ("function" === typeof network.append && false === network.append(network)) {
            /** @type {boolean} */
            network.appended = network.loaded = true;
            socialite.activateAll(network);
          } else {
            if (network.script) {
              /** @type {Element} */
              network.el = doc.createElement("script");
              socialite.extendObject(network.el, network.script, true);
              /** @type {boolean} */
              network.el.async = true;
              /** @type {function (): undefined} */
              network.el.onload = network.el.onreadystatechange = function() {
                if (stopParent.test(network.el.readyState || "")) {
                  /** @type {null} */
                  network.el.onload = network.el.onreadystatechange = null;
                  /** @type {boolean} */
                  network.loaded = true;
                  if (!("function" === typeof network.onload && false === network.onload(network))) {
                    socialite.activateAll(network);
                  }
                }
              };
              doc.body.appendChild(network.el);
            }
            /** @type {boolean} */
            network.appended = true;
          }
        }
      }
    },
    /**
     * @param {Object} network
     * @return {?}
     */
    removeNetwork : function(network) {
      if (!socialite.networkReady(network.name)) {
        return false;
      }
      if (network.el.parentNode) {
        network.el.parentNode.removeChild(network.el);
      }
      return!(network.appended = network.loaded = false);
    },
    /**
     * @param {Object} network
     * @return {undefined}
     */
    reloadNetwork : function(network) {
      if (network = networks[network]) {
        if (socialite.removeNetwork(network)) {
          socialite.appendNetwork(network);
        }
      }
    },
    /**
     * @param {Object} el
     * @param {Object} widget
     * @return {?}
     */
    createInstance : function(el, widget) {
      /** @type {boolean} */
      var f = true;
      var instance = {
        el : el,
        uid : uid++,
        widget : widget
      };
      instances.push(instance);
      if (widget.process !== dependency) {
        f = "function" === typeof widget.process ? widget.process(instance) : false;
      }
      if (f) {
        socialite.processInstance(instance);
      }
      instance.el.setAttribute("data-socialite", instance.uid);
      /** @type {string} */
      instance.el.className = "socialite " + widget.name + " socialite-instance";
      return instance;
    },
    /**
     * @param {Object} instance
     * @return {undefined}
     */
    processInstance : function(instance) {
      var el = instance.el;
      /** @type {Element} */
      instance.el = doc.createElement("div");
      instance.el.className = el.className;
      socialite.copyDataAttributes(el, instance.el);
      if ("a" === el.nodeName.toLowerCase()) {
        if (!el.getAttribute("data-default-href")) {
          instance.el.setAttribute("data-default-href", el.getAttribute("href"));
        }
      }
      var parent = el.parentNode;
      parent.insertBefore(instance.el, el);
      parent.removeChild(el);
    },
    /**
     * @param {Object} instance
     * @return {?}
     */
    activateInstance : function(instance) {
      if (instance && !instance.loaded) {
        return instance.loaded = true, "function" === typeof instance.widget.activate && instance.widget.activate(instance), socialite.addClass(instance.el, "socialite-loaded"), instance.onload ? instance.onload(instance.el) : null;
      }
    },
    /**
     * @param {(Array|string)} network
     * @return {undefined}
     */
    activateAll : function(network) {
      if ("string" === typeof network) {
        network = networks[network];
      }
      /** @type {number} */
      var i = 0;
      for (;i < instances.length;i++) {
        var instance = instances[i];
        if (instance.init) {
          if (instance.widget.network === network) {
            socialite.activateInstance(instance);
          }
        }
      }
    },
    /**
     * @param {Object} context
     * @param {Object} el
     * @param {Object} widget
     * @param {string} onload
     * @param {boolean} deepDataAndEvents
     * @return {undefined}
     */
    load : function(context, el, widget, onload, deepDataAndEvents) {
      context = context && ("object" === typeof context && 1 === context.nodeType) ? context : doc;
      if (!el || "object" !== typeof el) {
        socialite.load(context, socialite.getElements(context, "socialite"), widget, onload, deepDataAndEvents);
      } else {
        var i;
        if (/Array/.test(Object.prototype.toString.call(el))) {
          /** @type {number} */
          i = 0;
          for (;i < el.length;i++) {
            socialite.load(context, el[i], widget, onload, deepDataAndEvents);
          }
        } else {
          if (1 === el.nodeType) {
            if (!widget || !widgets[widget]) {
              /** @type {null} */
              widget = null;
              context = el.className.split(" ");
              /** @type {number} */
              i = 0;
              for (;i < context.length;i++) {
                if (widgets[context[i]]) {
                  widget = context[i];
                  break;
                }
              }
              if (!widget) {
                return;
              }
            }
            var instance;
            widget = widgets[widget];
            /** @type {number} */
            context = parseInt(el.getAttribute("data-socialite"), 10);
            if (isNaN(context)) {
              instance = socialite.createInstance(el, widget);
            } else {
              /** @type {number} */
              i = 0;
              for (;i < instances.length;i++) {
                if (instances[i].uid === context) {
                  instance = instances[i];
                  break;
                }
              }
            }
            if (!deepDataAndEvents) {
              if (instance) {
                if (!instance.init) {
                  /** @type {boolean} */
                  instance.init = true;
                  /** @type {(Function|null)} */
                  instance.onload = "function" === typeof onload ? onload : null;
                  widget.init(instance);
                }
                if (widget.network.appended) {
                  if (socialite.networkReady(widget.network.name)) {
                    socialite.activateInstance(instance);
                  }
                } else {
                  socialite.appendNetwork(widget.network);
                }
              }
            }
          }
        }
      }
    },
    /**
     * @param {Object} id
     * @param {Object} item
     * @param {Function} onload
     * @return {undefined}
     */
    activate : function(id, item, onload) {
      win.Socialite.load(null, id, item, onload);
    },
    /**
     * @param {Object} type
     * @param {Object} id
     * @param {Object} item
     * @return {undefined}
     */
    process : function(type, id, item) {
      win.Socialite.load(type, id, item, null, true);
    },
    /**
     * @param {string} n
     * @param {?} opt_attributes
     * @return {undefined}
     */
    network : function(n, opt_attributes) {
      networks[n] = {
        name : n,
        el : null,
        appended : false,
        loaded : false,
        widgets : {}
      };
      if (opt_attributes) {
        socialite.extendObject(networks[n], opt_attributes);
      }
    },
    /**
     * @param {string} type
     * @param {Function} name
     * @param {Function} types
     * @return {undefined}
     */
    widget : function(type, name, types) {
      /** @type {string} */
      types.name = type + "-" + name;
      if (networks[type]) {
        if (!widgets[types.name]) {
          types.network = networks[type];
          networks[type].widgets[name] = widgets[types.name] = types;
        }
      }
    },
    /**
     * @param {?} params
     * @return {undefined}
     */
    setup : function(params) {
      socialite.extendObject(socialite.settings, params, true);
    }
  };
  return socialite;
}(window, window.document);
(function($window, doc, Socialite) {
  Socialite.setup({
    facebook : {
      lang : "en_GB",
      appId : null
    },
    twitter : {
      lang : "en"
    },
    googleplus : {
      lang : "en-GB"
    }
  });
  Socialite.network("facebook", {
    script : {
      src : "//connect.facebook.net/{{language}}/all.js",
      id : "facebook-jssdk"
    },
    /**
     * @param {string} type
     * @return {undefined}
     */
    append : function(type) {
      /** @type {Element} */
      var elem = doc.createElement("div");
      var settings = Socialite.settings.facebook;
      var events = {
        onlike : "edge.create",
        onunlike : "edge.remove",
        onsend : "message.send"
      };
      /** @type {string} */
      elem.id = "fb-root";
      doc.body.appendChild(elem);
      type.script.src = type.script.src.replace("{{language}}", settings.lang);
      /**
       * @return {undefined}
       */
      $window.fbAsyncInit = function() {
        $window.FB.init({
          appId : settings.appId,
          xfbml : true
        });
        var e;
        for (e in events) {
          if ("function" === typeof settings[e]) {
            $window.FB.Event.subscribe(events[e], settings[e]);
          }
        }
      };
    }
  });
  /**
   * @param {Object} instance
   * @return {undefined}
   */
  var twitterInit = function(instance) {
    /** @type {Element} */
    var el = doc.createElement("div");
    el.className = instance.widget.fbtype;
    Socialite.copyDataAttributes(instance.el, el);
    instance.el.appendChild(el);
    if ($window.FB) {
      if ($window.FB.XFBML) {
        $window.FB.XFBML.parse(instance.el);
      }
    }
  };
  Socialite.widget("facebook", "like", {
    /** @type {function (Object): undefined} */
    init : twitterInit,
    fbtype : "fb-like"
  });
  Socialite.widget("facebook", "share", {
    /** @type {function (Object): undefined} */
    init : twitterInit,
    fbtype : "fb-share-button"
  });
  Socialite.network("twitter", {
    script : {
      src : "//platform.twitter.com/widgets.js",
      id : "twitter-wjs",
      charset : "utf-8"
    },
    /**
     * @return {?}
     */
    append : function() {
      /** @type {boolean} */
      var original = "object" !== typeof $window.twttr;
      var settings = Socialite.settings.twitter;
      /** @type {Array} */
      var events = ["click", "tweet", "retweet", "favorite", "follow"];
      if (original) {
        $window.twttr = t = {
          _e : [],
          /**
           * @param {string} type
           * @return {undefined}
           */
          ready : function(type) {
            t._e.push(type);
          }
        };
      }
      $window.twttr.ready(function(_) {
        /** @type {number} */
        var i = 0;
        for (;i < events.length;i++) {
          var cycle = events[i];
          if (typeof settings["on" + cycle] === "function") {
            _.events.bind(cycle, settings["on" + cycle]);
          }
        }
        Socialite.activateAll("twitter");
      });
      return original;
    }
  });
  /**
   * @param {Object} instance
   * @return {undefined}
   */
  twitterInit = function(instance) {
    /** @type {Element} */
    var el = doc.createElement("a");
    /** @type {string} */
    el.className = instance.widget.name + "-button";
    Socialite.copyDataAttributes(instance.el, el);
    el.setAttribute("href", instance.el.getAttribute("data-default-href"));
    el.setAttribute("data-lang", instance.el.getAttribute("data-lang") || Socialite.settings.twitter.lang);
    instance.el.appendChild(el);
  };
  /**
   * @return {undefined}
   */
  var googleplusActivate = function() {
    if ($window.twttr) {
      if ("object" === typeof $window.twttr.widgets && "function" === typeof $window.twttr.widgets.load) {
        $window.twttr.widgets.load();
      }
    }
  };
  Socialite.widget("twitter", "share", {
    /** @type {function (Object): undefined} */
    init : twitterInit,
    /** @type {function (): undefined} */
    activate : googleplusActivate
  });
  Socialite.widget("twitter", "follow", {
    /** @type {function (Object): undefined} */
    init : twitterInit,
    /** @type {function (): undefined} */
    activate : googleplusActivate
  });
  Socialite.widget("twitter", "hashtag", {
    /** @type {function (Object): undefined} */
    init : twitterInit,
    /** @type {function (): undefined} */
    activate : googleplusActivate
  });
  Socialite.widget("twitter", "mention", {
    /** @type {function (Object): undefined} */
    init : twitterInit,
    /** @type {function (): undefined} */
    activate : googleplusActivate
  });
  Socialite.widget("twitter", "embed", {
    /**
     * @param {Object} instance
     * @return {undefined}
     */
    process : function(instance) {
      instance.innerEl = instance.el;
      if (!instance.innerEl.getAttribute("data-lang")) {
        instance.innerEl.setAttribute("data-lang", Socialite.settings.twitter.lang);
      }
      /** @type {Element} */
      instance.el = doc.createElement("div");
      instance.el.className = instance.innerEl.className;
      /** @type {string} */
      instance.innerEl.className = "";
      instance.innerEl.parentNode.insertBefore(instance.el, instance.innerEl);
      instance.el.appendChild(instance.innerEl);
    },
    /**
     * @param {string} type
     * @return {undefined}
     */
    init : function(type) {
      /** @type {string} */
      type.innerEl.className = "twitter-tweet";
    },
    /** @type {function (): undefined} */
    activate : googleplusActivate
  });
  Socialite.network("googleplus", {
    script : {
      src : "//apis.google.com/js/plusone.js"
    },
    /**
     * @return {?}
     */
    append : function() {
      if ($window.gapi) {
        return false;
      }
      $window.___gcfg = {
        lang : Socialite.settings.googleplus.lang,
        parsetags : "explicit"
      };
    }
  });
  /**
   * @param {Object} instance
   * @return {undefined}
   */
  twitterInit = function(instance) {
    /** @type {Element} */
    var el = doc.createElement("div");
    /** @type {string} */
    el.className = "g-" + instance.widget.gtype;
    Socialite.copyDataAttributes(instance.el, el);
    instance.el.appendChild(el);
    /** @type {Element} */
    instance.gplusEl = el;
  };
  /**
   * @param {Object} instance
   * @param {?} callback
   * @return {?}
   */
  var googleplusEvent = function(instance, callback) {
    return "function" !== typeof callback ? null : function(mongoObject) {
      callback(instance.el, mongoObject);
    };
  };
  /**
   * @param {Object} instance
   * @return {undefined}
   */
  googleplusActivate = function(instance) {
    var type = instance.widget.gtype;
    if ($window.gapi && $window.gapi[type]) {
      var settings = Socialite.settings.googleplus;
      var optgroup = Socialite.getDataAttributes(instance.el, true, true);
      /** @type {Array} */
      var events = ["onstartinteraction", "onendinteraction", "callback"];
      /** @type {number} */
      var i = 0;
      for (;i < events.length;i++) {
        optgroup[events[i]] = googleplusEvent(instance, settings[events[i]]);
      }
      $window.gapi[type].render(instance.gplusEl, optgroup);
    }
  };
  Socialite.widget("googleplus", "one", {
    /** @type {function (Object): undefined} */
    init : twitterInit,
    /** @type {function (Object): undefined} */
    activate : googleplusActivate,
    gtype : "plusone"
  });
  Socialite.widget("googleplus", "share", {
    /** @type {function (Object): undefined} */
    init : twitterInit,
    /** @type {function (Object): undefined} */
    activate : googleplusActivate,
    gtype : "plus"
  });
  Socialite.widget("googleplus", "badge", {
    /** @type {function (Object): undefined} */
    init : twitterInit,
    /** @type {function (Object): undefined} */
    activate : googleplusActivate,
    gtype : "plus"
  });
  Socialite.network("linkedin", {
    script : {
      src : "//platform.linkedin.com/in.js"
    }
  });
  /**
   * @param {Object} instance
   * @return {undefined}
   */
  twitterInit = function(instance) {
    /** @type {Element} */
    var el = doc.createElement("script");
    /** @type {string} */
    el.type = "IN/" + instance.widget.intype;
    Socialite.copyDataAttributes(instance.el, el);
    instance.el.appendChild(el);
    if ("object" === typeof $window.IN) {
      if ("function" === typeof $window.IN.parse) {
        $window.IN.parse(instance.el);
        Socialite.activateInstance(instance);
      }
    }
  };
  Socialite.widget("linkedin", "share", {
    /** @type {function (Object): undefined} */
    init : twitterInit,
    intype : "Share"
  });
  Socialite.widget("linkedin", "recommend", {
    /** @type {function (Object): undefined} */
    init : twitterInit,
    intype : "RecommendProduct"
  });
  Socialite.widget("linkedin", "follow", {
    /** @type {function (Object): undefined} */
    init : twitterInit,
    intype : "FollowCompany"
  });
})(window, window.document, window.Socialite);
(function() {
  var s = window._socialite;
  if (/Array/.test(Object.prototype.toString.call(s))) {
    /** @type {number} */
    var i = 0;
    var len = s.length;
    for (;i < len;i++) {
      if ("function" === typeof s[i]) {
        s[i]();
      }
    }
  }
})();
(function($, d, Socialite) {
  Socialite.network("pinterest", {
    script : {
      src : "//assets.pinterest.com/js/pinit.js"
    }
  });
  Socialite.widget("pinterest", "pinit", {
    /**
     * @param {Object} instance
     * @return {?}
     */
    process : function(instance) {
      if ("a" !== instance.el.nodeName.toLowerCase()) {
        return true;
      }
      /** @type {string} */
      var id = "socialite-instance-" + instance.uid;
      var linktext = instance.el.getAttribute("href");
      /** @type {string} */
      instance.el.id = id;
      /** @type {string} */
      instance.el.href = "#" + id;
      instance.el.setAttribute("data-default-href", linktext);
      instance.el.setAttribute("onclick", '(function(){window.open("' + linktext + '")})();');
    },
    /**
     * @param {Object} instance
     * @return {undefined}
     */
    init : function(instance) {
      Socialite.processInstance(instance);
      /** @type {Element} */
      var el = d.createElement("a");
      /** @type {string} */
      el.className = "pin-it-button";
      Socialite.copyDataAttributes(instance.el, el);
      el.setAttribute("href", instance.el.getAttribute("data-default-href"));
      el.setAttribute("count-layout", instance.el.getAttribute("data-count-layout") || "horizontal");
      instance.el.appendChild(el);
      if (Socialite.networkReady("pinterest")) {
        Socialite.reloadNetwork("pinterest");
      }
    }
  });
})(window, window.document, window.Socialite);
(function(factory) {
  if ("function" === typeof define && define.amd) {
    define(["jquery"], factory);
  } else {
    factory(jQuery);
  }
})(function(jQuery, events) {
  /**
   * @param {Object} fn
   * @return {undefined}
   */
  function Timer(fn) {
    /**
     * @return {undefined}
     */
    function trigger() {
      if (active) {
        callback();
        requestFrame(trigger);
        /** @type {boolean} */
        f = true;
        /** @type {boolean} */
        active = false;
      } else {
        /** @type {boolean} */
        f = false;
      }
    }
    /** @type {Object} */
    var callback = fn;
    /** @type {boolean} */
    var active = false;
    /** @type {boolean} */
    var f = false;
    /**
     * @return {undefined}
     */
    this.kick = function() {
      /** @type {boolean} */
      active = true;
      if (!f) {
        trigger();
      }
    };
    /**
     * @param {string} type
     * @return {undefined}
     */
    this.end = function(type) {
      var cb = callback;
      if (type) {
        if (f) {
          callback = active ? function() {
            cb();
            type();
          } : type;
          /** @type {boolean} */
          active = true;
        } else {
          type();
        }
      }
    };
  }
  /**
   * @return {?}
   */
  function returnTrue() {
    return true;
  }
  /**
   * @return {?}
   */
  function types() {
    return false;
  }
  /**
   * @param {?} evt
   * @return {undefined}
   */
  function event(evt) {
    evt.preventDefault();
  }
  /**
   * @param {Event} e
   * @return {undefined}
   */
  function name(e) {
    if (!ignoreTags[e.target.tagName.toLowerCase()]) {
      e.preventDefault();
    }
  }
  /**
   * @param {Array} touchList
   * @param {?} id
   * @return {?}
   */
  function identifiedTouch(touchList, id) {
    var i;
    var subLn;
    if (touchList.identifiedTouch) {
      return touchList.identifiedTouch(id);
    }
    /** @type {number} */
    i = -1;
    subLn = touchList.length;
    for (;++i < subLn;) {
      if (touchList[i].identifier === id) {
        return touchList[i];
      }
    }
  }
  /**
   * @param {Event} e
   * @param {Touch} event
   * @return {?}
   */
  function changedTouch(e, event) {
    var touch = identifiedTouch(e.changedTouches, event.identifier);
    if (touch && !(touch.pageX === event.pageX && touch.pageY === event.pageY)) {
      return touch;
    }
  }
  /**
   * @param {Event} e
   * @return {undefined}
   */
  function opts(e) {
    triggerStart(e, e.data, e, root);
  }
  /**
   * @return {undefined}
   */
  function li() {
    root();
  }
  /**
   * @return {undefined}
   */
  function root() {
    remove(document, mouseevents.move, opts);
    remove(document, mouseevents.cancel, li);
  }
  /**
   * @param {Event} e
   * @return {undefined}
   */
  function fn(e) {
    var data = e.data;
    var touch = changedTouch(e, data);
    if (touch) {
      triggerStart(e, data, touch, removeTouch);
    }
  }
  /**
   * @param {Event} e
   * @return {undefined}
   */
  function keys(e) {
    var template = e.data;
    if (identifiedTouch(e.changedTouches, template.identifier)) {
      removeTouch(template.identifier);
    }
  }
  /**
   * @param {string} identifier
   * @return {undefined}
   */
  function removeTouch(identifier) {
    remove(document, "." + identifier, fn);
    remove(document, "." + identifier, keys);
  }
  /**
   * @param {Event} e
   * @param {string} cycle
   * @param {Event} touch
   * @param {Function} fn
   * @return {undefined}
   */
  function triggerStart(e, cycle, touch, fn) {
    /** @type {number} */
    var distX = touch.pageX - cycle.startX;
    /** @type {number} */
    var distY = touch.pageY - cycle.startY;
    if (!(distX * distX + distY * distY < ly * ly)) {
      var touches;
      var time;
      touches = e.targetTouches;
      /** @type {number} */
      time = e.timeStamp - cycle.timeStamp;
      /** @type {string} */
      cycle.type = "movestart";
      /** @type {number} */
      cycle.distX = distX;
      /** @type {number} */
      cycle.distY = distY;
      /** @type {number} */
      cycle.deltaX = distX;
      /** @type {number} */
      cycle.deltaY = distY;
      cycle.pageX = touch.pageX;
      cycle.pageY = touch.pageY;
      /** @type {number} */
      cycle.velocityX = distX / time;
      /** @type {number} */
      cycle.velocityY = distY / time;
      cycle.targetTouches = touches;
      cycle.finger = touches ? touches.length : 1;
      /** @type {function (): ?} */
      cycle._handled = handled;
      /**
       * @return {undefined}
       */
      cycle._preventTouchmoveDefault = function() {
        e.preventDefault();
      };
      jQuery.event.trigger(cycle, void 0, cycle.target);
      fn(cycle.identifier);
    }
  }
  /**
   * @return {?}
   */
  function handled() {
    /** @type {function (): ?} */
    this._handled = returnTrue;
    return false;
  }
  /**
   * @param {?} e
   * @return {undefined}
   */
  function flagAsHandled(e) {
    e._handled();
  }
  /**
   * @param {Object} e
   * @return {undefined}
   */
  function orig(e) {
    var timer = e.data.timer;
    /** @type {Object} */
    e.data.touch = e;
    e.data.timeStamp = e.timeStamp;
    timer.kick();
  }
  /**
   * @param {Object} event
   * @return {undefined}
   */
  function load(event) {
    var e = event.data.event;
    event = event.data.timer;
    remove(document, mouseevents.move, orig);
    remove(document, mouseevents.end, load);
    handler(e, event, function() {
      setTimeout(function() {
        remove(e.target, "click", types);
      }, 0);
    });
  }
  /**
   * @param {Event} e
   * @return {undefined}
   */
  function ready(e) {
    var event = e.data.event;
    var timer = e.data.timer;
    var touch = changedTouch(e, event);
    if (touch) {
      e.preventDefault();
      event.targetTouches = e.targetTouches;
      e.data.touch = touch;
      e.data.timeStamp = e.timeStamp;
      timer.kick();
    }
  }
  /**
   * @param {Event} e
   * @return {undefined}
   */
  function classNames(e) {
    var event = e.data.event;
    var udataCur = e.data.timer;
    if (identifiedTouch(e.changedTouches, event.identifier)) {
      remove(document, "." + event.identifier, ready);
      remove(document, "." + event.identifier, classNames);
      handler(event, udataCur);
    }
  }
  /**
   * @param {string} cycle
   * @param {Object} value
   * @param {Object} next
   * @return {undefined}
   */
  function handler(cycle, value, next) {
    value.end(function() {
      /** @type {string} */
      cycle.type = "moveend";
      jQuery.event.trigger(cycle, void 0, cycle.target);
      return next && next();
    });
  }
  /** @type {number} */
  var ly = 6;
  var add = jQuery.event.add;
  var remove = jQuery.event.remove;
  /** @type {function (this:Window, function (number): ?, (Element|null)=): number} */
  var requestFrame = window.requestAnimationFrame || (window.webkitRequestAnimationFrame || (window.mozRequestAnimationFrame || (window.oRequestAnimationFrame || (window.msRequestAnimationFrame || function(trigger) {
    return window.setTimeout(function() {
      trigger();
    }, 25);
  }))));
  var ignoreTags = {
    textarea : true,
    input : true,
    select : true,
    button : true
  };
  var mouseevents = {
    move : "mousemove",
    cancel : "mouseup dragstart",
    end : "mouseup"
  };
  jQuery.event.special.movestart = {
    /**
     * @return {?}
     */
    setup : function() {
      add(this, "movestart.move", flagAsHandled);
      return true;
    },
    /**
     * @return {?}
     */
    teardown : function() {
      remove(this, "dragstart drag", event);
      remove(this, "mousedown touchstart", name);
      remove(this, "movestart", flagAsHandled);
      return true;
    },
    /**
     * @param {string} type
     * @return {undefined}
     */
    add : function(type) {
      if (!("move" === type.namespace)) {
        if (!("moveend" === type.namespace)) {
          add(this, "dragstart." + type.guid + " drag." + type.guid, event, events, type.selector);
          add(this, "mousedown." + type.guid, name, events, type.selector);
        }
      }
    },
    /**
     * @param {string} type
     * @return {undefined}
     */
    remove : function(type) {
      if (!("move" === type.namespace)) {
        if (!("moveend" === type.namespace)) {
          remove(this, "dragstart." + type.guid + " drag." + type.guid);
          remove(this, "mousedown." + type.guid);
        }
      }
    },
    /**
     * @param {string} type
     * @return {undefined}
     */
    _default : function(type) {
      /**
       * @return {undefined}
       */
      function updateEvent() {
        var event = cycle;
        var touch = key.touch;
        /** @type {number} */
        var g = key.timeStamp - event.timeStamp;
        /** @type {string} */
        event.type = "move";
        /** @type {number} */
        event.distX = touch.pageX - event.startX;
        /** @type {number} */
        event.distY = touch.pageY - event.startY;
        /** @type {number} */
        event.deltaX = touch.pageX - event.pageX;
        /** @type {number} */
        event.deltaY = touch.pageY - event.pageY;
        /** @type {number} */
        event.velocityX = 0.3 * event.velocityX + 0.7 * event.deltaX / g;
        /** @type {number} */
        event.velocityY = 0.3 * event.velocityY + 0.7 * event.deltaY / g;
        event.pageX = touch.pageX;
        event.pageY = touch.pageY;
        jQuery.event.trigger(cycle, void 0, type.target);
      }
      var cycle;
      var key;
      if (type._handled()) {
        cycle = {
          target : type.target,
          startX : type.startX,
          startY : type.startY,
          pageX : type.pageX,
          pageY : type.pageY,
          distX : type.distX,
          distY : type.distY,
          deltaX : type.deltaX,
          deltaY : type.deltaY,
          velocityX : type.velocityX,
          velocityY : type.velocityY,
          timeStamp : type.timeStamp,
          identifier : type.identifier,
          targetTouches : type.targetTouches,
          finger : type.finger
        };
        key = {
          event : cycle,
          timer : new Timer(updateEvent),
          touch : events,
          timeStamp : events
        };
        if (type.identifier === events) {
          add(type.target, "click", types);
          add(document, mouseevents.move, orig, key);
          add(document, mouseevents.end, load, key);
        } else {
          type._preventTouchmoveDefault();
          add(document, "touchmove." + type.identifier, ready, key);
          add(document, "touchend." + type.identifier, classNames, key);
        }
      }
    }
  };
  jQuery.event.special.move = {
    /**
     * @return {undefined}
     */
    setup : function() {
      add(this, "movestart.move", jQuery.noop);
    },
    /**
     * @return {undefined}
     */
    teardown : function() {
      remove(this, "movestart.move", jQuery.noop);
    }
  };
  jQuery.event.special.moveend = {
    /**
     * @return {undefined}
     */
    setup : function() {
      add(this, "movestart.moveend", jQuery.noop);
    },
    /**
     * @return {undefined}
     */
    teardown : function() {
      remove(this, "movestart.moveend", jQuery.noop);
    }
  };
  add(document, "mousedown.move", function(key) {
    if (1 === key.which) {
      if (!key.ctrlKey && !key.altKey) {
        key = {
          target : key.target,
          startX : key.pageX,
          startY : key.pageY,
          timeStamp : key.timeStamp
        };
        add(document, mouseevents.move, opts, key);
        add(document, mouseevents.cancel, li, key);
      }
    }
  });
  add(document, "touchstart.move", function(events) {
    var touch;
    if (!ignoreTags[events.target.tagName.toLowerCase()]) {
      touch = events.changedTouches[0];
      events = {
        target : touch.target,
        startX : touch.pageX,
        startY : touch.pageY,
        timeStamp : events.timeStamp,
        identifier : touch.identifier
      };
      add(document, "touchmove." + touch.identifier, fn, events);
      add(document, "touchend." + touch.identifier, keys, events);
    }
  });
  if ("function" === typeof Array.prototype.indexOf) {
    /** @type {Array} */
    var props = ["changedTouches", "targetTouches"];
    /** @type {number} */
    var l = props.length;
    for (;l--;) {
      if (-1 === jQuery.event.props.indexOf(props[l])) {
        jQuery.event.props.push(props[l]);
      }
    }
  }
});
(function(factory) {
  if ("function" === typeof define && define.amd) {
    define(["jquery"], factory);
  } else {
    factory(jQuery);
  }
})(function(jQuery) {
  /**
   * @param {Event} e
   * @return {undefined}
   */
  function ready(e) {
    var w;
    var h;
    var cycle;
    w = e.target.offsetWidth;
    h = e.target.offsetHeight;
    cycle = {
      distX : e.distX,
      distY : e.distY,
      velocityX : e.velocityX,
      velocityY : e.velocityY,
      finger : e.finger
    };
    if (e.distX > e.distY) {
      if (e.distX > -e.distY) {
        if (e.distX / w > settings.threshold || 1 < e.velocityX * e.distX / w * settings.sensitivity) {
          /** @type {string} */
          cycle.type = "swiperight";
          jQuery.event.trigger(cycle, void 0, e.currentTarget);
        }
      } else {
        if (-e.distY / h > settings.threshold || 1 < e.velocityY * e.distY / w * settings.sensitivity) {
          /** @type {string} */
          cycle.type = "swipeup";
          jQuery.event.trigger(cycle, void 0, e.currentTarget);
        }
      }
    } else {
      if (e.distX > -e.distY) {
        if (e.distY / h > settings.threshold || 1 < e.velocityY * e.distY / w * settings.sensitivity) {
          /** @type {string} */
          cycle.type = "swipedown";
          jQuery.event.trigger(cycle, void 0, e.currentTarget);
        }
      } else {
        if (-e.distX / w > settings.threshold || 1 < e.velocityX * e.distX / w * settings.sensitivity) {
          /** @type {string} */
          cycle.type = "swipeleft";
          jQuery.event.trigger(cycle, void 0, e.currentTarget);
        }
      }
    }
  }
  /**
   * @param {string} cycle
   * @return {?}
   */
  function getData(cycle) {
    var ready = jQuery.data(cycle, "event_swipe");
    if (!ready) {
      ready = {
        count : 0
      };
      jQuery.data(cycle, "event_swipe", ready);
    }
    return ready;
  }
  var add = jQuery.event.add;
  var remove = jQuery.event.remove;
  var settings = {
    threshold : 0.4,
    sensitivity : 6
  };
  jQuery.event.special.swipe = jQuery.event.special.swipeleft = jQuery.event.special.swiperight = jQuery.event.special.swipeup = jQuery.event.special.swipedown = {
    /**
     * @param {Object} opt_attributes
     * @return {?}
     */
    setup : function(opt_attributes) {
      opt_attributes = getData(this);
      if (!(0 < opt_attributes.count++)) {
        return add(this, "moveend", ready), true;
      }
    },
    /**
     * @return {?}
     */
    teardown : function() {
      if (!(0 < --getData(this).count)) {
        return remove(this, "moveend", ready), true;
      }
    },
    settings : settings
  };
});
